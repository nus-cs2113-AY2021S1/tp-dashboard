[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        )"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 2,
      "wgzesg": 8,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/W2LwmOA.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Nguyen Tien Khoa | [Github](https://github.com/tienkhoa16) | [Portfolio](docs/team/tienkhoa.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/3pna8mw.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Zeon Chua Feiyi | [Github](https://github.com/CFZeon) | [Portfolio](docs/team/zeon.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/57080256?s\u003d400\u0026u\u003d677af6062d8d0cdeae80ee9f00b50aa01e2c4b84\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Zhang Shukai | [Github](https://github.com/zsk612) | [Portfolio](docs/team/shukai.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://i.imgur.com/1mhi7tF.jpeg\" width\u003d\"100\" height\u003d\"100\"\u003e | Yu Jinyang| [Github](https://github.com/yujinyang1998) | [Portfolio](docs/team/jinyang.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/53573749?s\u003d400\u0026u\u003d624be60ee5061b89cabc5c04b54795fdd4956a72\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Wang Zesong | [Github](https://github.com/wgzesg) | [Portfolio](../docs/team/zesong.md)"
      }
    ],
    "authorContributionMap": {
      "zsk612": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "By: `CS2113T-F11-1` Since: `2020`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) ![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Java CI](https://github.com/AY2021S1-CS2113T-F11-1/tp/workflows/Java%20CI/badge.svg)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Introduction**](#1-introduction)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1.1. [Background](#11--background)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1.2. [Purpose](#12-purpose)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1.3. [Scope](#13-scope)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2. [**Setting up**](#2-setting-up)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2.1. [Prerequisites](#21-prerequisites)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "2.2. [Setting up the project in your computer](#22-setting-up-the-project-in-your-computer)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3. [**Design**](#3-design)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.1. [Architecture](#31-architecture)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.2. [Ui Component](#32-ui-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.3. [Logic Component](#33-logic-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.4. [Model Component](#34-model-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.5. [Storage Component](#35-storage-component)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.6. [Common Classes](#36-common-classes)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4. [**Implementation**](#4-implementation)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.1. [Main Menu-related Features](#41-main-menu-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.1. [Help Command for Main Menu of Profile](#411-help-command-for-main-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.2. [Redirection to Profile Menu](#412-redirection-to-profile-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.3. [Redirection to Diet Menu](#413-redirection-to-diet-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.1.4. [Redirection to Workout Menu](#414-redirection-to-workout-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.2. [Profile-related Features](#42-profile-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.1. [Creation of Profile](#421-creation-of-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.2. [Viewing Profile](#422-viewing-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.3. [Editing of Profile](#423-eiting-of-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.4. [Deletion of Profile](#424-deletion-of-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.3. [Diet-related Features](#43-diet-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.1. [List out all commands](#431-list-out-all-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2. [Start recording meal data](#432-start-recording-diet-data)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.1. [Showing help message](#4321-showing-help-message)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.2. [Adding food items for the current meal](#4322-adding-food-items-for-the-current-meal)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.3. [Listing data for the current meal](#4323-listing-data-for-the-current-meal)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.4. [Deleting data from the current meal](#4324-deleting-data-from-the-current-meal)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.5. [Clearing data from the current meal](#4325-clearing-data-from-the-current-meal)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.6. [Stopping the recording of meal data](#4326-stopping-the-recording-of-meal-data)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.3. [List all past meal sessions](#433-list-all-past-meal-sessions)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.4. [Edit a past meal session](#434-edit-a-past-meal-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.5. [Delete a past meal session](#435-delete-a-past-meal-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.6. [Clear all past meal sessions](#436-clear-all-past-meal-sessions)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.7. [Exit the meal manager](#437-exit-the-meal-manager)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.4. [Workout-related Features](#44-workout-related-features)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1. [Creation of new workout session](#441-creation-of-new-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.1. [Adding an exercise](#4411-Adding-an-exercise)\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.2. [Deleting an exercise](#4412-Deleting-an-exercise)\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.3. [Listing all exercises in this session](#4413-listing-all-exercises-in-this-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.4. [Allowing users to view help commands](#4414-Allowing-users-to-view-help-commands)\u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.5. [Searching for related exercises](#4415-Searching-for-related-exercises)\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.6. [Ending the workout session](#4416-Ending-the-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.2. [Listing past workout sessions](#442-listing-past-workout-sessions)\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.3. [Editing of workout session](#443-editing-of-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.4. [Deletion of workout session](#444-deletion-of-workout-session)\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.5. [Search based on conditions](#445-search-based-on-conditions)\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.5. [Recommendations-related Features](#46-recommendations-related-features)\u003cbr\u003e "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.1. [Display expenditure](#451-display-expenditure)\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.5.2. [Expenditure functionality](#452-expenditure-functionality)\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.6. [Storage](#45-storage)\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.6.1. [Storage for Profile](#441-select-files-to-load-from-and-save-to)\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.6.2. [Storage for Diet](#442-save-current-state)\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.6.3. [Storage for Workout](#443-insert-name-here)\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "4.7. [Logging](#47-loggingToBeDeleted)\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  * [**Appendices**](#appendices)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix A: Product Scope](#appendix-a-product-scope)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix B: User Stories](#appendix-b-user-stories)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix C: Value proposition - Use cases](#appendix-c-value-proposition---use-cases)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix D: Non-Functional Requirements](#appendix-d-non-functional-requirements)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix E: Glossary](#appendix-e-glossary)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    + [Appendix F: Instructions for Manual Testing](#appendix-f-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    + [Appendix G: Supported Formats of Date Input](#appendix-g-supported-formats-of-date-input)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 1.1.  Background"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 1.2. Purpose"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The document contains the specified architecture and software design specifications for the application, The Schwarzenegger. "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 1.3. Scope"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This describes the software architecture and software design requirements for The Schwarzenegger. This guide is mainly for developers, designers and software engineers that are or going to work on The Schwarzenegger. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 2.1. Prerequisites"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. JDK `11`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. IntelliJ IDEA IDE."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 2.2. Setting up the project in your computer"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Fork this repository, and clone the fork to your computer."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Set up the correct JDK version for Gradle  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   2. If `JDK 11` is listed in the drop down, select it. Otherwise, click `New…` and select the directory where you installed `JDK 11`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "   3. Click `OK`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. Click `Import Project`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "6. Click `Open as Project`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "7. Click `OK` to accept the default settings if prompted. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 3. Design"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This section provides a high level overview of our application, The Schwarzenegger."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.1. Architecture"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Architecture]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The image above explains the design of the application, The Schwarzenegger. "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The main driver of the application is `Main: Duke`. It is responsible for mainly two phases:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- At application launch"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    - This class will initialise the components in the correct sequence and is in charge of connecting them with each other."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- At shut down"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    - This class will invoke cleanup method for the components when necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "In addition to that, the architecture of The Schwarzenegger is broken down into several packages, mainly the following: "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Ui`: This class mainly handles the UI of the application."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Parser`: This class mainly handles the parsing and handling of user commands."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Command`: This class handles the type of command."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Profile`: This class manages the data of the user."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Diet`: This class manages the meal recording sessions."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Workout`: This class manages the data workout recording sessions."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Storage`: This class reads data from and writes data back into a text file for future uses."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.2. Ui Component"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Ui Component](images/UI_Component.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "API: `Ui.java`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The `Ui` package is a combination class where all interaction will be made through this component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The `Ui` component,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Takes in user input"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Prints out response messages"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.3. Logic Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Logic Component](images/logic_update.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. `The Schwarzenegger` uses `Parser` classes to parse the user command."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. This splits the user input into interpretable portions by other functions."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.4. Model Component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Model Component](pictures/zesong/model.png)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The Model component contains `Profile`, `DietManager`,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "`PastRecord` and `WorkoutSession` classes."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* Profile: Stores the user profile data."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* DietManager: Stores all past diet records."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* PastRecord: Stores meta information of each WorkoutSession files."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "* WorkoutSession: Stores the exercise data done in each workout session."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.5. Storage Component"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "![Storage Class Diagram](images/Storage.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Profiles, Diet sessions and workout sessions are stored in separate folders. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The Storage package contains subpackages for profile, diet manager and workout manager."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The readDietSession() method in storage.diet package is used for loading saved diet sessions, which are loaded when the user wants to edit a past meal session."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "readPastRecords() and readFileContents() methods in storage.workout package are used for loading saved workout managers and workout sessions respectively. It is called when the user accesses the workout manager."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "loadData() from storage.profile is used to load user profile data and is called when the program starts up. "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The writeToStorageDietSession() method in storage.diet package saves the meal session and is called when the user exits it."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "writePastRecords() and writeToStorage() methods in storage.workout package are used to save the workout managers and workout sessions respectively. It is called when the user exists the workout manager."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "saveData() method in storage.profile is called when the user creates the user profile or edits it."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 3.6. Common Classes "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Classes used by multiple components are in the `seedu.duke` and the `ui` package, specifically Constant.java and CommonUi.java."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## 4. Implementation"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This section describes some details on how the features are being implemented. All profile / diet / workout-related features."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All profile/ diet/ workout-related features can be broken down into 4 distinct functionality, addition, viewing/ listing, deletion and editing."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "For diet and workout-realted features, there is an additional functionality of searching."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.1. Main Menu-related Features"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.1. Help Command for Main Menu"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The help command allows users to view all the available commands in the main page."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The command for help is `help`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.2. Redirection to Profile Menu"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The redirection to profile page allows the user to enter Profile Menu to create, edit, view and delete user profile."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The command for this redirection is `profile`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.3. Redirection to Diet Menu"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The redirection to profile page allows the user to enter Diet Menu to create, edit, list and delete diet sessions."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The command for this redirection is `diet`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.1.4. Redirection to Workout Menu"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The redirection to profile page allows the user to enter Workout Menu to create, edit, list and delete workout sessions."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The command for this redirection is `workout`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.2. Profile-related Features"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.1. Creation of Profile"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "User can create a new profile. "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The failure to do so will trigger an exception where the user will be notified of the reason, e.g. invalid command format. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "If the creation is successful, a confirmation message on the newly created profile will be displayed to the user. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to create a new profile, the ProfileSession, Ui, ProfileParser, "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Command and CommandResult class will be accessed, and the following sequence of "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "actions is called to return a command object AddProfile."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `add /n Schwarzenegger /a 30 /h 188 /w 113 /e 100`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    2. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creation of Command object."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed input, `ProfileParser.parseCommand()` returns the correct Command Object `AddProfile`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `AddProfile.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `AddProfile` creates a new `Profile` object with the parsed information."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `AddProfile` calls `ProfileStorage.saveData()` to save the Profile object."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `AddProfile.getCommandResult()` to get the `CommandResult` object."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `profileUi.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Parsing of the user’s input command:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): User’s command is split into size 2 array first"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "containing command type and command arguments. Then arguments are split"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "into command tag and information pairs.  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Command tags do not have to follow a fixed order.|"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | It takes multiple steps in parsing the command.|"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: User’s command is divided by space"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                 "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags.|"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive.|"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The sequence diagram below summarizes how creating a new profile works:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "![Load Data Sequence Diagram](pictures/khoa/AddProfile.png)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.2. Viewing Profile"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The feature to view profile allows the user to view added profile"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "with calculated BMI based on height and weight."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to view profile, the ProfileSession, Ui, ProfileParser, "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Command and CommandResult class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `view`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    2. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileParser.parseCommand()` calls `ProfileParser.splitCommandWordAndArgs()` to split user input into string array."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creation of Command object."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed input, `ProfileParser.parseCommand()` returns the correct Command Object `ViewProfile`."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ViewProfile.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ViewProfile` returns the same `Profile` object.  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ViewProfile.getCommandResult()` to get the `CommandResult` object."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `profileUi.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Aspects: Status of stored data"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): call public methods of Storage class to "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "load the profile from hard disk every time the user wants to view profile."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Profile data is up-to-date if the user prefers to edit it in text file rather than using commands in The Schwarzenegger.|  "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Execution time is slow down due to loading the data.|"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: call public methods of Storage class to "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "load the profile from hard disk when user enter Profile Menu."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Execution time is fast.|  "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Profile data is not updated in real time if user edits it in text file while running The Schwarzenegger.|"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.3. Editing of Profile"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "User can anytime go back to edit a profile created in the past such as"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "editing physique data."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to edit a profile, the ProfileSession, Ui, ProfileParser, "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Command and CommandResult class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `edit /w 60`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    2. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileParser.parseCommand()` calls `ProfileParser.splitCommandWordAndArgs()` to split user input into string array."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed input, `ProfileParser.parseCommand()` returns the correct Command Object `EditProfile`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `EditProfile.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `EditProfile` calls `ProfileParser.extractCommandTagAndInfo()` to parse the arguments to identify the tags."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `EditProfile` creates and returns a new `Profile` Object with the parsed information.  "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `EditProfile.getCommandResult()` to get the `CommandResult` object."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `profileUi.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Parsing of the user’s input command:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): User’s command is split into size 2 array first"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "containing command type and command arguments. Then arguments are split"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "into command tag and information pairs.  "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Command tags do not have to follow a fixed order.|"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | It takes multiple steps in parsing the command.|"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: User’s command is divided by space"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                 "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags.|"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive.|"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 4.2.4. Deletion of Profile"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "User can delete a profile created in the past."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "When the user attempts to view profile, the ProfileSession, Ui, ProfileParser, "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Command and CommandResult class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. User executes `delete`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    2. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileParser.parseCommand()` calls `ProfileParser.splitCommandWordAndArgs()` to split user input into string array."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Creation of Command object."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. Based on the parsed input, `ProfileParser.parseCommand()` returns the correct Command Object `DeleteProfile`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `ViewProfile.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `DeleteProfile` returns the null.  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. Prompting result to user."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `DeleteProfile.getCommandResult()` to get the `CommandResult` object."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    1. `ProfileSession` calls `profileUi.showToUser()` to show result to the user."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Aspects: Status of stored data"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 1 (current choice): call public methods of Storage class to "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "load the profile from hard disk every time the user wants to view profile."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Profile data is up-to-date if the user prefers to edit it in text file rather than using commands in The Schwarzenegger.|  "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Execution time is slow down due to loading the data.|"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- Alternative 2: call public methods of Storage class to "
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "load the profile from hard disk when user enter Profile Menu."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Pros** | Execution time is fast.|  "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "|**Cons** | Profile data is not updated in real time if user edits it in text file while running The Schwarzenegger.|"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.3. Diet-related Features"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.1. Listing out all commands: `help`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The command to list out all help commands is a hard-typed list of commands that indicates to the user all the commands available and how to use them."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `help` the following sequence occurs. "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `help`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a DietSessionHelp() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call print out the list of commands onto the console with printHelpFormatter() from static CommonUi.java."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2. Start recording meal data: `meal`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to start recording meal data. "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `meal /d [date] /t [type]` the following sequence occurs. "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `meal /d 2020-05-04 /t breakfast`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a DietSessionCreate() of which the method execute() is called."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will then create an instantiation of a DietSession."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The sequence diagram below summarizes how creating new diet session works:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zsk612"
        },
        "content": "![Load Data Sequence Diagram](pictures/Shukai/CreateDietSession.png)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.1. Showing help message: `help`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The command to list out all help commands is a hard-typed list of commands that indicates to the user all the commands available and how to use them."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `help` the following sequence occurs. "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `help`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` instantiation calls `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemHelp() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created object will call print out the list of commands onto the console with printHelpFormatter() from static CommonUi.java."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.2. Adding food items for the current meal: `add`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to add food items into the current meal session. "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `add [food] /c [calories]` the following sequence occurs. "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `add bologna /c 123`."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemAdd() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The food component and calories component are passed into the constructor of a Food instantiation."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The newly created food object will then be added to an ArrayList\u003cFood\u003e."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.3. Listing data for the current meal: `list`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to view all food items in the current meal session. "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `list` the following sequence occurs. "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `list`."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemList() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A for loop iterates through the entire ArrayList\u003cFood\u003e and prints out every item with their calories."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.4. Deleting data from the current meal: `delete`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to remove food items into the current meal session. "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `delete [Food ID]` the following sequence occurs. "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `delete 1`."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemDelete() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The Food ID according to the index based on the ArrayList\u003cFood\u003e is deleted."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.5. Clearing all data from the current meal `clear`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to remove food items into the current meal session. "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `clear` the following sequence occurs. "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `clear`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemClear() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. The ArrayList Clear method is called and removes all Food entries from the ArrayList."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.2.6. Stopping the recording of meal data: `end`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to end the current meal session and return back to the meal manager."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `end` the following sequence occurs. "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `end`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Exiting of inputLoop()"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The inputLoop() exits when userInput.equals(\"end\")."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.3. List all past diet sessions: `list`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to view all past created diet sessions."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `list` the following sequence occurs. "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `list`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will create a FoodItemList() instantiation of which the method execute() is called."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A for loop iterates through the entire ArrayList\u003cFood\u003e and prints out every item with their calories."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.4. Edit a past diet session: `edit`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to edit previously created diet sessions."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `edit [diet session ID]` the following sequence occurs. "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `edit 1`."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A DietSessionEdit() command class instantiation is created and the execute() method is called."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will call readDietSession() from storage.diet.Storage and it reads the file stored at saves/diet."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A for loop iterates through the entire ArrayList\u003cFood\u003e and prints out every item with their calories."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zsk612"
        },
        "content": "The sequence diagram below summarizes how editing Diet session works:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zsk612"
        },
        "content": "![Load Data Sequence Diagram](pictures/Zeon/DietSessionEdit.png)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.5. Edit a past diet session: `delete`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to delete previously created diet sessions."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `delete [diet session ID]` the following sequence occurs. "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `delete 1`."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A DietSessionDelete() command class instantiation is created and the execute() method is called."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will delete the diet session at index 1 based on the `list` command."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.6. Edit a past diet session: `clear`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The feature allows users to clear all previously created diet sessions."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `clear` the following sequence occurs. "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `clear`."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Creation of command object from input"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A DietSessionClear() command class instantiation is created and the execute() method is called."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Executing Command"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. This will iterate through every file in saves/diet/ and delete it."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### 4.3.7. Edit a past diet session: `end`"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The function returns user back to the main menu of The Schwarzenegger."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation  "
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "When the user types `end` the following sequence occurs. "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. The user keys in `end`."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    1. Input will be parsed in `processCommand()`.   "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. Exiting of inputLoop()"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    The inputLoop() exits when userInput.equals(\"end\")."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 4.4. Workout-related Features"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.1. Creation of new workout session"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Users can create a new workout session. The failure to do so will trigger an exception where the user will be notified "
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "of the reason, e.g. invalid command or IO related errors. The action will be aborted. If the creation is successful, "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "the user will go into the new workout session to edit the exercises in that session."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The user can specify tags for the session. Creation time, last edit time and saving file name will be auto generated "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "by the application and saved. "
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to create a new workout session, the Ui, WorkoutManagerParser "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and CommandLib class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "actions are called to return a command object NewWs."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `new /t leg chest`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `NewWs`."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `NewWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `NewWS` parse the arguments to identify the tags"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `NewWS` calls `WorkOutManagerStorage.add()` to create a new file to store information in this session. "
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    If the creation fails, the action is aborted. Else, this record will be stored and the file path will "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    be returned."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    4. `NewWS` creates a new `WorkoutSession` Object with the file path. "
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    5.  `NewWS` calls `workoutSession. workoutSessionStart()` so that user can add information into this session."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how creating new workout session works:"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/NewWS.png)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Parsing of the user’s input command:  "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): User’s command are divided by space"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags.|"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Values for each variable cannot contain spaces which makes the application restrictive.|"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Alternative 2: Multiple prompts for user’s input of a workout data"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Users would not have to make sure that their command is syntactically right.|  "
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | The constant prompting could subject the application to a negative experience in the difficulty to use the commands.|"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.1. Adding an exercise"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Users can add a new exercise. The failure to do so will trigger an exception where the user will be notified of "
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "the reason, e.g. invalid command or IO related errors. The action will be aborted. If the addition is successful, "
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "a new exercise will be added to the exerciselist."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "When the user attempts to create a new workout session, the Ui, WorkoutManagerParser "
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "and CommandLib class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "actions are called to return a command object NewWs."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. User executes `add benchpress /n 6 /w 120`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. `WorkoutSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `WorkoutSessionAdd`."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    1. `WorkoutManager` calls `WorkoutSessionAdd.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    2. `WorkoutSessionAdd` parse the arguments to identify the repetitions and weight for the exercise."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    3. `WorkoutSessionAdd` calls `WorkOutSession.Storage.writeToFile()` to store information of all exercises recorded. "
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "All description, warnings and response will be handled by `ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The following sequence diagram shows how the add command works"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The sequence diagram below summarizes how creating new workout session works:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionAdd.png)"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.2. Deleting an exercise"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Users can delete an exercise from a pre-existing list of exercise. The failure to do so will trigger an exception where the user will be notified of "
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "the reason, e.g. invalid command or IO related errors. The action will be aborted. If the addition is successful, "
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "a new exercise will be added to the exerciselist."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "When the user attempts to create a new workout session, the Ui, WorkoutManagerParser "
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "and CommandLib class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "actions are called to return a command object NewWs."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. User executes `add benchpress /n 6 /w 120`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. `WorkoutSession` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `WorkoutSessionAdd`."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    1. `WorkoutManager` calls `WorkoutSessionAdd.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    2. `WorkoutSessionAdd` parse the arguments to identify the repetitions and weight for the exercise."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    3. `WorkoutSessionAdd` calls `WorkOutSession.Storage.writeToFile()` to store information of all exercises recorded. "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "All description, warnings and response will be handled by `ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The following sequence diagram shows how the add command works"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The sequence diagram below summarizes how creating new workout session works:"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionAdd.png)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.3. Listing all exercises in this session"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.4. Allowing users to view help commands"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.5. Searching for related exercises"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "#### 4.4.1.6. Ending the workout session"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.2. Listing past workout sessions"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The feature to list workoutSessions allows the user to view a summary of all the history "
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "workout sessions, including their index, creation date and tags."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to list workoutSessions, the WorkoutManger, WorkoutManagerParse, ListWS and "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "WorkoutManagerStorage class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `list`"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `ListWS`."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `ListWS.execute()` to execute the command"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `NewWS` calls `WorkOutManagerStorage.list()`"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkOutManagerStorage` will call Ui to print a formated table of the past records."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Aspects: Security of stored data"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): call public methods of Storage class to "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "print the list"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | pastRecord are private and it can only be manipulated through designed public methods. Only selected data will be printed and viewed.|  "
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Most methods Storage needs to be a static.|"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Storage return a readonly list of pastRecord."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | More versatile operations can be done.|  "
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | All data of pastRecord will be exposed.|"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.3. Editing of workout session"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can anytime go back to edit a workout session created in the past such as"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "adding or removing exercies in that session."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Each past workout session is stored in a different file name following its creation time."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The meta information of these past records such as file name, creation time are"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "stored in another file which will be loaded as the program initlises."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The actual workout session record will only be loaded if needed e.g. when editting is called. "
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to edit a past workout session, the Ui, WorkoutManagerParser, CommandLib"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and WorkoutStorage class will be accessed and the following sequence of "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "actions are called."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `edit 1`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `EditWS`."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `EditWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `EditWS` calls `WorkOutManagerStorage.edit()` to locate the file. If the does not exist, the action is aborted."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    Else, `WorkOutManagerStorage` updates the meta information of the file. The file path will be returned."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    4. `EditWS` creates a new `WorkoutSession` Object with the file path. `WorkoutSession` is initilised by loading the "
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    data in the file."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    5.  `EditWS` calls `workoutSession.workoutSessionStart()` so that user start editing this session."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how editting past record works:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/EditWS.png)"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Past record storage and model design:  "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): store past workout sessions in different files and their "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "meta information in a separate file"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Initialization will be faster as data loaded grows little even in long terms.|"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Deleting files and creating files need to handle file names carefully.|"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Load all past records during initilization"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Run time can retrieve data faster as there is no need to access data in hard disk.|  "
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | The application initialization will grow quickly as the application scales.|"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.4. Deletion of workout session"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can delete a workout session created in the past by giving its index."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Each past workout session is stored in a different file name following its creation time."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The meta information of these past records such as file name, creation time are"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "stored in another file which will be loaded as the program initlises."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user tries to delete a file, the application refers to the meta information of the file to locate the"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "file and delete it. Then the meta information of the record will be deleted."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "User can clear all data by iteratively delete the record until the meta data file is empty. To simplify that,"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "user can use `clear` command to achieve that."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to delete a past workout session, the Ui, WorkoutManagerParser, CommandLib"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "and WorkoutStorage class will be accessed and the following sequence of actions are called."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `delete 1` or `clear`"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `DeleteWS`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     or `clearWS`."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `DeleteWS.execute()` with the rest of parsed input."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `DeleteWS` calls `WorkOutManagerStorage.delete()` to locate the file. If the does not exist, the action is aborted."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    Else, `WorkOutManagerStorage` remove the meta information of the file and delete the record file."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. After user exits this workout, `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "All description, warnings and response will be handled by `Ui` to ensure consistence across the app."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The following sequence diagram shows how the new command works"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): Delete `workoutSession` by specifying index of it."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Quick and easy deletion by using ArrayList.get().|"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | DLesser alternatives for the user and user would have to identify the index first by executing `list` to get index of the session to be deleted.|"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: Delete `workoutSession` by specifying `workoutSession` tags or dates."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | More alteratives for users. Can bulk delete files with certain attributes|  "
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Tags and dates does not uniquely identify the record hence may result in accidental wrong deletion|"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "#### 4.4.5. Search based on conditions"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The feature `search` allows the user to view a summary of all the history "
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "workout sessions which satisfies certain conditions."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The user can search by the date of creation or the tags that the session has. User can put in 0"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "or 1 or 2 criteria during search. "
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Format: `search /t \u003ctag1\u003e \u003ctag2\u003e /d \u003cdate\u003e`"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The user can attach variable number of tags after `/t` and one date after `/d`. The date must be specified"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "in certain formats for it to be recognisable. Else, it will be treated as there is no date criteria given."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[See here](#appendix-g-supported-formats-of-date-input) for all supported formats."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The tag criterion selects sessions which contains all the tags that the user specified in the search."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The date criterion selects the sessions which is created on that date. Only sessoins that satisfies all condtions "
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "will be selected and displayed."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The result is displayed in a table with the index of the selected records so that users can easily "
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "do further operations on them, e.g. `delete` or `edit`."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " "
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When the user attempts to list workoutSessions, the WorkoutManger, DeleteWS, WorkoutManagerStorage and "
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "WorkoutManagerParse class will be called upon. The following sequence of steps will then occur:"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. User executes `search /t leg /d 20201017`"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Creation of command object."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `SearchWS`."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Executing Command"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkoutManager` calls `SearchWS.execute()` to execute the command"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    3. `SearchWS` calls `WorkOutManagerStorage.search()`"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkOutManagerStorage` will call `WorkoutManagerParser.parse` to parse the arguments into"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    an array of predicates"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    1. `WorkOutManagerStorage` filters the pastRecord arraylist and print out the ones"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    which satisfy the predication."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    6. `WorkoutManager` returns a `ExecutionResult`."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Based on `ExecutionResult`, correct response will be be printed to user."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The sequence diagram below summarizes how searching record works:"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "![Load Data Sequence Diagram](pictures/zesong/SearchWS.png)"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "##### Design considerations:"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Aspects: indexing the selected results"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index of an record is not stored in the schema because it easily varies with "
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "addition and deletion. Thus given a record, searching for its index will have higher"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "time complexity."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 1 (current choice): print out the actual index of the record "
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "in the meta info file."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | The index is useful for user to use for future actions.|  "
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Checking for the actual location complicates the search time complexity.|"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "- Alternative 2: print out the index of the element in the result list."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|     |     |"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|-----|-----|"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Pros** | Easy to implement. Low time complexity|  "
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "|**Cons** | Since the index in result list is not the same as the index in actual record meta, user cannot use the index for further actions|"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### 4.5. Recommendations"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### 4.6. Storage"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Storage in the application refers to storing files of user profile and workout, diet sessions into respective local subdirectories sorted based on time in a local directory called /saves."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "zsk612"
        },
        "content": "#### 4.6.1. Storage for profile"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "zsk612"
        },
        "content": "#### 4.6.2. Storage for diet"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Storage for diet saves diet sessions created as individual files sorted based on the time created in the /saves/diet directory. Each diet session file is created as follows:"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "zsk612"
        },
        "content": "- Each file is created as a json file and named as `[date] [tag].json`."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "zsk612"
        },
        "content": "- A corresponding file is updated in the local file when the user edits a diet session by calling DietSessionEdit.execute()."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "zsk612"
        },
        "content": "- A corresponding file is deleted in the local file when the user deletes a diet session by calling DietSessionDelete.execute() or clears all diet sessions by calling DietSessionClear.execute()."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "zsk612"
        },
        "content": "##### Implementation"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Storage handles reading of file data by calling readDietSession() and overwriting of file data by calling writeToStorageDietSession()."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "zsk612"
        },
        "content": "#### 4.6.3. Storage for workout"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 4.7. Logging"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Logging in the application refers to storing exceptions, warnings and messages that occur during the execution of Kitchen Helper. It was included to help developers to identify bugs and to simplify their debugging process. "
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "The `java.util.logging` package in Java is used for logging. The logging mechanism can be managed from the `SchwarzeneggerLogger` class through the `logger` attribute."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "All control of the logger for the application can be viewed/ altered in the `initSchwarzeneggerLogger()` method. The current settings for the logger are as follow:"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "- All information is logged into a log file, `SchwarzeneggerLogs.log`."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- Logging is made to be displayed in the `SimpleFormatter` style where the date, class and error description are logged."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Logging Levels:"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.SEVERE`: a serious failure, which prevents normal execution of the program, for end users and system administrators."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.WARNING`: a potential problem, for end users and system administrators."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.INFO`: reasonably significant informational message for end users and system administrators."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.CONFIG`: hardware configuration, such as CPU type."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "- `Level.FINE`, `Level.FINER`, `Level.FINEST`: three levels used for providing tracing information for the software developers."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Additional logging can be done by adding the calling of the global logger and invoking the function `log()`. This will ensure that all loggings will be made to the same file across the various classes. "
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "An example is shown below:"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public static final Logger logger \u003d SchwarzenggerLogger.logger;"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "logger.log(Level.WARNING, description_of_warning_here, e.toString());"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "```"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "## Appendices "
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix A: Product Scope"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Target user profile__:"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Can type fast.    "
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Comfortable with using command line interface.  "
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* Gyms regularly"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix B: User Stories"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|View user guide easily|I can learn more about the product before I use it|"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|Create a user profile|I can store my profile in the database|"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|New user|Create a new workout session|I can start a recorded workout session|"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Create a new workout session|I can start a recorded workout session|"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Edit user profile|I can change my data if something changes|"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Add actions into a session|I can personalise each workout session|"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "|v1.0|User|Delete session record|I can correct accidental errors|"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix C: Value proposition - Use cases"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix D: Non-Functional Requirements"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "2. An user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "3. Should not require user to install program file."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "4. Should work for single user."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "5. Should be able to run without internet connection."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix E: Glossary"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "* *Mainstream OS* - Windows, Linux, Unix, OS-X  "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "### Appendix F: Instructions for Manual Testing"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "#### F.1. Launch and Shutdown"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### Appendix G: Supported Formats of Date Input"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Here shows all 12 valid formats."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HH:mm`"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HH:mm`"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HH:mm`"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HHmm`"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HHmm`"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HHmm`"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd`"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd`"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd`"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd`"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "[\u0026#8593; Return to Top](#developer-guide)"
      }
    ],
    "authorContributionMap": {
      "zsk612": 36,
      "yujinyang1998": 93,
      "tienkhoa16": 176,
      "wgzesg": 240,
      "CFZeon": 515,
      "-": 19
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "By: `Team F11-1` Since: `Sept 2020` License: `MIT`"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## Table of content"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Introduction**](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Quick Start**](#quick-start)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Features**](#features)\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.1. [Main Menu](#main-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.1. [Viewing help: `help`](#311-viewing-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.2. [Entering Profile Menu: `profile`](#312-entering-profile-menu-profile)\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.3. [Entering Diet Menu: `diet`](#313-entering-diet-menu-diet)\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.4. [Entering Workout Menu: `workout`](#314-entering-workout-menu-workout)\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.5.  [Ending The Schwarzenegger: `end`](#315-ending-the-schwarzenegger-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.2. [Profile Menu](#32-profile-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.1. [Viewing help: `help`](#321-viewing-help-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.2. [Adding a profile: `add`](#322-adding-a-profile-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.3. [Viewing a profile: `view`](#323-viewing-a-profile-view)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.4. [Deleting a profile: `delete`](#324-deleting-a-profile-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.5. [Editing a profile: `edit`](#325-editing-a-profile-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.6. [Returning to Main Menu: `end`](#326-ending-profile-menu-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.3. [Diet Menu](#33-diet-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.1. [Listing out all commands: `help`](#331-listing-out-all-commands-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2. [Starting to record diet data: `meal`](#332-starting-to-record-diet-data-meal)\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.1. [Showing help message: `help`](#3321-showing-help-message-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.2. [Adding food items for the current meal: `add`](#3322-adding-food-items-for-the-current-meal-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.3. [Listing data for the current meal: `list`](#3323-listing-data-for-the-current-meal-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.4. [Deleting data from the current meal: `delete`](#3324-deleting-data-from-the-current-meal-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.5. [Clearing data from the current meal: `clear`](#3325-clearing-data-from-the-current-meal-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.6. [Stopping the recording of person’s meal data: `end`](#3326-stopping-the-recording-of-persons-meal-data-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.3. [Listing all past diet sessions: `list`](#333-listing-all-past-diet-sessions-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.4. [Editing a past diet session: `edit`](#334-editing-a-past-diet-session-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.5. [Deleting a past diet session: `delete`](#335-deleting-a-past-diet-session-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.6. [Clearing all past diet sessions: `clear`](#336-clearing-all-past-diet-sessions-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.7. [Returning to Main Menu: `end`](#337-returning-to-main-menu-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "3.4. [Workout Menu](#34-workout-menu)\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1. [Starting a new workout session: `new`](#341-starting-a-new-workout-session-new)\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.1. [Adding data for current workout session: `add`](#3411-adding-data-for-current-workout-session-add)\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.2. [Listing data for the current workout session: `list`](#3412-listing-data-for-the-current-workout-session-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.3. [Showing the commands available for workout session: `help`](#3413-showing-the-commands-available-for-workout-session-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.4. [Deleting data from the current workout session: `delete`](#3414-deleting-data-from-the-current-workout-session-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1.5. [Stopping the recording data for the current workout session: `end`](#3415-stopping-the-recording-data-for-the-current-workout-session-end)\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2. [Listing all past workout sessions: `list`](#342-listing-all-past-workout-sessions-list)\u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.3. [Editing a workout session: `edit`](#343-editing-a-workout-session-edit)\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.4. [Deleting a workout session: `delete`](#344-deleting-a-workout-session-delete)\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.5. [Searching a list of workout session: `search`](#345-searching-a-list-of-workout-session-search)\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.6. [Showing the commands available for workout menu: `help`](#346-showing-the-commands-available-for-workout-menu-help)\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.7. [Clearing all workout sessions: `clear`](#347-clearing-all-workout-sessions-clear)\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.8. [Returning to Main Menu: `end`](#348-returning-to-main-menu-end)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Command summary**](#command-summary)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "1. [**Notes**](#notes)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The Schwarzenegger is a desktop command line interface-based app for managing all your needs "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "regarding fitness. If you can type fast, The Schwarzenegger can help you "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "maximise your efficiency for maintaining fitness."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "When you first start using The Schwarzenegger, please ensure that you follow the instructions below:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Download the latest duke.jar from [here](https://github.com/AY2021S1-CS2113T-F11-1/tp/releases)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for the gymming application."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Open terminal or command prompt and change to the directory of the folder of the application."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "1. Key in java -jar duke.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "This section includes 4 sub sections which will guide you through the features available in Main Menu, Profile Menu, Workout Menu and Diet Menu."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.1. Main Menu"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can get access to Profile Menu, Workout Menu and Diet Menu from Main Menu."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The available commands in Main Menu are listed below:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.1. Viewing help: `help`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will show a message explaining which commands are available for you to switch to the menu that you want (i.e. Profile Menu, Workout Menu and Diet Menu)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.2. Entering Profile Menu: `profile`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Profile Menu."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `profile`  "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `profile`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.3. Entering Diet Menu: `diet`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Diet Menu."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `diet`  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `diet`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.4. Entering Workout Menu: `workout`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will direct you to the Workout Menu."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `workout`  "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `workout`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.1.5. Ending The Schwarzenegger: `end`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Terminates The Schwarzenegger."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.2. Profile Menu"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Profile Menu manages your profile including your name, age and physique data. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.1. Viewing help: `help`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "The program will show a message explaining which commands are available Profile Menu."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.2. Adding a profile: `add`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can add your profile for the most customized experience in The Schwarzenegger. Your height should in centimeters and your input weight should be in kilograms."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `add /n [name] /a [age] /h [height] /w [weight] /e [expected weight]`  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `add /n Schwarzenegger /a 30 /h 188 /w 113 /e 100`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "This command adds a profile with the name Schwarzenegger, age 30, height 188 cm, weight 113 kg and expected weight 100 kg."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.3. Viewing a profile: `view`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can view your profile recorded in the program. The Schwarzenegger will also show your current BMI and give you suggestions on your expected weight to be fitter."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `view`  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `view`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.4. Deleting a profile: `delete`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can delete your profile from the program."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `delete`  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `delete`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.5. Editing a profile: `edit`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You can edit the profile after adding to the program."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `edit /n [name or ]edit /h [height] or edit /w [weight] or edit /a [age] or edit /e [expection]`  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `edit /h 180`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "This command edits your current height in the system to 180 centimeters."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.2.6. Returning to Main Menu: `end`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "You use this command to switch back to the Main Menu."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.3. Diet Menu"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.1. Listing out all commands: `help`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can list out all the commands in the diet menu with a brief summary of how to use them with this command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `help` "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.2. Starting to record diet data: `meal`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This command creates a new meal session."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You will be directed immediately into the meal session."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "The date and tag can be added on creation with \"/d\" for date and \"/t\" for meal type."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `meal /d [date] /t [type]`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CFZeon"
        },
        "content": " "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `meal /d 2020-08-05 /t lunch`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Create a meal session | `meal`| a meal session of type unspecified with today\u0027s date will be created"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Create a meal session with date and type| `meal /d 2020-05-04 breakfast`| A meal session with date 2020-05-04 and type breakfast will be created"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.1. Showing help message: `help`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can list out all the commands in the diet session with a brief summary of how to use them with this command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `help` "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.2. Adding food items for the current meal: `add`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "This command adds a food item into the current meal session"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `add [food name] /c [amount of calories]` "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `add chicken nuggets /c 120`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.3. Listing data for the current meal: `list`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Lists all the added dishes for the current meal, with a numbered sequence according to sequence entered."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `list` "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.4. Deleting data from the current meal: `delete`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Deletes the dish according to the ID in the current meal session list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `delete [dish ID]`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `delete 3` "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.5. Clearing data from the current meal: `clear`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clears all the dishes in the current meal list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `clear` "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `clear`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.3.2.6. Stopping the recording of person’s meal data: `end`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Ends the current meal session and saves the data."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end` "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.3. Listing all past diet sessions: `list`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Obtains a list of information about past diet sessions together with their numbered index."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `list`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.4. Editing a past diet session: `edit`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Edits a previous meal session based on a numbered index that can be found in the list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `edit [index number]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `edit 3` "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.5. Deleting a past diet session: `delete`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Deletes a previous meal session based on a numbered index that can be found in the list."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `delete [index number]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `delete 3` "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.6. Clearing all past diet sessions: `clear`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Deletes all previous diet sessions."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `clear`"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `clear`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.3.7. Returning to Main Menu: `end`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Ends the current meal session and saves the data."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end` "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Exits the diet manager and returns you back to the main menu."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "__Format:__ `end`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "### 3.4. Workout Menu"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Shows a list of commands and their way of use."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.1. Starting a new workout session: `new`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Creates a new workout session and go into the session. "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Adds tags with “/t”. Tags are optional and more than one tag can be attached to a session."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `new /t \u003ctag1\u003e \u003ctag2\u003e`  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Tags are optional and more than one tag can be attached to a session."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example: `new /t legs chest`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Create a workout session with tags \"leg\" and \"chest\" | `new /t legs chest`|sthst"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Repeated tags are attached| `new /t legs legs`| Only one will be added"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.1. Adding data for current workout session: `add`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Adds moves with number of moves per set and weights of equipment (if the move does not require weights, input 0 for weight)."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `add [name of move] /n [number of moves per set] /w [weight]`  "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `add squat /n 15 /w 40`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.2. Listing data for the current workout session: `list`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Lists all the added moves for the current workout session, with a numbered sequence according to sequence entered."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `list`  "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `list`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.3. Showing the commands available for workout session: `help`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Shows a list of commands and their way of use."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `help`  "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `help`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.4. Deleting data from the current workout session: `delete`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Deletes the move according to move ID in the current workout session list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `delete [move ID]`  "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `delete 1`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "#### 3.4.1.5. Stopping the recording data for the current workout session: `end`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Ends the current workout session and saves the relevant data."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "__Format:__ `end`  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "Example: `end`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.2. Listing all past workout sessions: `list`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see all your past workout sessions. They will be summarised and "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "printed in a table with their index, creation date and tags."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `list`  "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `list` \u003cbr\u003e\u003cbr\u003e| TODO:actual code UI output"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.3. Editing a workout session: `edit`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can edits a past workout session in the record list. You will go into "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "the specific workout session after typing this."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `edit \u003cINDEX\u003e` "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index can be found by listing the results"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `edit 1` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e Edit the record at index 1.| TODO:actual code UI output"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.4. Deleting a workout session: `delete`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can delete a past workout session in the record list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `delete \u003cINDEX\u003e` "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The index can be found by listing the results"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `delete 1` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e Delete the record at index 1.| TODO:actual code UI output"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.5. Searching a list of workout session: `search`"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can searches for a list of workout sessions that matches certain conditions.For exmaple, "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "you can search for sessions created on a specific day or sessions that contains certain tags."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `Search /d \u003cDATE\u003e /t \u003ctag1\u003e \u003ctag2\u003e`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can search records containing (a list of) tags with `/t` followed by the tags. If multiple"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "tags are written, only sessions that contains all the tags will be selected."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can searches records created on a specific day with `/d` followed by a date."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Date should be keyed in  following one of the supported formats. "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[See here](#5-notes) for a complete list of format supported. If the format is not "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "recognised, sessions created on any day will be accepted."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "The conditions are optional. You may have zero, one or both conditions while searching."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "If both conditions are specified, only sessions that meet both conditions will be selected."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see all the sessions that meet the conditions. They will be summarised and "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "printed in a table with their index, creation date and tags."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Situation | Example |  Outcome"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "----------|--------|------------------"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search all sessions created on Oct 17 2020 | `search /d 20201018`|TODO:sthst"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search all sessions with \"arm\" tag| `search /t arm`|sth"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search all sessions with \"arm\" tag on Oct 17 2020| `search /t arm /d 20201018`|sth"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.6. Showing the commands available for workout menu: `help`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can see a complete list of available commands under workout manager and how to use them."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `help`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `help` \u003cbr\u003e\u003cbr\u003e **Description:** \u003cbr\u003e show help manual| TODO:actual code UI output"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.7. Clearing all workout sessions: `clear`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "You can erase all workout sessions."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `clear`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "This command is dangerous as you will not be able to "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "recover the data."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "After typing this command, you will be asked to reconfirm it by typing in"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "`YES`. Else the action will be aborted. "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `clear`| TODO:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "### 3.4.8. Returning to main menu: `end`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "You can return to the main menu."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "__Format:__ `end`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "After typing in this, you will see your prompt in your terminal"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "changes from `workout\u003e\u003e\u003e` to `main\u003e\u003e\u003e`. "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wgzesg"
        },
        "content": " "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Example |  Outcome"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Command**: \u003cbr\u003e `clear`| TODO:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 4. Command summary"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Main Menu**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Profile Menu |`profile`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Diet Menu|`diet`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Workout Menu|`workout`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "End|`end`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Profile Menu**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Add |`add /n [name] /a [age] /h [height] /w [weight] /e [expected weight]`\u003cbr\u003e\u003cbr\u003eE.g. `add /n Schwarzenegger /a 30 /h 188 /w 113 /e 100`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "View|`view`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Edit|`edit \u003c/n [name]\u003e \u003c/a [age]\u003e \u003c/h [height]\u003e \u003c/w [weight]\u003e \u003c/e [expected weight]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `edit /w 110`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Delete|`delete`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Main Menu|`end`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Diet Menu**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Start meal session |`meal /d [date] /t [type]`\u003cbr\u003e\u003cbr\u003eE.g. `meal /d 2020-05-04 /t breakfast`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Edit|`edit [meal session ID]`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Delete|`delete [meal session ID]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Main Menu|`end`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "**Diet Session**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Add |`add [dish] /c [calorie count]`\u003cbr\u003e\u003cbr\u003eE.g. `add spinach /c 90`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Delete|`delete [dish ID]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Main Menu|`end`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Workout Menu**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "**Action** |  **Format**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "--------|----------------------"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Start workout session |`new /t \u003ctag1\u003e \u003ctag2\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `new /t leg chest`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "List|`list`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Edit|`edit \u003csession ID\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Delete|`delete \u003csession ID\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Search|`search /d \u003cdate\u003e /t \u003ctag1\u003e \u003ctag2\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `search /t leg chest /d 20201018`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Help|`help`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "Clear|`clear`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "Return to Main Menu|`end`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "## 5. Notes"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "[1] Here shows all 12 valid formats."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HH:mm`"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HH:mm`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HH:mm`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd HHmm`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd HHmm`"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd HHmm`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd HHmm`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyyMMdd`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy-MM-dd`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy MM dd`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    `yyyy/MM/dd`"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 87,
      "tienkhoa16": 112,
      "wgzesg": 144,
      "CFZeon": 94,
      "-": 20
    }
  },
  {
    "path": "docs/team/jinyang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Yu Jinyang - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/shukai.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zhang Shukai - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop Diet Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/tienkhoa.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Nguyen Tien Khoa - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop User Profile Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/zeon.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zeon Chua Feiyi - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "Develop Diet Manager."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6
    }
  },
  {
    "path": "docs/team/zesong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "# Zesong - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static CommonUi ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes the command with given arguments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return An object CommandResult containing the executing status and feedback message to be displayed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *         to user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Executing \" + this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes the command with user\u0027s input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, storage.workout.Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 5,
      "tienkhoa16": 22,
      "wgzesg": 30
    }
  },
  {
    "path": "src/main/java/commands/CommandLib.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionClear;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionCreate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionDelete;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionEdit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietmanager.DietSessionSearch;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionWrong;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietsession.FoodItemClear;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.diet.dietsession.FoodItemHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemWrong;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.Help;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.ToDiet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.ToProfile;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.ToWorkout;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.main.Wrong;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileAdd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileDelete;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEdit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEnd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileHelp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileWrong;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ClearWS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.EditWS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.HelpWS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.workout.workoutmanager.SearchWS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionHelp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionSearch;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Hashtable;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_CLEAR;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DIET;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_EDIT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_HELP;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_LIST;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_MEAL;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_NEW;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_PROFILE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_SEARCH;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_WORKOUT;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_WRONG;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class CommandLib {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Hashtable\u003cString, Command\u003e library;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public CommandLib() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        library \u003d new Hashtable\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Initializes the commandLib with main menu\u0027s commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void initMainMenu() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new Wrong());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new Help());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_DIET, new ToDiet());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_PROFILE, new ToProfile());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WORKOUT, new ToWorkout());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Initializes the commandLib with profile menu\u0027s commands."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void initProfileSessionCL() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new ProfileHelp());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_ADD, new ProfileAdd());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new ProfileDelete());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_VIEW, new ProfileView());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_EDIT, new ProfileEdit());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_END, new ProfileEnd());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new ProfileWrong());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Initializes the commandLib with workout menu\u0027s commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void initWorkoutManagerCL() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new ListWS());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_NEW, new NewWS());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new DeleteWS());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_END, new ByeWS());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_EDIT, new EditWS());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_CLEAR, new ClearWS());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new HelpWS());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new WrongWS());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new SearchWS());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Initialize the commandLib with workout session\u0027s commands."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void initWorkoutSessionCL() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_ADD, new WorkoutSessionAdd());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new WorkoutSessionDelete());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new WorkoutSessionList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_END, new WorkoutSessionEnd());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new WorkoutSessionHelp());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new WorkoutSessionSearch());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new WorkoutSessionWrong());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Initialize the commandLib with diet manager\u0027s commands."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void initDietManagerCL() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new DietSessionList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_MEAL, new DietSessionCreate());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new DietSessionHelp());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_CLEAR, new DietSessionClear());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new DietSessionSearch());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_EDIT, new DietSessionEdit());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new DietSessionDelete());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new DietSessionWrong());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Initialize the commandLib with diet session\u0027s commands."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void initDietSessionCL() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_ADD, new FoodItemAdd());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_DELETE, new FoodItemDelete());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        library.put(COMMAND_WORD_HELP, new FoodItemHelp());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_CLEAR, new FoodItemClear());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_SEARCH, new FoodItemClear());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_LIST, new FoodItemList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        library.put(COMMAND_WORD_WRONG, new FoodItemWrong());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets specific Command object based on command keyword."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param keyword Keyword specifying type of command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Command getCommand(String keyword) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (library.containsKey(keyword)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return library.get(keyword);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return library.get(COMMAND_WORD_WRONG);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 26,
      "yujinyang1998": 9,
      "tienkhoa16": 67,
      "wgzesg": 63
    }
  },
  {
    "path": "src/main/java/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class representing result shown to user after executing the requested command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private String feedbackMessage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private ExecutionResult status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandResult object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param feedbackMessage Feedback message after executing command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult(String feedbackMessage, ExecutionResult status) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.feedbackMessage \u003d feedbackMessage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandResult object with status OK."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param feedbackMessage Feedback message after executing command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult(String feedbackMessage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.feedbackMessage \u003d feedbackMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        status \u003d ExecutionResult.OK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs CommandResult object with empty feedback message and status OK."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        feedbackMessage \u003d EMPTY_STRING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        status \u003d ExecutionResult.OK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ExecutionResult getStatus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getFeedbackMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return feedbackMessage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 39,
      "wgzesg": 8
    }
  },
  {
    "path": "src/main/java/commands/ExecutionResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Enumerations of execution result status."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public enum ExecutionResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    OK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    ABORTED,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    FAILED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    SKIPPED,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    MISSING"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 4,
      "wgzesg": 8
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionClear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionClear extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for clear command to clear all diet sessions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (checkConfirmation()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                for (int index \u003d 0; index \u003c Objects.requireNonNull(listOfFiles).length; index++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    listOfFiles[index].delete();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"You have cleared all diet sessions!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                logger.log(Level.INFO, \"Cleared all diet sessions\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"You have aborted clear operation.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"No sessions in dietManager for deletion\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private boolean checkConfirmation() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ui.showToUser(\"Are you sure you want to clear all records? This action is irrevocable.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"\\tKey in YES to confirm.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d ui.getCommand(\"Diet Menu\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return input.equals(\"YES\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 32,
      "tienkhoa16": 4,
      "CFZeon": 12
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionCreate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionCreate extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for create command to create new diet sessions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            DietSession ds \u003d new DietSession(ui.extractMeal(input), ui.extractDate(input));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert ds !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Diet session successfully created\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ds.start();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            saveToFile(storage, ds);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"It seems like we ran into some problems saving your session...\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"Diet session failed to save\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs method to save changes to storage file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param ds dietSession that is being changed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void saveToFile(DietStorage storage, DietSession ds) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            storage.init(ds.getDate().toString() + \" \" + ds.getTypeInput());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            storage.writeToStorageDietSession(ds.getDate().toString() + \" \" + ds.getTypeInput(), ds);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Diet session successfully saved\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"save profile session failed\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"Failed to save your diet session!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 30,
      "tienkhoa16": 6,
      "wgzesg": 2,
      "CFZeon": 14
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionDelete extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for delete command to delete diet sessions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert !input.isEmpty() : \"No files to delete or wrong folder\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert listOfFiles !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String fileName \u003d listOfFiles[Integer.parseInt(input) - 1].getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Oh no! You have deleted \" + fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            listOfFiles[Integer.parseInt(input) - 1].delete();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Deleted Diet Session successfully\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry! It seems like you\u0027ve entered an invalid number or input!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"No or wrong index for deletion in dietManager\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 26,
      "tienkhoa16": 5,
      "wgzesg": 2,
      "CFZeon": 4
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionEdit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionEdit extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for edit command to edit diet sessions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            DietSession ds \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            assert listOfFiles !\u003d null : \"List of files should not be null\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ds \u003d storage.readDietSession(listOfFiles[Integer.parseInt(input) - 1].getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            ds.start();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            saveToFile(storage, ds);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Diet session in edit mode\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException | FileNotFoundException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                | IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is no file at that index.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No file found at array index\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"failed to execute diet session\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs method to save changes to storage file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     * @param ds dietSession that is being changed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void saveToFile(DietStorage storage, DietSession ds) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            storage.init(ds.getTypeInput() + \" \" + ds.getDate().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            storage.writeToStorageDietSession(ds.getTypeInput() + \" \" + ds.getDate().toString(), ds);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Diet session successfully saved\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.WARNING, \"save profile session failed\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Failed to save your diet session!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 32,
      "tienkhoa16": 9,
      "CFZeon": 22
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionHelp extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for help command to display help information."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietManagerUi.printHelp();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"Displayed help in dietManager\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 20,
      "tienkhoa16": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionList extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for list command to list diet sessions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert folder.exists();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Here are all the saved meal sessions!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            if (Objects.requireNonNull(listOfFiles).length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"It seems like you do not have any meal sessions stored!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            for (int i \u003d 0; i \u003c Objects.requireNonNull(listOfFiles).length; i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println(\"\\t\" + (i + 1) + \". \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                        + listOfFiles[i].getName().replaceFirst(\"[.][^.]+$\", \"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Listed all available diet sessions\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry! It seems like you have no meal sessions saved!.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No instances of diet sessions saved\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 26,
      "tienkhoa16": 5,
      "wgzesg": 2,
      "CFZeon": 9
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionSearch.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionSearch extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for search command to search diet sessions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File folder \u003d new File(FILEPATH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File[] listOfFiles \u003d folder.listFiles();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assert folder.exists();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Here are the search results!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (Objects.requireNonNull(listOfFiles).length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"It seems like you do not have any meal sessions stored!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int numberOfResults \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            for (int i \u003d 0; i \u003c Objects.requireNonNull(listOfFiles).length; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (listOfFiles[i].getName().contains(input.trim())) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    System.out.println(\"\\t\" + (++numberOfResults) + \". \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + listOfFiles[i].getName().replaceFirst(\"[.][^.]+$\", \"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (numberOfResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"Sorry, there is nothing found in your diet manager.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Listed all searched diet sessions\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"\\tSorry! It seems like you have no meal sessions saved!.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No instances of diet sessions saved\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 46,
      "tienkhoa16": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietmanager/DietSessionWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DietSessionWrong extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for wrong command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet manager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, DietStorage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ui.showToUser(\"Sorry! It seems like you\u0027ve entered an invalid command!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        logger.log(Level.INFO, \"Invalid command\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 14,
      "tienkhoa16": 5,
      "wgzesg": 2,
      "CFZeon": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSessionParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemAdd extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietSessionUi ui \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for add command to add food items."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert !input.isEmpty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Food temp \u003d new Food(parser.processFoodName(input), parser.processFoodCalories(input));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.add(temp);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Yay! You have added \" + temp.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Added food to arraylist\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Please specify food info.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Did not put food name or calories\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Please input a number for calories.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Put calories in a wrong format\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 30,
      "tienkhoa16": 5,
      "wgzesg": 1,
      "CFZeon": 5
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemClear.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemClear extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietSessionUi ui \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for clear command to clear all food items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (checkConfirmation()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Oops you have cleared all the food items.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Cleared all food in arraylist\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"You have aborted clear operation.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private boolean checkConfirmation() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ui.showToUser(\"Are you sure you want to clear all records? This action is irrevocable.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"\\tKey in YES to confirm.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d ui.getCommand(\"Diet Menu\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return input.equals(\"YES\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 35,
      "tienkhoa16": 4
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemDelete extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietSessionUi ui \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for delete command to delete food items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            assert !input.isEmpty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int index \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Food temp \u003d foodList.get(index - 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"You have deleted \" + temp.toString() + \" from your list!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            foodList.remove(temp);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Removed food from arraylist\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry! It seems like you\u0027ve entered an invalid number or input!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Did not input correct index\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 27,
      "tienkhoa16": 4,
      "wgzesg": 1,
      "CFZeon": 4
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemHelp extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for help command to display help information for dietSession."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionUi.printHelp();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"Displayed help in dietSession\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 23,
      "tienkhoa16": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemList extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietSessionUi ui \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for list command to list food items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Here is your food list: \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            for (i \u003d 0; i \u003c foodList.size(); i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println(\"\\t\" + (i + 1) + \". \" + foodList.get(i).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            logger.log(Level.INFO, \"Listed all foods in Diet Session\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"Sorry, there is nothing in your food list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is nothing in your food list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No item in food list\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 32,
      "tienkhoa16": 4,
      "CFZeon": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemSearch.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class FoodItemSearch extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietSessionUi ui \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for search command to search food items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Here are the search results: \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            int numberOfResults \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            for (Food food : foodList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (food.toString().contains(input.trim())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    System.out.println(\"\\t\" + (++numberOfResults) + \". \" + food.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (numberOfResults \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                ui.showToUser(\"Sorry, there is nothing found in your food list.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Listed all searched foods in Diet Session\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            ui.showToUser(\"Sorry, there is nothing in your food list.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"No item in food list for search\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 38,
      "tienkhoa16": 3
    }
  },
  {
    "path": "src/main/java/commands/diet/dietsession/FoodItemWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class FoodItemWrong extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    DietSessionUi ui \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Overrides execute for wrong command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param foodList arraylist that stored all the food items"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param storage storage for diet session"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ui.showToUser(\"Sorry! It seems like you\u0027ve entered an invalid command!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"Wrong input for dietSession\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 21,
      "tienkhoa16": 4,
      "wgzesg": 1,
      "CFZeon": 1
    }
  },
  {
    "path": "src/main/java/commands/main/Help.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.helpFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.showUser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Help extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes help command in Main Menu."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Help message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"profile\", \"profile\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go to Profile Menu to manage your profile\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"workout\", \"workout\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go to Workout Menu to manage your workout records\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                        + \" and create new workout records\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"diet\", \"diet\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \"Go to Diet Menu to manage your past diet records\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                        + \" and create new diet records\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"end\", \"end\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Exit the program\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        showUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 9,
      "wgzesg": 26
    }
  },
  {
    "path": "src/main/java/commands/main/ToDiet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import diet.dietmanager.DietManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ToDiet extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes redirecting to Diet Menu command from Main Menu."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Redirecting to Diet Menu message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        DietManager dietManager \u003d new DietManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        dietManager.start();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 6,
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/commands/main/ToProfile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import profile.ProfileSession;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ToProfile extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    CommonUi ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes redirecting to Profile Menu command from Main Menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Redirecting to Profile Menu message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.showToUser(\"Entering Profile Menu...\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ProfileSession profileSession \u003d new ProfileSession();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        profileSession.run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 3,
      "tienkhoa16": 7,
      "wgzesg": 17
    }
  },
  {
    "path": "src/main/java/commands/main/ToWorkout.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.workoutmanager.WorkoutManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ToWorkout extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    CommonUi ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes redirecting to Workout Menu command from Main Menu."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Redirecting to Workout Menu message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ui.showToUser(\"Entering Workout Session...\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutManager workoutManager \u003d new WorkoutManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        workoutManager.start();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.OK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 5,
      "tienkhoa16": 6,
      "wgzesg": 16
    }
  },
  {
    "path": "src/main/java/commands/main/Wrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class Wrong extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    CommonUi ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Notifies user invalid input command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Invalid input command message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ui.showToUser(\"Sorry! It seems like you\u0027ve entered an invalid command!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Invalid command\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(\"\", ExecutionResult.MISSING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 4,
      "tienkhoa16": 7,
      "wgzesg": 15
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_CREATE_PROFILE_ACK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_PROFILE_EXIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractAge;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCommandTagAndInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractExpectedWeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractHeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractWeight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for adding profile."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileAdd extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the add profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing Add Command\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(MESSAGE_PROFILE_EXIST, FAILED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            HashMap\u003cString, String\u003e parsedParams \u003d extractCommandTagAndInfo(COMMAND_WORD_ADD, commandArgs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d new Profile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractName(parsedParams),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractAge(parsedParams),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractHeight(parsedParams),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractWeight(parsedParams),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    extractExpectedWeight(parsedParams)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.saveData(profile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CREATE_PROFILE_ACK, profile.toString()), OK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 59
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_DELETE_NOTHING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_DELETE_PROFILE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for deleting user profile."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileDelete extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the delete profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing Delete Command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new RedundantParamException(COMMAND_WORD_DELETE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.saveData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_PROFILE, OK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_NOTHING, FAILED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 49
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileEdit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_EDIT_PROFILE_ACK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_PROFILE_NOT_EXIST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractAge;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCommandTagAndInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractExpectedWeight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractHeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractWeight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_EDIT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for editing profile."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileEdit extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the edit profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing Edit Command\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            HashMap\u003cString, String\u003e parsedParams \u003d extractCommandTagAndInfo(COMMAND_WORD_EDIT, commandArgs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            String name \u003d parsedParams.containsKey(\"/n\") ? extractName(parsedParams) : profile.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            int age \u003d parsedParams.containsKey(\"/a\") ? extractAge(parsedParams) : profile.getAge();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            int height \u003d parsedParams.containsKey(\"/h\") ? extractHeight(parsedParams) : profile.getHeight();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double weight \u003d parsedParams.containsKey(\"/w\") ? extractWeight(parsedParams) : profile.getWeight();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double expectedWeight \u003d parsedParams.containsKey(\"/e\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    ? extractExpectedWeight(parsedParams) : profile.getExpectedWeight();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d new Profile(name, age, height, weight, expectedWeight);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.saveData(profile);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PROFILE_ACK, profile.toString()), OK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_EDIT), FAILED);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 62
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileEnd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for exiting Profile session."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileEnd extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute end command requested by user\u0027s input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing End Command\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new RedundantParamException(COMMAND_WORD_END);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        throw new EndException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 36,
      "wgzesg": 1
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.ADD_PROFILE_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EDIT_PROFILE_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_ADD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_DELETE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_EDIT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_HELP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.CommonUi.helpFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for showing help message in Profile session."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileHelp extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute help command requested by user\u0027s input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing Help Command\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new RedundantParamException(COMMAND_WORD_HELP);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(COMMAND_WORD_ADD, ADD_PROFILE_FORMAT, \"Add your new profile\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(COMMAND_WORD_VIEW, COMMAND_WORD_VIEW, \"View your profile\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(COMMAND_WORD_EDIT, EDIT_PROFILE_FORMAT, \"Edit your existing profile. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                + \"You may edit only 1 field or all fields\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        helpMessage.append(helpFormatter(COMMAND_WORD_DELETE, COMMAND_WORD_DELETE, \"Delete your existing profile\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 45,
      "wgzesg": 5
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.RedundantParamException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.FAILED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_PROFILE_NOT_EXIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_VIEW_PROFILE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_VIEW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for viewing profile."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileView extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides execute method of class Command to execute the view profile command requested by user\u0027s input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing View Command\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new RedundantParamException(COMMAND_WORD_VIEW);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d storage.loadData();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VIEW_PROFILE, profile.toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (InvalidSaveFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_VIEW), FAILED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 47
    }
  },
  {
    "path": "src/main/java/commands/profile/ProfileWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandWordException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A representation of the command for invalid command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileWrong extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Notifies user invalid input command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param storage Profile Storage to load and save data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Result of command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.WARNING, \"command not recognised\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        throw new InvalidCommandWordException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 29
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ByeWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ByeWS extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Terminates workout manager and return to main menu."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        throw new EndException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6,
      "tienkhoa16": 7,
      "wgzesg": 9
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ClearWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_SUCCESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ClearWS extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes all workout sessions."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message if the execution is affirmed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *         Status ABORTED if the execution is withdrawn."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (!checkConfirmation()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return new CommandResult(CLEAR_ABORTED, ExecutionResult.ABORTED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastRecordList.getInstance().clear();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Cleared successfully\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(CLEAR_SUCCESS, ExecutionResult.OK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user confirmation for clearing all workout sessions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return If user confirms clearing all workout sessions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static boolean checkConfirmation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        System.out.println(\"\\tAre you sure you want to clear all records? This action is irrevocable.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(\"\\tKey in \u0027YES\u0027 to confirm.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String input \u003d ui.getCommand(\"Workout Manager\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return input.equals(\"YES\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 14,
      "wgzesg": 30
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/DeleteWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.InsufficientArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.NotANumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.OutOfArrayException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.DELETE_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DeleteWS extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Deletes a record at a specific index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message if file is deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            index \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Number format exception caught\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NotANumberException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Insufficient arguments given!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new InsufficientArgumentException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            PastRecordList.getInstance().delete(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Index Out Of Bounds Exception caught\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new OutOfArrayException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"deleted successfully\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(DELETE_SUCCESS, ExecutionResult.OK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 11,
      "tienkhoa16": 8,
      "wgzesg": 26
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/EditWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.InsufficientArgumentException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.NotANumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.OutOfArrayException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.workoutsession.WorkoutSession;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.EDIT_SUCCESS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class EditWS extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Edits a record at a given index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Index of the record to be edited."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message if file is edit."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index \u003d Integer.parseInt(args[0]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Number format exception caught\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new NotANumberException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Insufficient arguments given!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new InsufficientArgumentException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            filePath \u003d PastRecordList.getInstance().edit(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.warning(\"Index Out Of Bounds Exception caught\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new OutOfArrayException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        WorkoutSession ws \u003d new WorkoutSession(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"editing workout session created\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ws.workoutSessionStart();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"edited successfully\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(EDIT_SUCCESS, ExecutionResult.OK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 8,
      "wgzesg": 45
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/HelpWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.helpFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class HelpWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Executes help command in Workout Menu."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and information to be printed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"List\", \"list\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Show all past sessions\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"New\", \"new /t \u003ctag1\u003e \u003ctag2\u003e\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Create a new workout session and tags\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"Delete\", \"delete x\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Delete the record indexed at x\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"Edit\", \"edit x\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Edit the record indexed at x\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Clear all past results\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"Search\", \"search /t \u003ctag1\u003e \u003ctag2\u003e /d \u003cdate\u003e\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Search records based on tags and dates\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        helpMessage.append(helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \"Go back to main menu\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(helpMessage.toString().trim(), ExecutionResult.OK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 7,
      "wgzesg": 32
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/ListWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class ListWS extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Lists past record of workout sessions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and all past records in a table."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String formattedInfo \u003d PastRecordList.getInstance().list(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Listed successfully\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(formattedInfo, OK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 4,
      "tienkhoa16": 9,
      "wgzesg": 13
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/NewWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutsession.WorkoutSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.OK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.NEW_SUCCESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.STARTNEWSESSION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class NewWS extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates new workout session."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args list of tags to be attached to a new session."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and feedback message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         * When starting a new workout session, a new file is created first."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         * The file path is passed into workoutSession constructor to instantiate"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         * a new workoutSession instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d parseTags(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String filePath \u003d PastRecordList.getInstance().add(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        WorkoutSession ws \u003d new WorkoutSession(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"New workout session created\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ui.showToUser(STARTNEWSESSION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        ws.workoutSessionStart();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Ended workout session\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(NEW_SUCCESS, OK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 17,
      "tienkhoa16": 7,
      "wgzesg": 21
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/SearchWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.ExecutionResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastRecordList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class SearchWS extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Searches workout session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status OK and information to be printed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String formattedInfo \u003d PastRecordList.getInstance().search(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new CommandResult(formattedInfo, ExecutionResult.OK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 6,
      "wgzesg": 19
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutmanager/WrongWS.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static commands.ExecutionResult.MISSING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.COMMAND_NOT_FOUND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class WrongWS extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Notifies user invalid input command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args User\u0027s input arguments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Status MISSING and COMMAND_NOT_FOUND feedback."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are caught exceptions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public CommandResult execute(String[] args) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super.execute(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new CommandResult(COMMAND_NOT_FOUND, MISSING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 10,
      "wgzesg": 19
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionAdd extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            exerciseList.exerciseList.add(WorkoutSessionParser.addParser(inputs));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.addFormatError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 26
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionDelete extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            int removeIndex \u003d WorkoutSessionParser.deleteParser(inputs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            if (removeIndex !\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                exerciseList.exerciseList.remove(removeIndex - 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.deleteIndexError();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 26
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionEnd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionEnd extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        setEndWorkoutSessionT(hasEndedWorkoutSessions);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void setEndWorkoutSessionT(boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        hasEndedWorkoutSessions[0] \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 26
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionHelp extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        WorkoutSessionUi.printHelp();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 15
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionList extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printList(exerciseList.exerciseList);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.writeToStorage(filePath, exerciseList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void printList(ArrayList\u003cExercise\u003e exercise) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        if (exercise.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.emptyListError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 0; i \u003c exercise.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            System.out.println((i + 1) + \": \" + exercise.get(i).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 33
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionSearch.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.WorkoutSessionParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionSearch extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private static CommonUi printer \u003d new CommonUi();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String searchTerm \u003d WorkoutSessionParser.searchParser(inputs).toLowerCase();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        StringBuilder searchResult \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        if (searchTerm.length() \u003e 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            for (int i \u003d 0; i \u003c exerciseList.exerciseList.size(); i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                if (exerciseList.exerciseList.get(i).getDescription().toLowerCase().contains(searchTerm)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                    searchResult.append(exerciseList.exerciseList.get(i).toString() + \"\\n\\t \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            if (searchResult.length() !\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                printer.showToUser(searchResult.toString().trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                WorkoutSessionUi.searchResultsEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.searchInputError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 39
    }
  },
  {
    "path": "src/main/java/commands/workout/workoutsession/WorkoutSessionWrong.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package commands.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionWrong extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void execute(String[] inputs, ExerciseList exerciseList,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                        String filePath, Storage storage, boolean[] hasEndedWorkoutSessions) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        WorkoutSessionUi.inputNotRecognisedError();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 17
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/DietManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final CommandLib cl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietManagerParser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietManagerUi dietManagerUI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietStorage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Constructs DietManager and initialize command library for dietManager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public DietManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        storage \u003d new DietStorage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietManagerUI \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts diet manager to read user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi.printOpening();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d dietManagerUI.getCommand(\"Diet Menu\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assert input !\u003d null : \"Null input before input loop\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (!input.equals(\"end\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } catch (ExitException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            input \u003d dietManagerUI.getCommand(\"Diet Menu\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        dietManagerUI.showToUser(\"you have exited Diet Manager.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes the user input to interpret correct command words."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws ExitException handles exit exception"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void processCommand(String input) throws ExitException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] commParts \u003d parser.parse(input.trim());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Command command \u003d cl.getCommand(commParts[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            command.execute(commParts[1].trim(), storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            dietManagerUI.showToUser(\"Looks like you\u0027ve typed an improper command!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 45,
      "tienkhoa16": 8,
      "wgzesg": 2,
      "CFZeon": 5
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/DietManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManagerParser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Parses user input to extract command words and instructions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param comm user input for command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return a string array containing command words and instructions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String[] parse(String comm) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (comm.contains(\" \")) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return comm.split(\" \", 2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return new String[]{comm, \"filler\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 17
    }
  },
  {
    "path": "src/main/java/diet/dietmanager/ExitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class ExitException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public ExitException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8
    }
  },
  {
    "path": "src/main/java/diet/dietsession/DietSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietsession.DietSessionUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSession {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final ArrayList\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String dateInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String typeInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietSessionUi dietSessionUI;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private transient CommandLib cl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private final DietStorage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public boolean endDietSession \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Constructs DietSession and initialize command library for dietSession."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public DietSession(String typeInput, String dateInput) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.date \u003d parser.parseDate(dateInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.typeInput \u003d typeInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        storage \u003d new DietStorage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        dietSessionUI \u003d new DietSessionUi();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getDateInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dateInput;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getTypeInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return typeInput;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void setEndDietSession(Boolean hasEnded) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.endDietSession \u003d hasEnded;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts dietSession and initializes command library for dietSession."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException handles input/output exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"starting diet session\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        dietSessionUI.printOpening();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        setEndDietSession(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d dietSessionUI.getCommand(\"Diet Menu \u003e Diet Session\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        dietSessionInputLoop(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        setEndDietSession(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        dietSessionUI.printExit();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts reading user input for dietSession commands."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void dietSessionInputLoop(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (!input.equals(\"end\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            input \u003d dietSessionUI.getCommand(\"Diet Menu \u003e Diet Session\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes user input for dietSession commands."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input user input for command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws NullPointerException handles null pointer exception"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    private void processCommand(String input) throws NullPointerException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] commParts \u003d parser.parse(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commParts[0]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(commParts[1].trim(), foodList, storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 81,
      "tienkhoa16": 14,
      "wgzesg": 1,
      "CFZeon": 10
    }
  },
  {
    "path": "src/main/java/diet/dietsession/DietSessionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String[] parse(String comm) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (comm.contains(\" \")) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return comm.split(\" \", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return new String[]{comm, \"filler\"};"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes the name of the food item."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param food string for food content"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return food name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IndexOutOfBoundsException handles exception for not inputting food name or calories"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String processFoodName(String food) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] temp \u003d food.trim().split(\"/c\", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return temp[0].trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Processes the calories of the food item."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param food string for food content"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return food calories"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws NumberFormatException handles exception for wrong calories input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public double processFoodCalories(String food) throws NumberFormatException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] temp \u003d food.trim().split(\"/c\", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"Processed food calories successfully\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return Double.parseDouble(temp[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Converts the date and time into a LocalDate object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param dateInput Date input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return LocalDate object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public LocalDate parseDate(String dateInput) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter formatterA \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter formatterB \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter formatterC \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            date \u003d LocalDate.parse(dateInput, formatterA);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.INFO, \"Parsed date and time successfully\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Invalid input for date and time.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse date and time\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                date \u003d LocalDate.parse(dateInput, formatterB);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                logger.log(Level.INFO, \"Parsed date and time successfully\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Invalid input for date and time.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse date and time\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                date \u003d LocalDate.parse(dateInput, formatterC);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                logger.log(Level.INFO, \"Parsed date and time successfully\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Invalid input for date and time.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse date and time\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                date \u003d LocalDate.parse(dateInput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                logger.log(Level.INFO, \"Parsed date and time successfully\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            System.out.println(\"Invalid input for date and time.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse date and time\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 91,
      "tienkhoa16": 5,
      "CFZeon": 1
    }
  },
  {
    "path": "src/main/java/diet/dietsession/ExitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class ExitException extends Throwable {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public ExitException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8
    }
  },
  {
    "path": "src/main/java/diet/dietsession/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    protected double calories;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Food(String name, double calories) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return this.name + \" with calories: \" + this.calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 16
    }
  },
  {
    "path": "src/main/java/exceptions/EndException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_END;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class EndException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs EndException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public EndException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_END);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 13
    }
  },
  {
    "path": "src/main/java/exceptions/ExceptionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with handling exceptions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ExceptionHandler {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Handles checked exceptions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param e Checked exceptions in The Schwarzenegger."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String handleCheckedExceptions(SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Handles unchecked exceptions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param e Unchecked exception in Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Error message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String handleUncheckedExceptions(Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return e.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 27
    }
  },
  {
    "path": "src/main/java/exceptions/SchwarzeneggerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A base class for the checked exceptions in Schwarzenegger."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public abstract class SchwarzeneggerException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SchwarzeneggerException object inheriting class Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message Error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public SchwarzeneggerException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 16
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidAgeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_AGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input age is invalid."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidAgeException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidAgeException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidAgeException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_AGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 19
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidCommandFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when command format is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidCommandFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidCommandFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command Command with invalid format."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidCommandFormatException(String command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(\"%s command format is invalid. Please type \\\"help\\\" to see the correct format.\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                command.toUpperCase()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 19
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidCommandWordException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when command word is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidCommandWordException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidCommandWordException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidCommandWordException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_COMMAND_WORD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidHeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_HEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input height is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidHeightException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidHeightException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidHeightException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_HEIGHT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidSaveFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_SAVE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when there is corruption in data save format."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidSaveFormatException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidSaveFormatException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidSaveFormatException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_SAVE_FORMAT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 19
    }
  },
  {
    "path": "src/main/java/exceptions/profile/InvalidWeightException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_INVALID_WEIGHT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input weight is invalid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class InvalidWeightException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InvalidWeightException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public InvalidWeightException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(MESSAGE_INVALID_WEIGHT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 18
    }
  },
  {
    "path": "src/main/java/exceptions/profile/LoadingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_LOADING_ERROR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception while loading data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class LoadingException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs LoadingException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message The cause of the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public LoadingException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_LOADING_ERROR, message));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/profile/RedundantParamException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_REDUNDANT_PARAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception when input parameters are redundant."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class RedundantParamException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs RedundantParamException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandWord Command with redundant input parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public RedundantParamException(String commandWord) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_REDUNDANT_PARAM, commandWord.toUpperCase()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/profile/SavingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package exceptions.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_SAVING_ERROR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Represents exception while saving data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class SavingException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SavingException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param message The cause of the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public SavingException(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        super(String.format(MESSAGE_SAVING_ERROR, message));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 20
    }
  },
  {
    "path": "src/main/java/exceptions/workoutmanager/InsufficientArgumentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package exceptions.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_INSUFFICIENT_ARGUMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class InsufficientArgumentException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs InsufficientArgumentException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public InsufficientArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(MESSAGE_INSUFFICIENT_ARGUMENT);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 1,
      "wgzesg": 14
    }
  },
  {
    "path": "src/main/java/exceptions/workoutmanager/NotANumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package exceptions.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_NOT_A_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class NotANumberException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs NotANumberException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public NotANumberException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(MESSAGE_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 1,
      "wgzesg": 14
    }
  },
  {
    "path": "src/main/java/exceptions/workoutmanager/OutOfArrayException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package exceptions.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_OUT_OF_ARRAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class OutOfArrayException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs OutOfArrayException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public OutOfArrayException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(MESSAGE_OUT_OF_ARRAY);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 3,
      "wgzesg": 12
    }
  },
  {
    "path": "src/main/java/exceptions/workoutmanager/SchwIoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package exceptions.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class SchwIoException extends SchwarzeneggerException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SchwIoException object inheriting abstract class SchwarzeneggerException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public SchwIoException(String content) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        super(content);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 3,
      "wgzesg": 10
    }
  },
  {
    "path": "src/main/java/logger/SchwarzeneggerLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package logger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.LOG_FILE_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class to handle file logging."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class SchwarzeneggerLogger {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static SchwarzeneggerLogger singleInstance \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Logger logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs SchwarzeneggerLogger object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private SchwarzeneggerLogger() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            File file \u003d new File(LOG_FILE_PATH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SimpleFormatter formatter \u003d new SimpleFormatter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileHandler fh \u003d new FileHandler(LOG_FILE_PATH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            fh.setFormatter(formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger \u003d Logger.getLogger(\"SchwarzeneggerLogger\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (SecurityException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets logger attribute of SchwarzeneggerLogger."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Logger."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static Logger getInstanceLogger() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (singleInstance \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            singleInstance \u003d new SchwarzeneggerLogger();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return singleInstance.logger;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 52
    }
  },
  {
    "path": "src/main/java/models/PastRecordList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.SchwIoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import storage.workout.WorkOutManagerStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A singleton class representing list of past records."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class PastRecordList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static PastRecordList singlePastFile \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static List\u003cPastWorkoutSessionRecord\u003e pastFiles;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    WorkOutManagerStorage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs PastRecordList object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private PastRecordList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage \u003d new WorkOutManagerStorage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.init();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            pastFiles \u003d storage.readPastRecords();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"Workout records loaded.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (SchwIoException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"Workout records cannot be loaded.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.println(\"got bug\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets instance of PastRecordList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Instance of PastRecordList."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static PastRecordList getInstance() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (singlePastFile \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            singlePastFile \u003d new PastRecordList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return singlePastFile;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Clears all the local storage file and past records."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred writing to file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void clear() throws SchwIoException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        while (pastFiles.size() !\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            delete(1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.WARNING, \"Record is cleared.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Deletes a file and its past record at a given index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param index Index of the file to be cleared."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred while writing to file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void delete(int index) throws SchwIoException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord deletedRecord;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        deletedRecord \u003d pastFiles.get(index - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        pastFiles.remove(index - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        File myFile \u003d new File(deletedRecord.getFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        myFile.delete();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.writePastRecords(pastFiles);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Record is deleted.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Searches based on conditions and returns a string representation of all the records"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * that satisfies the condition."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args String of user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return String representation of all the records that satisfies the condition."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String search(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e conditions \u003d parseSearchConditions(args);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cPastWorkoutSessionRecord\u003e result \u003d pastFiles.stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .filter(conditions.stream().reduce(x -\u003e true, Predicate::and))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String info \u003d pastFiles.size() + \"  records are found:\" + LS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (PastWorkoutSessionRecord wsr : result) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String row \u003d String.format(\"%-8s\", index) + wsr.toString() + LS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            info +\u003d row;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        info \u003d info.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Search completed.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Edits a file and its past record at a given index."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param index Index of the file to be edited"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred while reading or writing to file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String edit(int index) throws SchwIoException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord editedRecord;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        editedRecord \u003d pastFiles.get(index - 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord newRecord \u003d editedRecord.edit();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        pastFiles.set(index - 1, newRecord);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.writePastRecords(pastFiles);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Edit completed.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return newRecord.getFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Adds a new file and records."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param tags Tags on the new record."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred while reading or writing to file."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String add(ArrayList\u003cString\u003e tags) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String newFilePath \u003d storage.createfile();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord newRecord \u003d new PastWorkoutSessionRecord(newFilePath, tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        pastFiles.add(newRecord);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        storage.writePastRecords(pastFiles);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Add completed.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return newFilePath;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Lists all records."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Array of user\u0027s input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurred while reading file."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String list(String[] args) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String info \u003d \"You have \" + pastFiles.size() + \" records:\" + LS;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (PastWorkoutSessionRecord wsr : pastFiles) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String row \u003d String.format(\"%-8s\", index) + wsr.toString() + LS;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            info +\u003d row;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            index +\u003d 1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        info \u003d info.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"List completed.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return info;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 41,
      "wgzesg": 119
    }
  },
  {
    "path": "src/main/java/models/PastWorkoutSessionRecord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class PastWorkoutSessionRecord implements Comparable\u003cPastWorkoutSessionRecord\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final LocalDateTime creationTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private LocalDateTime lastEditTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final ArrayList\u003cString\u003e tags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructor of a new PastWorkoutSessionRecord."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param filePath File path of where the records of the session are stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param tags Tags attached to this session."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord(String filePath, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        creationTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        lastEditTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord(String filePath, LocalDateTime creationTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                                    LocalDateTime lastEditTime, ArrayList\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.creationTime \u003d creationTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.lastEditTime \u003d lastEditTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Checks if this record contains all the given tag."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param tgs list of tags specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return True if all contained; otherwise false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean containsAll(ArrayList\u003cString\u003e tgs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return tags.containsAll(tgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Checks if this record is created on a given date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param date list of tags specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return True if it is created on that day; otherwise false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean isCreatedOn(LocalDate date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return date.equals(creationTime.toLocalDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return String.format(\"%-15s %s\", creationTime.toLocalDate(), tags.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public int compareTo(PastWorkoutSessionRecord o) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (creationTime.isBefore(o.creationTime)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (!(o instanceof PastWorkoutSessionRecord)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return creationTime.equals(((PastWorkoutSessionRecord) o).creationTime)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0026\u0026 lastEditTime.equals(((PastWorkoutSessionRecord) o).lastEditTime)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                \u0026\u0026 tags.equals(((PastWorkoutSessionRecord) o).tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Updates last edited time when edited."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A new PastWorkoutSessionRecord with updated lastEdit time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public PastWorkoutSessionRecord edit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return new PastWorkoutSessionRecord(filePath, creationTime, LocalDateTime.now(), this.tags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 26,
      "tienkhoa16": 11,
      "wgzesg": 53
    }
  },
  {
    "path": "src/main/java/profile/Constants.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static ui.CommonUi.LS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * Constants used in profile package."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Constants {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String ADD_PROFILE_FORMAT \u003d \"add /n [YOUR_NAME] /a [YOUR_AGE] /h [YOUR_HEIGHT] \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"/w [YOUR_WEIGHT] /e [YOUR_EXPECTED_WEIGHT]\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int AGE_LOWER_BOUND \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int AGE_UPPER_BOUND \u003d 123;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_ARGS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_SPLIT_LIMIT \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int COMMAND_TYPE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String DATA_FILE \u003d \"profile.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String DATA_FOLDER \u003d \"saves\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EDIT_PROFILE_FORMAT \u003d \"edit \u003c/n [YOUR_NAME]\u003e \u003c/a [YOUR_AGE]\u003e \u003c/h [YOUR_HEIGHT]\u003e \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"\u003c/w [YOUR_WEIGHT]\u003e \u003c/e [YOUR_EXPECTED_WEIGHT]\u003e\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int EXAMPLE_AGE \u003d 30;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_BMI \u003d \"32.0 (Obesity Class 1)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double EXAMPLE_EXPECTED_WEIGHT \u003d 100;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int EXAMPLE_HEIGHT \u003d 188;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_NAME \u003d \"Schwarzenegger\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double EXAMPLE_WEIGHT \u003d 113;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String GREEDY_WHITE_SPACE \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int HEIGHT_LOWER_BOUND \u003d 63;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final int HEIGHT_UPPER_BOUND \u003d 231;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String HELP_FORMAT \u003d \"%-8s - %s\" + LS + \"%-8s %s\" + LS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_CREATE_PROFILE_ACK \u003d \"Got it. Here\u0027s a confirmation of your profile:\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"%s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_DELETE_PROFILE \u003d \"Alright! I\u0027ve deleted your profile.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_EDIT_PROFILE_ACK \u003d \"Yay. Your profile is edited successfully. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Here\u0027s your new profile:\" + LS + \"%s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_END \u003d \"Returning to Main Menu...\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_PROFILE_EXIST \u003d \"There\u0027s currently a profile in the database. \" + LS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please delete it using \\\"delete\\\" command before adding a new one.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_PROFILE_NOT_EXIST \u003d \"There\u0027s no profile to %s. \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please add a new one using \\\"add\\\" command :D\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_VIEW_PROFILE \u003d \"Here\u0027s your profile:\" + LS + \"%s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_WELCOME_EXISTING_USER \u003d \"Welcome back to Schwarzenegger, %s!\" + LS"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"How can I help you today?\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_WELCOME_NEW_USER \u003d \"Welcome new user to Schwarzenegger! :D\" + LS"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"Please add your profile using \\\"add\\\" command under Profile Menu.\" + LS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"For more information on command syntax, please type \\\"help\\\".\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROFILE_FOLDER \u003d \"profile\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROFILE_STRING_REPRESENTATION \u003d \"\\tName: %s\" + LS + \"\\tAge: %d\" + LS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"\\tHeight: %d cm\" + LS + \"\\tWeight: %.1f kg\" + LS + \"\\tExpected Weight: %.1f kg\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"\\tYour BMI: %s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String EXAMPLE_PROFILE_STRING \u003d String.format(PROFILE_STRING_REPRESENTATION, EXAMPLE_NAME,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            EXAMPLE_AGE, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_BMI);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String PROJECT_ROOT \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final Path PATH_TO_PROFILE_FOLDER \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, PROFILE_FOLDER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final Path PATH_TO_PROFILE_FILE \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, PROFILE_FOLDER, DATA_FILE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String SAD_FACE \u003d \":(  OOPS!!! \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d SAD_FACE + \"Sorry, but I don\u0027t know what that means.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_SAVE_FORMAT \u003d SAD_FACE + \"Save format in \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"saves\\\\profile\\\\profile.txt is invalid.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_AGE \u003d String.format("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SAD_FACE + \"Please input an integer from %d to %d for age.\", AGE_LOWER_BOUND, AGE_UPPER_BOUND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_HEIGHT \u003d String.format("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SAD_FACE + \"Please input an integer from %d to %d for height.\", HEIGHT_LOWER_BOUND, HEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_LOADING_ERROR \u003d SAD_FACE + \"An error has occurred while loading data.\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"%s\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_SAVING_ERROR \u003d SAD_FACE + \"An error has occurred while saving data.\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + LS + \"%s\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_REDUNDANT_PARAM \u003d SAD_FACE + \"%s command does not take parameters.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double WEIGHT_LOWER_BOUND \u003d 2.1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final double WEIGHT_UPPER_BOUND \u003d 635;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_INVALID_WEIGHT \u003d String.format("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            SAD_FACE + \"Please input a number from %.1f to %.1f for weight.\", WEIGHT_LOWER_BOUND, WEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTHING \u003d SAD_FACE + \"You haven\u0027t added any profile yet!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 77
    }
  },
  {
    "path": "src/main/java/profile/Profile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.PROFILE_STRING_REPRESENTATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Utils.checkValidProfile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that manages user profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected int age;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected int height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected double weight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected double expectedWeight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs Profile object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param name User\u0027s name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param age User\u0027s age."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param height User\u0027s height in centimeters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param weight User\u0027s weight in kilograms."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param expectedWeight User\u0027s expected weight in kilograms."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile(String name, int age, int height, double weight, double expectedWeight) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        this.expectedWeight \u003d expectedWeight;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Overrides toString method of class Object to get string presentation of Profile object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return String presentation of Profile object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assert checkValidProfile(this) : \"Profile is invalid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(PROFILE_STRING_REPRESENTATION, getName(), getAge(), getHeight(), getWeight(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                getExpectedWeight(), getBmiClassification());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s name."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s age."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s age."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s height."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s height."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public int getHeight() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s weight."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s weight."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s expected weight."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s expected weight."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public double getExpectedWeight() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return expectedWeight;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s bmi index and classification."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s bmi index and classification."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String getBmiClassification() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String classification;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        double bmiIndex \u003d weight / Math.pow((double) height / 100, 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (bmiIndex \u003c 18.5) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Underweight\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 24.9) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Normal Weight\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 29.9) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Overweight\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 34.9) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Obesity Class 1\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else if (bmiIndex \u003c\u003d 39.9) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Obesity Class 2\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            classification \u003d \"Extreme Obesity Class 3\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(\"%.1f (%s)\", bmiIndex, classification);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 116
    }
  },
  {
    "path": "src/main/java/profile/ProfileParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidAgeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidHeightException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidWeightException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_ARGS_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_SPLIT_LIMIT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_TYPE_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.GREEDY_WHITE_SPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with making sense of user\u0027s command inside Profile Session."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses and returns the Command associated with the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param userInputString User\u0027s raw input string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Size 2 array; first element is the command type and second element is the arguments string.."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public String[] parseCommand(String userInputString) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] split \u003d userInputString.trim().split(GREEDY_WHITE_SPACE, COMMAND_SPLIT_LIMIT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandType \u003d split[COMMAND_TYPE_INDEX].toLowerCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandArgs \u003d (split.length \u003d\u003d COMMAND_SPLIT_LIMIT ? split[COMMAND_ARGS_INDEX] : EMPTY_STRING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return new String[]{commandType, commandArgs};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts command tags from user input to get option indicator and parsed option."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param command Command being executed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param commandArgs User\u0027s input arguments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidCommandFormatException If the input command has invalid format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static HashMap\u003cString, String\u003e extractCommandTagAndInfo(String command, String commandArgs)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (!commandArgs.contains(\"/\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandFormatException(command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        int startIndex \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        int endIndex \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            while (commandArgs.indexOf(\"/\", startIndex) !\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                endIndex \u003d commandArgs.indexOf(\"/\", startIndex + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                if (endIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    endIndex \u003d commandArgs.length();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                String parsedOption \u003d commandArgs.substring(startIndex + 2, endIndex).trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                String optionIndicator \u003d commandArgs.substring(startIndex, startIndex + 2).trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                parsedParams.put(optionIndicator, parsedOption);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                startIndex \u003d endIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return parsedParams;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidCommandFormatException(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts name from parsed HashMap."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s name."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String extractName(HashMap\u003cString, String\u003e parsedParams) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return parsedParams.get(\"/n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts age from parsed HashMap."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s age."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidAgeException If input age is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static int extractAge(HashMap\u003cString, String\u003e parsedParams) throws InvalidAgeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            int age \u003d Integer.parseInt(parsedParams.get(\"/a\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidAge(age)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidAgeException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return age;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidAgeException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts height from parsed HashMap."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s height."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidHeightException If input height is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static int extractHeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidHeightException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            int height \u003d Integer.parseInt(parsedParams.get(\"/h\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidHeight(height)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidHeightException();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return height;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidHeightException();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts weight from parsed HashMap."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s weight."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidWeightException If input weight is invalid."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static double extractWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double weight \u003d Double.parseDouble(parsedParams.get(\"/w\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidWeight(weight)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidWeightException();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return weight;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Extracts expected weight from parsed HashMap."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param parsedParams HashMap containing option indicator and parsed option pairs."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User\u0027s expected weight."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidWeightException If input expected weight is invalid."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static double extractExpectedWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            double expectedWeight \u003d Double.parseDouble(parsedParams.get(\"/e\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (!Utils.checkValidWeight(expectedWeight)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidWeightException();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return expectedWeight;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidWeightException();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 163
    }
  },
  {
    "path": "src/main/java/profile/ProfileSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_ARGS_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.COMMAND_TYPE_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that is responsible for interacting with user when he/she enters Profile Session."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileSession {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private CommonUi ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ProfileStorage storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private ProfileParser profileParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private CommandLib cl;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs ProfileSession object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ProfileSession() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"initialising ProfileSession object\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        storage \u003d new ProfileStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        profileParser \u003d new ProfileParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Runs Profile Session."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        runCommandLoopTillEnd();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Starts up Profile Session with welcome message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"starting profile session\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s command and executes repeatedly until user requests to exit Profile Session."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void runCommandLoopTillEnd() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"executing profile session loop\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            String userCommand \u003d ui.getCommand(\"Profile Menu\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            String[] commParts \u003d profileParser.parseCommand(userCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                processCommand(commParts);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                if (e instanceof EndException) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing uncaught exception\", e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger.log(Level.INFO, \"exiting profile session loop\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void processCommand(String[] commParts) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commParts[COMMAND_TYPE_INDEX]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandResult result \u003d command.execute(commParts[COMMAND_ARGS_INDEX], storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.showToUser(result.getFeedbackMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 88
    }
  },
  {
    "path": "src/main/java/profile/Utils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class containing utility methods used in Profile Menu."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class Utils {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input when creating profile is valid."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User Profile object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input profile is valid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidProfile(Profile profile) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (checkValidName(profile.getName())"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidAge(profile.getAge())"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidHeight(profile.getHeight())"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidWeight(profile.getWeight())"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                \u0026\u0026 checkValidWeight(profile.getExpectedWeight()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input name is not empty string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param name User\u0027s input name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input name is valid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidName(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return !name.isEmpty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input age is in the valid range"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link AGE_LOWER_BOUND} and {@link AGE_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param age User\u0027s input age."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input age is valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidAge(int age) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (age \u003e\u003d Constants.AGE_LOWER_BOUND \u0026\u0026 age \u003c\u003d Constants.AGE_UPPER_BOUND);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input height is in the valid range"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link HEIGHT_LOWER_BOUND} and {@link HEIGHT_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param height User\u0027s input height."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input height is valid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidHeight(int height) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (height \u003e\u003d Constants.HEIGHT_LOWER_BOUND \u0026\u0026 height \u003c\u003d Constants.HEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Verifies if user\u0027s input weight is in the valid range"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * (between {@link WEIGHT_LOWER_BOUND} and {@link WEIGHT_UPPER_BOUND} inclusive)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param weight User\u0027s input weight."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Whether input weight is valid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static boolean checkValidWeight(double weight) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return (weight \u003e\u003d Constants.WEIGHT_LOWER_BOUND \u0026\u0026 weight \u003c\u003d Constants.WEIGHT_UPPER_BOUND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/Constant.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Constant {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_DIET \u003d \"diet\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_PROFILE \u003d \"profile\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_WORKOUT \u003d \"workout\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_NEW \u003d \"new\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_END \u003d \"end\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_SEARCH \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_WRONG \u003d \"wrong\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static final String COMMAND_WORD_MEAL \u003d \"meal\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String WORKOUTSESSIONHISTORY \u003d \"saves/workout/history.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String WORKOUTSESSIONFOLDER \u003d \"saves/workout/workoutSession/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String DIETSESSIONHISTORY \u003d \"saves/diet/history.json\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static final String DIETSESSIONFOLDER \u003d \"saves/diet/dietSession/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String LOG_FILE_PATH \u003d \"logs/SchwarzeneggerLogs.log\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8,
      "tienkhoa16": 1,
      "wgzesg": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.ExceptionHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.profile.ProfileStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_WELCOME_EXISTING_USER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.MESSAGE_WELCOME_NEW_USER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static seedu.duke.Constant.COMMAND_WORD_END;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * The Schwarzenegger program implements an application that keeps track of the user\u0027s gym and diet record."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private CommandLib cl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private CommonUi ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Logger logger;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Main entry-point for the java.seedu.duke.Duke application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param args Unused in Schwarzenegger."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Runs Schwarzenegger."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        runCommandLoopTillEnd();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        end();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Starts up Duke with greeting message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            profile \u003d new ProfileStorage().loadData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing uncaught exception\", e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            ui.showToUser(MESSAGE_WELCOME_NEW_USER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            ui.showToUser(String.format(MESSAGE_WELCOME_EXISTING_USER, profile.getName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Gets user\u0027s command and executes repeatedly until user requests to end Schwarzenegger."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void runCommandLoopTillEnd() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String response \u003d ui.getCommand(\"Main Menu\").trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] dummy \u003d {};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        while (!response.equals(COMMAND_WORD_END)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Command cm \u003d cl.getCommand(response);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                CommandResult rs \u003d cm.execute(dummy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing uncaught exception\", e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            response \u003d ui.getCommand(\"Main Menu\").trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Ends Schwarzenegger."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void end() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ui.showToUser(\"Bye, you have exited the Schwarzenegger.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 3,
      "tienkhoa16": 76,
      "wgzesg": 18,
      "-": 9
    }
  },
  {
    "path": "src/main/java/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Copyright (C) 2011 Google Inc."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *      http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003ch3\u003eSerialization and deserialization\u003c/h3\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * In order to serialize and deserialize a polymorphic object,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * you must specify the base type explicitly."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Diamond diamond \u003d new Diamond();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   String json \u003d gson.toJson(diamond, Shape.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * And then:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": " *   Shape shape \u003d gson.fromJson(json, Shape.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final String typeFieldName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final boolean maintainType;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.baseType \u003d baseType;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * the type field name."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * sensitive."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            throw new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        labelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        subtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *     have already been registered on this type adapter."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        if (type.getRawType() !\u003d baseType) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        final Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        final Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            TypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            labelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            subtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            @Override public R read(JsonReader in) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonElement labelJsonElement;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                String label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + baseType + \" subtype named \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                return delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            @Override public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                Class\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                final String label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    Streams.write(jsonObject, out);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                JsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                if (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                            + \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                clone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                for (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                    clone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                Streams.write(clone, out);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }.nullSafe();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 280
    }
  },
  {
    "path": "src/main/java/storage/diet/DietStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.Reader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class holds the data loaded during runtime and read and writes to the local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class DietStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"saves/diet/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static Gson gson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static File file \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Initialise the database with locally stored data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void init(String filePath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"creating diet session save file\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String fileName \u003d \"saves/diet/\" + filePath + \".json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file \u003d new File(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Writes the content in dietSession to a local file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void writeToStorageDietSession(String filePath, DietSession dietSession) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"saving file to location\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(FILEPATH + filePath + \".json\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson.toJson(dietSession, writer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        logger.log(Level.INFO, \"file saving complete\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    public DietSession readDietSession(String filePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietSession dietSession;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        dietSession \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            File file \u003d new File(System.getProperty(\"user.dir\") + \"/\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                    + FILEPATH + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Reader reader \u003d new FileReader(file.getPath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            dietSession \u003d gson.fromJson(reader, DietSession.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"There seems to be no file\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            logger.log(Level.WARNING, \"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dietSession;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 63,
      "tienkhoa16": 5,
      "CFZeon": 18
    }
  },
  {
    "path": "src/main/java/storage/profile/ProfileStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.LoadingException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.SavingException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Utils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.PATH_TO_PROFILE_FILE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.PATH_TO_PROFILE_FOLDER;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that saves and loads user profile data on local hard disk."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileStorage {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Constructs Storage object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public ProfileStorage() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Loads user profile from data file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return User profile."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile loadData() throws LoadingException, InvalidSaveFormatException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile profile \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        if (Files.exists(PATH_TO_PROFILE_FOLDER)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.INFO, \"starting to decode profile data\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                profile \u003d decodeProfile(PATH_TO_PROFILE_FILE.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                assert profile !\u003d null : \"profile should not be null\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.INFO, \"finishing profile data decoding\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                createDataFile(PATH_TO_PROFILE_FILE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            createDataFolder(PATH_TO_PROFILE_FOLDER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            createDataFile(PATH_TO_PROFILE_FILE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return profile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Decodes user profile save data to a profile object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param filePath Path to data file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Profile object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws InvalidSaveFormatException If the saving format is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws FileNotFoundException If data file is not found."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public Profile decodeProfile(String filePath) throws InvalidSaveFormatException, FileNotFoundException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"decoding profile data\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Type profileType \u003d new TypeToken\u003cProfile\u003e() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }.getType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Profile profile \u003d gson.fromJson(reader, profileType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile \u003d\u003d null || !Utils.checkValidProfile(profile)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing invalid profile data\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                throw new InvalidSaveFormatException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            return profile;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (JsonSyntaxException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing invalid syntax in data file\", e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new InvalidSaveFormatException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates data file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pathToDataFile Path to data file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void createDataFile(Path pathToDataFile) throws LoadingException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Files.createFile(pathToDataFile);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"created data/profile/profile.txt\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new LoadingException(e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates data folder."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pathToDataFolder Path to data folder."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws LoadingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void createDataFolder(Path pathToDataFolder) throws LoadingException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            Files.createDirectories(pathToDataFolder);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"created data/profile\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new LoadingException(e.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Saves user profile data to hard disk after profile changes."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param profile User\u0027s profile."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SavingException If there are failed or interrupted I/O operations."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void saveData(Profile profile) throws SavingException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"starting to save profile data\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileWriter fw \u003d new FileWriter(PATH_TO_PROFILE_FILE.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            if (profile \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                fw.write(EMPTY_STRING);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                gson.toJson(profile, fw);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                fw.flush();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.INFO, \"finishing data saving\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            logger.log(Level.WARNING, \"processing IOException while saving data\", e);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            throw new SavingException(e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 154
    }
  },
  {
    "path": "src/main/java/storage/workout/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": " * This class holds the data loaded during runtime and read and writes to the local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final String FILEPATH \u003d \"./saves/workout\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private static Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static File file \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Initialise the database with locally stored data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void initialise(String filePath) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        /*RuntimeTypeAdapterFactory\u003cTask\u003e taskAdapterFactory \u003d RuntimeTypeAdapterFactory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .of(Task.class, \"type\", true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .registerSubtype(ToDo.class, \"Todo\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .registerSubtype(Deadline.class, \"Deadline\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .registerSubtype(Event.class, \"Event\");*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        //creates the file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String fileName \u003d \"saves/workout/\" + Integer.toString(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file \u003d new File(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Write the content in TaskList to a local file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * If the local file is not found. It creates the relevant file and folder."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws IOException If director or file cannot be created."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void writeToStorage(String filePath, ExerciseList exerciseList) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        gson.toJson(exerciseList.exerciseList, writer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.flush();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public void readFileContents(String filePath, ExerciseList exerciseList) throws FileNotFoundException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Type taskListType \u003d new TypeToken\u003cArrayList\u003cExercise\u003e\u003e() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }.getType();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        exerciseList.exerciseList.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            exerciseList.exerciseList.addAll(gson.fromJson(reader, taskListType));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            System.out.printf(\"\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 64,
      "yujinyang1998": 15
    }
  },
  {
    "path": "src/main/java/storage/workout/WorkOutManagerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package storage.workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.workoutmanager.SchwIoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import seedu.duke.Constant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static ui.workout.workoutmanager.WorkoutManagerUi.LOADINGFILE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkOutManagerStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * This list contains all the past record files\u0027 file name and some other relevant info."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * It is saved in a file called history.json."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Each time it initialises, it will read history.json file and save it to this list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Each time adding/removing record will update this list and write again to local storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private Gson gson;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * This variable keeps track of file name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * It should be replaced with something else,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * TODO:e.g. a hashcode that can identify each file distinctly."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private int recordCount \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        gson \u003d new GsonBuilder().setPrettyPrinting().create();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Reads all past records."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A list of PastWorkoutSessionRecord."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error in reading the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public ArrayList\u003cPastWorkoutSessionRecord\u003e readPastRecords() throws SchwIoException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Start loading files\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(LOADINGFILE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPastWorkoutSessionRecord\u003e pastFiles;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(Constant.WORKOUTSESSIONHISTORY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Type taskListType \u003d new TypeToken\u003cArrayList\u003cPastWorkoutSessionRecord\u003e\u003e() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        }.getType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            pastFiles \u003d gson.fromJson(reader, taskListType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"File is not found.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            createMetaFile(Constant.WORKOUTSESSIONHISTORY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        if (pastFiles \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            pastFiles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assert (pastFiles !\u003d null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Loading completed\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return pastFiles;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Writes all past records to local storage."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param pastFiles The list of records to be stored."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurs in writing to file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public void writePastRecords(List\u003cPastWorkoutSessionRecord\u003e pastFiles) throws SchwIoException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"Saving the changes...\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(Constant.WORKOUTSESSIONHISTORY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        FileWriter writer;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer \u003d new FileWriter(file.getPath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            gson.toJson(pastFiles, writer);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer.flush();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"Error occured when saving the progress.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new SchwIoException(\"Error occured when saving the progress...\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.info(\"All changes saved.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        recordCount \u003d pastFiles.size();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private void createMetaFile(String path) throws SchwIoException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"File cannot be created at \" + path + \".\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new SchwIoException(\"The local storage file cannot be created at \" + path);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Creates a new file to store a new workout session data."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return File path of new created file"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwIoException If error occurs in creating the file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String createfile() throws SchwIoException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String newFilePath \u003d Constant.WORKOUTSESSIONFOLDER + recordCount + \".json\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        File file \u003d new File(newFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return newFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.info(\"File is not created at \" + newFilePath + \".\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            throw new SchwIoException(\"The local storage file cannot be created at \" + newFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 60,
      "tienkhoa16": 15,
      "wgzesg": 54
    }
  },
  {
    "path": "src/main/java/ui/CommonUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EMPTY_STRING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.GREEDY_WHITE_SPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HELP_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class CommonUi {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String LINE_PREFIX \u003d \"\\t \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static final String LS \u003d System.lineSeparator() + LINE_PREFIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String HORIZONTAL_LINE \u003d LINE_PREFIX"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + \"____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    protected static final String MESSAGE_FORMAT_GENERAL \u003d HORIZONTAL_LINE + LS + \"%s\" + System.lineSeparator()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            + HORIZONTAL_LINE + System.lineSeparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Shows a message to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param result Message to be displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public void showToUser(String result) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        System.out.println(String.format(MESSAGE_FORMAT_GENERAL, result));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static void showUser(String result) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.println(String.format(MESSAGE_FORMAT_GENERAL, result));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    public static String helpFormatter(String commandName, String commandFormat, String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return String.format(HELP_FORMAT, commandName, commandFormat, EMPTY_STRING, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * Formatter to get a input from user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @param menuName current menu name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     * @return user input in a string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public String getCommand(String menuName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        System.out.print(menuName + \" \u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String inputLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        // Silently consume all blank lines"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        while (inputLine.trim().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            System.out.print(menuName + \" \u003e\u003e\u003e\u003e\u003e \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            inputLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        return inputLine.trim().replaceAll(GREEDY_WHITE_SPACE, \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 1,
      "tienkhoa16": 28,
      "wgzesg": 25
    }
  },
  {
    "path": "src/main/java/ui/diet/dietmanager/DietManagerUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietManagerUi extends CommonUi {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static CommonUi printer \u003d new CommonUi();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printOpening() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        showUser(\"You\u0027re now in diet manager!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printBye() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        showUser(\"Exiting diet manager!!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Extracts out date and time by looking for date strings in YYYY-MM-DD format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @param input date string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @return date in MMM dd yyyy if the user inputs date in YYYY-MM-DD format;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     *         else returns original string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * @throws DateTimeParseException if the date string input is not a valid date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String extractDate(String input) throws DateTimeParseException, IllegalStateException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String dateString \u003d input.split(\"/t\")[0].split(\" \", 2)[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(dateString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            boolean isValidDate \u003d matcher.find();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            String match \u003d matcher.group();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return LocalDate.parse(match).format(DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            showToUser(\"I do not understand your date input!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            showToUser(\"It looks like there is no date input\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        showToUser(\"I\u0027ve replaced it with today\u0027s date.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return dtf.format(now);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String extractMeal(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            return input.split(\"/t\")[1].trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            showToUser(\"Please specify your diet session tag, i.e. breakfast, lunch, dinner\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "            System.out.println(\"It looks like there\u0027s no input after /t\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        showToUser(\"Session is tagged as unspecified.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return \"unspecified\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"List\", \"list\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Show all past diet session\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Meal\", \"meal /d date /t tag\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Create a new diet session\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Delete\", \"delete x\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Delete the diet session indexed at x\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Edit\", \"edit x\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Edit the diet session indexed at x\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Clear all past diet sessions\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Go back to main menu\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printer.showToUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 76,
      "tienkhoa16": 1,
      "CFZeon": 4
    }
  },
  {
    "path": "src/main/java/ui/diet/dietsession/DietSessionUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietSessionUi extends CommonUi {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static CommonUi printer \u003d new CommonUi();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Add\", \"add food name /c calories\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Add a new food item\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"List\", \"list\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Show all food items\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Delete\", \"delete x\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Delete the food item indexed at x\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"Clear\", \"clear\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Clear all food items\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        helpMessage.append(helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Go back to the diet manager menu.\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        printer.showToUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printOpening() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Starting Diet Session!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void printExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"you have exited Diet Session.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 38,
      "tienkhoa16": 1
    }
  },
  {
    "path": "src/main/java/ui/profile/ProfileUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " * A class that deals with interactions with user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "public class ProfileUi extends CommonUi {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 9
    }
  },
  {
    "path": "src/main/java/ui/workout/workoutmanager/WorkoutManagerUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class WorkoutManagerUi extends CommonUi {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printOpening() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Let\u0027s manage your workout sessions!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printBye() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Bye!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printStartLoading() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.out.println(\"Loading history records...\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String CLEAR_SUCCESS \u003d \"You have cleared all records!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String CLEAR_ABORTED \u003d \"You have aborted the action!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String DELETE_SUCCESS \u003d \"You have deleted that record!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String EDIT_SUCCESS \u003d \"Congratulations! You have finished today\u0027s workout!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String NEW_SUCCESS \u003d \"Congratulations! You have finished today\u0027s workout!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String COMMAND_NOT_FOUND \u003d \"The command not recognised!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String STARTNEWSESSION \u003d \"You have started a new workout session!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String LOADINGFILE \u003d \"Loading history records...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String MESSAGE_NOT_A_NUMBER \u003d \"Index must be a number. Your input is not a number!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String MESSAGE_INSUFFICIENT_ARGUMENT \u003d \"Insufficient arguments are given!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static String MESSAGE_OUT_OF_ARRAY \u003d \"The record specified is not found. Please check the index!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 17,
      "tienkhoa16": 1,
      "wgzesg": 14
    }
  },
  {
    "path": "src/main/java/ui/workout/workoutsession/WorkoutSessionUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package ui.workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class WorkoutSessionUi extends CommonUi {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private static CommonUi printer \u003d new CommonUi();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void printError() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"There is an error, please restart the session\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void addFormatError() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"Wrong format, please enter in the format: \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"\\t add [workout] /n [number of sets] /w \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                + \"[weight]\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void inputNotRecognisedError() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"Command not recognised.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void emptyListError() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"List is empty. Please enter something.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void deleteFormatError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"Wrong format, please enter in the format: delete [move ID]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void deleteIndexError() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"Index does not exist. Please refer to the list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void printHelp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        StringBuilder helpMessage \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"Add\", \"add [name of move] /n [number of repetitions] /w [weight]\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                \"Adds a new workout.\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"List\", \"list\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                \"Show all workouts in this current session.\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"Delete\", \"delete [move ID]\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                \"Deletes the workout according to the number in the list.\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"Search\", \"search [name of move]\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                \"Shows a list of workouts that match the entered workout.\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        helpMessage.append(helpFormatter(\"End\", \"end\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                \"Go back to the workout menu.\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(helpMessage.toString().trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void emptyInputError() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        System.out.println(\"Please enter something.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void searchInputError() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"Wrong format, please enter in the format: search [name of move]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static void searchResultsEmpty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        printer.showToUser(\"No matching result has been found.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 4,
      "yujinyang1998": 56,
      "tienkhoa16": 1
    }
  },
  {
    "path": "src/main/java/workout/DateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dtFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HH:mm\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HH:mm\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd HHmm\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd HHmm\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final List\u003cDateTimeFormatter\u003e dFormaters \u003d Arrays.asList("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyyMMdd\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            DateTimeFormatter.ofPattern(\"yyyy MM dd\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses a given string following one of the accepted format into date-time format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param targetString String input to be parsed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return Parsed result in the form of LocalDateTime or null if no value parsing is found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static LocalDateTime parseDate(String targetString) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dtFormaters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDateTime.parse(targetString, dtf);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (DateTimeFormatter dtf : dFormaters) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return LocalDate.parse(targetString, dtf).atStartOfDay();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 3,
      "wgzesg": 48
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/ExitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class ExitException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public ExitException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 8
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/WorkoutManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.EndException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutmanager.WorkoutManagerUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final CommandLib cl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private final WorkoutManagerUi ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public WorkoutManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Initialised workout manager command library\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ui \u003d new WorkoutManagerUi();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Starts a workout manager. Goes into a REPL until \u0027end\u0027 command is given."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void start() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        logger.log(Level.INFO, \"Entered workout manager\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        WorkoutManagerUi.printOpening();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String command \u003d ui.getCommand(\"Workout Manager\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            logger.log(Level.INFO, \"Received input\" + command);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            String[] commParts \u003d WorkoutManagerParser.parse(command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                processCommand(commParts);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (EndException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                logger.log(Level.INFO, \"exiting workout manager\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            } catch (SchwarzeneggerException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                ui.showToUser(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private void processCommand(String[] commands) throws SchwarzeneggerException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commands[0]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandResult result \u003d command.execute(Arrays.copyOfRange(commands, 1, commands.length));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ui.showToUser(result.getFeedbackMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 25,
      "tienkhoa16": 14,
      "wgzesg": 20
    }
  },
  {
    "path": "src/main/java/workout/workoutmanager/WorkoutManagerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import workout.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutManagerParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final int NOTHING \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final int TAG \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    private static final int DATE \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses user inputs into single words."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param comm User\u0027s raw input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return An array of strings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static String[] parse(String comm) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return comm.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses user input into a list of tags."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param arr User inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A list of tags."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static ArrayList\u003cString\u003e parseTags(String[] arr) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (!arr[0].equals(\"/t\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (!result.contains(arr[i])) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    result.add(arr[i]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Parses user input into a list of predicates which will be used as search conditions."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @param arr User input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @return A list of predicate which will be used as search conditions."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    public static ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e parseSearchConditions(String[] arr) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        int lookingFor \u003d NOTHING;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (String s : arr) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            if (s.equals(\"/t\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                lookingFor \u003d TAG;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } else if (s.equals(\"/d\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                lookingFor \u003d DATE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } else if (lookingFor \u003d\u003d TAG) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                System.out.println(\"adding a tag\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                tags.add(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            } else if (lookingFor \u003d\u003d DATE) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                LocalDate finalDate \u003d DateParser.parseDate(s).toLocalDate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                if (finalDate !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                    test.add(x -\u003e x.isCreatedOn(finalDate));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        test.add(x -\u003e x.containsAll(tags));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        return test;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 10,
      "tienkhoa16": 9,
      "wgzesg": 58
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/WorkoutSession.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import logger.SchwarzeneggerLogger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import storage.workout.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.CommonUi;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import workout.workoutsession.exercise.ExerciseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutSession {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private String filePath \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private boolean[] endWorkoutSession;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public ExerciseList exerciseList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private transient CommandLib cl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private CommonUi ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public WorkoutSession(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.exerciseList \u003d new ExerciseList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.endWorkoutSession \u003d new boolean[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.ui \u003d new CommonUi();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private void setEndWorkoutSessionF() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.endWorkoutSession[0] \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     * Starts workout session."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public void workoutSessionStart() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        setEndWorkoutSessionF();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        logger.log(Level.INFO, \"starting workout session\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            storage.readFileContents(filePath, exerciseList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            WorkoutSessionUi.printError();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        while (!endWorkoutSession[0]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                workoutSessionProcessCommand(ui.getCommand(\"Workout Menu \u003e Workout Session\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                WorkoutSessionUi.emptyInputError();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    private void workoutSessionProcessCommand(String input) throws NullPointerException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] commParts \u003d WorkoutSessionParser.workoutSessionParser(input.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Command command \u003d cl.getCommand(commParts[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        command.execute(commParts, exerciseList, filePath, storage, endWorkoutSession);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 29,
      "yujinyang1998": 31,
      "tienkhoa16": 5,
      "wgzesg": 5
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/WorkoutSessionParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import ui.workout.workoutsession.WorkoutSessionUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import workout.workoutsession.exercise.Exercise;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class WorkoutSessionParser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static String[] workoutSessionParser(String input) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return input.split(\" \");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static Exercise addParser(String[] input) throws NumberFormatException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        Exercise exercise \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] returnString \u003d new String[4];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 0; i \u003c returnString.length; i++) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            returnString[i] \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        int tracker \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        for (String s : input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            if (s.compareTo(\"/n\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                tracker \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (s.compareTo(\"/w\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                tracker \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (s.compareTo(\"add\") \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                tracker \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            } else if (tracker \u003d\u003d 2 || tracker \u003d\u003d 3) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                returnString[tracker] \u003d s;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                returnString[tracker] +\u003d (s + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        exercise \u003d new Exercise(returnString[1].trim(), Integer.parseInt(returnString[2]),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                Integer.parseInt(returnString[3]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return exercise;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static int deleteParser(String[] input) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        int returnInt \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            returnInt \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            WorkoutSessionUi.deleteFormatError();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return returnInt;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public static String searchParser(String[] input) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String returnString \u003d new String();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (int i \u003d 1; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            returnString +\u003d input[i];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return returnString.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 25,
      "yujinyang1998": 33
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package workout.workoutsession.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private String moveName \u003d null;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private int repetitions \u003d 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private int weight \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public Exercise(String moveName, int repetitions, int weight) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.moveName \u003d moveName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.repetitions \u003d repetitions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        return moveName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \", Repetitions:\" + repetitions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \", Weight\u003d\" + weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        return moveName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 20,
      "yujinyang1998": 7
    }
  },
  {
    "path": "src/main/java/workout/workoutsession/exercise/ExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package workout.workoutsession.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "public class ExerciseList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    public ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 7
    }
  },
  {
    "path": "src/test/java/commands/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionClear;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionCreate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionDelete;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionEdit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietmanager.DietSessionWrong;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemClear;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemHelp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemWrong;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.Help;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.ToDiet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.ToProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.ToWorkout;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.main.Wrong;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileDelete;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEdit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileEnd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.profile.ProfileWrong;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionSearch;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_dietManagerUnrecognisedCommand_returnDietSessionWrong() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof DietSessionWrong);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_listDietSession_returnListCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof DietSessionList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_deleteDietSession_returnDeleteCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DietSessionDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_newDietSession_returnNewCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"meal\") instanceof DietSessionCreate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_clearDietSession_returnClearCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof DietSessionClear);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_editDietSession_returnEditCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"edit\") instanceof DietSessionEdit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_helpDietSession_returnHelpCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof DietSessionHelp);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_DietManagerUnrecognisedCommand_returnFoodItemWrong() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof FoodItemWrong);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_listFoodItem_returnListCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof FoodItemList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_deleteFoodItem_returnDeleteCommand() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof FoodItemDelete);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_newFoodItem_returnNewCommand() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof FoodItemAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_clearFoodItem_returnClearCommand() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof FoodItemClear);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_helpFoodItem_returnHelpCommand() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof FoodItemHelp);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_WorkoutManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WrongWS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_listWS_returnListCommand() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof ListWS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_deleteWS_returnDeleteCommand() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DeleteWS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_newWS_returnNewCommand() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"new\") instanceof NewWS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_byeWS_returnByeCommand() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof ByeWS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_WorkoutSessionUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WorkoutSessionWrong);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionList_returnListCommand() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof WorkoutSessionList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionDelete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof WorkoutSessionDelete);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionAdd_returnAddCommand() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof WorkoutSessionAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionEnd_returnEndCommand() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof WorkoutSessionEnd);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionSearch_returnSearchCommand() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"search\") instanceof WorkoutSessionSearch);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_workoutSessionHelp_returnHelpCommand() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof WorkoutSessionHelp);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionAddCommand_returnProfileAdd() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof ProfileAdd);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionDeleteCommand_returnProfileDelete() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof ProfileDelete);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionEditCommand_returnProfileEdit() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"edit\") instanceof ProfileEdit);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionEndCommand_returnProfileEnd() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof ProfileEnd);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionHelpCommand_returnProfileHelp() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof ProfileHelp);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionViewCommand_returnProfileView() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"view\") instanceof ProfileView);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_profileSessionUnrecognisedCommand_returnProfileWrong() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initProfileSessionCL();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof ProfileWrong);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainHelpCommand_returnHelp() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof Help);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainDietCommand_returnToDiet() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"diet\") instanceof ToDiet);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainProfileCommand_returnToProfile() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"profile\") instanceof ToProfile);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainWorkoutCommand_returnToWorkout() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"workout\") instanceof ToWorkout);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void getCommandTest_mainUnrecognisedCommand_returnWrong() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        cl.initMainMenu();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof Wrong);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 304
    }
  },
  {
    "path": "src/test/java/diet/DietTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "package diet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import storage.diet.DietStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "public class DietTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extractDate_dateCorrectFormat_returnsDateString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(dateString, \"11-11-2020\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateWrongFormat_expectsException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-22-22 /t lunch\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e ui.extractDate(input));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateNoDate_returnsCurrentDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String outputString \u003d dtf.format(now);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(dateString, outputString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extractMeal_mealCorrectFormat_returnsMealString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String mealString \u003d ui.extractMeal(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(mealString, \"lunch\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void extract_dateNoMeal_returnsUnspecified() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String mealString \u003d ui.extractMeal(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(mealString, \"unspecified\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void toString_correctInput_returnsCorrectString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Food fd \u003d new Food(\"biscuit\", 400.00);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String output \u003d fd.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(\"biscuit with calories: 400.0\", output);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    DietStorage storage \u003d new DietStorage();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_correctInput_returnsMoreFood() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        command.execute(\"melon /c 500\", foodList, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(1, foodList.size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_correctInput_returnsFewerFood() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        command.execute(\"1\", foodList, storage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(0, foodList.size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    private static final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_noCalories_returnsWarning() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"melon\", foodList, storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Please specify your food info.\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testAdd_wrongFormatForCalories_returnsWarning() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemAdd();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"melon /c no calories\", foodList, storage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Please specify your food info.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_IndexTooLarge_returnsWarning() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(Integer.toString((foodList.size() + 4)), foodList, storage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Sorry, the index is not found.\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(outputStreamCaptor.toString().trim(), warning);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void testDelete_WrongFormatForIndex_returnsWarning() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemDelete();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"a\", foodList, storage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"Sorry, the index is not found.\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(outputStreamCaptor.toString().trim(), warning);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processCommandForDietSession_WrongCommand_returnsWarning() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Command command \u003d new FoodItemWrong();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"hahaha\", foodList, null);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"I do not understand your date input!\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"I\u0027ve replaced it with today\u0027s date.\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"Yay! You have added melon with calories: 500.0\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                + \"Sorry! It seems like you\u0027ve entered an invalid command!\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processCommandForDietManager_WrongCommand_returnsWarning() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        diet.dietmanager.command.Command command \u003d new DietSessionWrong();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        command.execute(\"hahaha\", null);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String warning \u003d \"I do not understand your date input!\\n\" +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"I\u0027ve replaced it with today\u0027s date.\\n\" +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Yay! You have added melon with calories: 500.0\\n\" +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Sorry! It seems like you\u0027ve entered an invalid command!\\n\" +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zsk612"
        },
        "content": "                \"Sorry! It seems like you\u0027ve entered an invalid command!\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(warning, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zsk612"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 149,
      "tienkhoa16": 10,
      "wgzesg": 1,
      "CFZeon": 2
    }
  },
  {
    "path": "src/test/java/diet/dietmanager/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionClear;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionCreate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionDelete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionEdit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionHelp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietmanager.DietSessionWrong;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class CommandLibTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_DietManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof DietSessionWrong);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof DietSessionList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DietSessionDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"meal\") instanceof DietSessionCreate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_clear_returnClearCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof DietSessionClear);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_edit_returnEditCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"edit\") instanceof DietSessionEdit);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_help_returnHelpCommand() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietManagerCL();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof DietSessionHelp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 7,
      "CFZeon": 57
    }
  },
  {
    "path": "src/test/java/diet/dietmanager/DietManagerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietsession.DietSessionParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import diet.dietmanager.DietManagerParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietManagerParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void parseString_ValidInput_Success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"First Second\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietManagerParser parser \u003d new DietManagerParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] expected \u003d {\"First\", \"Second\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String[] result \u003d parser.parse(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertTrue(Arrays.equals(expected, result));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 6,
      "CFZeon": 21
    }
  },
  {
    "path": "src/test/java/diet/dietsession/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemAdd;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemClear;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemDelete;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import commands.diet.dietsession.FoodItemWrong;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class CommandLibTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_DietManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof FoodItemWrong);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof FoodItemList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof FoodItemDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof FoodItemAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_clear_returnClearCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"clear\") instanceof FoodItemClear);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void get_help_returnHelpCommand() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        cl.initDietSessionCL();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof FoodItemHelp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 6,
      "CFZeon": 51
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import diet.dietsession.DietSessionParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zsk612"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processFoodName_ValidInput_Success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"Food /c 123\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String expected \u003d \"Food\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String result \u003d parser.processFoodName(input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void processFoodCalories_ValidInput_Success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"Food /c 123\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        Double expected \u003d 123.0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        double result \u003d parser.processFoodCalories(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    void parseDate_ValidInput_Success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        DietSessionParser parser \u003d new DietSessionParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDate expected \u003d LocalDate.parse(\"2020-05-04\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        String input \u003d \"04/05/2020\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        LocalDate actual \u003d parser.parseDate(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zsk612"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 31,
      "CFZeon": 12
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    static final String FILEPATH \u003d \"/saves/diet/\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void testSaveDietSession_noInput_returnsDietSession() throws FileNotFoundException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        SchwarzeneggerLogger.initSchwarzeneggerLogger();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi dietManagerUi \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietSession ds \u003d new DietSession(dietManagerUi.extractMeal(null), dietManagerUi.extractDate(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        ds.saveToFile();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertEquals(ds, storage.readDietSession(dietManagerUi.extractMeal(null) + \" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "                + dietManagerUi.extractDate(null) + \".json\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zsk612"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zsk612"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zsk612"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zsk612": 3,
      "CFZeon": 17
    }
  },
  {
    "path": "src/test/java/diet/dietsession/DietSessionUiTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "package diet.dietsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import ui.diet.dietmanager.DietManagerUi;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "public class DietSessionUiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void extractDate_dateCorrectFormat_returnsDateString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String input \u003d \"/d 2020-11-11 /t lunch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String dateString \u003d ui.extractDate(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertEquals(dateString, \"11-11-2020\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CFZeon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    void extract_dateWrongFormat_expectsException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        String input \u003d \"/d 2020-22-22 /t lunch\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        DietManagerUi ui \u003d new DietManagerUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "        assertThrows(DateTimeParseException.class, () -\u003e ui.extractDate(input));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CFZeon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CFZeon": 27
    }
  },
  {
    "path": "src/test/java/profile/ProfileParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidCommandFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.ProfileParser.extractCommandTagAndInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class ProfileParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testParseCommand_inputTwoWords_returnNonEmptyStringInSecondElement() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileParser profileParser \u003d new ProfileParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String rawUserInput \u003d \"add /n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] expectedSplit \u003d {\"add\", \"/n\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(Arrays.toString(expectedSplit),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Arrays.toString(profileParser.parseCommand(rawUserInput)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testParseCommand_inputOneWord_returnEmptyStringInSecondElement() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileParser profileParser \u003d new ProfileParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String rawUserInput \u003d \"add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String[] expectedSplit \u003d {\"add\", \"\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(Arrays.toString(expectedSplit),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                Arrays.toString(profileParser.parseCommand(rawUserInput)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testExtractCommandTagAndInfo_missingSplashInput_throwInvalidCommandFormatException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            extractCommandTagAndInfo(\"add\", \"add n Schwarzenegger\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testExtractCommandTagAndInfo_excessiveSplashInput_throwInvalidCommandFormatException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertThrows(InvalidCommandFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            extractCommandTagAndInfo(\"add\", \"add //n Schwarzenegger\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testExtractCommandTagAndInfo_validInput_returnValidParsedParams() throws InvalidCommandFormatException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/n\", \"Schwarzenegger\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/a\", \"30\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/h\", \"188\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/w\", \"113\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        parsedParams.put(\"/e\", \"100\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String command \u003d \"add\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String commandArgs \u003d \"/n Schwarzenegger /a 30 /h 188 /w 113 /e 100\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(parsedParams.toString(), extractCommandTagAndInfo(command, commandArgs).toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 63
    }
  },
  {
    "path": "src/test/java/profile/ProfileTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_AGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class ProfileTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_underweightInput_returnUnderweight() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, 54, EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"15.3 (Underweight)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_normalWeightInput_returnNormalWeight() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, 70, EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"19.8 (Normal Weight)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_overweightInput_returnOverweight() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, 100, EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"28.3 (Overweight)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_obesityClassOneInput_returnObesityClassOne() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, 113, EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"32.0 (Obesity Class 1)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_obesityClassTwoInput_returnObesityClassTwo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, 127, EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"35.9 (Obesity Class 2)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testGetBmiClassification_extremeObesityClassThreeInput_returnExtremeObesityClassThree() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, 148, EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(\"41.9 (Extreme Obesity Class 3)\", testProfile.getBmiClassification());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 48
    }
  },
  {
    "path": "src/test/java/profile/UtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.AGE_LOWER_BOUND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.AGE_UPPER_BOUND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_AGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_HEIGHT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_WEIGHT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.HEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_LOWER_BOUND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.WEIGHT_UPPER_BOUND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Utils.checkValidProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class UtilsTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_validProfile_returnTrue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile validProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(checkValidProfile(validProfile));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_ageLessThanLowerBound_returnFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, AGE_LOWER_BOUND - 1, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_ageGreaterThanUpperBound_returnFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, AGE_UPPER_BOUND + 1, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_heightLessThanLowerBound_returnFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, HEIGHT_LOWER_BOUND - 1, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_heightGreaterThanUpperBound_returnFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, HEIGHT_UPPER_BOUND + 1, EXAMPLE_WEIGHT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_weightLessThanLowerBound_returnFalse() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, WEIGHT_LOWER_BOUND - 1,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testCheckValidProfile_weightGreaterThanUpperBound_returnFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_AGE, EXAMPLE_HEIGHT, WEIGHT_UPPER_BOUND + 1,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "                EXAMPLE_EXPECTED_WEIGHT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertFalse(checkValidProfile(inValidProfile));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 70
    }
  },
  {
    "path": "src/test/java/storage/profile/ProfileStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "package storage.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.SchwarzeneggerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import exceptions.profile.InvalidSaveFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import profile.Profile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import static profile.Constants.EXAMPLE_PROFILE_STRING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "class ProfileStorageTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Tests decodeProfile method of class Storage when data from file is valid."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * @throws SchwarzeneggerException If there are exceptions while decoding data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testDecodeProfile_exampleProfileData_returnsExampleProfileString() throws SchwarzeneggerException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileStorage storage \u003d new ProfileStorage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String inputFilePath \u003d System.getProperty(\"user.dir\") + \"/src/test/java/storage/profile/exampleProfileData.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        Profile testProfile \u003d storage.decodeProfile(inputFilePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertEquals(EXAMPLE_PROFILE_STRING, testProfile.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     * Tests decodeProfile method of class Storage when data from file is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    void testDecodeProfile_invalidDataInput_throwsInvalidSaveFormatException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        ProfileStorage storage \u003d new ProfileStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        String inputFilePath \u003d System.getProperty(\"user.dir\") + \"/src/test/java/storage/profile/invalidProfileData.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertThrows(InvalidSaveFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "            storage.decodeProfile(inputFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 41
    }
  },
  {
    "path": "src/test/java/storage/profile/exampleProfileData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"name\": \"Schwarzenegger\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"age\": 30,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"height\": 188,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"weight\": 113.0,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"expectedWeight\": 100.0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/test/java/storage/profile/invalidProfileData.txt",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"name\": \"Schwarzenegger\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "  \"age\": 30,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 4
    }
  },
  {
    "path": "src/test/java/workout/DateParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class DateParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseDate_correctFormat_returnParsedDate() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.of(2020, 10, 22, 0, 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"2020/10/22\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in2 \u003d \"20201022\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in3 \u003d \"2020-10-22\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in3));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in4 \u003d \"2020 10 22\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(dt, DateParser.parseDate(in4));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseDate_wrongFormat_returnNull() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime dt \u003d LocalDateTime.of(2020, 10, 22, 0, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String in1 \u003d \"2020:10:22\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(null, DateParser.parseDate(in1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 34
    }
  },
  {
    "path": "src/test/java/workout/workoutmanager/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.WrongWS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ByeWS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.DeleteWS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.ListWS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "import commands.workout.workoutmanager.NewWS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_WorkoutManagerUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WrongWS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof ListWS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof DeleteWS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_new_returnNewCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"new\") instanceof NewWS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void get_bye_returnByeCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        cl.initWorkoutManagerCL();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof ByeWS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tienkhoa16": 10,
      "wgzesg": 39
    }
  },
  {
    "path": "src/test/java/workout/workoutmanager/WorkoutManagerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "package workout.workoutmanager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "class WorkoutManagerParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseTags_ValidInput_Success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] args \u003d {\"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d parseTags(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        expected.add(\"legs\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        expected.add(\"chest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseTags_MissingOrWrongIdentifierKey_Empty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in1 \u003d {\"/tt\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out1 \u003d parseTags(in1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in2 \u003d {\"legs\", \"/t\", \"chest\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out2 \u003d parseTags(in2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in3 \u003d {\"legs\", \"chest\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e out3 \u003d parseTags(in3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected, out3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseSearchConditions_CorrectDateTagCondition_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in1 \u003d {\"/d\", \"20201017\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in2 \u003d {\"/d\", \"20201017\", \"/t\", \"arms\"};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in3 \u003d {\"/d\", \"20201017\", \"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults3.add(t.test(record));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected3, testResults3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    void parseSearchConditions_WrongConditionFormat_EmptyChecks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in1 \u003d {\"20201017\", \"/d\"};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        String[] in2 \u003d {\"20201017\", \"arms\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wgzesg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wgzesg": 120
    }
  },
  {
    "path": "src/test/java/workout/workoutsession/CommandLibTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.CommandLib;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionAdd;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionDelete;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionEnd;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionHelp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionSearch;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import commands.workout.workoutsession.WorkoutSessionWrong;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "class CommandLibTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_WorkoutSessionUnrecognisedCommand_returnNull() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"asdf\") instanceof WorkoutSessionWrong);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_list_returnListCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"list\") instanceof WorkoutSessionList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_delete_returnDeleteCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"delete\") instanceof WorkoutSessionDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_add_returnAddCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"add\") instanceof WorkoutSessionAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_End_returnEndCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"end\") instanceof WorkoutSessionEnd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_Search_returnSearchCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"search\") instanceof WorkoutSessionSearch);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void get_help_returnHelpCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        CommandLib cl \u003d new CommandLib();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        cl.initWorkoutSessionCL();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tienkhoa16"
        },
        "content": "        assertTrue(cl.getCommand(\"help\") instanceof WorkoutSessionHelp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 58,
      "tienkhoa16": 7
    }
  },
  {
    "path": "src/test/java/workout/workoutsession/WorkoutSessionParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "package workout.workoutsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wgzesg"
        },
        "content": "import models.PastWorkoutSessionRecord;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseSearchConditions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "import static workout.workoutmanager.WorkoutManagerParser.parseTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "class WorkoutSessionParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseTags_ValidInput_Success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] args \u003d {\"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d parseTags(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        expected.add(\"legs\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        expected.add(\"chest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseTags_MissingOrWrongIdentifierKey_Empty() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in1 \u003d {\"/tt\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e out1 \u003d parseTags(in1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, out1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in2 \u003d {\"legs\", \"/t\", \"chest\"};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e out2 \u003d parseTags(in2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, out2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in3 \u003d {\"legs\", \"chest\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e out3 \u003d parseTags(in3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected, out3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseSearchConditions_CorrectDateTagCondition_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in1 \u003d {\"/d\", \"20201017\"};"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in2 \u003d {\"/d\", \"20201017\", \"/t\", \"arms\"};"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in3 \u003d {\"/d\", \"20201017\", \"/t\", \"legs\", \"chest\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        tests \u003d parseSearchConditions(in3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults3.add(t.test(record));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected3, testResults3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    void parseSearchConditions_WrongConditionFormat_EmptyChecks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2020,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                10,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                17,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                12,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "                date, date, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in1 \u003d {\"20201017\", \"/d\"};"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d parseSearchConditions(in1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults1.add(t.test(record));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected1, testResults1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        String[] in2 \u003d {\"20201017\", \"arms\"};"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        tests \u003d parseSearchConditions(in2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "            testResults2.add(t.test(record));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "        assertEquals(expected2, testResults2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yujinyang1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yujinyang1998": 119,
      "wgzesg": 1
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zsk612"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "zsk612": 1
    }
  }
]
