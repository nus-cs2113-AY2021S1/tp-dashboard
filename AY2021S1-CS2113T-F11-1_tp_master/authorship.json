[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"   \u003e Task :compileJava UP-TO-DATE"},{"lineNumber":14,"author":{"gitId":"-"},"content":"   \u003e Task :processResources NO-SOURCE"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"   \u003e Task :classes UP-TO-DATE"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   "},{"lineNumber":17,"author":{"gitId":"-"},"content":"   \u003e Task :Duke.main()"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"   \t _________________________________________________________________________________________________"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"   \t    _____        _"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"   \t   / ____|      | |"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"   \t  | (___    ___ | |__ __      __ __ _  _ __  ____ ___  _ __    ___   __ _   __ _   ___  _ __ "},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"   \t   \\___ \\  / __|| \u0027_ \\\\ \\ /\\ / // _` || \u0027__||_  // _ \\| \u0027_ \\  / _ \\ / _` | / _` | / _ \\| \u0027__|"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"   \t   ____) || (__ | | | |\\ V  V /| (_| || |    / /|  __/| | | ||  __/| (_| || (_| ||  __/| |"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"   \t  |_____/  \\___||_| |_| \\_/\\_/  \\__,_||_|   /___|\\___||_| |_| \\___| \\__, | \\__, | \\___||_|"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"   \t                                                                     __/ |  __/ |"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"   \t                                                                    |___/  |___/"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"   \t _________________________________________________________________________________________________"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   "},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"   \t _________________________________________________________________________________________________"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"   \t Welcome back to The Schwarzenegger, Khoa!"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"   \t How can I help you today?"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"   \t _________________________________________________________________________________________________"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"   "},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"   Main Menu \u003e\u003e\u003e\u003e\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"   Type `help` and press \u003ckbd\u003eEnter\u003ckbd/\u003e to see the available commands under Main Menu."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"## Build automation using Gradle"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"## Testing"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"### JUnit tests"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"* JUnit test files are placed under `src/test/java` with this project. "},{"lineNumber":48,"author":{"gitId":"-"},"content":"* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"## Checkstyle"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* A sample CheckStyle rule configuration is provided in this project."},{"lineNumber":53,"author":{"gitId":"-"},"content":"* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"## CI using GitHub Actions"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Documentation"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"`/docs` folder contains a skeleton version of the project documentation."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"Steps for publishing documentation to the public: "},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   If you are using this project template for a team project, go to the team fork on GitHub."},{"lineNumber":66,"author":{"gitId":"-"},"content":"1. Click on the `settings` tab."},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. Scroll down to the `GitHub Pages` section."},{"lineNumber":68,"author":{"gitId":"-"},"content":"1. Set the `source` as `master branch /docs folder`."},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. Optionally, use the `choose a theme` button to choose a theme for your documentation."}],"authorContributionMap":{"tienkhoa16":21,"-":48}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    implementation \u0027com.google.code.gson:gson:2.8.6\u0027"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    implementation \u0027org.apache.commons:commons-lang3:3.5\u0027"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    archiveBaseName \u003d \"[CS2113T-F11-1][TheSchwarzenegger]\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    enableAssertions \u003d true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"jar {"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"    manifest {"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"        attributes("},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"                \u0027Main-Class\u0027: \u0027seedu.duke.Duke\u0027"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"        )"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tienkhoa16":4,"wgzesg":7,"-":46}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"# The Schwarzenegger - About Us"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"Display | Name | Github Profile | Portfolio "},{"lineNumber":4,"author":{"gitId":"-"},"content":"--------|:----:|:--------------:|:---------:"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"\u003cimg src\u003d\"https://i.imgur.com/W2LwmOA.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Nguyen Tien Khoa | [Github](https://github.com/tienkhoa16) | [Portfolio](team/tienkhoa16.md)"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"\u003cimg src\u003d\"https://i.imgur.com/3pna8mw.png\" width\u003d\"100\" height\u003d\"100\"\u003e | Zeon Chua Feiyi | [Github](https://github.com/CFZeon) | [Portfolio](team/cfzeon.md)"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"\u003cimg src\u003d\"https://avatars0.githubusercontent.com/u/57080256?s\u003d400\u0026u\u003d677af6062d8d0cdeae80ee9f00b50aa01e2c4b84\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Zhang Shukai | [Github](https://github.com/zsk612) | [Portfolio](team/zsk612.md)"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"\u003cimg src\u003d\"https://i.imgur.com/1mhi7tF.jpeg\" width\u003d\"100\" height\u003d\"100\"\u003e | Yu Jinyang| [Github](https://github.com/yujinyang1998) | [Portfolio](team/yujinyang1998.md)"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"\u003cimg src\u003d\"https://avatars1.githubusercontent.com/u/53573749?s\u003d400\u0026u\u003d624be60ee5061b89cabc5c04b54795fdd4956a72\u0026v\u003d4\" width\u003d\"100\" height\u003d\"100\"\u003e | Wang Zesong | [Github](https://github.com/wgzesg) | [Portfolio](team/wgzesg.md)"}],"authorContributionMap":{"tienkhoa16":5,"wgzesg":1,"-":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"# The Schwarzenegger - Developer Guide"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":"By: `CS2113T-F11-1` Since: `2020`"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"![Supported Java versions](https://img.shields.io/badge/Java-11-blue.svg) ![Supported OS](https://img.shields.io/badge/Supported%20OS-Windows|MacOS|Linux-yellow.svg) "},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"![Java CI](https://github.com/AY2021S1-CS2113T-F11-1/tp/workflows/Java%20CI/badge.svg)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"## Table of Contents"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"1. [**Introduction**](#intro)\u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"1.1. [Background](#background)\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"1.2. [Purpose](#purpose)\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"1.3. [Scope](#scope)\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"2. [**Setting Up**](#setting-up)\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"2.1. [Prerequisites](#prerequisites)\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"2.2. [Setting up the Project in Your Computer](#setting-up-the-project-in-your-computer)\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"3. [**Design**](#design)\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"3.1. [Architecture](#architecture)\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"3.2. [Ui Component](#ui-component)\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"3.3. [Logic Component](#logic-component)\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"3.4. [Model Component](#model-component)\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"3.5. [Storage Component](#workoutSessionStorage-component)\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.5.1. [Storage for Profile](#workoutSessionStorage-for-profile)\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.5.2. [Storage for Diet](#workoutSessionStorage-for-diet)\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.5.3. [Storage for Workout](#workoutSessionStorage-for-workout)\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"4. [**Implementation**](#implementation)\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"4.1. [Main Menu-related Features](#main-menu-related-features)\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"4.2. [Profile-related Features](#profile-related-features)\u003cbr\u003e"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.1. [Adding a Profile](#adding-a-profile)\u003cbr\u003e"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.2. [Viewing a Profile](#viewing-a-profile)\u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.3. [Editing a Profile](#editing-a-profile)\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.2.4. [Deleting a Profile](#deleting-a-profile)\u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"4.3. [Diet-related Features](#diet-related-features)\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.1. [List Out All Commands](#list-out-all-commands)\u003cbr\u003e"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2. [Start Recording Diet Data](#start-recording-diet-data)\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.1. [Showing Help Message](#showing-help-message)\u003cbr\u003e"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.2. [Adding Food Items for the Current Diet](#adding-food-items-for-the-current-diet)\u003cbr\u003e"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.3. [Listing Data for the Current Diet](#listing-data-for-the-current-diet)\u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.4. [Deleting Data from the Current Diet](#deleting-data-from-the-current-diet)\u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.5. [Clearing Data from the Current Diet](#clearing-data-from-the-current-diet)\u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.2.6. [Stopping the Recording of Diet Data](#stopping-the-recording-of-diet-data)\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.3. [List All Past Diet Sessions](#list-all-past-diet-sessions)\u003cbr\u003e"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.4. [Edit a Past Diet Session](#edit-a-past-diet-session)\u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.5. [Delete a Past Diet Session](#delete-a-past-diet-session)\u003cbr\u003e"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.6. [Clear all Past Diet Sessions](#clear-all-past-diet-sessions)\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.7. [Search for Past Diet Sessions](#search-for-past-diet-sessions)\u003cbr\u003e"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.3.8. [Exit the Diet Manager](#exit-the-diet-manager)\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"4.4. [Workout-related Features](#workout-related-features)\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1. [Creating a New Workout Session](#creating-a-new-workout-session)\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.1. [Adding an Exercise](#adding-an-exercise)\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.2. [Deleting an Exercise](#deleting-an-exercise)\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.3. [Listing All Exercises in This Session](#listing-all-exercises-in-this-session)\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.1.4. [Searching for Related Exercises](#searching-for-related-exercises)\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.2. [Listing Past Workout Sessions](#listing-past-workout-sessions)\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.3. [Editing Workout Session](#editing-workout-session)\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.4. [Deleting a Workout Session](#deleting-a-workout-session)\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;4.4.5. [Searching Based on Conditions](#searching-based-on-conditions)\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"4.5. [Logging](#logging)\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"5. [**Testing**](#testing)\u003cbr\u003e"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"5.1. [Running Tests](#running-tests)\u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"5.2. [Types of Tests](#types-of-tests)\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"6. [**Dev Ops**](#dev-ops)\u003cbr\u003e"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"6.1. [Build Automation](#build-automation)\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"6.2. [Continuous Integration](#continuous-integration)\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"6.3. [Coverage Report](#coverage-report)\u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"6.4. [Making a Release](#making-a-release)\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"6.5. [Managing Dependencies](#managing-dependencies)\u003cbr\u003e"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"* [**Appendices**](#appendices)"},{"lineNumber":67,"author":{"gitId":"CFZeon"},"content":"    + [Appendix A: Product Scope](#appendix-a-product-scope)"},{"lineNumber":68,"author":{"gitId":"CFZeon"},"content":"    + [Appendix B: User Stories](#appendix-b-user-stories)"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"    + [Appendix C: Non-Functional Requirements](#appendix-c-non-functional-requirements)"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"    + [Appendix D: Glossary](#appendix-d-glossary)"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"    + [Appendix E: Supported Formats of Date Input](#appendix-e-supported-formats-of-date-input)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"## 1. \u003ca id\u003d\"intro\"\u003eIntroduction\u003c/a\u003e"},{"lineNumber":74,"author":{"gitId":"CFZeon"},"content":"### 1.1.  \u003ca id\u003d\"background\"\u003eBackground\u003c/a\u003e"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"### 1.2. \u003ca id\u003d\"purpose\"\u003ePurpose\u003c/a\u003e"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"This document contains the specified architecture and software design specifications for the application, The Schwarzenegger. "},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"### 1.3. \u003ca id\u003d\"scope\"\u003eScope\u003c/a\u003e"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"This document describes the software architecture and software design requirements for The Schwarzenegger. This guide is mainly for developers, designers and software engineers that are or going to work on The Schwarzenegger."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"## 2. \u003ca id\u003d\"setting-up\"\u003eSetting Up\u003c/a\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"### 2.1. \u003ca id\u003d\"prerequisites\"\u003ePrerequisites\u003c/a\u003e"},{"lineNumber":86,"author":{"gitId":"CFZeon"},"content":"1. JDK `11`."},{"lineNumber":87,"author":{"gitId":"CFZeon"},"content":"2. IntelliJ IDEA IDE."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"### 2.2. \u003ca id\u003d\"setting-up-the-project-in-your-computer\"\u003eSetting up the Project in Your Computer\u003c/a\u003e"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"1. Fork [this repository](https://github.com/AY2021S1-CS2113T-F11-1/tp), and clone the fork to your computer."},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"2. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":92,"author":{"gitId":"CFZeon"},"content":"3. Set up the correct JDK version for Gradle  "},{"lineNumber":93,"author":{"gitId":"CFZeon"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`."},{"lineNumber":94,"author":{"gitId":"CFZeon"},"content":"   2. If `JDK 11` is listed in the drop down, select it. Otherwise, click `New…` and select the directory where you installed `JDK 11`."},{"lineNumber":95,"author":{"gitId":"CFZeon"},"content":"   3. Click `OK`."},{"lineNumber":96,"author":{"gitId":"CFZeon"},"content":"4. Click `Import Project`."},{"lineNumber":97,"author":{"gitId":"CFZeon"},"content":"5. Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":98,"author":{"gitId":"CFZeon"},"content":"6. Click `Open as Project`."},{"lineNumber":99,"author":{"gitId":"CFZeon"},"content":"7. Click `OK` to accept the default settings if prompted. "},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"## 3. \u003ca id\u003d\"design\"\u003eDesign\u003c/a\u003e"},{"lineNumber":104,"author":{"gitId":"CFZeon"},"content":"This section provides a high level overview of our application, The Schwarzenegger."},{"lineNumber":105,"author":{"gitId":"CFZeon"},"content":"### 3.1. \u003ca id\u003d\"architecture\"\u003eArchitecture\u003c/a\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"CFZeon"},"content":"![Architecture](pictures/zesong/Architecture.png)"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"CFZeon"},"content":"The image above explains the design of the application, The Schwarzenegger. "},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"CFZeon"},"content":"The main driver of the application is `Main: Duke`. It is responsible for mainly two phases:"},{"lineNumber":112,"author":{"gitId":"CFZeon"},"content":"- At application launch"},{"lineNumber":113,"author":{"gitId":"CFZeon"},"content":"    - This class will initialise the components in the correct sequence and is in charge of connecting them with each other."},{"lineNumber":114,"author":{"gitId":"CFZeon"},"content":"- At shut down"},{"lineNumber":115,"author":{"gitId":"CFZeon"},"content":"    - This class will invoke cleanup method for the components when necessary."},{"lineNumber":116,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":117,"author":{"gitId":"CFZeon"},"content":"In addition to that, the architecture of The Schwarzenegger is broken down into several packages, mainly the following: "},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"- `Ui`: This class mainly handles the interactions with user of the application."},{"lineNumber":119,"author":{"gitId":"CFZeon"},"content":"- `Parser`: This class mainly handles the parsing and handling of user commands."},{"lineNumber":120,"author":{"gitId":"CFZeon"},"content":"- `Command`: This class handles the type of command."},{"lineNumber":121,"author":{"gitId":"CFZeon"},"content":"- `Profile`: This class manages the data of the user."},{"lineNumber":122,"author":{"gitId":"CFZeon"},"content":"- `Diet`: This class manages the diet recording sessions."},{"lineNumber":123,"author":{"gitId":"CFZeon"},"content":"- `Workout`: This class manages the data workout recording sessions."},{"lineNumber":124,"author":{"gitId":"CFZeon"},"content":"- `Storage`: This class reads data from and writes data back into a text file for future uses."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"### 3.2. \u003ca id\u003d\"ui-component\"\u003eUi Component\u003c/a\u003e"},{"lineNumber":129,"author":{"gitId":"wgzesg"},"content":"![Ui Component](pictures/zesong/Ui.png)"},{"lineNumber":130,"author":{"gitId":"CFZeon"},"content":" "},{"lineNumber":131,"author":{"gitId":"yujinyang1998"},"content":"The `Ui` package is a combination class where the interactions with the user are formatted in a consistent way. "},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"CFZeon"},"content":"The `Ui` component,"},{"lineNumber":134,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":135,"author":{"gitId":"yujinyang1998"},"content":"* Takes in user commands"},{"lineNumber":136,"author":{"gitId":"yujinyang1998"},"content":"* Formats messages and prints out responses"},{"lineNumber":137,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":138,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":139,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":"### 3.3. \u003ca id\u003d\"logic-component\"\u003eLogic Component\u003c/a\u003e"},{"lineNumber":141,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":142,"author":{"gitId":"wgzesg"},"content":"![Logic Component](pictures/zesong/Logic.png)"},{"lineNumber":143,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":144,"author":{"gitId":"CFZeon"},"content":"1. `The Schwarzenegger` uses `Parser` classes to parse the user command."},{"lineNumber":145,"author":{"gitId":"wgzesg"},"content":"1. This splits the user input into interpretable portions by other functions."},{"lineNumber":146,"author":{"gitId":"wgzesg"},"content":"1. All commands inherits from base class Command with an `execute()` method. They are stored in a hashmap `CommandLib` and retrieved using user\u0027s input as key."},{"lineNumber":147,"author":{"gitId":"wgzesg"},"content":"1. Command interacts with parsers, models and storage to carry out the user\u0027s command."},{"lineNumber":148,"author":{"gitId":"yujinyang1998"},"content":"1. The result of the command execution is encapsulated as a CommandResult object which is passed back to CommonUi to display the message. "},{"lineNumber":149,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":150,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":151,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"### 3.4. \u003ca id\u003d\"model-component\"\u003eModel Component\u003c/a\u003e"},{"lineNumber":153,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":154,"author":{"gitId":"wgzesg"},"content":"![Model Component](pictures/zesong/model.png)"},{"lineNumber":155,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":156,"author":{"gitId":"wgzesg"},"content":"The Model component contains `Profile`, `DietManager`,"},{"lineNumber":157,"author":{"gitId":"wgzesg"},"content":"`PastRecord` and `WorkoutSession` classes."},{"lineNumber":158,"author":{"gitId":"wgzesg"},"content":"* Profile: Stores the user profile data."},{"lineNumber":159,"author":{"gitId":"wgzesg"},"content":"* Food: Stores food data that user consumes in a meal."},{"lineNumber":160,"author":{"gitId":"wgzesg"},"content":"* PastRecord: Stores meta information of each WorkoutSession files."},{"lineNumber":161,"author":{"gitId":"wgzesg"},"content":"* Exercises: Stores the exercise data done in each workout session."},{"lineNumber":162,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":163,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":164,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":165,"author":{"gitId":"yujinyang1998"},"content":"### 3.5. \u003ca id\u003d\"workoutSessionStorage-component\"\u003eStorage Component\u003c/a\u003e"},{"lineNumber":166,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":167,"author":{"gitId":"wgzesg"},"content":"Storage in the application refers to storing files of user profile and workout, diet sessions into respective local subdirectories sorted based on time in a local directory called `/saves` which is in the same directory as the project root."},{"lineNumber":168,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":169,"author":{"gitId":"wgzesg"},"content":"#### 3.5.1. \u003ca id\u003d\"workoutSessionStorage-for-profile\"\u003eStorage for Profile\u003c/a\u003e"},{"lineNumber":170,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":171,"author":{"gitId":"wgzesg"},"content":"Storage for profile saves user profile created as `profile.json` in the `/saves/profile` directory. Profile data file is created as follows:"},{"lineNumber":172,"author":{"gitId":"wgzesg"},"content":"- `profile.json` is updated in the local hard disk after the user adds/ edits a profile by calling `ProfileAdd.execute()`/ `ProfileEdit.execute()`."},{"lineNumber":173,"author":{"gitId":"wgzesg"},"content":"- `profile.json` content will be cleared after the user deletes a profile by calling `ProfileDelete.execute()`."},{"lineNumber":174,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":175,"author":{"gitId":"wgzesg"},"content":"**Implementation**"},{"lineNumber":176,"author":{"gitId":"wgzesg"},"content":"Profile workoutSessionStorage handles reading of file data by calling `loadData()` and overwriting of file data by calling `saveData()`."},{"lineNumber":177,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":178,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":179,"author":{"gitId":"wgzesg"},"content":"#### 3.5.2. \u003ca id\u003d\"workoutSessionStorage-for-diet\"\u003eStorage for Diet\u003c/a\u003e"},{"lineNumber":180,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":181,"author":{"gitId":"wgzesg"},"content":"Storage for diet saves diet sessions created as individual files sorted based on the time created in the `/saves/diet` directory. Each diet session file is created as follows:"},{"lineNumber":182,"author":{"gitId":"wgzesg"},"content":"- Each file is created as a json file and named as `[DATE] [TAG].json`."},{"lineNumber":183,"author":{"gitId":"CFZeon"},"content":"- A corresponding file is updated in the local file after the user enters a command into a diet session by calling DietSessionEdit.execute(), or DietSessionCreate.execute()."},{"lineNumber":184,"author":{"gitId":"wgzesg"},"content":"- A corresponding file is deleted in the local file when the user deletes a diet session by calling DietSessionDelete.execute() or clears all diet sessions by calling DietSessionClear.execute()."},{"lineNumber":185,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":186,"author":{"gitId":"wgzesg"},"content":"**Implementation**"},{"lineNumber":187,"author":{"gitId":"wgzesg"},"content":"Storage handles reading of file data by calling readDietSession() and overwriting of file data by calling writeToStorageDietSession()."},{"lineNumber":188,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":189,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":190,"author":{"gitId":"wgzesg"},"content":"#### 3.5.3. \u003ca id\u003d\"workoutSessionStorage-for-workout\"\u003eStorage for Workout\u003c/a\u003e"},{"lineNumber":191,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":192,"author":{"gitId":"wgzesg"},"content":"Storage for workout saves workout sessions created as individual files named based on the time created in `/saves/workout` directory. The metainformation of the files such as createion date and last edit date is saved in  `/saves/workout/history.json`."},{"lineNumber":193,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":194,"author":{"gitId":"wgzesg"},"content":"Only history.json file is load when initilizing the application. The rest of Session files are load on request, e.g. `edit`. When a new workout session is created, a new file will be stored and its meta information will be appended to `history.json`. When a workout session is deleted, the file will be removed and its record will be removed from `history.json`."},{"lineNumber":195,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":196,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":197,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":198,"author":{"gitId":"tienkhoa16"},"content":"## 4. \u003ca id\u003d\"implementation\"\u003eImplementation\u003c/a\u003e"},{"lineNumber":199,"author":{"gitId":"CFZeon"},"content":"This section describes some details on how the features are being implemented. All profile/ diet/ workout-related features."},{"lineNumber":200,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":201,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":202,"author":{"gitId":"tienkhoa16"},"content":"All profile/ diet/ workout-related features can be broken down into 4 distinct functionality, addition, viewing/ listing, deletion and editing."},{"lineNumber":203,"author":{"gitId":"tienkhoa16"},"content":"For diet and workout-related features, there is an additional functionality of searching."},{"lineNumber":204,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":205,"author":{"gitId":"tienkhoa16"},"content":"### 4.1. \u003ca id\u003d\"main-menu-related-features\"\u003eMain Menu-related Features\u003c/a\u003e"},{"lineNumber":206,"author":{"gitId":"yujinyang1998"},"content":"This feature allows user to access the different menu for workout, diet and profile. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. invalid command. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "},{"lineNumber":207,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":208,"author":{"gitId":"yujinyang1998"},"content":"If the command is successful,the user will be put into the respective menu and a starting message on the entered menu will be displayed to the user. "},{"lineNumber":209,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":210,"author":{"gitId":"yujinyang1998"},"content":"**Implementation**"},{"lineNumber":211,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":212,"author":{"gitId":"yujinyang1998"},"content":"When the user attempts to access different menu for workout, diet and profile menu, the Duke, CommonUi, CommonParser and CommandLib classes will be accessed, and the following sequence of actions is called to prompt execution result to user:"},{"lineNumber":213,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":214,"author":{"gitId":"yujinyang1998"},"content":"1. User executes a command"},{"lineNumber":215,"author":{"gitId":"yujinyang1998"},"content":"    1. `Duke` calls `CommonUi.getCommand()` to receive user input."},{"lineNumber":216,"author":{"gitId":"yujinyang1998"},"content":"    1. `Duke` calls `CommonParser.parseCommand()` to parse user input into a string array."},{"lineNumber":217,"author":{"gitId":"yujinyang1998"},"content":"1. `Duke` calls `CommandLib.getCommand` with the string arry containing the inputs."},{"lineNumber":218,"author":{"gitId":"yujinyang1998"},"content":"1. Depending on the input,`Duke` creates `ProfileSession` or `DietManager` or `WorkoutManager` object."},{"lineNumber":219,"author":{"gitId":"tienkhoa16"},"content":"1. After entering the `ProfileSession` or `DietManager` or `WorkoutManager` objects, the menus will have their own separate tasks."},{"lineNumber":220,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":221,"author":{"gitId":"yujinyang1998"},"content":"The sequence diagram below summarizes how Main Menu works:"},{"lineNumber":222,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":223,"author":{"gitId":"yujinyang1998"},"content":"![Load Data Sequence Diagram](pictures/khoa/MainMenu.png)"},{"lineNumber":224,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":225,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":226,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":227,"author":{"gitId":"tienkhoa16"},"content":"### 4.2. \u003ca id\u003d\"profile-related-features\"\u003eProfile-related Features\u003c/a\u003e"},{"lineNumber":228,"author":{"gitId":"tienkhoa16"},"content":"#### 4.2.1. \u003ca id\u003d\"adding-a-profile\"\u003eAdding a Profile\u003c/a\u003e"},{"lineNumber":229,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":230,"author":{"gitId":"tienkhoa16"},"content":"This feature allows user to add a new profile. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. invalid command format. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "},{"lineNumber":231,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":232,"author":{"gitId":"tienkhoa16"},"content":"If the creation is successful, a confirmation message on the newly created profile will be displayed to the user. "},{"lineNumber":233,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":234,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":235,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":236,"author":{"gitId":"tienkhoa16"},"content":"When the user attempts to add a new profile, the ProfileSession, CommonUi, ProfileParser, Command, CommandLib, ProfileStorage, Profile and CommandResult classes will be accessed, and the following sequence of actions is called to prompt execution result to user:"},{"lineNumber":237,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":238,"author":{"gitId":"tienkhoa16"},"content":"1. User executes `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500`"},{"lineNumber":239,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.getCommand()` to receive user input."},{"lineNumber":240,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."},{"lineNumber":241,"author":{"gitId":"tienkhoa16"},"content":"1. Creating `ProfileAdd` object."},{"lineNumber":242,"author":{"gitId":"tienkhoa16"},"content":"    1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileAdd`."},{"lineNumber":243,"author":{"gitId":"tienkhoa16"},"content":"1. Executing command."},{"lineNumber":244,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `ProfileAdd.execute()` with the rest of parsed input."},{"lineNumber":245,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileAdd` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is an existing profile, `ProfileAdd` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `3`."},{"lineNumber":246,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileAdd` calls `ProfileParser.extractCommandTagAndInfo()` to parse user input into specific tags and information. "},{"lineNumber":247,"author":{"gitId":"tienkhoa16"},"content":"    1. Based on the parsed information from `ProfileParser.extractCommandTagAndInfo()`, `ProfileAdd` creates a new `Profile`."},{"lineNumber":248,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileAdd` calls `ProfileStorage.saveData()` to save the `Profile` object."},{"lineNumber":249,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileAdd` returns a successful result to `ProfileSession`."},{"lineNumber":250,"author":{"gitId":"tienkhoa16"},"content":"1. Prompting result to user."},{"lineNumber":251,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":252,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.showToUser()` to show result to the user."},{"lineNumber":253,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":254,"author":{"gitId":"tienkhoa16"},"content":"All descriptions, warnings and responses will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":255,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":256,"author":{"gitId":"tienkhoa16"},"content":"The sequence diagram below summarizes how creating a new profile works:"},{"lineNumber":257,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":258,"author":{"gitId":"tienkhoa16"},"content":"![Load Data Sequence Diagram](pictures/khoa/AddProfile.png)"},{"lineNumber":259,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":260,"author":{"gitId":"tienkhoa16"},"content":"Below are the sub-diagrams: \u003ca id\u003d\"figure-4-2-1\"\u003e\u003c/a\u003e"},{"lineNumber":261,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":262,"author":{"gitId":"tienkhoa16"},"content":"![Figure 4.2.1](pictures/khoa/ParseInput.png)\u003cbr\u003e"},{"lineNumber":263,"author":{"gitId":"tienkhoa16"},"content":"**Figure 4.2.1.** _Sub-diagram for Parsing Input in ProfileSession_"},{"lineNumber":264,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":265,"author":{"gitId":"tienkhoa16"},"content":"\u003ca id\u003d\"figure-4-2-2\"\u003e![Figure 4.2.2](pictures/khoa/ShowMessage.png)\u003c/a\u003e\u003cbr\u003e"},{"lineNumber":266,"author":{"gitId":"tienkhoa16"},"content":"**Figure 4.2.2.** _Sub-diagram for Showing Message to User in ProfileSession_"},{"lineNumber":267,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":268,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":269,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":270,"author":{"gitId":"tienkhoa16"},"content":"Parsing of the user’s input command:"},{"lineNumber":271,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":272,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** User’s command is split into size 2 array first containing command type and command arguments. Then arguments are split into command tag and information pairs.  "},{"lineNumber":273,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":274,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Command tags do not have to follow a fixed order. "},{"lineNumber":275,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: It takes multiple steps in parsing the command."},{"lineNumber":276,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":277,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** User’s command is divided by space."},{"lineNumber":278,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":279,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: The parsing can be easily done by calling Java built-in function `split()`. Supports multiple tags or no tags."},{"lineNumber":280,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Values for each variable cannot contain spaces which makes the application restrictive, especially for user\u0027s name."},{"lineNumber":281,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":282,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":283,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":284,"author":{"gitId":"tienkhoa16"},"content":"#### 4.2.2. \u003ca id\u003d\"viewing-a-profile\"\u003eViewing a Profile\u003c/a\u003e"},{"lineNumber":285,"author":{"gitId":"tienkhoa16"},"content":"This feature allows user to view added profile with calculated BMI based on height and weight. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. redundant parameters. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "},{"lineNumber":286,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":287,"author":{"gitId":"tienkhoa16"},"content":"If the data loading is successful, a message on the added profile will be displayed to the user. "},{"lineNumber":288,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":289,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":290,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":291,"author":{"gitId":"tienkhoa16"},"content":"When the user attempts to view an added profile, the ProfileSession, CommonUi, ProfileParser, Command, CommandLib, ProfileStorage, Profile, DietManager and CommandResult classes will be accessed. The following sequence of steps will then occur:"},{"lineNumber":292,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":293,"author":{"gitId":"tienkhoa16"},"content":"1. User executes `view`"},{"lineNumber":294,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.getUserCommand()` to receive user input."},{"lineNumber":295,"author":{"gitId":"tienkhoa16"},"content":"    1. ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."},{"lineNumber":296,"author":{"gitId":"tienkhoa16"},"content":"1. Creating `ProfileView` object."},{"lineNumber":297,"author":{"gitId":"tienkhoa16"},"content":"    1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileView`."},{"lineNumber":298,"author":{"gitId":"tienkhoa16"},"content":"1. Executing command."},{"lineNumber":299,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `ProfileView.execute()` with the rest of parsed input."},{"lineNumber":300,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileView` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is no existing profile, `ProfileView` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `3`."},{"lineNumber":301,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileView` calls `DietManager.getTodayTotalCalories()` to get user\u0027s calories intake today."},{"lineNumber":302,"author":{"gitId":"tienkhoa16"},"content":"    1. Based on user\u0027s calories intake today and string representation of `Profile`, `ProfileView` returns a result to `ProfileSession`.    "},{"lineNumber":303,"author":{"gitId":"tienkhoa16"},"content":"1. Prompting result to user."},{"lineNumber":304,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommandResult.getCommandResult()` to get the `CommandResult` object."},{"lineNumber":305,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.showToUser()` to show result to the user."},{"lineNumber":306,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":307,"author":{"gitId":"tienkhoa16"},"content":"All descriptions, warnings and responses will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":308,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":309,"author":{"gitId":"tienkhoa16"},"content":"The sequence diagram below summarizes how viewing an added profile works:"},{"lineNumber":310,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":311,"author":{"gitId":"tienkhoa16"},"content":"![Load Data Sequence Diagram](pictures/khoa/ViewProfile.png)"},{"lineNumber":312,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":313,"author":{"gitId":"tienkhoa16"},"content":"You can refer to [Figure 4.2.1. Sub-diagram for Parsing Input in ProfileSession](#figure-4-2-1) and [Figure 4.2.2. Sub-diagram for Showing Message to User in ProfileSession](#figure-4-2-2) for the corresponding sub-diagrams."},{"lineNumber":314,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":315,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":316,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":317,"author":{"gitId":"tienkhoa16"},"content":"Aspects: Loading of stored data"},{"lineNumber":318,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":319,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** call public methods of Storage class to "},{"lineNumber":320,"author":{"gitId":"tienkhoa16"},"content":"load the profile from hard disk every time the user wants to view profile."},{"lineNumber":321,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":322,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Profile data is up-to-date if the user prefers to edit it in text file rather than using commands in The Schwarzenegger."},{"lineNumber":323,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Execution time is slow down due to multiple times of loading the data."},{"lineNumber":324,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":325,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** call public methods of Storage class to load the profile from hard disk only when user enters Profile Menu."},{"lineNumber":326,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":327,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Execution time is fast. "},{"lineNumber":328,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Profile data is not updated in real time if user edits it in text editor while running The Schwarzenegger."},{"lineNumber":329,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":330,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":331,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":332,"author":{"gitId":"tienkhoa16"},"content":"#### 4.2.3. \u003ca id\u003d\"editing-a-profile\"\u003eEditing a Profile\u003c/a\u003e"},{"lineNumber":333,"author":{"gitId":"tienkhoa16"},"content":"This feature allows user to anytime go back to edit a profile created in the past such as editing physique data and expected daily calories intake. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. invalid command format. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "},{"lineNumber":334,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":335,"author":{"gitId":"tienkhoa16"},"content":"If the editing is successful, a confirmation message on the edited profile will be displayed to the user. "},{"lineNumber":336,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":337,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":338,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":339,"author":{"gitId":"tienkhoa16"},"content":"When the user attempts to edit a profile, the ProfileSession, CommonUi, ProfileParser, Command, CommandLib, ProfileStorage, Profile and CommandResult classes will be accessed, and the following sequence of actions is called to prompt execution result to user:"},{"lineNumber":340,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":341,"author":{"gitId":"tienkhoa16"},"content":"1. User executes `edit /w 60`"},{"lineNumber":342,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.getCommand()` to receive user input."},{"lineNumber":343,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."},{"lineNumber":344,"author":{"gitId":"tienkhoa16"},"content":"1. Creating `ProfileEdit` object."},{"lineNumber":345,"author":{"gitId":"tienkhoa16"},"content":"    1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileEdit`."},{"lineNumber":346,"author":{"gitId":"tienkhoa16"},"content":"1. Executing command."},{"lineNumber":347,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `ProfileEdit.execute()` with the rest of parsed input."},{"lineNumber":348,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileEdit` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is no existing profile, `ProfileAdd` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `3`."},{"lineNumber":349,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileEdit` calls `ProfileParser.extractCommandTagAndInfo()` to parse user input into specific tags and information."},{"lineNumber":350,"author":{"gitId":"tienkhoa16"},"content":"    1. Based on the parsed information from `ProfileParser.extractCommandTagAndInfo()`, `ProfileEdit` creates a new `Profile`."},{"lineNumber":351,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileEdit` calls `Profile.equals()` to compare the newly created and existing profile. If there are no changes, `ProfileEdit` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `6`."},{"lineNumber":352,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileEdit` calls `ProfileStorage.saveData()` to save the newly created `Profile` object."},{"lineNumber":353,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileAdd` returns a successful result to `ProfileSession`."},{"lineNumber":354,"author":{"gitId":"tienkhoa16"},"content":"1. Prompting result to user."},{"lineNumber":355,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":356,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.showToUser()` to show result to the user."},{"lineNumber":357,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":358,"author":{"gitId":"tienkhoa16"},"content":"All descriptions, warnings and responses will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":359,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":360,"author":{"gitId":"tienkhoa16"},"content":"The sequence diagram below summarizes how creating a new profile works:"},{"lineNumber":361,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":362,"author":{"gitId":"tienkhoa16"},"content":"![Load Data Sequence Diagram](pictures/khoa/EditProfile.png)"},{"lineNumber":363,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":364,"author":{"gitId":"tienkhoa16"},"content":"You can refer to [Figure 4.2.1. Sub-diagram for Parsing Input in ProfileSession](#figure-4-2-1) and [Figure 4.2.2. Sub-diagram for Showing Message to User in ProfileSession](#figure-4-2-2) for the corresponding sub-diagrams."},{"lineNumber":365,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":366,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":367,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":368,"author":{"gitId":"tienkhoa16"},"content":"Parsing of the user’s input command:"},{"lineNumber":369,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":370,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** User’s command is split into size 2 array first containing command type and command arguments. Then arguments are split into command tag and information pairs.  "},{"lineNumber":371,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":372,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Command tags do not have to follow a fixed order."},{"lineNumber":373,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: It takes multiple steps in parsing the command."},{"lineNumber":374,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":375,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** User’s command is divided by space."},{"lineNumber":376,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":377,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: The parsing can be easily done by calling Java built-in function `split()`. Supports multiple tags or no tags."},{"lineNumber":378,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Values for each variable cannot contain spaces which makes the application restrictive."},{"lineNumber":379,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":380,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":381,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":382,"author":{"gitId":"tienkhoa16"},"content":"#### 4.2.4. \u003ca id\u003d\"deleting-a-profile\"\u003eDeleting a Profile\u003c/a\u003e"},{"lineNumber":383,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":384,"author":{"gitId":"tienkhoa16"},"content":"This feature allows user to delete a profile created in the past. The failure to do so will trigger an exception where the user will be notified of the reason, e.g. redundant parameters. The action will be aborted, and the program will advise the user to type \"help\" for command syntax reference. "},{"lineNumber":385,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":386,"author":{"gitId":"tienkhoa16"},"content":"If the deletion is successful, a confirmation message on the profile deletion will be displayed to the user. "},{"lineNumber":387,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":388,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":389,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":390,"author":{"gitId":"tienkhoa16"},"content":"When the user attempts to delete an added profile, the ProfileSession, CommonUi, ProfileParser, Command, CommandLib, ProfileStorage, Profile and CommandResult classes will be accessed. The following sequence of steps will then occur:"},{"lineNumber":391,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":392,"author":{"gitId":"tienkhoa16"},"content":"1. User executes `delete`"},{"lineNumber":393,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.getUserCommand()` to receive user input."},{"lineNumber":394,"author":{"gitId":"tienkhoa16"},"content":"    1. ProfileSession` calls `ProfileParser.parseCommand()` to parse user input into a string array."},{"lineNumber":395,"author":{"gitId":"tienkhoa16"},"content":"1. Creating `ProfileDelete` object."},{"lineNumber":396,"author":{"gitId":"tienkhoa16"},"content":"   1. Based on the parsed input, `ProfileSession` calls `CommandLib` to return the correct Command Object `ProfileDelete`."},{"lineNumber":397,"author":{"gitId":"tienkhoa16"},"content":"1. Executing command."},{"lineNumber":398,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `ProfileDelete.execute()` with the rest of parsed input."},{"lineNumber":399,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileDelete` calls `ProfileStorage.loadData()` to load existing profile in the system. If there is no existing profile, `ProfileDelete` returns a failure result to `ProfileSession`. Otherwise, the process continues with step `3`."},{"lineNumber":400,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileDelete` calls `CommonUi.CheckConfirmation()` to get user\u0027s confirmation on the deletion since this action is irrevocable. If user  fails to confirm, `ProfileDelete` returns an abort result to `ProfileSession`. Otherwise, the process continues with step `4`."},{"lineNumber":401,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileDelete` calls `ProfileStorage.saveData()` to save a `null` object which represents a deleted profile."},{"lineNumber":402,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileDelete` returns a result to `ProfileSession`.   "},{"lineNumber":403,"author":{"gitId":"tienkhoa16"},"content":"1. Prompting result to user."},{"lineNumber":404,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":405,"author":{"gitId":"tienkhoa16"},"content":"    1. `ProfileSession` calls `CommonUi.showToUser()` to show result to the user."},{"lineNumber":406,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":407,"author":{"gitId":"tienkhoa16"},"content":"All descriptions, warnings and responses will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":408,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":409,"author":{"gitId":"tienkhoa16"},"content":"The sequence diagram below summarizes how deleting an added profile works:"},{"lineNumber":410,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":411,"author":{"gitId":"tienkhoa16"},"content":"![Load Data Sequence Diagram](pictures/khoa/DeleteProfile.png)"},{"lineNumber":412,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":413,"author":{"gitId":"tienkhoa16"},"content":"You can refer to [Figure 4.2.1. Sub-diagram for Parsing Input in ProfileSession](#figure-4-2-1) and [Figure 4.2.2. Sub-diagram for Showing Message to User in ProfileSession](#figure-4-2-2) for the corresponding sub-diagrams."},{"lineNumber":414,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":415,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":416,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":417,"author":{"gitId":"tienkhoa16"},"content":"Aspects: Loading of stored data"},{"lineNumber":418,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":419,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** call public methods of Storage class to load the profile from hard disk every time the user wants to delete profile."},{"lineNumber":420,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":421,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Profile data is up-to-date if the user prefers to edit it in text file rather than using commands in The Schwarzenegger."},{"lineNumber":422,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Execution time is slow down due to loading the data."},{"lineNumber":423,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":424,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** call public methods of Storage class to load the profile from hard disk when user enter Profile Menu."},{"lineNumber":425,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":426,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Execution time is fast. "},{"lineNumber":427,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Profile data is not updated in real time if user edits it in text file while running The Schwarzenegger."},{"lineNumber":428,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":429,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":430,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":431,"author":{"gitId":"CFZeon"},"content":"### 4.3. \u003ca id\u003d\"diet-related-features\"\u003eDiet-related Features\u003c/a\u003e"},{"lineNumber":432,"author":{"gitId":"CFZeon"},"content":"#### 4.3.1. \u003ca id\u003d\"list-out-all-commands\"\u003eListing out all commands:\u003c/a\u003e `help`"},{"lineNumber":433,"author":{"gitId":"CFZeon"},"content":"This command lists out all help commands in a typed list that indicates to the user all the commands available and how to use them."},{"lineNumber":434,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":435,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":436,"author":{"gitId":"CFZeon"},"content":"When the user types `help` in a Diet Manager instance, the following sequence occurs. "},{"lineNumber":437,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":438,"author":{"gitId":"CFZeon"},"content":"1. User executes `help`"},{"lineNumber":439,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `dietManagerUi.getCommand()` to receive user input."},{"lineNumber":440,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietManagerParser.parseCommand()` to parse user input into a string array."},{"lineNumber":441,"author":{"gitId":"CFZeon"},"content":"1. Creating `DietSessionHelp` object."},{"lineNumber":442,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietManager` calls `CommandLib` to return the correct Command Object `DietSessionHelp`."},{"lineNumber":443,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":444,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietSessionHelp.execute()` with the rest of parsed input."},{"lineNumber":445,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionHelp` appends onto a string builder a list of typed help commands."},{"lineNumber":446,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionHelp` returns a `CommandResult` object with the help message."},{"lineNumber":447,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":448,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":449,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":450,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":451,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":452,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":453,"author":{"gitId":"CFZeon"},"content":"#### 4.3.2. \u003ca id\u003d\"start-recording-diet-data\"\u003eStart recording diet data:\u003c/a\u003e `new`"},{"lineNumber":454,"author":{"gitId":"CFZeon"},"content":"The feature allows users to start recording diet data. "},{"lineNumber":455,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":456,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":457,"author":{"gitId":"zsk612"},"content":"When the user types `new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e` the following sequence occurs. "},{"lineNumber":458,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":459,"author":{"gitId":"CFZeon"},"content":"1. User executes `new /d 2020-05-04 /t breakfast`"},{"lineNumber":460,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `dietManagerUi.getCommand()` to receive user input."},{"lineNumber":461,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietManagerParser.parseCommand()` to parse user input into a string array."},{"lineNumber":462,"author":{"gitId":"CFZeon"},"content":"1. Creating `DietSessionHelp` object."},{"lineNumber":463,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietManager` calls `CommandLib` to return the correct Command Object `DietSessionCreate`."},{"lineNumber":464,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":465,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietSessionCreate.execute()` with the rest of parsed input."},{"lineNumber":466,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionCreate` calls the `start()` method within an instantiated DietSession created with the parsed input."},{"lineNumber":467,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` then proceeds to completion until the user types \"end\", saving after every command with `DietStorage`."},{"lineNumber":468,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionHelp` returns a `CommandResult` object with the help message of the diet manager."},{"lineNumber":469,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":470,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":471,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":472,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":473,"author":{"gitId":"zsk612"},"content":"The sequence diagram below summarizes how creating new diet session works:"},{"lineNumber":474,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":475,"author":{"gitId":"zsk612"},"content":"![Load Data Sequence Diagram](pictures/Zeon/CreateDietSession.png)"},{"lineNumber":476,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":477,"author":{"gitId":"zsk612"},"content":"Figure 4.3.2.1. CreateDietSession-diagram for Parsing Input in DietManager"},{"lineNumber":478,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":479,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":480,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":481,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":482,"author":{"gitId":"CFZeon"},"content":"#### 4.3.2.1. \u003ca id\u003d\"showing-help-message\"\u003eShowing help message:\u003c/a\u003e `help`"},{"lineNumber":483,"author":{"gitId":"CFZeon"},"content":"This command lists out all help commands in a typed list that indicates to the user all the commands available and how to use them."},{"lineNumber":484,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":485,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":486,"author":{"gitId":"CFZeon"},"content":"When the user types `help` the following sequence occurs. "},{"lineNumber":487,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `help`."},{"lineNumber":488,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `dietSessionUi.getCommand()` to receive user input."},{"lineNumber":489,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `DietSessionParser.parseCommand()` to parse user input into a string array."},{"lineNumber":490,"author":{"gitId":"CFZeon"},"content":"1. Creating `FoodItemHelp` object."},{"lineNumber":491,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietSession` calls `CommandLib` to return the correct Command Object `FoodItemHelp`."},{"lineNumber":492,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":493,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `FoodItemHelp.execute()`."},{"lineNumber":494,"author":{"gitId":"CFZeon"},"content":"    1. `FoodItemHelp` appends onto a string builder a list of typed help commands."},{"lineNumber":495,"author":{"gitId":"CFZeon"},"content":"    1. `FoodItemHelp` returns a `CommandResult` object with the help message."},{"lineNumber":496,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":497,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":498,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":499,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":500,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":501,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":502,"author":{"gitId":"CFZeon"},"content":"#### 4.3.2.2. \u003ca id\u003d\"adding-food-items-for-the-current-diet\"\u003eAdding food items for the current diet:\u003c/a\u003e `add`"},{"lineNumber":503,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":504,"author":{"gitId":"CFZeon"},"content":"The feature allows users to add food items into the current diet session. "},{"lineNumber":505,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":506,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":507,"author":{"gitId":"zsk612"},"content":"When the user types `add [FOOD_NAME] /c [CALORIES]` the following sequence occurs. "},{"lineNumber":508,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `add bologna /c 123`."},{"lineNumber":509,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `dietSessionUi.getCommand()` to receive user input."},{"lineNumber":510,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `DietSessionParser.parseCommand()` to parse user input into a string array."},{"lineNumber":511,"author":{"gitId":"CFZeon"},"content":"1. Creating `FoodItemAdd` object."},{"lineNumber":512,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietSession` calls `CommandLib` to return the correct Command Object `FoodItemAdd`."},{"lineNumber":513,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":514,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `FoodItemAdd.execute()`."},{"lineNumber":515,"author":{"gitId":"CFZeon"},"content":"    1. A `Food` object is instantiated with the rest of the parameters, `bologna` and `123`."},{"lineNumber":516,"author":{"gitId":"CFZeon"},"content":"    1. The instantiated `Food` object is added to an ArrayList of Food objects in `DietSession`"},{"lineNumber":517,"author":{"gitId":"CFZeon"},"content":"    1. `FoodItemHelp` returns a `CommandResult` object with the add food item message."},{"lineNumber":518,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":519,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":520,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":521,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":522,"author":{"gitId":"CFZeon"},"content":"The sequence diagram below summarizes how adding a new food to the diet session works:"},{"lineNumber":523,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":524,"author":{"gitId":"zsk612"},"content":"![Load Data Sequence Diagram](pictures/Shukai/FoodItemAdd.png)"},{"lineNumber":525,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":526,"author":{"gitId":"zsk612"},"content":"Below is the sub-diagram: \u003ca id\u003d\"figure-4-3-2-2-1\"\u003e\u003c/a\u003e"},{"lineNumber":527,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":528,"author":{"gitId":"zsk612"},"content":"![Load Data Sequence Diagram](pictures/Shukai/ParseInput.png)\u003cbr\u003e"},{"lineNumber":529,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":530,"author":{"gitId":"zsk612"},"content":"Figure 4.3.2.2.1. Sub-diagram for Parsing Input in DietSession"},{"lineNumber":531,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":532,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":533,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":534,"author":{"gitId":"CFZeon"},"content":"#### 4.3.2.3. \u003ca id\u003d\"listing-data-for-the-current-diet\"\u003eListing data for the current diet:\u003c/a\u003e `list`"},{"lineNumber":535,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":536,"author":{"gitId":"CFZeon"},"content":"This command allows users to view all food items in the current diet session. "},{"lineNumber":537,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":538,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":539,"author":{"gitId":"CFZeon"},"content":"When the user types `list` the following sequence occurs. "},{"lineNumber":540,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `list`."},{"lineNumber":541,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `dietSessionUi.getCommand()` to receive user input."},{"lineNumber":542,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `DietSessionParser.parseCommand()` to parse user input into a string array."},{"lineNumber":543,"author":{"gitId":"CFZeon"},"content":"1. Creating `FoodItemList` object."},{"lineNumber":544,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietSession` calls `CommandLib` to return the correct Command Object `FoodItemList`."},{"lineNumber":545,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":546,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `FoodItemList.execute()`."},{"lineNumber":547,"author":{"gitId":"CFZeon"},"content":"    1. The ArrayList of Food objects is iterated through and stored in a String."},{"lineNumber":548,"author":{"gitId":"CFZeon"},"content":"    1. `FoodItemList` returns a `CommandResult` object with the list of food items."},{"lineNumber":549,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":550,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":551,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":552,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":553,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":554,"author":{"gitId":"CFZeon"},"content":"![Load Data Sequence Diagram](pictures/Shukai/FoodItemList.png)"},{"lineNumber":555,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":556,"author":{"gitId":"CFZeon"},"content":"**Design considerations**"},{"lineNumber":557,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":558,"author":{"gitId":"CFZeon"},"content":"Aspects: Displaying of listed data"},{"lineNumber":559,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":560,"author":{"gitId":"CFZeon"},"content":"- **Alternative 1 (current choice):** Print out a neatly formatted list of food items."},{"lineNumber":561,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":562,"author":{"gitId":"CFZeon"},"content":"    - Pros: The information is easy to read due to neat formatting."},{"lineNumber":563,"author":{"gitId":"CFZeon"},"content":"    - Cons: Execution time is slower as it requires more calculations."},{"lineNumber":564,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":565,"author":{"gitId":"CFZeon"},"content":"- **Alternative 2:** Print out toString() for each Food item."},{"lineNumber":566,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":567,"author":{"gitId":"CFZeon"},"content":"    - Pros: Execution time is fast. "},{"lineNumber":568,"author":{"gitId":"CFZeon"},"content":"    - Cons: The information is harder to filter through.    "},{"lineNumber":569,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":570,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":571,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":572,"author":{"gitId":"CFZeon"},"content":"#### 4.3.2.4. \u003ca id\u003d\"deleting-data-from-the-current-diet\"\u003eDeleting data from the current diet session:\u003c/a\u003e `delete`"},{"lineNumber":573,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":574,"author":{"gitId":"CFZeon"},"content":"The feature allows users to remove food items into the current diet session. "},{"lineNumber":575,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":576,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":577,"author":{"gitId":"zsk612"},"content":"When the user types `delete [INDEX_OF_FOOD]` the following sequence occurs. "},{"lineNumber":578,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `delete 1`."},{"lineNumber":579,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `dietSessionUi.getCommand()` to receive user input."},{"lineNumber":580,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `DietSessionParser.parseCommand()` to parse user input into a string array."},{"lineNumber":581,"author":{"gitId":"CFZeon"},"content":"1. Creating `FoodItemDelete` object."},{"lineNumber":582,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietSession` calls `CommandLib` to return the correct Command Object `FoodItemDelete`."},{"lineNumber":583,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":584,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `FoodItemDelete.execute()`."},{"lineNumber":585,"author":{"gitId":"CFZeon"},"content":"    1. The index-1 of the ArrayList for the food is removed."},{"lineNumber":586,"author":{"gitId":"CFZeon"},"content":"    1. `FoodItemDelete` returns a `CommandResult` object with the delete success message."},{"lineNumber":587,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":588,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":589,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":590,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":591,"author":{"gitId":"CFZeon"},"content":"![Load Data Sequence Diagram](pictures/Shukai/FoodItemDelete.png)"},{"lineNumber":592,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":593,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":594,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":595,"author":{"gitId":"CFZeon"},"content":"#### 4.3.2.5. \u003ca id\u003d\"clearing-data-from-the-current-diet\"\u003eClearing all data from the current diet session\u003c/a\u003e `clear`"},{"lineNumber":596,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":597,"author":{"gitId":"CFZeon"},"content":"The feature allows users to remove food items into the current diet session. "},{"lineNumber":598,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":599,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":600,"author":{"gitId":"CFZeon"},"content":"When the user types `clear` the following sequence occurs. "},{"lineNumber":601,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `clear`."},{"lineNumber":602,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `dietSessionUi.getCommand()` to receive user input."},{"lineNumber":603,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `DietSessionParser.parseCommand()` to parse user input into a string array."},{"lineNumber":604,"author":{"gitId":"CFZeon"},"content":"1. Creating `FoodItemClear` object."},{"lineNumber":605,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietSession` calls `CommandLib` to return the correct Command Object `FoodItemClear`."},{"lineNumber":606,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":607,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `FoodItemClear.execute()`."},{"lineNumber":608,"author":{"gitId":"CFZeon"},"content":"    1. A new ArrayList of Food is assigned to the original, leaving it with no data inside."},{"lineNumber":609,"author":{"gitId":"CFZeon"},"content":"    1. `FoodItemClear` returns a `CommandResult` object with the clear success message."},{"lineNumber":610,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":611,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":612,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":613,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":614,"author":{"gitId":"CFZeon"},"content":"![Load Data Sequence Diagram](pictures/Shukai/FoodItemClear.png)"},{"lineNumber":615,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":616,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":617,"author":{"gitId":"CFZeon"},"content":"**Design considerations**"},{"lineNumber":618,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":619,"author":{"gitId":"CFZeon"},"content":"Aspects: Ram usage"},{"lineNumber":620,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":621,"author":{"gitId":"CFZeon"},"content":"- **Alternative 1 (current choice):** Assigning a new ArrayList to the current variable."},{"lineNumber":622,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":623,"author":{"gitId":"CFZeon"},"content":"    - Pros: Fast."},{"lineNumber":624,"author":{"gitId":"CFZeon"},"content":"    - Cons: Garbage collection has to pick up the unassigned ArrayList."},{"lineNumber":625,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":626,"author":{"gitId":"CFZeon"},"content":"- **Alternative 2:** delete every item in the ArrayList one by one."},{"lineNumber":627,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":628,"author":{"gitId":"CFZeon"},"content":"    - Pros: Less memory needed as there is nothing new to allocate. "},{"lineNumber":629,"author":{"gitId":"CFZeon"},"content":"    - Cons: A lot slower as it has to iterate through every item."},{"lineNumber":630,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":631,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":632,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":633,"author":{"gitId":"CFZeon"},"content":"#### 4.3.2.6. \u003ca id\u003d\"stopping-the-recording-of-diet-data\"\u003eStopping the recording of diet session data:\u003c/a\u003e `end`"},{"lineNumber":634,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":635,"author":{"gitId":"CFZeon"},"content":"The feature allows users to end the current diet session and return back to the diet manager."},{"lineNumber":636,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":637,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":638,"author":{"gitId":"CFZeon"},"content":"When the user types `end` the following sequence occurs. "},{"lineNumber":639,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `end`."},{"lineNumber":640,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":641,"author":{"gitId":"CFZeon"},"content":"    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "},{"lineNumber":642,"author":{"gitId":"CFZeon"},"content":"    1. Input will be parsed in `processCommand()`.   "},{"lineNumber":643,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":644,"author":{"gitId":"CFZeon"},"content":"2. Exiting of inputLoop()"},{"lineNumber":645,"author":{"gitId":"CFZeon"},"content":"    The inputLoop() exits when userInput.equals(\"end\")."},{"lineNumber":646,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":647,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":648,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":649,"author":{"gitId":"CFZeon"},"content":"#### 4.3.3. \u003ca id \u003d \"list-all-past-diet-sessions\"\u003eList all past diet sessions:\u003c/a\u003e `list`"},{"lineNumber":650,"author":{"gitId":"CFZeon"},"content":"The feature allows users to view all past created diet sessions."},{"lineNumber":651,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":652,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":653,"author":{"gitId":"CFZeon"},"content":"When the user types `list` in a diet manager instance the following sequence occurs. "},{"lineNumber":654,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `list`."},{"lineNumber":655,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `dietManagerUi.getCommand()` to receive user input."},{"lineNumber":656,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietManagerParser.parseCommand()` to parse user input into a string array."},{"lineNumber":657,"author":{"gitId":"CFZeon"},"content":"1. Creating `DietSessionList` object."},{"lineNumber":658,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietManager` calls `CommandLib` to return the correct Command Object `DietSessionList`."},{"lineNumber":659,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":660,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietSessionList.execute()` with the rest of parsed input."},{"lineNumber":661,"author":{"gitId":"CFZeon"},"content":"    1. The execute method opens a directed save folder on the drive then assigns it to a File array."},{"lineNumber":662,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionList` then calls the `formatList()` method which takes the File Array and converts it into an ArrayList."},{"lineNumber":663,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionList` then calls the `formatRow()` method from within formatList() which converts the files into a formatted table output."},{"lineNumber":664,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionList` returns a CommandResult object with the entire table message of the diet sessions."},{"lineNumber":665,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":666,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":667,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":668,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":669,"author":{"gitId":"CFZeon"},"content":"The sequence diagram below summarizes how listing past Diet sessions work:"},{"lineNumber":670,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":671,"author":{"gitId":"CFZeon"},"content":"![Load Data Sequence Diagram](pictures/Zeon/DietSessionList.png)"},{"lineNumber":672,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":673,"author":{"gitId":"CFZeon"},"content":"- **Alternative 1 (current choice):** Print out a neatly formatted list of diet sessions."},{"lineNumber":674,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":675,"author":{"gitId":"CFZeon"},"content":"    - Pros: The information is easy to read due to neat formatting."},{"lineNumber":676,"author":{"gitId":"CFZeon"},"content":"    - Cons: Execution time is slower as it requires a lot more calculations."},{"lineNumber":677,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":678,"author":{"gitId":"CFZeon"},"content":"- **Alternative 2:** Print out the file name."},{"lineNumber":679,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":680,"author":{"gitId":"CFZeon"},"content":"    - Pros: Execution time is fast. "},{"lineNumber":681,"author":{"gitId":"CFZeon"},"content":"    - Cons: The information is harder to filter through.    "},{"lineNumber":682,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":683,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":684,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":685,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":686,"author":{"gitId":"CFZeon"},"content":"#### 4.3.4. \u003ca id \u003d \"edit-a-past-diet-session\"\u003eEdit a past diet session:\u003c/a\u003e `edit`"},{"lineNumber":687,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":688,"author":{"gitId":"CFZeon"},"content":"The feature allows users to edit previously created diet sessions."},{"lineNumber":689,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":690,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":691,"author":{"gitId":"zsk612"},"content":"When the user types `edit [INDEX_OF_SESSION]` the following sequence occurs. "},{"lineNumber":692,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `edit 1`."},{"lineNumber":693,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `dietManagerUi.getCommand()` to receive user input."},{"lineNumber":694,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietManagerParser.parseCommand()` to parse user input into a string array."},{"lineNumber":695,"author":{"gitId":"CFZeon"},"content":"1. Creating `DietSessionEdit` object."},{"lineNumber":696,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietManager` calls `CommandLib` to return the correct Command Object `DietSessionEdit`."},{"lineNumber":697,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":698,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietSessionEdit.execute()` with the rest of parsed input."},{"lineNumber":699,"author":{"gitId":"CFZeon"},"content":"    1. The execute method then calls `readDietSession()` from DietStorage which returns a dietSession instance."},{"lineNumber":700,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionEdit` then calls the `start()` method within an instantiated DietSession created with the parsed input."},{"lineNumber":701,"author":{"gitId":"CFZeon"},"content":"    1. `DietSession` then proceeds to completion until the user types \"end\", saving after every command with `DietStorage`."},{"lineNumber":702,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionHelp` returns a CommandResult object with the help message of the diet manager."},{"lineNumber":703,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":704,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":705,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":706,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":707,"author":{"gitId":"zsk612"},"content":"The sequence diagram below summarizes how editing Diet session works:"},{"lineNumber":708,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":709,"author":{"gitId":"zsk612"},"content":"![Load Data Sequence Diagram](pictures/Zeon/DietSessionEdit.png)"},{"lineNumber":710,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":711,"author":{"gitId":"CFZeon"},"content":"**Design considerations**"},{"lineNumber":712,"author":{"gitId":"CFZeon"},"content":"Saving of the user’s Diet sessions:  "},{"lineNumber":713,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":714,"author":{"gitId":"CFZeon"},"content":"- **Alternative 1:** Saving at the end of a diet session"},{"lineNumber":715,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":716,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: The cost of saving is low, file writes only happen once per Diet session instance. "},{"lineNumber":717,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: If any crashes occur during a diet session, no input data will be saved."},{"lineNumber":718,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":719,"author":{"gitId":"CFZeon"},"content":"- **Alternative 2 (current choice):** Saving during any alterations made to the Diet session"},{"lineNumber":720,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":721,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: The files will still be saved even if a crash occurs."},{"lineNumber":722,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Saving often might be taxing on the user\u0027s computer especially on slower models."},{"lineNumber":723,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":724,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":725,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":726,"author":{"gitId":"CFZeon"},"content":"#### 4.3.5. \u003ca id \u003d \"delete-a-past-diet-session\"\u003eDelete a previously created diet session:\u003c/a\u003e `delete`"},{"lineNumber":727,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":728,"author":{"gitId":"CFZeon"},"content":"The feature allows users to delete previously created diet sessions."},{"lineNumber":729,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":730,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":731,"author":{"gitId":"zsk612"},"content":"When the user types `delete [INDEX_OF_SESSION]` from a Diet manager instance the following sequence occurs. "},{"lineNumber":732,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `delete 1`."},{"lineNumber":733,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `dietManagerUi.getCommand()` to receive user input."},{"lineNumber":734,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietManagerParser.parseCommand()` to parse user input into a string array."},{"lineNumber":735,"author":{"gitId":"CFZeon"},"content":"1. Creating `DietSessionDelete` object."},{"lineNumber":736,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietManager` calls `CommandLib` to return the correct Command Object `DietSessionDelete`."},{"lineNumber":737,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":738,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietSessionDelete.execute()` with the rest of parsed input."},{"lineNumber":739,"author":{"gitId":"CFZeon"},"content":"    1. The execute method then deletes the file at the indicated index `1` if a file was present there."},{"lineNumber":740,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionDelete` returns a CommandResult object with the delete confirmation message from DietmanagerUi."},{"lineNumber":741,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":742,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":743,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":744,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":745,"author":{"gitId":"CFZeon"},"content":"The sequence diagram below summarizes how Diet sessions are deleted:"},{"lineNumber":746,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":747,"author":{"gitId":"CFZeon"},"content":"![Delete_Diet_Session_Sequence_Diagram](pictures/Zeon/DietSessionDelete.png)"},{"lineNumber":748,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":749,"author":{"gitId":"CFZeon"},"content":"- **Alternative 1 (current choice):** Provides an indexed array for the user to choose from to delete."},{"lineNumber":750,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":751,"author":{"gitId":"CFZeon"},"content":"    - Pros: The user can delete things easier as it only requires typing a number."},{"lineNumber":752,"author":{"gitId":"CFZeon"},"content":"    - Cons: Execution time is slower as it requires more calculations."},{"lineNumber":753,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":754,"author":{"gitId":"CFZeon"},"content":"- **Alternative 2:** Delete based on a user string input of the file name."},{"lineNumber":755,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":756,"author":{"gitId":"CFZeon"},"content":"    - Pros: Easier to implement."},{"lineNumber":757,"author":{"gitId":"CFZeon"},"content":"    - Cons: Users are greatly inconvenienced by how much they have to type.    "},{"lineNumber":758,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":759,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":760,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":761,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":762,"author":{"gitId":"CFZeon"},"content":"#### 4.3.6. \u003ca id \u003d \"clear-all-past-diet-sessions\"\u003eClear all past diet session:\u003c/a\u003e `clear`"},{"lineNumber":763,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":764,"author":{"gitId":"CFZeon"},"content":"The feature allows users to clear all previously created diet sessions at once."},{"lineNumber":765,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":766,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":767,"author":{"gitId":"CFZeon"},"content":"When the user types `clear` the following sequence occurs. "},{"lineNumber":768,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `clear`."},{"lineNumber":769,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `dietManagerUi.getCommand()` to receive user input."},{"lineNumber":770,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietManagerParser.parseCommand()` to parse user input into a string array."},{"lineNumber":771,"author":{"gitId":"CFZeon"},"content":"1. Creating `DietSessionClear` object."},{"lineNumber":772,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietManager` calls `CommandLib` to return the correct Command Object `DietSessionClear`."},{"lineNumber":773,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":774,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietSessionDelete.execute()` with the rest of parsed input."},{"lineNumber":775,"author":{"gitId":"CFZeon"},"content":"    1. The execute method then deletes the file at the indicated index `1` if a file was present there."},{"lineNumber":776,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionDelete` returns a CommandResult object with the delete confirmation message from DietmanagerUi."},{"lineNumber":777,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":778,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":779,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":780,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":781,"author":{"gitId":"CFZeon"},"content":"The sequence diagram below summarizes how Diet sessions are all cleared:"},{"lineNumber":782,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":783,"author":{"gitId":"CFZeon"},"content":"![Delete_Diet_Session_Sequence_Diagram](pictures/Zeon/DietSessionClear.png)"},{"lineNumber":784,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":785,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":786,"author":{"gitId":"CFZeon"},"content":"- **Alternative 1 (current choice):** Iterate through an array of files and delete everything."},{"lineNumber":787,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":788,"author":{"gitId":"CFZeon"},"content":"    - Pros: The file structure is more homogeneous."},{"lineNumber":789,"author":{"gitId":"CFZeon"},"content":"    - Cons: Execution time is slower as it requires iterating through every file in the array."},{"lineNumber":790,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":791,"author":{"gitId":"CFZeon"},"content":"- **Alternative 2:** delete the folder with the save files in it."},{"lineNumber":792,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":793,"author":{"gitId":"CFZeon"},"content":"    - Pros: Execution time is faster though still limited by storage speed. "},{"lineNumber":794,"author":{"gitId":"CFZeon"},"content":"    - Cons: File structure of the entire program is not as stable.    "},{"lineNumber":795,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":796,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":797,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":798,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":799,"author":{"gitId":"CFZeon"},"content":"#### 4.3.7. \u003ca id \u003d \"search-for-past-diet-sessions\"\u003eSearch for Past Diet Sessions:\u003c/a\u003e `search`"},{"lineNumber":800,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":801,"author":{"gitId":"CFZeon"},"content":"The feature allows users to search for previously created diet sessions within a date range or with a specified tag."},{"lineNumber":802,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":803,"author":{"gitId":"CFZeon"},"content":"**Implementation**  "},{"lineNumber":804,"author":{"gitId":"CFZeon"},"content":"When the user types `search /s 2020-11-01 /e 2020-11-03 /t breakfast` the following sequence occurs. "},{"lineNumber":805,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `search /s 2020-11-01 /e 2020-11-03 /t breakfast`."},{"lineNumber":806,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `dietManagerUi.getCommand()` to receive user input."},{"lineNumber":807,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietManagerParser.parseCommand()` to parse user input into a string array."},{"lineNumber":808,"author":{"gitId":"CFZeon"},"content":"1. Creating `DietSessionSearch` object."},{"lineNumber":809,"author":{"gitId":"CFZeon"},"content":"   1. Based on the parsed input, `DietManager` calls `CommandLib` to return the correct Command Object `DietSessionSearch`."},{"lineNumber":810,"author":{"gitId":"CFZeon"},"content":"1. Executing command."},{"lineNumber":811,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `DietSessionSearch.execute()` with the rest of parsed input."},{"lineNumber":812,"author":{"gitId":"CFZeon"},"content":"    1. The execute method then iterates through the entire folder and looks for empty tags and folders with the methods `checkEmptyTag()` and `checkEmptyFolder`."},{"lineNumber":813,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionSearch` calls the `addToSearchResult()` method which from within calls the `addRow()` method that converts the file output into a table format."},{"lineNumber":814,"author":{"gitId":"CFZeon"},"content":"    1. `DietSessionSearch` returns a `CommandResult` object with the search results."},{"lineNumber":815,"author":{"gitId":"CFZeon"},"content":"    1. If the starting search date is after the ending search date, the method will return with an exception which is then returned with the `CommandResult` message."},{"lineNumber":816,"author":{"gitId":"CFZeon"},"content":"1. Prompting result to user."},{"lineNumber":817,"author":{"gitId":"CFZeon"},"content":"    1. `DietManager` calls `CommandResult.getFeedbackMessage()` to get the execution feedback message."},{"lineNumber":818,"author":{"gitId":"CFZeon"},"content":"    1. `CommandResult` calls `Ui.showToUser()` to show result to the user."},{"lineNumber":819,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":820,"author":{"gitId":"CFZeon"},"content":"The sequence diagram below summarizes how Diet sessions is searched:"},{"lineNumber":821,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":822,"author":{"gitId":"CFZeon"},"content":"![Search_Diet_Session_Sequence_Diagram](pictures/Zeon/SearchDietSession.png)"},{"lineNumber":823,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":824,"author":{"gitId":"CFZeon"},"content":"- **Alternative 1 (current choice):** Search by date and tags."},{"lineNumber":825,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":826,"author":{"gitId":"CFZeon"},"content":"    - Pros: Users can get a precise range of dates for their diet sessions."},{"lineNumber":827,"author":{"gitId":"CFZeon"},"content":"    - Cons: Execution time is slower as it requires more calculations."},{"lineNumber":828,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":829,"author":{"gitId":"CFZeon"},"content":"- **Alternative 2:** Search only by tags."},{"lineNumber":830,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":831,"author":{"gitId":"CFZeon"},"content":"    - Pros: Easier to implement. "},{"lineNumber":832,"author":{"gitId":"CFZeon"},"content":"    - Cons: The information is harder to filter through.    "},{"lineNumber":833,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":834,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":835,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":836,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":837,"author":{"gitId":"CFZeon"},"content":"#### 4.3.8. \u003ca id \u003d \"exit-the-diet-manager\"\u003eExit the Diet manager:\u003c/a\u003e `end`"},{"lineNumber":838,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":839,"author":{"gitId":"CFZeon"},"content":"The function returns the user back to the main menu of The Schwarzenegger."},{"lineNumber":840,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":841,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**  "},{"lineNumber":842,"author":{"gitId":"CFZeon"},"content":"When the user types `end` the following sequence occurs. "},{"lineNumber":843,"author":{"gitId":"CFZeon"},"content":"1. The user keys in `end`."},{"lineNumber":844,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":845,"author":{"gitId":"CFZeon"},"content":"    1. A `DietSessionUi` component will call `dietSessionUI.getInput()`. "},{"lineNumber":846,"author":{"gitId":"CFZeon"},"content":"    1. Input will be parsed in `processCommand()`.  "},{"lineNumber":847,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":848,"author":{"gitId":"CFZeon"},"content":"2. Exiting of inputLoop()"},{"lineNumber":849,"author":{"gitId":"CFZeon"},"content":"    The inputLoop() exits when userInput.equals(\"end\"), returning to the `Start()` method, then ending the `DietManager` instance."},{"lineNumber":850,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":851,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":852,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":853,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":854,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":855,"author":{"gitId":"tienkhoa16"},"content":"### 4.4. \u003ca id\u003d\"workout-related-features\"\u003eWorkout-related Features\u003c/a\u003e"},{"lineNumber":856,"author":{"gitId":"tienkhoa16"},"content":"#### 4.4.1. \u003ca id\u003d\"creating-a-new-workout-session\"\u003eCreating a New Workout Session\u003c/a\u003e"},{"lineNumber":857,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":858,"author":{"gitId":"yujinyang1998"},"content":"Users can create a new workout session. The failure to do so will trigger an exception where the user will be notified "},{"lineNumber":859,"author":{"gitId":"yujinyang1998"},"content":"of the reason, e.g. invalid command or IO related errors. The action will be aborted. If the creation is successful, "},{"lineNumber":860,"author":{"gitId":"yujinyang1998"},"content":"the user will go into the new workout session to edit the exercises in that session."},{"lineNumber":861,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":862,"author":{"gitId":"yujinyang1998"},"content":"The user can specify tags for the session. Creation time, last edit time and saving file name will be auto generated "},{"lineNumber":863,"author":{"gitId":"yujinyang1998"},"content":"by the application and saved. "},{"lineNumber":864,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":865,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":866,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":867,"author":{"gitId":"wgzesg"},"content":"When the user attempts to create a new workout session, the Ui, WorkoutManagerParser "},{"lineNumber":868,"author":{"gitId":"wgzesg"},"content":"and CommandLib class will be accessed and the following sequence of "},{"lineNumber":869,"author":{"gitId":"wgzesg"},"content":"actions are called to return a command object NewWs."},{"lineNumber":870,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":871,"author":{"gitId":"wgzesg"},"content":"1. User executes `new /t leg chest`"},{"lineNumber":872,"author":{"gitId":"wgzesg"},"content":"     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."},{"lineNumber":873,"author":{"gitId":"wgzesg"},"content":"     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"},{"lineNumber":874,"author":{"gitId":"wgzesg"},"content":"1. Creation of command object."},{"lineNumber":875,"author":{"gitId":"wgzesg"},"content":"     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `NewWs`."},{"lineNumber":876,"author":{"gitId":"wgzesg"},"content":"1. Executing Command"},{"lineNumber":877,"author":{"gitId":"wgzesg"},"content":"    1. `WorkoutManager` calls `NewWS.execute()` with the rest of parsed input."},{"lineNumber":878,"author":{"gitId":"wgzesg"},"content":"    1. `NewWS` parse the arguments to identify the tags"},{"lineNumber":879,"author":{"gitId":"CFZeon"},"content":"    3. `NewWS` calls `PastRecordList.add()` to create a new file to store information in this session. "},{"lineNumber":880,"author":{"gitId":"wgzesg"},"content":"    If the creation fails, the action is aborted. Else, this record will be stored and the file path will "},{"lineNumber":881,"author":{"gitId":"wgzesg"},"content":"    be returned."},{"lineNumber":882,"author":{"gitId":"wgzesg"},"content":"    4. `NewWS` creates a new `WorkoutSession` Object with the file path. "},{"lineNumber":883,"author":{"gitId":"wgzesg"},"content":"    5.  `NewWS` calls `workoutSession. workoutSessionStart()` so that user can add information into this session."},{"lineNumber":884,"author":{"gitId":"CFZeon"},"content":"    6. After user exits this workout, `WorkoutManager` returns a `CommandResult`."},{"lineNumber":885,"author":{"gitId":"CFZeon"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":886,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":887,"author":{"gitId":"wgzesg"},"content":"All description, warnings and response will be handled by `Ui` to ensure consistence across the app."},{"lineNumber":888,"author":{"gitId":"wgzesg"},"content":"The following sequence diagram shows how the new command works"},{"lineNumber":889,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":890,"author":{"gitId":"wgzesg"},"content":"The sequence diagram below summarizes how creating new workout session works:"},{"lineNumber":891,"author":{"gitId":"wgzesg"},"content":"![Load Data Sequence Diagram](pictures/zesong/NewWS.png)"},{"lineNumber":892,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":893,"author":{"gitId":"wgzesg"},"content":"Parsing of the user’s input command:  "},{"lineNumber":894,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":895,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** User’s commands are divided by space."},{"lineNumber":896,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":897,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: The parsing can be easily done by calling Java built-in function .split(). Supports multiple tags or no tags."},{"lineNumber":898,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Values for each variable cannot contain spaces which makes the application restrictive."},{"lineNumber":899,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":900,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** Multiple prompts for user’s input of a workout data."},{"lineNumber":901,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":902,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Users would not have to make sure that their command is syntactically right. "},{"lineNumber":903,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: The constant prompting could subject the application to a negative experience in the difficulty to use the commands."},{"lineNumber":904,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":905,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":906,"author":{"gitId":"tienkhoa16"},"content":"#### 4.4.1.1. \u003ca id\u003d\"adding-an-exercise\"\u003eAdding an Exercise\u003c/a\u003e"},{"lineNumber":907,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":908,"author":{"gitId":"yujinyang1998"},"content":"Users can add a new exercise. The failure to do so will trigger an exception where the user will be notified of "},{"lineNumber":909,"author":{"gitId":"yujinyang1998"},"content":"the reason, e.g. invalid command or IO related errors. The action will be aborted. If the addition is successful, "},{"lineNumber":910,"author":{"gitId":"yujinyang1998"},"content":"a new exercise will be added to the exerciselist."},{"lineNumber":911,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":912,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":913,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":914,"author":{"gitId":"yujinyang1998"},"content":"When the user attempts to add a new exercise, the CommonUi, WorkoutSession, WorkoutSessionParser"},{"lineNumber":915,"author":{"gitId":"yujinyang1998"},"content":", CommandLib, WorkoutSessionAdd and WorkoutSessionStorage class will be accessed and the following sequence of "},{"lineNumber":916,"author":{"gitId":"yujinyang1998"},"content":"actions are called to return a CommandResult object containing a message to show to user."},{"lineNumber":917,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":918,"author":{"gitId":"yujinyang1998"},"content":"1. User executes `add benchpress /n 6 /w 120`"},{"lineNumber":919,"author":{"gitId":"yujinyang1998"},"content":"     1. `WorkoutSession` calls `CommonUi.getUserCommand()` to receive user input."},{"lineNumber":920,"author":{"gitId":"yujinyang1998"},"content":"     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."},{"lineNumber":921,"author":{"gitId":"yujinyang1998"},"content":"1. Creation of command object."},{"lineNumber":922,"author":{"gitId":"yujinyang1998"},"content":"     1. Based on the parsed input, `WorkoutSession` calls `CommandLib` to return the correct Command Object `WorkoutSessionAdd`."},{"lineNumber":923,"author":{"gitId":"yujinyang1998"},"content":"1. Executing Command"},{"lineNumber":924,"author":{"gitId":"yujinyang1998"},"content":"    1. `WorkoutSession` calls `WorkoutSessionAdd.execute()` with the rest of parsed input."},{"lineNumber":925,"author":{"gitId":"yujinyang1998"},"content":"    2. `WorkoutSessionAdd` parse the arguments to identify the repetitions and weight for the exercise."},{"lineNumber":926,"author":{"gitId":"yujinyang1998"},"content":"    3. `WorkoutSessionAdd` calls `WorkOutSession.Storage.writeToFile()` to store information of all exercises recorded. "},{"lineNumber":927,"author":{"gitId":"yujinyang1998"},"content":"    4. `WorkoutSessionAdd` returns a `CommandResult` to WorkoutSession`."},{"lineNumber":928,"author":{"gitId":"yujinyang1998"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":929,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":930,"author":{"gitId":"yujinyang1998"},"content":"All description, warnings and response will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":931,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":932,"author":{"gitId":"yujinyang1998"},"content":"The sequence diagram below summarizes how the add command works:"},{"lineNumber":933,"author":{"gitId":"yujinyang1998"},"content":"![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionAdd.png)"},{"lineNumber":934,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":935,"author":{"gitId":"yujinyang1998"},"content":"Below are the sub-diagrams: \u003ca id\u003d\"figure-4-4-1-1-1\"\u003e\u003c/a\u003e"},{"lineNumber":936,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":937,"author":{"gitId":"yujinyang1998"},"content":"![Load Data Sequence Diagram](pictures/jinyang/ParseInputWorkoutSession.png)\u003cbr\u003e"},{"lineNumber":938,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":939,"author":{"gitId":"yujinyang1998"},"content":"Figure 4.4.1.1.1. Sub-diagram for Parsing Input in WorkoutSession"},{"lineNumber":940,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":941,"author":{"gitId":"yujinyang1998"},"content":"\u003ca id\u003d\"figure-4-4-1-1-2\"\u003e![Load Data Sequence Diagram](pictures/jinyang/ReturnMsgToUser.jpg)\u003c/a\u003e\u003cbr\u003e"},{"lineNumber":942,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":943,"author":{"gitId":"yujinyang1998"},"content":"Figure 4.4.1.1.2. Sub-diagram for Showing Message to User"},{"lineNumber":944,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":945,"author":{"gitId":"yujinyang1998"},"content":"**Design considerations**"},{"lineNumber":946,"author":{"gitId":"yujinyang1998"},"content":"Aspects: Making add and its parameters as seperate or a single input"},{"lineNumber":947,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":948,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 1 (current choice):** Making add and its parameters as a single input"},{"lineNumber":949,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":950,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: Would be easier for the user to enter as it takes less time to enter and it is not too difficult of a command."},{"lineNumber":951,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: It might cause the user to miss the format for inputting add."},{"lineNumber":952,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":953,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 2:** Making add and its parameters as separate inputs"},{"lineNumber":954,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":955,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: Would make it neater and more clear to the user what to enter as they would only enter one input every time."},{"lineNumber":956,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: It would take multiple actions to perform a single task, depending on the number of parameters."},{"lineNumber":957,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":958,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":959,"author":{"gitId":"tienkhoa16"},"content":"#### 4.4.1.2. \u003ca id\u003d\"deleting-an-exercise\"\u003eDeleting an Exercise\u003c/a\u003e"},{"lineNumber":960,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":961,"author":{"gitId":"yujinyang1998"},"content":"Users can delete an exercise from a pre-existing list of exercise. The failure to do so will trigger an exception where the user will be notified of "},{"lineNumber":962,"author":{"gitId":"yujinyang1998"},"content":"the reason, e.g. invalid command or IO related errors. The action will be aborted. If the deletion is successful, "},{"lineNumber":963,"author":{"gitId":"yujinyang1998"},"content":"a new exercise will be added to the exerciselist."},{"lineNumber":964,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":965,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":966,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":967,"author":{"gitId":"yujinyang1998"},"content":"When the user attempts to delete an exercise, the CommonUi, WorkoutSession, WorkoutSessionParser"},{"lineNumber":968,"author":{"gitId":"yujinyang1998"},"content":", CommandLib, WorkoutSessionDelete and WorkoutSessionStorage class will be accessed and the following sequence of "},{"lineNumber":969,"author":{"gitId":"yujinyang1998"},"content":"actions are called to return a CommandResult object containing a message to show to user."},{"lineNumber":970,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":971,"author":{"gitId":"yujinyang1998"},"content":"1. User executes `delete 1`"},{"lineNumber":972,"author":{"gitId":"yujinyang1998"},"content":"     1. `WorkoutSession` calls `CommonUi.getUserCommand()` to receive user input."},{"lineNumber":973,"author":{"gitId":"yujinyang1998"},"content":"     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."},{"lineNumber":974,"author":{"gitId":"yujinyang1998"},"content":"1. Creation of command object."},{"lineNumber":975,"author":{"gitId":"yujinyang1998"},"content":"     1. Based on the parsed input, `WorkoutSession` calls `CommandLib` to return the correct Command Object `WorkoutSessionDelete`."},{"lineNumber":976,"author":{"gitId":"yujinyang1998"},"content":"1. Executing Command"},{"lineNumber":977,"author":{"gitId":"yujinyang1998"},"content":"    1. `WorkoutSession` calls `WorkoutSessionDelete.execute()` with the rest of parsed input."},{"lineNumber":978,"author":{"gitId":"yujinyang1998"},"content":"    2. `WorkoutSessionDelete` parse the arguments to identify the index of the exercise to be deleted."},{"lineNumber":979,"author":{"gitId":"yujinyang1998"},"content":"    3. `WorkoutSessionDelete` calls `exerciseList.remove()` to delete the respective exercise."},{"lineNumber":980,"author":{"gitId":"yujinyang1998"},"content":"    3. `WorkoutSessionDelete` calls `WorkOutSession.Storage.writeToFile()` to store information of all exercises recorded. "},{"lineNumber":981,"author":{"gitId":"yujinyang1998"},"content":"    4. `WorkoutSessionDelete` returns a `CommandResult` to WorkoutSession`."},{"lineNumber":982,"author":{"gitId":"yujinyang1998"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":983,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":984,"author":{"gitId":"yujinyang1998"},"content":"All description, warnings and response will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":985,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":986,"author":{"gitId":"yujinyang1998"},"content":"The sequence diagram below summarizes how the delete command works:"},{"lineNumber":987,"author":{"gitId":"yujinyang1998"},"content":"![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionDelete.png)"},{"lineNumber":988,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":989,"author":{"gitId":"yujinyang1998"},"content":"You can refer to [Figure 4.4.1.1.1. Sub-diagram for Parsing Input in WorkoutSession](#figure-4-4-1-1-1) and [Figure 4.4.1.1.2. Sub-diagram for Showing Message to User](#figure-4-4-1-1-2) for the corresponding sub-diagrams."},{"lineNumber":990,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":991,"author":{"gitId":"yujinyang1998"},"content":"**Design considerations**"},{"lineNumber":992,"author":{"gitId":"yujinyang1998"},"content":"Aspects: Making delete and index to delete as separate or a single input"},{"lineNumber":993,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":994,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 1 (current choice):** Making delete and index to delete as a single input"},{"lineNumber":995,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":996,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: Would be easier for the user to enter as it takes less time to enter and it is not too difficult of a command."},{"lineNumber":997,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: It might cause the user to miss the format for inputting delete."},{"lineNumber":998,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":999,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 2:** Making delete and index to delete as separate inputs"},{"lineNumber":1000,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1001,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: Would make it neater and more clear to the user what to enter as they would only enter one input every time."},{"lineNumber":1002,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: It would take two actions to perform a single task."},{"lineNumber":1003,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1004,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1005,"author":{"gitId":"tienkhoa16"},"content":"#### 4.4.1.3. \u003ca id\u003d\"listing-all-exercises-in-this-session\"\u003eListing All Exercises in This Session\u003c/a\u003e"},{"lineNumber":1006,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1007,"author":{"gitId":"yujinyang1998"},"content":"Users can list all exercise from a pre-existing list of exercise. The failure to do so will trigger an exception where the user will be notified of "},{"lineNumber":1008,"author":{"gitId":"yujinyang1998"},"content":"the reason, e.g. invalid command or IO related errors. The action will be aborted. If the listing is successful, "},{"lineNumber":1009,"author":{"gitId":"yujinyang1998"},"content":"the user will be able to see the full list of exercises."},{"lineNumber":1010,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1011,"author":{"gitId":"yujinyang1998"},"content":"**Implementation**"},{"lineNumber":1012,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1013,"author":{"gitId":"yujinyang1998"},"content":"When the user attempts to list all exercises, the CommonUi, WorkoutSession, WorkoutSessionParser"},{"lineNumber":1014,"author":{"gitId":"yujinyang1998"},"content":", CommandLib, WorkoutSessionList and WorkoutSessionStorage class will be accessed and the following sequence of "},{"lineNumber":1015,"author":{"gitId":"yujinyang1998"},"content":"actions are called to return a CommandResult object containing a message to show to user."},{"lineNumber":1016,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1017,"author":{"gitId":"yujinyang1998"},"content":"1. User executes `list`"},{"lineNumber":1018,"author":{"gitId":"yujinyang1998"},"content":"     1. `WorkoutSession` calls `CommonUi.getUserCommand()` to receive user input."},{"lineNumber":1019,"author":{"gitId":"yujinyang1998"},"content":"     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."},{"lineNumber":1020,"author":{"gitId":"yujinyang1998"},"content":"1. Creation of command object."},{"lineNumber":1021,"author":{"gitId":"yujinyang1998"},"content":"     1. Based on the parsed input, `WorkoutSession` calls `CommandLib` to return the correct Command Object `WorkoutSessionList`."},{"lineNumber":1022,"author":{"gitId":"yujinyang1998"},"content":"1. Executing Command"},{"lineNumber":1023,"author":{"gitId":"yujinyang1998"},"content":"    1. `WorkoutSession` calls `WorkoutSessionList.execute()` with the rest of parsed input."},{"lineNumber":1024,"author":{"gitId":"yujinyang1998"},"content":"    2. `WorkoutSessionList` calls `WorkoutSessionList.printList()` to check if the list is empty."},{"lineNumber":1025,"author":{"gitId":"yujinyang1998"},"content":"    3. `WorkoutSessionList.printList()` calls `WorkoutSessionList.formatList()` to arrange the list in a readable and dynamic format for the user."},{"lineNumber":1026,"author":{"gitId":"yujinyang1998"},"content":"    3. `WorkoutSessionList.formatList()` returns a String of formatted output to `WorkoutSessionList.printList()` then to `WorkoutSessionList`. "},{"lineNumber":1027,"author":{"gitId":"yujinyang1998"},"content":"    4. `WorkoutSessionList` returns a `CommandResult` to `WorkoutSession`."},{"lineNumber":1028,"author":{"gitId":"yujinyang1998"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":1029,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1030,"author":{"gitId":"yujinyang1998"},"content":"All description, warnings and response will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":1031,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1032,"author":{"gitId":"yujinyang1998"},"content":"The sequence diagram below summarizes how the list command works:"},{"lineNumber":1033,"author":{"gitId":"yujinyang1998"},"content":"![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionList.png)"},{"lineNumber":1034,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1035,"author":{"gitId":"yujinyang1998"},"content":"**Design considerations**"},{"lineNumber":1036,"author":{"gitId":"yujinyang1998"},"content":"Aspects: Length of results"},{"lineNumber":1037,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1038,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 1 (current choice):** Make the length for displaying exercise dynamic"},{"lineNumber":1039,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1040,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: The table would look more appealing as the spacing would be dynamic."},{"lineNumber":1041,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: It is a lot more difficult to code."},{"lineNumber":1042,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1043,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 2:** Make the length allocated for exercise really long"},{"lineNumber":1044,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1045,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: The code would be simpler."},{"lineNumber":1046,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: The table would look ugly for the user to look at."},{"lineNumber":1047,"author":{"gitId":"yujinyang1998"},"content":"    "},{"lineNumber":1048,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1049,"author":{"gitId":"yujinyang1998"},"content":"#### 4.4.1.4. \u003ca id\u003d\"searching-for-related-exercises\"\u003eSearching for Related Exercises\u003c/a\u003e"},{"lineNumber":1050,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1051,"author":{"gitId":"yujinyang1998"},"content":"Users can search for an exercise from a pre-existing list of exercise. The failure to do so will trigger an exception where the user will be notified of "},{"lineNumber":1052,"author":{"gitId":"yujinyang1998"},"content":"the reason, e.g. invalid command or IO related errors. The action will be aborted. If the searching is successful, "},{"lineNumber":1053,"author":{"gitId":"yujinyang1998"},"content":"the user will be able to see the list of exercises that match."},{"lineNumber":1054,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1055,"author":{"gitId":"yujinyang1998"},"content":"**Implementation**"},{"lineNumber":1056,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1057,"author":{"gitId":"yujinyang1998"},"content":"When the user attempts to search for an exercise from all exercises, the CommonUi, WorkoutSession, WorkoutSessionParser"},{"lineNumber":1058,"author":{"gitId":"yujinyang1998"},"content":", CommandLib, WorkoutSessionSearch and WorkoutSessionStorage class will be accessed and the following sequence of "},{"lineNumber":1059,"author":{"gitId":"yujinyang1998"},"content":"actions are called to return a CommandResult object containing a message to show to user."},{"lineNumber":1060,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1061,"author":{"gitId":"yujinyang1998"},"content":"1. User executes `search bench`"},{"lineNumber":1062,"author":{"gitId":"yujinyang1998"},"content":"     1. `WorkoutSession` calls `CommonUi.getUserCommand()` to receive user input."},{"lineNumber":1063,"author":{"gitId":"yujinyang1998"},"content":"     2. `WorkoutSession` calls `WorkoutSessionParser.workoutSessionParser` to convert the input to a string array."},{"lineNumber":1064,"author":{"gitId":"yujinyang1998"},"content":"1. Creation of command object."},{"lineNumber":1065,"author":{"gitId":"yujinyang1998"},"content":"     1. Based on the parsed input, `WorkoutSession` calls `CommandLib` to return the correct Command Object `WorkoutSessionSearch`."},{"lineNumber":1066,"author":{"gitId":"yujinyang1998"},"content":"1. Executing Command"},{"lineNumber":1067,"author":{"gitId":"yujinyang1998"},"content":"    1. `WorkoutSession` calls `WorkoutSessionSearch.execute()` with the rest of parsed input."},{"lineNumber":1068,"author":{"gitId":"yujinyang1998"},"content":"    2. `WorkoutSessionSearch` checks if the search term is empty. If it is empty, `WorkoutSessionSearch` returns a failure result to `WorkoutSession`. Otherwise, the process continues with step `3`"},{"lineNumber":1069,"author":{"gitId":"yujinyang1998"},"content":"    3. `WorkoutSessionSearch` calls `WorkoutSessionSearch.formatList()` to search the search term with the exerciseList. If it is empty, `WorkoutSessionSearch.formatList()` returns a failure result to `WorkoutSession`. Otherwise, the process continues with step `4`"},{"lineNumber":1070,"author":{"gitId":"yujinyang1998"},"content":"    4. `WorkoutSessionSearch` returns a `CommandResult` to `WorkoutSession`."},{"lineNumber":1071,"author":{"gitId":"yujinyang1998"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":1072,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1073,"author":{"gitId":"yujinyang1998"},"content":"All description, warnings and response will be handled by `CommonUi` to ensure consistence across the app."},{"lineNumber":1074,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1075,"author":{"gitId":"yujinyang1998"},"content":"The sequence diagram below summarizes how the search command works:"},{"lineNumber":1076,"author":{"gitId":"yujinyang1998"},"content":"![Load Data Sequence Diagram](pictures/jinyang/WorkoutSessionSearch.png)"},{"lineNumber":1077,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1078,"author":{"gitId":"yujinyang1998"},"content":"**Design considerations**"},{"lineNumber":1079,"author":{"gitId":"yujinyang1998"},"content":"Aspects: Length of results"},{"lineNumber":1080,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1081,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 1 (current choice):** Make the length for displaying exercise dynamic"},{"lineNumber":1082,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1083,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: The table would look more appealing as the spacing would be dynamic."},{"lineNumber":1084,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: It is a lot more difficult to code."},{"lineNumber":1085,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1086,"author":{"gitId":"yujinyang1998"},"content":"- **Alternative 2:** Make the length allocated for exercise really long"},{"lineNumber":1087,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1088,"author":{"gitId":"yujinyang1998"},"content":"    - Pros: The code would be simpler."},{"lineNumber":1089,"author":{"gitId":"yujinyang1998"},"content":"    - Cons: The table would look ugly for the user to look at."},{"lineNumber":1090,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1091,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1092,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":1093,"author":{"gitId":"wgzesg"},"content":"#### 4.4.2. \u003ca id\u003d\"listing-past-workout-sessions\"\u003eListing Past Workout Sessions\u003c/a\u003e"},{"lineNumber":1094,"author":{"gitId":"CFZeon"},"content":"The feature to list workoutSessions allows the user to view a summary of all the history workout sessions, including their index, creation date and tags."},{"lineNumber":1095,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1096,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":1097,"author":{"gitId":"CFZeon"},"content":"When the user attempts to list workoutSessions, the WorkoutManger, WorkoutManagerParse, ListWS and WorkoutManagerStorage class will be called upon. The following sequence of steps will then occur:"},{"lineNumber":1098,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1099,"author":{"gitId":"CFZeon"},"content":"1. User executes `list /s 20201010 /e 20201025`"},{"lineNumber":1100,"author":{"gitId":"wgzesg"},"content":"     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."},{"lineNumber":1101,"author":{"gitId":"wgzesg"},"content":"     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"},{"lineNumber":1102,"author":{"gitId":"wgzesg"},"content":"1. Creation of command object."},{"lineNumber":1103,"author":{"gitId":"wgzesg"},"content":"     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `ListWS`."},{"lineNumber":1104,"author":{"gitId":"wgzesg"},"content":"1. Executing Command"},{"lineNumber":1105,"author":{"gitId":"wgzesg"},"content":"    1. `WorkoutManager` calls `ListWS.execute()` to execute the command"},{"lineNumber":1106,"author":{"gitId":"CFZeon"},"content":"    3. `ListWS` calls `PastRecordList.list()`"},{"lineNumber":1107,"author":{"gitId":"CFZeon"},"content":"    1. `PastRecordList` will return formatted list."},{"lineNumber":1108,"author":{"gitId":"tienkhoa16"},"content":"    6. `WorkoutManager` returns a `CommandResult` which contains the formatted list and execution result."},{"lineNumber":1109,"author":{"gitId":"CFZeon"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":1110,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1111,"author":{"gitId":"CFZeon"},"content":"![Load Data Sequence Diagram](pictures/zesong/ListWS.png)"},{"lineNumber":1112,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1113,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":1114,"author":{"gitId":"wgzesg"},"content":"Aspects: Security of stored data"},{"lineNumber":1115,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1116,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** call public methods of Storage class to "},{"lineNumber":1117,"author":{"gitId":"wgzesg"},"content":"print the list"},{"lineNumber":1118,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1119,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: pastRecord are private and it can only be manipulated through designed public methods. Only selected data will be printed and viewed."},{"lineNumber":1120,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Most methods Storage needs to be a static."},{"lineNumber":1121,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1122,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** Storage return a readonly list of pastRecord."},{"lineNumber":1123,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1124,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: More versatile operations can be done."},{"lineNumber":1125,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: All data of pastRecord will be exposed."},{"lineNumber":1126,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1127,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1128,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1129,"author":{"gitId":"wgzesg"},"content":"#### 4.4.3. \u003ca id\u003d\"editing-workout-session\"\u003eEditing Workout Session\u003c/a\u003e"},{"lineNumber":1130,"author":{"gitId":"wgzesg"},"content":"User can anytime go back to edit a workout session created in the past such as"},{"lineNumber":1131,"author":{"gitId":"wgzesg"},"content":"adding or removing exercies in that session."},{"lineNumber":1132,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1133,"author":{"gitId":"wgzesg"},"content":"Each past workout session is stored in a different file name following its creation time."},{"lineNumber":1134,"author":{"gitId":"wgzesg"},"content":"The meta information of these past records such as file name, creation time are"},{"lineNumber":1135,"author":{"gitId":"wgzesg"},"content":"stored in another file which will be loaded as the program initlises."},{"lineNumber":1136,"author":{"gitId":"wgzesg"},"content":"The actual workout session record will only be loaded if needed e.g. when editting is called. "},{"lineNumber":1137,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1138,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":1139,"author":{"gitId":"CFZeon"},"content":"When the user attempts to edit a past workout session, the Ui, WorkoutManagerParser, CommandLib and WorkoutStorage class will be accessed and the following sequence of "},{"lineNumber":1140,"author":{"gitId":"wgzesg"},"content":"actions are called."},{"lineNumber":1141,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1142,"author":{"gitId":"wgzesg"},"content":"1. User executes `edit 1`"},{"lineNumber":1143,"author":{"gitId":"wgzesg"},"content":"     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."},{"lineNumber":1144,"author":{"gitId":"wgzesg"},"content":"     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"},{"lineNumber":1145,"author":{"gitId":"wgzesg"},"content":"1. Creation of command object."},{"lineNumber":1146,"author":{"gitId":"wgzesg"},"content":"     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `EditWS`."},{"lineNumber":1147,"author":{"gitId":"wgzesg"},"content":"1. Executing Command"},{"lineNumber":1148,"author":{"gitId":"wgzesg"},"content":"    1. `WorkoutManager` calls `EditWS.execute()` with the rest of parsed input."},{"lineNumber":1149,"author":{"gitId":"yujinyang1998"},"content":"    3. `EditWS` calls `PastRecordList.edit()` to locate the file. If the does not exist, the action is aborted. Else, `PastRecordList` updates the meta information of the file and write to local workoutSessionStorage. The file path will be returned."},{"lineNumber":1150,"author":{"gitId":"CFZeon"},"content":"    4. `EditWS` creates a new `WorkoutSession` Object with the file path. `WorkoutSession` is initilised by loading the data in the file."},{"lineNumber":1151,"author":{"gitId":"wgzesg"},"content":"    5.  `EditWS` calls `workoutSession.workoutSessionStart()` so that user start editing this session."},{"lineNumber":1152,"author":{"gitId":"CFZeon"},"content":"    6. After user exits this workout, `WorkoutManager` returns a `CommandResult`."},{"lineNumber":1153,"author":{"gitId":"CFZeon"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":1154,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1155,"author":{"gitId":"wgzesg"},"content":"All description, warnings and response will be handled by `Ui` to ensure consistence across the app."},{"lineNumber":1156,"author":{"gitId":"wgzesg"},"content":"The following sequence diagram shows how the new command works"},{"lineNumber":1157,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1158,"author":{"gitId":"wgzesg"},"content":"The sequence diagram below summarizes how editting past record works:"},{"lineNumber":1159,"author":{"gitId":"wgzesg"},"content":"![Load Data Sequence Diagram](pictures/zesong/EditWS.png)"},{"lineNumber":1160,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":1161,"author":{"gitId":"yujinyang1998"},"content":"Past record workoutSessionStorage and model design:  "},{"lineNumber":1162,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1163,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** store past workout sessions in different files and their meta information in a separate file"},{"lineNumber":1164,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1165,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Initialization will be faster as data loaded grows little even in long terms. "},{"lineNumber":1166,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Deleting files and creating files need to handle file names carefully."},{"lineNumber":1167,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1168,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** Load all past records during initialization."},{"lineNumber":1169,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1170,"author":{"gitId":"tienkhoa16"},"content":"    - Pros:  Run time can retrieve data faster as there is no need to access data in hard disk. "},{"lineNumber":1171,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: The application initialization will grow quickly as the application scales."},{"lineNumber":1172,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1173,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1174,"author":{"gitId":"wgzesg"},"content":"#### 4.4.4. \u003ca id\u003d\"deleting-a-workout-session\"\u003eDeleting a workout Session \u003c/a\u003e"},{"lineNumber":1175,"author":{"gitId":"wgzesg"},"content":"User can delete a workout session created in the past by giving its index."},{"lineNumber":1176,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1177,"author":{"gitId":"CFZeon"},"content":"Each past workout session is stored in a different file name following its creation time. The meta information of these past records such as file name, creation time are stored in another file which will be loaded as the program initlises. When the user tries to delete a file, the application refers to the meta information of the file to locate the file and delete it. Then the meta information of the record will be deleted."},{"lineNumber":1178,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1179,"author":{"gitId":"CFZeon"},"content":"User can clear all data by iteratively delete the record until the meta data file is empty. To simplify that, user can use `clear` command to achieve that."},{"lineNumber":1180,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1181,"author":{"gitId":"tienkhoa16"},"content":"**Implementation**"},{"lineNumber":1182,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1183,"author":{"gitId":"wgzesg"},"content":"When the user attempts to delete a past workout session, the Ui, WorkoutManagerParser, CommandLib"},{"lineNumber":1184,"author":{"gitId":"wgzesg"},"content":"and WorkoutStorage class will be accessed and the following sequence of actions are called."},{"lineNumber":1185,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1186,"author":{"gitId":"wgzesg"},"content":"1. User executes `delete 1` or `clear`"},{"lineNumber":1187,"author":{"gitId":"wgzesg"},"content":"     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."},{"lineNumber":1188,"author":{"gitId":"wgzesg"},"content":"     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"},{"lineNumber":1189,"author":{"gitId":"wgzesg"},"content":"1. Creation of command object."},{"lineNumber":1190,"author":{"gitId":"wgzesg"},"content":"     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `DeleteWS`"},{"lineNumber":1191,"author":{"gitId":"wgzesg"},"content":"     or `clearWS`."},{"lineNumber":1192,"author":{"gitId":"wgzesg"},"content":"1. Executing Command"},{"lineNumber":1193,"author":{"gitId":"wgzesg"},"content":"    1. `WorkoutManager` calls `DeleteWS.execute()` with the rest of parsed input."},{"lineNumber":1194,"author":{"gitId":"yujinyang1998"},"content":"    3. `DeleteWS` calls `PastRecorList.delete()` to locate the file. If the does not exist, the action is aborted. Else, `PastRecorList` remove the meta information of the file and delete the local workoutSessionStorage file."},{"lineNumber":1195,"author":{"gitId":"CFZeon"},"content":"    6. After user exits this workout, `WorkoutManager` returns a `CommandResult`."},{"lineNumber":1196,"author":{"gitId":"CFZeon"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":1197,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1198,"author":{"gitId":"wgzesg"},"content":"All description, warnings and response will be handled by `Ui` to ensure consistence across the app."},{"lineNumber":1199,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1200,"author":{"gitId":"CFZeon"},"content":"The sequence diagram below summarizes how deleting past record works:"},{"lineNumber":1201,"author":{"gitId":"CFZeon"},"content":"![Load Data Sequence Diagram](pictures/zesong/DeleteWS.png)"},{"lineNumber":1202,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1203,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":1204,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1205,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** Delete `workoutSession` by specifying index of it."},{"lineNumber":1206,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1207,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Quick and easy deletion by using ArrayList.get()."},{"lineNumber":1208,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Lesser alternatives for the user and user would have to identify the index first by executing `list` to get index of the session to be deleted."},{"lineNumber":1209,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1210,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** Delete `workoutSession` by specifying `workoutSession` tags or dates."},{"lineNumber":1211,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1212,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: More alternatives for users. Can bulk delete files with certain attributes. "},{"lineNumber":1213,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Tags and dates does not uniquely identify the record hence may result in accidental wrong deletion."},{"lineNumber":1214,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1215,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1216,"author":{"gitId":"wgzesg"},"content":"#### 4.4.5. \u003ca id\u003d\"searching-based-on-conditions\"\u003eSearching Based on Conditions\u003c/a\u003e"},{"lineNumber":1217,"author":{"gitId":"wgzesg"},"content":"The feature `search` allows the user to view a summary of all the history "},{"lineNumber":1218,"author":{"gitId":"wgzesg"},"content":"workout sessions which satisfies certain conditions."},{"lineNumber":1219,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1220,"author":{"gitId":"CFZeon"},"content":"The user can search by the date of creation, or the tags that the session has. User can put in 0"},{"lineNumber":1221,"author":{"gitId":"wgzesg"},"content":"or 1 or 2 criteria during search. "},{"lineNumber":1222,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1223,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1224,"author":{"gitId":"CFZeon"},"content":"The user can attach variable number of tags after `/t` and one date after `/d`. The date must be specified in certain formats for it to be recognisable. Else, it will be treated as there is no date criteria given."},{"lineNumber":1225,"author":{"gitId":"tienkhoa16"},"content":"[See here](#appendix-e-supported-formats-of-date-input) for all supported formats."},{"lineNumber":1226,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1227,"author":{"gitId":"CFZeon"},"content":"The tag criterion selects sessions which contains all the tags that the user specified in the search. The date criterion selects the sessions which is created on that date. Only sessions that satisfies all conditions will be selected and displayed."},{"lineNumber":1228,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1229,"author":{"gitId":"CFZeon"},"content":"The result is displayed in a table with the index of the selected records so that users can easily do further operations on them, e.g. `delete` or `edit`."},{"lineNumber":1230,"author":{"gitId":"wgzesg"},"content":" "},{"lineNumber":1231,"author":{"gitId":"CFZeon"},"content":" **Implementation**"},{"lineNumber":1232,"author":{"gitId":"CFZeon"},"content":" "},{"lineNumber":1233,"author":{"gitId":"CFZeon"},"content":"When the user attempts to list workoutSessions, the WorkoutManger, DeleteWS, WorkoutManagerStorage and WorkoutManagerParse class will be called upon. The following sequence of steps will then occur:"},{"lineNumber":1234,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1235,"author":{"gitId":"wgzesg"},"content":"1. User executes `search /t leg /d 20201017`"},{"lineNumber":1236,"author":{"gitId":"wgzesg"},"content":"     1. `WorkoutManager` calls `Ui.getUserCommand()` to receive user input."},{"lineNumber":1237,"author":{"gitId":"wgzesg"},"content":"     2. `WorkoutManager` calls `WorkoutManagerParser.parse` into a string array"},{"lineNumber":1238,"author":{"gitId":"wgzesg"},"content":"1. Creation of command object."},{"lineNumber":1239,"author":{"gitId":"wgzesg"},"content":"     1. Based on the parsed input, `WorkoutManager` calls `CommandLib` to return the correct Command Object `SearchWS`."},{"lineNumber":1240,"author":{"gitId":"wgzesg"},"content":"1. Executing Command"},{"lineNumber":1241,"author":{"gitId":"wgzesg"},"content":"    1. `WorkoutManager` calls `SearchWS.execute()` to execute the command"},{"lineNumber":1242,"author":{"gitId":"CFZeon"},"content":"    3. `SearchWS` calls `PastRecorList.search()`"},{"lineNumber":1243,"author":{"gitId":"tienkhoa16"},"content":"    1. `PastRecordList` will call `WorkoutManagerParser.parse` to parse the arguments into an array of predicates"},{"lineNumber":1244,"author":{"gitId":"tienkhoa16"},"content":"    1. `PastRecordList` filters the pastRecord arraylist and return a string representation of the filtered records to `WorkoutManager`"},{"lineNumber":1245,"author":{"gitId":"CFZeon"},"content":"    6. `WorkoutManager` returns a `CommandResult`."},{"lineNumber":1246,"author":{"gitId":"CFZeon"},"content":"1. Based on `CommandResult`, correct response will be printed to user."},{"lineNumber":1247,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1248,"author":{"gitId":"wgzesg"},"content":"The sequence diagram below summarizes how searching record works:"},{"lineNumber":1249,"author":{"gitId":"wgzesg"},"content":"![Load Data Sequence Diagram](pictures/zesong/SearchWS.png)"},{"lineNumber":1250,"author":{"gitId":"tienkhoa16"},"content":"**Design considerations**"},{"lineNumber":1251,"author":{"gitId":"wgzesg"},"content":"Aspects: indexing the selected results"},{"lineNumber":1252,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1253,"author":{"gitId":"CFZeon"},"content":"The index of a record is not stored in the schema because it easily varies with addition and deletion. Thus given a record, searching for its index will have higher time complexity."},{"lineNumber":1254,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1255,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 1 (current choice):** print out the actual index of the record "},{"lineNumber":1256,"author":{"gitId":"wgzesg"},"content":"in the meta info file."},{"lineNumber":1257,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1258,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: The index is useful for user to use for future actions."},{"lineNumber":1259,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Checking for the actual location complicates the search time complexity."},{"lineNumber":1260,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1261,"author":{"gitId":"tienkhoa16"},"content":"- **Alternative 2:** print out the index of the element in the result list."},{"lineNumber":1262,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1263,"author":{"gitId":"tienkhoa16"},"content":"    - Pros: Easy to implement. Low time complexity."},{"lineNumber":1264,"author":{"gitId":"tienkhoa16"},"content":"    - Cons: Since the index in result list is not the same as the index in actual record meta, user cannot use the index for further actions."},{"lineNumber":1265,"author":{"gitId":"CFZeon"},"content":"    "},{"lineNumber":1266,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1267,"author":{"gitId":"wgzesg"},"content":"### 4.5. \u003ca id\u003d\"logging\"\u003eLogging\u003c/a\u003e"},{"lineNumber":1268,"author":{"gitId":"CFZeon"},"content":"Logging in the application refers to storing exceptions, warnings and messages that occur during the execution of Kitchen Helper. It was included to help developers to identify bugs and to simplify their debugging process. "},{"lineNumber":1269,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1270,"author":{"gitId":"tienkhoa16"},"content":"The `java.util.logging` package in Java is used for logging. The logging mechanism can be managed from the `SchwarzeneggerLogger` class through the `logger` attribute. "},{"lineNumber":1271,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1272,"author":{"gitId":"tienkhoa16"},"content":"All controls of the logger for the application can be viewed/ altered in the class construction. The current settings for the logger are as follow:"},{"lineNumber":1273,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1274,"author":{"gitId":"tienkhoa16"},"content":"- All information is logged into a log file, `SchwarzeneggerLogs.log`."},{"lineNumber":1275,"author":{"gitId":"CFZeon"},"content":"- Logging is made to be displayed in the `SimpleFormatter` style where the date, class and error description are recorded."},{"lineNumber":1276,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1277,"author":{"gitId":"CFZeon"},"content":"Logging Levels:"},{"lineNumber":1278,"author":{"gitId":"CFZeon"},"content":"- `Level.SEVERE`: a serious failure, which prevents normal execution of the program, for end users and system administrators."},{"lineNumber":1279,"author":{"gitId":"CFZeon"},"content":"- `Level.WARNING`: a potential problem, for end users and system administrators."},{"lineNumber":1280,"author":{"gitId":"CFZeon"},"content":"- `Level.INFO`: reasonably significant informational message for end users and system administrators."},{"lineNumber":1281,"author":{"gitId":"CFZeon"},"content":"- `Level.CONFIG`: hardware configuration, such as CPU type."},{"lineNumber":1282,"author":{"gitId":"CFZeon"},"content":"- `Level.FINE`, `Level.FINER`, `Level.FINEST`: three levels used for providing tracing information for the software developers."},{"lineNumber":1283,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1284,"author":{"gitId":"tienkhoa16"},"content":"`SchwarzeneggerLogger` follows singleton design pattern. Thus, other classes can access the `logger` by calling `SchwarzeneggerLogger.getInstanceLogger()`, and logging can be done by invoking the function `log()`. This will ensure that all loggings will be made to the same file across the various classes. "},{"lineNumber":1285,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1286,"author":{"gitId":"CFZeon"},"content":"An example is shown below:"},{"lineNumber":1287,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1288,"author":{"gitId":"CFZeon"},"content":"```"},{"lineNumber":1289,"author":{"gitId":"tienkhoa16"},"content":"private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":1290,"author":{"gitId":"tienkhoa16"},"content":"logger.log(Level.WARNING, DESCRIPTION_OF_WARNING, e.toString());"},{"lineNumber":1291,"author":{"gitId":"CFZeon"},"content":"```"},{"lineNumber":1292,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1293,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1294,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1295,"author":{"gitId":"tienkhoa16"},"content":"## 5. \u003ca id\u003d\"testing\"\u003eTesting\u003c/a\u003e"},{"lineNumber":1296,"author":{"gitId":"tienkhoa16"},"content":"### 5.1. \u003ca id\u003d\"running-tests\"\u003eRunning Tests\u003c/a\u003e"},{"lineNumber":1297,"author":{"gitId":"tienkhoa16"},"content":"There are two ways to run tests for The Schwarzenegger."},{"lineNumber":1298,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1299,"author":{"gitId":"tienkhoa16"},"content":"**Method 1: Using IntelliJ JUnit test runner**"},{"lineNumber":1300,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1301,"author":{"gitId":"tienkhoa16"},"content":"- To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."},{"lineNumber":1302,"author":{"gitId":"tienkhoa16"},"content":"- To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."},{"lineNumber":1303,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1304,"author":{"gitId":"tienkhoa16"},"content":"**Method 2: Using Gradle**"},{"lineNumber":1305,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1306,"author":{"gitId":"tienkhoa16"},"content":"- To run all tests, open a console and run the command `gradlew clean test` (MacOS/Linux: `./gradlew clean test`)"},{"lineNumber":1307,"author":{"gitId":"tienkhoa16"},"content":" "},{"lineNumber":1308,"author":{"gitId":"tienkhoa16"},"content":" \u003e **Note:** If you are new to Gradle, refer to this [Gradle Tutorial](#https://se-education.org/guides/tutorials/gradle.html) to get more tips on how to use Gradle commands."},{"lineNumber":1309,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1310,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1311,"author":{"gitId":"tienkhoa16"},"content":"### 5.2. \u003ca id\u003d\"types-of-tests\"\u003eTypes of Tests\u003c/a\u003e"},{"lineNumber":1312,"author":{"gitId":"tienkhoa16"},"content":"We have use types of tests:"},{"lineNumber":1313,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1314,"author":{"gitId":"tienkhoa16"},"content":"1. Unit tests targeting the lowest level methods/classes.\u003cbr\u003e"},{"lineNumber":1315,"author":{"gitId":"tienkhoa16"},"content":"e.g. profile.UtilsTest"},{"lineNumber":1316,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1317,"author":{"gitId":"tienkhoa16"},"content":"1. Integration tests that are checking the integration of multiple code units (those code units are assumed to be working)."},{"lineNumber":1318,"author":{"gitId":"tienkhoa16"},"content":"e.g. logic.commands.workout.workoutsession.WorkoutSessionAddTest"},{"lineNumber":1319,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1320,"author":{"gitId":"tienkhoa16"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how they are connected together."},{"lineNumber":1321,"author":{"gitId":"tienkhoa16"},"content":"e.g. profile.ProfileSessionTest"},{"lineNumber":1322,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1323,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1324,"author":{"gitId":"tienkhoa16"},"content":"## 6. \u003ca id\u003d\"dev-ops\"\u003eDev Ops\u003c/a\u003e"},{"lineNumber":1325,"author":{"gitId":"tienkhoa16"},"content":"### 6.1. \u003ca id\u003d\"build-automation\"\u003eBuild Automation\u003c/a\u003e"},{"lineNumber":1326,"author":{"gitId":"tienkhoa16"},"content":"We use Gradle for tasks related to build automation, such as running tests, and checking code for style compliance."},{"lineNumber":1327,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1328,"author":{"gitId":"tienkhoa16"},"content":"To run all build-related tasks:"},{"lineNumber":1329,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1330,"author":{"gitId":"tienkhoa16"},"content":"1. Open a terminal in the project’s root directory."},{"lineNumber":1331,"author":{"gitId":"tienkhoa16"},"content":"2. Run the command:"},{"lineNumber":1332,"author":{"gitId":"tienkhoa16"},"content":"    - Windows: `gradlew build`"},{"lineNumber":1333,"author":{"gitId":"tienkhoa16"},"content":"    - MacOS/Linux: `./gradlew build`"},{"lineNumber":1334,"author":{"gitId":"tienkhoa16"},"content":"3. A message stating `BUILD SUCCESSFUL` will be shown in the terminal if all tasks run successfully.\u003cbr\u003e"},{"lineNumber":1335,"author":{"gitId":"tienkhoa16"},"content":"Otherwise, use the error report provided to resolve the issue before trying again. "},{"lineNumber":1336,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1337,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1338,"author":{"gitId":"tienkhoa16"},"content":"### 6.2. \u003ca id\u003d\"continuous-integration\"\u003eContinuous Integration\u003c/a\u003e"},{"lineNumber":1339,"author":{"gitId":"tienkhoa16"},"content":"We use Github Actions for continuous integration. No setup will be required for users who fork from the main The Schwarzenegger repository."},{"lineNumber":1340,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1341,"author":{"gitId":"tienkhoa16"},"content":"Whenever you create a pull request to the main repository for The Schwarzenegger:"},{"lineNumber":1342,"author":{"gitId":"tienkhoa16"},"content":"- Various checks will automatically be executed on your pull request."},{"lineNumber":1343,"author":{"gitId":"tienkhoa16"},"content":"- If any checks fail, click on it to view the cause of the error, and fix it in your branch before pushing it again."},{"lineNumber":1344,"author":{"gitId":"tienkhoa16"},"content":"- Ensure that all checks pass before merging your pull request."},{"lineNumber":1345,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1346,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1347,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1348,"author":{"gitId":"tienkhoa16"},"content":"### 6.3. \u003ca id\u003d\"coverage-report\"\u003eCoverage Report\u003c/a\u003e"},{"lineNumber":1349,"author":{"gitId":"tienkhoa16"},"content":"We use the IntelliJ IDEA’s coverage analysis tool for coverage reporting. A tutorial on how to install and use this tool can be found [here](https://www.youtube.com/watch?v\u003dyNYzZvyA2ik)."},{"lineNumber":1350,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1351,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1352,"author":{"gitId":"tienkhoa16"},"content":"### 6.4. \u003ca id\u003d\"making-a-release\"\u003eMaking a Release\u003c/a\u003e"},{"lineNumber":1353,"author":{"gitId":"tienkhoa16"},"content":"You can follow the steps below to make a new release:"},{"lineNumber":1354,"author":{"gitId":"tienkhoa16"},"content":"1. Generate the JAR file using Gradle by opening a terminal in the project’s root directory, and run the command:"},{"lineNumber":1355,"author":{"gitId":"tienkhoa16"},"content":"    - Windows: `gradlew clean shadowJar`"},{"lineNumber":1356,"author":{"gitId":"tienkhoa16"},"content":"    - MacOS/Linux: `./gradlew clean shadowJar`"},{"lineNumber":1357,"author":{"gitId":"tienkhoa16"},"content":"1. Find the JAR file in the `build/libs` directory."},{"lineNumber":1358,"author":{"gitId":"tienkhoa16"},"content":"1. Tag the repository with the new version number (e.g. `v2.1`)."},{"lineNumber":1359,"author":{"gitId":"tienkhoa16"},"content":"1. Create a new release using Github and upload the JAR file found in step 3."},{"lineNumber":1360,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1361,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1362,"author":{"gitId":"tienkhoa16"},"content":"### 6.5. \u003ca id\u003d\"managing-dependencies\"\u003eManaging Dependencies\u003c/a\u003e"},{"lineNumber":1363,"author":{"gitId":"tienkhoa16"},"content":"Currently, the [Gson library](#https://github.com/google/gson) is being used for JSON parsing, and the [Apache Commons Lang](#https://commons.apache.org/proper/commons-lang) for being used for string processing in The Schwarzenegger. Below are 2 ways to manage these dependencies."},{"lineNumber":1364,"author":{"gitId":"tienkhoa16"},"content":"- Use Gradle to manage and automatically download dependencies (Recommended)."},{"lineNumber":1365,"author":{"gitId":"tienkhoa16"},"content":"- Manually download and include those libraries in the repo (this requires extra work and bloats the repo size). "},{"lineNumber":1366,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1367,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1368,"author":{"gitId":"CFZeon"},"content":"## Appendices "},{"lineNumber":1369,"author":{"gitId":"CFZeon"},"content":"### Appendix A: Product Scope"},{"lineNumber":1370,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1371,"author":{"gitId":"CFZeon"},"content":"__Target user profile__:"},{"lineNumber":1372,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1373,"author":{"gitId":"CFZeon"},"content":"* Can type fast.    "},{"lineNumber":1374,"author":{"gitId":"tienkhoa16"},"content":"* Is comfortable with using command line interface.  "},{"lineNumber":1375,"author":{"gitId":"CFZeon"},"content":"* Gyms regularly"},{"lineNumber":1376,"author":{"gitId":"tienkhoa16"},"content":"* Keeps track of their diet."},{"lineNumber":1377,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1378,"author":{"gitId":"tienkhoa16"},"content":"__Value Proposition__: "},{"lineNumber":1379,"author":{"gitId":"tienkhoa16"},"content":"* Manages workout and diet faster with greater efficiency than a typical GUI based fitness manager application."},{"lineNumber":1380,"author":{"gitId":"tienkhoa16"},"content":"* Gives users health advice based on their calorie intake of the day and weight expectation."},{"lineNumber":1381,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1382,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1383,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1384,"author":{"gitId":"CFZeon"},"content":"### Appendix B: User Stories"},{"lineNumber":1385,"author":{"gitId":"-"},"content":""},{"lineNumber":1386,"author":{"gitId":"CFZeon"},"content":"|Priority|Version| As a ... | I want to ... | So that I can ...|"},{"lineNumber":1387,"author":{"gitId":"CFZeon"},"content":"|--------|--------|----------|---------------|------------------|"},{"lineNumber":1388,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|New user|View the available commands easily|Learn more about the product before I use it|"},{"lineNumber":1389,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|New user|Create a user profile|Add a new profile to store my data|"},{"lineNumber":1390,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|View my profile in the database|Reference my added data and know my fitness classification|"},{"lineNumber":1391,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Save my profile into the database|Retrieve it in subsequent launches of the app|"},{"lineNumber":1392,"author":{"gitId":"CFZeon"},"content":"|```HIGH```|v1.0|User|Load my profile from the database at the start of the app|view my added user profile|"},{"lineNumber":1393,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Delete my profile from the database|Correct accidental typos|"},{"lineNumber":1394,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Create a new workout session|Start a recorded workout session|"},{"lineNumber":1395,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Add moves into a workout session|Personalise and record moves in each workout session|"},{"lineNumber":1396,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Delete workout session record|Correct accidental typos|"},{"lineNumber":1397,"author":{"gitId":"CFZeon"},"content":"|```HIGH```|v1.0|User|End my current workout session|Be sure that my workout has ended|"},{"lineNumber":1398,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Check my current workout session record|Do my workout and keep track of everything easily|"},{"lineNumber":1399,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|List out all my past diet session records|Check what I have eaten in the past|"},{"lineNumber":1400,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Create a diet session with date and tags|Identify when I ate which meal|"},{"lineNumber":1401,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Add different kinds of food into my diet|Keep track fo what I eat|"},{"lineNumber":1402,"author":{"gitId":"tienkhoa16"},"content":"|```HIGH```|v1.0|User|Save my diet records|View it next time|"},{"lineNumber":1403,"author":{"gitId":"tienkhoa16"},"content":"|```MEDIUM```|v1.0|User|Edit user profile|Change my data if something changes|"},{"lineNumber":1404,"author":{"gitId":"tienkhoa16"},"content":"|```MEDIUM```|v2.0|User|Clear all my diet sessions|Clear memory space on my storage to store new things|"},{"lineNumber":1405,"author":{"gitId":"tienkhoa16"},"content":"|```MEDIUM```|v2.0|User|Clear all my workout session records|Clear all past redundant data|"},{"lineNumber":1406,"author":{"gitId":"tienkhoa16"},"content":"|```LOW```|v2.0|User|Search for past workout sessions|Easily filter through the data that I don\u0027t need|"},{"lineNumber":1407,"author":{"gitId":"tienkhoa16"},"content":"|```LOW```|v2.0|User|Search for my past diet sessions|See whether I have been eating properly lately|"},{"lineNumber":1408,"author":{"gitId":"CFZeon"},"content":"|```LOW```|v2.1|User|View how much more I need to eat in a day|plan my later meals easier|"},{"lineNumber":1409,"author":{"gitId":"tienkhoa16"},"content":"|```LOW```|v2.1|User|Get recommendation on my weight expectation|Adjust accordingly to achieve the Normal Weight BMI classification|"},{"lineNumber":1410,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1411,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1412,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1413,"author":{"gitId":"tienkhoa16"},"content":"### Appendix C: Non-Functional Requirements"},{"lineNumber":1414,"author":{"gitId":"tienkhoa16"},"content":"Below are the non-functional requirements of The Schwarzenegger:"},{"lineNumber":1415,"author":{"gitId":"CFZeon"},"content":"1. Should work on any mainstream OS as long as it has Java `11` or above installed."},{"lineNumber":1416,"author":{"gitId":"CFZeon"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than a program that uses the mouse."},{"lineNumber":1417,"author":{"gitId":"CFZeon"},"content":"3. Should not require user to install program file."},{"lineNumber":1418,"author":{"gitId":"CFZeon"},"content":"4. Should work for single user."},{"lineNumber":1419,"author":{"gitId":"CFZeon"},"content":"5. Should be able to run without internet connection."},{"lineNumber":1420,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1421,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1422,"author":{"gitId":"-"},"content":""},{"lineNumber":1423,"author":{"gitId":"tienkhoa16"},"content":"### Appendix D: Glossary"},{"lineNumber":1424,"author":{"gitId":"-"},"content":""},{"lineNumber":1425,"author":{"gitId":"tienkhoa16"},"content":"* *Mainstream OS* - Windows, Linux, Unix, MacOS  "},{"lineNumber":1426,"author":{"gitId":"-"},"content":" "},{"lineNumber":1427,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"},{"lineNumber":1428,"author":{"gitId":"-"},"content":""},{"lineNumber":1429,"author":{"gitId":"tienkhoa16"},"content":"### Appendix E: Supported Formats of Date Input"},{"lineNumber":1430,"author":{"gitId":"zsk612"},"content":"Here shows all 12 valid formats."},{"lineNumber":1431,"author":{"gitId":"wgzesg"},"content":"    "},{"lineNumber":1432,"author":{"gitId":"wgzesg"},"content":"    `yyyyMMdd HH:mm`"},{"lineNumber":1433,"author":{"gitId":"wgzesg"},"content":"    `yyyy-MM-dd HH:mm`"},{"lineNumber":1434,"author":{"gitId":"wgzesg"},"content":"    `yyyy MM dd HH:mm`"},{"lineNumber":1435,"author":{"gitId":"wgzesg"},"content":"    "},{"lineNumber":1436,"author":{"gitId":"wgzesg"},"content":"    `yyyyMMdd HHmm`"},{"lineNumber":1437,"author":{"gitId":"wgzesg"},"content":"    `yyyy-MM-dd HHmm`"},{"lineNumber":1438,"author":{"gitId":"wgzesg"},"content":"    `yyyy MM dd HHmm`"},{"lineNumber":1439,"author":{"gitId":"wgzesg"},"content":"    "},{"lineNumber":1440,"author":{"gitId":"wgzesg"},"content":"    `yyyyMMdd`"},{"lineNumber":1441,"author":{"gitId":"wgzesg"},"content":"    `yyyy-MM-dd`"},{"lineNumber":1442,"author":{"gitId":"wgzesg"},"content":"    `yyyy MM dd`"},{"lineNumber":1443,"author":{"gitId":"-"},"content":"    "},{"lineNumber":1444,"author":{"gitId":"CFZeon"},"content":"    `dd MM yyyy`"},{"lineNumber":1445,"author":{"gitId":"CFZeon"},"content":"    `ddMMyyyy`"},{"lineNumber":1446,"author":{"gitId":"zsk612"},"content":"    `dd-MM-yyyy`"},{"lineNumber":1447,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1448,"author":{"gitId":"zsk612"},"content":"[Return to Top](#intro)"}],"authorContributionMap":{"zsk612":80,"yujinyang1998":206,"tienkhoa16":396,"wgzesg":157,"CFZeon":588,"-":21}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"# The Schwarzenegger"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"Site Map:"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)"}],"authorContributionMap":{"tienkhoa16":3,"-":5}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"# The Schwarzenegger - User Guide"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":"By: `Team F11-1` Since: `Sept 2020` License: `MIT`"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"## Table of Contents"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"1. [**Introduction**](#intro)"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"1. [**Quick Start**](#quickstart)"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"1. [**Features**](#features)\u003cbr\u003e"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"3.1. [Main Menu](#main-menu)\u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.1. [Viewing Help: `help`](#main-help)\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.2. [Entering Profile Menu: `profile`](#main-profile)\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.3. [Entering Diet Menu: `diet`](#main-diet)\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.4. [Entering Workout Menu: `workout`](#main-workout)\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.1.5.  [Ending the Schwarzenegger: `end`](#main-end)\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"3.2. [Profile Menu](#profile-menu)\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.1. [Viewing Help: `help`](#profile-help)\u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.2. [Adding a Profile: `add`](#profile-add)\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.3. [Viewing a Profile: `view`](#profile-view)\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.4. [Editing a Profile: `edit`](#profile-edit)\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.5. [Deleting a Profile: `delete`](#profile-delete)\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.2.6. [Returning to Main Menu: `end`](#profile-end)\u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"3.3. [Diet Menu](#diet-menu)\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.1. [Viewing Help: `help`](#diet-help)\u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2. [Starting a New Diet Session: `new`](#diet-start)\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.1. [Viewing Help in Diet Session: `help`](#meal-help)\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.2. [Adding Food Items to the Current Diet Session: `add`](#meal-add)\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.3. [Listing Food Items from the Current Diet Session: `list`](#meal-list)\u003cbr\u003e"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.4. [Deleting Food Items from the Current Diet Session: `delete`](#meal-delete)\u003cbr\u003e"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.5. [Clearing All Food Items from the Current Diet Session: `clear`](#meal-clear)\u003cbr\u003e"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.6. [Searching for Food Items from the Current Diet Session: `search`](#meal-search)\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.2.7. [Ending the Current Diet Session: `end`](#meal-end)\u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.3. [Listing All Past Diet Sessions: `list`](#diet-list)\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.4. [Editing a Past Diet Session: `edit`](#diet-edit)\u003cbr\u003e"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.5. [Deleting a Past Diet Session: `delete`](#diet-delete)\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.6. [Clearing All Past Diet Sessions: `clear`](#diet-clear)\u003cbr\u003e"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.7. [Searching for Past Diet Sessions: `search`](#diet-search)\u003cbr\u003e"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.3.8. [Returning to Main Menu: `end`](#diet-end)\u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"3.4. [Workout Menu](#workout-menu)\u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.1. [Viewing Help: `help`](#workout-help)\u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2. [Starting a New Workout Session: `new`](#workout-start)\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.1. [Viewing Help in Workout Session: `help`](#ws-help)\u003cbr\u003e"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.2. [Adding a Move to the Current Workout Session: `add`](#ws-add)\u003cbr\u003e"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.3. [Listing All Moves from the Current Workout Session: `list`](#ws-list)\u003cbr\u003e"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.4. [Deleting a Move From the Current Workout Session: `delete`](#ws-delete)\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.5. [Searching for a Keyword in the Current Workout Session: `search`](#ws-search)\u003cbr\u003e"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.2.6. [Ending the Current Workout Session: `end`](#ws-end)\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.3. [Listing All Past Workout Sessions: `list`](#workout-list)\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.4. [Editing a Workout Session: `edit`](#workout-edit)\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.5. [Deleting a Workout Session: `delete`](#workout-delete)\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.6. [Searching a List of Workout Sessions: `search`](#workout-search)\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.7. [Clearing All Workout Sessions: `clear`](#workout-clear)\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;3.4.8. [Returning to Main Menu: `end`](#workout-end)"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"1. [**Command Summary**](#command-summary)"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"1. [**Notes**](#notes)"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"1. [**FAQ**](#faq)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"## 1. \u003ca id\u003d\"intro\"\u003eIntroduction\u003c/a\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"## 2. \u003ca id\u003d\"quickstart\"\u003eQuick Start\u003c/a\u003e [Khoa]"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"When you first start using The Schwarzenegger, please ensure that you follow the instructions below:"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"1. Download the latest `CS2113T-F11-1.TheSchwarzenegger.jar` from [here](https://github.com/AY2021S1-CS2113T-F11-1/tp/releases)."},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"1. Copy the file to the folder you want to use as the home folder for The Schwarzenegger."},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"1. Open Command Prompt (on Windows)  or Terminal (on MacOS/ Linux) and change to the directory of the folder of the application in step 3."},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":"1. Key in `java -jar [CS2113T-F11-1][TheSchwarzenegger].jar` and press \u003ckbd\u003eEnter\u003c/kbd\u003e. If the setup is correct, you should see something like below:"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"           _____        _                                                                           "},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"          / ____|      | |                                                                          "},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"         | (___    ___ | |__ __      __ __ _  _ __  ____ ___  _ __    ___   __ _   __ _   ___  _ __ "},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"          \\___ \\  / __|| \u0027_ \\\\ \\ /\\ / // _` || \u0027__||_  // _ \\| \u0027_ \\  / _ \\ / _` | / _` | / _ \\| \u0027__|"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"          ____) || (__ | | | |\\ V  V /| (_| || |    / /|  __/| | | ||  __/| (_| || (_| ||  __/| |   "},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"         |_____/  \\___||_| |_| \\_/\\_/  \\__,_||_|   /___|\\___||_| |_| \\___| \\__, | \\__, | \\___||_|   "},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"                                                                            __/ |  __/ |            "},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"                                                                           |___/  |___/             "},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"        Welcome new user to Schwarzenegger! :D"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"        Please add your profile under Profile Menu."},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"        For more information on command syntax, please type \"help\"."},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"   "},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"1. To use The Schwarzenegger, simply type a valid command into the terminal and press \u003ckbd\u003eEnter\u003c/kbd\u003e to run the command.\u003cbr\u003e"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"    **Example**: Typing `help` command in Main Menu and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e will show you a list of available commands in Main Menu of The Schwarzenegger and their descriptions."},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"1. Some example commands you can try:"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"    - `help` : Shows all the available commands under Main Menu."},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"    - `profile` : Directs you to Profile Menu where you can add and manage your profile."},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"    - `diet` : Directs you to Diet Menu where you can add and manage your diet records."},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"    - `workout` : Directs you to Workout Menu where you can add and manage your workout records."},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"1. The text before the cursor indicates which menu you are currently in (e.g. `Main menu \u003e\u003e\u003e\u003e\u003e` indicates that you are currently in the Main Menu)."},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"1. A summary of all the supported commands in The Schwarzenegger can be found in [Section 4. Command Summary](#command-summary).\u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"You can refer to [Section 3. Features](#features) for the detailed instructions of the various features in The Schwarzenegger."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"## 3. \u003ca id\u003d\"features\"\u003eFeatures\u003c/a\u003e "},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"This section includes 4 sub-sections which will guide you through the features available in Main Menu, Profile Menu, Workout Menu and Diet Menu of the Schwarzenegger. In explaining the syntax, we will adhere to the following format:"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"***"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":"**Command Format** [Khoa]"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"- Words that are in `[UPPER_CASE]` format are the parameters to be supplied by you.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"wgzesg"},"content":"**Example**: in \u003cbr\u003e`add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]` \u003cbr\u003ecommand, `[NAME]`, `[HEIGHT]`, `[CURRENT_WEIGHT]`, `[EXPECTED_WEIGHT]` and `[DAILY_CALORIE_INTAKE]` are parameters which can be used as `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500`."},{"lineNumber":108,"author":{"gitId":"yujinyang1998"},"content":"- Words that are enclosed with `\u003c` and `\u003e` are optional parameters. If all of the parameters are optional, you need to supply at least 1 of them. \u003cbr\u003e"},{"lineNumber":109,"author":{"gitId":"wgzesg"},"content":"**Example**: in \u003cbr\u003e`edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e` \u003cbr\u003ecommand, `\u003c/n [NAME]\u003e`, `\u003c/h [HEIGHT]\u003e`, `\u003c/w [CURRENT_WEIGHT]\u003e`, `\u003c/e [EXPECTED_WEIGHT]\u003e` and `\u003c/c [DAILY_CALORIE_INTAKE]\u003e` are optional parameters which can be used as `edit /h 180`, `edit /h 180 /w 50` or `edit /h 180 /w 50 /e 55`. Since all of them are optional parameters, you need to supply at least 1 of them."},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"- Optional parameters with `…` after them can be used multiple times including zero times. \u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"**Example**: for `\u003cTAG\u003e...`, the following format for Search Command in Workout Menu: `search \u003c/d [DATE]\u003e \u003c/t [TAG]...\u003e` can be used as `search /t le` or `search /t chest, bicep`."},{"lineNumber":112,"author":{"gitId":"yujinyang1998"},"content":"- Parameters can be in any order. \u003cbr\u003e "},{"lineNumber":113,"author":{"gitId":"yujinyang1998"},"content":"**Example**: if the command specifies `/n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]`, `/h [HEIGHT] /w [CURRENT_WEIGHT] /n [NAME] /c [DAILY_CALORIE_INTAKE] /e [EXPECTED_WEIGHT]` is also acceptable."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"**Notations Used** [Khoa]"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"Below are the meaning of icons for you to take note of while using a feature. "},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"- :bulb: indicates a tip."},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"- :warning: indicates a warning."},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"***"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"### 3.1. \u003ca id\u003d\"main-menu\"\u003eMain Menu\u003c/a\u003e [Khoa]"},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"You can get access to Profile Menu, Diet Menu and Workout Menu from Main Menu."},{"lineNumber":125,"author":{"gitId":"yujinyang1998"},"content":"The available commands in Main Menu are listed below:"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"#### 3.1.1. \u003ca id\u003d\"main-help\"\u003eViewing Help: `help`\u003c/a\u003e"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"You can see a complete list of available commands under Main Menu and how to use them."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `help`\u003cbr\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":"**Example:** Whenever you want to see get assistance in the Main Menu, you follow the steps below:"},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"1. Type `help` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"    ![main-help-1](pictures/UG_screenshots/main-help-step-1.png)"},{"lineNumber":136,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":"2. You should be able to see a list of available commands like the screenshot below:"},{"lineNumber":138,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"    ![main-help-2](pictures/UG_screenshots/main-help-step-2.png)"},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":141,"author":{"gitId":"tienkhoa16"},"content":"#### 3.1.2. \u003ca id\u003d\"main-profile\"\u003eEntering Profile Menu: `profile`\u003c/a\u003e"},{"lineNumber":142,"author":{"gitId":"yujinyang1998"},"content":"The program will direct you to the Profile Menu."},{"lineNumber":143,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":144,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `profile`"},{"lineNumber":145,"author":{"gitId":"yujinyang1998"},"content":"  "},{"lineNumber":146,"author":{"gitId":"tienkhoa16"},"content":"**Example**: "},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"1. Type `profile` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":148,"author":{"gitId":"tienkhoa16"},"content":"1. If the redirection is successful, you should be able to see the message below:"},{"lineNumber":149,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":150,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":151,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"        Starting Profile Menu......"},{"lineNumber":153,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":154,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":155,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":156,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: You can verify that you are in Profile Menu if the text before your cursor becomes `Profile Menu \u003e\u003e\u003e\u003e\u003e`."},{"lineNumber":157,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":158,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: You can return to Main Menu from Profile Menu by entering command `end`. You can refer to [Section 3.2.6. Returning to Main Menu](#profile-end) for more details."},{"lineNumber":159,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":160,"author":{"gitId":"tienkhoa16"},"content":"#### 3.1.3. \u003ca id\u003d\"main-diet\"\u003eEntering Diet Menu: `diet`\u003c/a\u003e"},{"lineNumber":161,"author":{"gitId":"yujinyang1998"},"content":"The program will direct you to the Diet Menu."},{"lineNumber":162,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":163,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `diet`  "},{"lineNumber":164,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":165,"author":{"gitId":"tienkhoa16"},"content":"**Example**: "},{"lineNumber":166,"author":{"gitId":"tienkhoa16"},"content":"1. Type `diet` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":167,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":168,"author":{"gitId":"tienkhoa16"},"content":"2. If the redirection is successful, you should be able to see the message below:"},{"lineNumber":169,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":170,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":171,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":172,"author":{"gitId":"tienkhoa16"},"content":"        Starting Diet Menu..."},{"lineNumber":173,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":174,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":175,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":176,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: You can verify that you are in Diet Menu if the text before your cursor becomes `Diet Menu \u003e\u003e\u003e\u003e\u003e`."},{"lineNumber":177,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":178,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: You can return to Main Menu from Diet Menu by entering command `end`. You can refer to [Section 3.3.8. Returning to Main Menu](#diet-end) for more details."},{"lineNumber":179,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":180,"author":{"gitId":"tienkhoa16"},"content":"#### 3.1.4. \u003ca id\u003d\"main-workout\"\u003eEntering Workout Menu: `workout`\u003c/a\u003e"},{"lineNumber":181,"author":{"gitId":"yujinyang1998"},"content":"The program will direct you to the Workout Menu."},{"lineNumber":182,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":183,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `workout`"},{"lineNumber":184,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":185,"author":{"gitId":"tienkhoa16"},"content":"**Example**: "},{"lineNumber":186,"author":{"gitId":"tienkhoa16"},"content":"1. Type `workout` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":187,"author":{"gitId":"tienkhoa16"},"content":"1. If the redirection is successful, you should be able to see the message below:"},{"lineNumber":188,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":189,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":190,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":191,"author":{"gitId":"tienkhoa16"},"content":"        Starting Workout Menu..."},{"lineNumber":192,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":193,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":194,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":195,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: You can verify that you are in Workout Menu if the text before your cursor becomes `Workout Menu \u003e\u003e\u003e\u003e\u003e`."},{"lineNumber":196,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":197,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: You can return to Main Menu from Workout Menu by entering command `end`. You can refer to [Section 3.4.8. Returning to Main Menu](#workout-end) for more details."},{"lineNumber":198,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":199,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":200,"author":{"gitId":"tienkhoa16"},"content":"#### 3.1.5. \u003ca id\u003d\"main-end\"\u003eEnding The Schwarzenegger: `end`\u003c/a\u003e"},{"lineNumber":201,"author":{"gitId":"tienkhoa16"},"content":"You use this command when you want to terminate The Schwarzenegger."},{"lineNumber":202,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":203,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `end`  "},{"lineNumber":204,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":205,"author":{"gitId":"tienkhoa16"},"content":"**Example**: "},{"lineNumber":206,"author":{"gitId":"tienkhoa16"},"content":"1. Type `end` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":207,"author":{"gitId":"tienkhoa16"},"content":"1. If the program exits successfully, you should be able to see the message below:"},{"lineNumber":208,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":209,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":210,"author":{"gitId":"tienkhoa16"},"content":"        ______________________________________________________________________________"},{"lineNumber":211,"author":{"gitId":"tienkhoa16"},"content":"        Bye, you have exited The Schwarzenegger."},{"lineNumber":212,"author":{"gitId":"tienkhoa16"},"content":"        ______________________________________________________________________________"},{"lineNumber":213,"author":{"gitId":"tienkhoa16"},"content":"    ```"},{"lineNumber":214,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":215,"author":{"gitId":"tienkhoa16"},"content":"### 3.2. \u003ca id\u003d\"profile-menu\"\u003eProfile Menu\u003c/a\u003e [Khoa]"},{"lineNumber":216,"author":{"gitId":"tienkhoa16"},"content":"Profile Menu manages your profile including your name, physique data and expected daily calories intake. "},{"lineNumber":217,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":218,"author":{"gitId":"tienkhoa16"},"content":"Click [here](#main-profile) to learn how to enter Profile Menu."},{"lineNumber":219,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":220,"author":{"gitId":"tienkhoa16"},"content":"#### 3.2.1. \u003ca id\u003d\"profile-help\"\u003eViewing Help: `help`\u003c/a\u003e"},{"lineNumber":221,"author":{"gitId":"tienkhoa16"},"content":"You can see a complete list of available commands under Profile Menu and how to use them."},{"lineNumber":222,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":223,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `help`  "},{"lineNumber":224,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":225,"author":{"gitId":"tienkhoa16"},"content":"**Example:**"},{"lineNumber":226,"author":{"gitId":"tienkhoa16"},"content":"1. Type `help` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":227,"author":{"gitId":"tienkhoa16"},"content":"2. If the execution is successful, you should be able to see the message below:"},{"lineNumber":228,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":229,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":230,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":231,"author":{"gitId":"yujinyang1998"},"content":"        Add      FORMAT:      add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]"},{"lineNumber":232,"author":{"gitId":"yujinyang1998"},"content":"              DESCRIPTION: Add your new profile"},{"lineNumber":233,"author":{"gitId":"yujinyang1998"},"content":"        View     FORMAT:      view"},{"lineNumber":234,"author":{"gitId":"yujinyang1998"},"content":"              DESCRIPTION: View your profile"},{"lineNumber":235,"author":{"gitId":"yujinyang1998"},"content":"        Edit     FORMAT:      edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e"},{"lineNumber":236,"author":{"gitId":"yujinyang1998"},"content":"              DESCRIPTION: Edit your existing profile. You may edit from 1 field to all fields"},{"lineNumber":237,"author":{"gitId":"yujinyang1998"},"content":"        Delete   FORMAT:      delete"},{"lineNumber":238,"author":{"gitId":"yujinyang1998"},"content":"              DESCRIPTION: Delete your existing profile"},{"lineNumber":239,"author":{"gitId":"yujinyang1998"},"content":"        End      FORMAT:      end"},{"lineNumber":240,"author":{"gitId":"yujinyang1998"},"content":"              DESCRIPTION: Go back to Main Menu"},{"lineNumber":241,"author":{"gitId":"tienkhoa16"},"content":"        _________________________________________________________________________________________________"},{"lineNumber":242,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":243,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":244,"author":{"gitId":"tienkhoa16"},"content":"#### 3.2.2. \u003ca id\u003d\"profile-add\"\u003eAdding a Profile: `add`\u003c/a\u003e"},{"lineNumber":245,"author":{"gitId":"tienkhoa16"},"content":"You can add your profile for the most customized experience in The Schwarzenegger. Your height should in centimeters, your current weight and expected weight should be in kilograms, and your expected daily calorie intake should be in calories."},{"lineNumber":246,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":247,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]`  "},{"lineNumber":248,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":249,"author":{"gitId":"tienkhoa16"},"content":"**Example:** When you want to add your profile to the application, you follow the steps below:"},{"lineNumber":250,"author":{"gitId":"tienkhoa16"},"content":"1. Ensure that you are in Profile Menu.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitId":"tienkhoa16"},"content":"Refer to [Section 3.1.2. Entering Profile Menu](#main-profile) to learn how to enter Profile Menu."},{"lineNumber":252,"author":{"gitId":"tienkhoa16"},"content":"    ![add-profile-step-1](pictures/UG_screenshots/add-profile-step-1.png)"},{"lineNumber":253,"author":{"gitId":"yujinyang1998"},"content":"    "},{"lineNumber":254,"author":{"gitId":"tienkhoa16"},"content":"2. Type `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitId":"tienkhoa16"},"content":"This command adds a profile with the name Schwarzenegger, height 188 cm, weight 113 kg, expected weight 100 kg and expected daily intake of 2500 calories."},{"lineNumber":256,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":257,"author":{"gitId":"tienkhoa16"},"content":"    ![add-profile-step-2](pictures/UG_screenshots/add-profile-step-2.png)"},{"lineNumber":258,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":259,"author":{"gitId":"yujinyang1998"},"content":"3. If the execution is successful, you should be able to see the confirmation message below:"},{"lineNumber":260,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":261,"author":{"gitId":"tienkhoa16"},"content":"    ![add-profile-step-3](pictures/UG_screenshots/add-profile-step-3.png)"},{"lineNumber":262,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":263,"author":{"gitId":"tienkhoa16"},"content":"\u003e :warning: The Schwarzenegger currently does not support names containing \"/\" character."},{"lineNumber":264,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":265,"author":{"gitId":"tienkhoa16"},"content":"#### 3.2.3. \u003ca id\u003d\"profile-view\"\u003eViewing a Profile: `view`\u003c/a\u003e"},{"lineNumber":266,"author":{"gitId":"tienkhoa16"},"content":"You can view your profile recorded in the program. The Schwarzenegger will also show the additional information below:"},{"lineNumber":267,"author":{"gitId":"tienkhoa16"},"content":"- Your current BMI classification so that you can have a good suggestion on your current fitness level."},{"lineNumber":268,"author":{"gitId":"tienkhoa16"},"content":"- Comparison between your calorie intake today with your expected daily calorie intake."},{"lineNumber":269,"author":{"gitId":"tienkhoa16"},"content":"- Suggestion on adjusting your weight expectation for better fitness where applicable. For example, if your expected weight results in the Underweight BMI classification, The Schwarzenegger will show you a tip on editing your weight expectation."},{"lineNumber":270,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":271,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `view`  "},{"lineNumber":272,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":273,"author":{"gitId":"tienkhoa16"},"content":"**Example**:"},{"lineNumber":274,"author":{"gitId":"tienkhoa16"},"content":"1. Type `view` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":275,"author":{"gitId":"tienkhoa16"},"content":"2. If the execution is successful, you should be able to see the message below:"},{"lineNumber":276,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":277,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":278,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":279,"author":{"gitId":"tienkhoa16"},"content":"     Here\u0027s your profile:"},{"lineNumber":280,"author":{"gitId":"tienkhoa16"},"content":"            Name: Schwarzenegger"},{"lineNumber":281,"author":{"gitId":"tienkhoa16"},"content":"            Height: 188 cm"},{"lineNumber":282,"author":{"gitId":"tienkhoa16"},"content":"            Weight: 113.0 kg"},{"lineNumber":283,"author":{"gitId":"tienkhoa16"},"content":"            Expected Weight: 100.0 kg"},{"lineNumber":284,"author":{"gitId":"tienkhoa16"},"content":"            Expected daily calorie intake: 2500.0 calories"},{"lineNumber":285,"author":{"gitId":"tienkhoa16"},"content":"            Your current BMI: 32.0 (Obesity Class 1)"},{"lineNumber":286,"author":{"gitId":"tienkhoa16"},"content":"     By the way, take 2500.0 more calories to achieve your target for today!"},{"lineNumber":287,"author":{"gitId":"tienkhoa16"},"content":"     TIP: Edit your expected weight to 76.7 kg to have Normal Weight BMI classification."},{"lineNumber":288,"author":{"gitId":"tienkhoa16"},"content":"          Just type \"edit /e 76.7\"!"},{"lineNumber":289,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":290,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":291,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":292,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: If you do not see the tip, it means that your current height and weight expectation is classified as Normal Weight already."},{"lineNumber":293,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":294,"author":{"gitId":"tienkhoa16"},"content":"#### 3.2.4. \u003ca id\u003d\"profile-edit\"\u003eEditing a Profile: `edit`\u003c/a\u003e"},{"lineNumber":295,"author":{"gitId":"yujinyang1998"},"content":"You can edit the profile after adding to the program."},{"lineNumber":296,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":297,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIES_INTAKE]\u003e`  "},{"lineNumber":298,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":299,"author":{"gitId":"tienkhoa16"},"content":"**Example**:"},{"lineNumber":300,"author":{"gitId":"tienkhoa16"},"content":"- If you want to edit your height, you follow the steps below:"},{"lineNumber":301,"author":{"gitId":"tienkhoa16"},"content":"    1. Type `edit /h 180` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it. \u003cbr\u003e"},{"lineNumber":302,"author":{"gitId":"tienkhoa16"},"content":"    This command edits your current height to 180 centimeters."},{"lineNumber":303,"author":{"gitId":"tienkhoa16"},"content":"    2. If the execution is successful, you should be able to see the confirmation message below:"},{"lineNumber":304,"author":{"gitId":"tienkhoa16"},"content":"    "},{"lineNumber":305,"author":{"gitId":"tienkhoa16"},"content":"        ```"},{"lineNumber":306,"author":{"gitId":"tienkhoa16"},"content":"            ______________________________________________________________________________"},{"lineNumber":307,"author":{"gitId":"tienkhoa16"},"content":"            Yay! Your profile is edited successfully. Here\u0027s your new profile:"},{"lineNumber":308,"author":{"gitId":"tienkhoa16"},"content":"                Name: Schwarzenegger"},{"lineNumber":309,"author":{"gitId":"tienkhoa16"},"content":"                Height: 180 cm"},{"lineNumber":310,"author":{"gitId":"tienkhoa16"},"content":"                Weight: 113.0 kg"},{"lineNumber":311,"author":{"gitId":"tienkhoa16"},"content":"                Expected Weight: 100.0 kg"},{"lineNumber":312,"author":{"gitId":"tienkhoa16"},"content":"                Expected daily calories intake: 2500.0 calories"},{"lineNumber":313,"author":{"gitId":"tienkhoa16"},"content":"                Your BMI: 32.0 (Obesity Class 1)"},{"lineNumber":314,"author":{"gitId":"tienkhoa16"},"content":"            ______________________________________________________________________________"},{"lineNumber":315,"author":{"gitId":"tienkhoa16"},"content":"        ```"},{"lineNumber":316,"author":{"gitId":"tienkhoa16"},"content":"- If you want to edit your height and weight, you follow the steps below:"},{"lineNumber":317,"author":{"gitId":"tienkhoa16"},"content":"    1. Type `edit /h 180 /w 50` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"},{"lineNumber":318,"author":{"gitId":"tienkhoa16"},"content":"     This command edits your current height to 180 centimeters and current weight to 50 kilograms."},{"lineNumber":319,"author":{"gitId":"tienkhoa16"},"content":"    2. If the execution is successful, you should be able to see the confirmation message below:"},{"lineNumber":320,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":321,"author":{"gitId":"tienkhoa16"},"content":"        ```"},{"lineNumber":322,"author":{"gitId":"tienkhoa16"},"content":"             ______________________________________________________________________________"},{"lineNumber":323,"author":{"gitId":"tienkhoa16"},"content":"             Yay! Your profile is edited successfully. Here\u0027s your new profile:"},{"lineNumber":324,"author":{"gitId":"tienkhoa16"},"content":"                    Name: Schwarzenegger"},{"lineNumber":325,"author":{"gitId":"tienkhoa16"},"content":"                    Height: 180 cm"},{"lineNumber":326,"author":{"gitId":"tienkhoa16"},"content":"                    Weight: 50.0 kg"},{"lineNumber":327,"author":{"gitId":"tienkhoa16"},"content":"                    Expected Weight: 100.0 kg"},{"lineNumber":328,"author":{"gitId":"tienkhoa16"},"content":"                    Expected daily calories intake: 2500.0 calories"},{"lineNumber":329,"author":{"gitId":"tienkhoa16"},"content":"                    Your BMI: 15.4 (Underweight)"},{"lineNumber":330,"author":{"gitId":"tienkhoa16"},"content":"             ______________________________________________________________________________"},{"lineNumber":331,"author":{"gitId":"tienkhoa16"},"content":"        ```"},{"lineNumber":332,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":333,"author":{"gitId":"tienkhoa16"},"content":"- If you want to edit your height, weight and expected weight, you follow the steps below:"},{"lineNumber":334,"author":{"gitId":"tienkhoa16"},"content":"    1. Type `edit /h 180 /w 50 /e 55` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"},{"lineNumber":335,"author":{"gitId":"tienkhoa16"},"content":"        This command edits your current height to 180 centimeters, current weight to 50 kilograms and expected weight to 55 kilograms."},{"lineNumber":336,"author":{"gitId":"tienkhoa16"},"content":"    2. If the execution is successful, you should be able to see the confirmation message below:"},{"lineNumber":337,"author":{"gitId":"tienkhoa16"},"content":"    "},{"lineNumber":338,"author":{"gitId":"tienkhoa16"},"content":"        ```"},{"lineNumber":339,"author":{"gitId":"tienkhoa16"},"content":"             ______________________________________________________________________________"},{"lineNumber":340,"author":{"gitId":"tienkhoa16"},"content":"             Yay! Your profile is edited successfully. Here\u0027s your new profile:"},{"lineNumber":341,"author":{"gitId":"tienkhoa16"},"content":"                    Name: Schwarzenegger"},{"lineNumber":342,"author":{"gitId":"tienkhoa16"},"content":"                    Height: 180 cm"},{"lineNumber":343,"author":{"gitId":"tienkhoa16"},"content":"                    Weight: 50.0 kg"},{"lineNumber":344,"author":{"gitId":"tienkhoa16"},"content":"                    Expected Weight: 55.0 kg"},{"lineNumber":345,"author":{"gitId":"tienkhoa16"},"content":"                    Expected daily calories intake: 2500.0 calories"},{"lineNumber":346,"author":{"gitId":"tienkhoa16"},"content":"                    Your BMI: 15.4 (Underweight)"},{"lineNumber":347,"author":{"gitId":"tienkhoa16"},"content":"             ______________________________________________________________________________"},{"lineNumber":348,"author":{"gitId":"tienkhoa16"},"content":"        ```"},{"lineNumber":349,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":350,"author":{"gitId":"tienkhoa16"},"content":"\u003e :bulb: You may edit from 1 field to all fields in your profile.      "},{"lineNumber":351,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":352,"author":{"gitId":"tienkhoa16"},"content":"#### 3.2.5. \u003ca id\u003d\"profile-delete\"\u003eDeleting a Profile: `delete`\u003c/a\u003e"},{"lineNumber":353,"author":{"gitId":"tienkhoa16"},"content":"You can use this command to delete your profile from our system. "},{"lineNumber":354,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":355,"author":{"gitId":"tienkhoa16"},"content":"This command is dangerous as you will not be able to recover the data. After typing this command, you will be asked to reconfirm it by typing in `YES`. Any other input will abort the deletion."},{"lineNumber":356,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":357,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `delete`  "},{"lineNumber":358,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":359,"author":{"gitId":"tienkhoa16"},"content":"**Example**:"},{"lineNumber":360,"author":{"gitId":"tienkhoa16"},"content":"1. Type `delete` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":361,"author":{"gitId":"tienkhoa16"},"content":"2. Type `YES` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to confirm the deletion."},{"lineNumber":362,"author":{"gitId":"tienkhoa16"},"content":"3. If the execution is successful, you should be able to see the message below:"},{"lineNumber":363,"author":{"gitId":"tienkhoa16"},"content":"```    "},{"lineNumber":364,"author":{"gitId":"tienkhoa16"},"content":"    _________________________________________________________________________________________________"},{"lineNumber":365,"author":{"gitId":"tienkhoa16"},"content":"    Alright, your profile has been cleared!"},{"lineNumber":366,"author":{"gitId":"tienkhoa16"},"content":"    _________________________________________________________________________________________________"},{"lineNumber":367,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":368,"author":{"gitId":"tienkhoa16"},"content":"    "},{"lineNumber":369,"author":{"gitId":"tienkhoa16"},"content":"\u003e :warning: Your profile data cannot be recovered once cleared!"},{"lineNumber":370,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":371,"author":{"gitId":"tienkhoa16"},"content":"#### 3.2.6. \u003ca id\u003d\"profile-end\"\u003eReturning to Main Menu: `end`\u003c/a\u003e"},{"lineNumber":372,"author":{"gitId":"tienkhoa16"},"content":"You use this command to exit Profile Menu and return to the Main Menu."},{"lineNumber":373,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":374,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `end`  "},{"lineNumber":375,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":376,"author":{"gitId":"tienkhoa16"},"content":"**Example**:"},{"lineNumber":377,"author":{"gitId":"tienkhoa16"},"content":"1. Type `end` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":378,"author":{"gitId":"tienkhoa16"},"content":"2. If the execution is successful, you should be able to see the message below:"},{"lineNumber":379,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":380,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":381,"author":{"gitId":"tienkhoa16"},"content":"    _________________________________________________________________________________________________"},{"lineNumber":382,"author":{"gitId":"tienkhoa16"},"content":"    Returning to Main Menu..."},{"lineNumber":383,"author":{"gitId":"tienkhoa16"},"content":"    _________________________________________________________________________________________________"},{"lineNumber":384,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":385,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":386,"author":{"gitId":"CFZeon"},"content":"### 3.3. \u003ca id\u003d\"diet-menu\"\u003eDiet Menu\u003c/a\u003e [Zeon]"},{"lineNumber":387,"author":{"gitId":"zsk612"},"content":"Diet Menu manages your diet sessions which record food items and calories intake."},{"lineNumber":388,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":389,"author":{"gitId":"tienkhoa16"},"content":"Click [here](#main-diet) to learn how to enter Diet Menu."},{"lineNumber":390,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":391,"author":{"gitId":"CFZeon"},"content":"#### 3.3.1. \u003ca id\u003d\"diet-help\"\u003eViewing Help: `help`\u003c/a\u003e"},{"lineNumber":392,"author":{"gitId":"tienkhoa16"},"content":"You can see a complete list of available commands under Diet Menu and how to use them."},{"lineNumber":393,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":394,"author":{"gitId":"CFZeon"},"content":"__Format:__ `help`"},{"lineNumber":395,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":396,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `help`"},{"lineNumber":397,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":398,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":399,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":400,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":401,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":402,"author":{"gitId":"yujinyang1998"},"content":"\t New      FORMAT:      new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e"},{"lineNumber":403,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Create a new diet session"},{"lineNumber":404,"author":{"gitId":"yujinyang1998"},"content":"\t List     FORMAT:      list"},{"lineNumber":405,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Show all past diet sessions"},{"lineNumber":406,"author":{"gitId":"yujinyang1998"},"content":"\t Delete   FORMAT:      delete [INDEX]"},{"lineNumber":407,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Delete the diet session at the input index"},{"lineNumber":408,"author":{"gitId":"yujinyang1998"},"content":"\t Edit     FORMAT:      edit [INDEX]"},{"lineNumber":409,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Edit the diet session at the input index"},{"lineNumber":410,"author":{"gitId":"yujinyang1998"},"content":"\t Search   FORMAT:      search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e"},{"lineNumber":411,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Search the diet session in between starting and end dates with a specific tag"},{"lineNumber":412,"author":{"gitId":"yujinyang1998"},"content":"\t Clear    FORMAT:      clear"},{"lineNumber":413,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Clear all past diet sessions"},{"lineNumber":414,"author":{"gitId":"yujinyang1998"},"content":"\t End      FORMAT:      end"},{"lineNumber":415,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Go back to Main Menu"},{"lineNumber":416,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":417,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":418,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":419,"author":{"gitId":"tienkhoa16"},"content":" "},{"lineNumber":420,"author":{"gitId":"CFZeon"},"content":"#### 3.3.2. \u003ca id\u003d\"diet-start\"\u003eStarting a New Diet Session: `new`\u003c/a\u003e"},{"lineNumber":421,"author":{"gitId":"CFZeon"},"content":"You can create a new diet session with this command. The date and tag can be added on creation with \"/d\" for date and \"/t\" for meal type. "},{"lineNumber":422,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":423,"author":{"gitId":"CFZeon"},"content":"You will be directed immediately into the new diet session. You may verify that as seen from how the cursor changes from "},{"lineNumber":424,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":425,"author":{"gitId":"tienkhoa16"},"content":"`Diet Menu \u003e\u003e\u003e\u003e\u003e `"},{"lineNumber":426,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":427,"author":{"gitId":"tienkhoa16"},"content":"to"},{"lineNumber":428,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":429,"author":{"gitId":"tienkhoa16"},"content":"```Diet Menu \u003e New Diet Session \u003e\u003e\u003e\u003e\u003e ```. "},{"lineNumber":430,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":431,"author":{"gitId":"zsk612"},"content":"__Format:__ `new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e`"},{"lineNumber":432,"author":{"gitId":"CFZeon"},"content":" "},{"lineNumber":433,"author":{"gitId":"yujinyang1998"},"content":"**Example:**"},{"lineNumber":434,"author":{"gitId":"tienkhoa16"},"content":"- `new`\u003cbr\u003e"},{"lineNumber":435,"author":{"gitId":"tienkhoa16"},"content":"This command creates a new diet session tagged as unspecified with today\u0027s date.\u003cbr\u003e"},{"lineNumber":436,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":437,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":438,"author":{"gitId":"CFZeon"},"content":"**Example:** Whenever you want to create a new Diet Session, you follow the steps below:"},{"lineNumber":439,"author":{"gitId":"CFZeon"},"content":"1. Ensure that you are in the Diet Menu.\u003cbr\u003e"},{"lineNumber":440,"author":{"gitId":"CFZeon"},"content":"Refer to [Section 3.1.3. Entering Diet Menu](#main-diet) to learn how to enter the Diet Menu."},{"lineNumber":441,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":442,"author":{"gitId":"CFZeon"},"content":"    ![new-diet-session-1](pictures/UG_screenshots/new-dietsession-step-1.png)"},{"lineNumber":443,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":444,"author":{"gitId":"CFZeon"},"content":"2. Type new /d 2020-11-09 /t lunch into your console and press Enter to execute it."},{"lineNumber":445,"author":{"gitId":"CFZeon"},"content":"   This command starts a Diet Session of date 9th September 2020 with tag lunch."},{"lineNumber":446,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":447,"author":{"gitId":"CFZeon"},"content":"    ![new-diet-session-2](pictures/UG_screenshots/new-dietsession-step-2.png)"},{"lineNumber":448,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":449,"author":{"gitId":"CFZeon"},"content":"3. If the execution is successful, you should be able to see the confirmation message below."},{"lineNumber":450,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":451,"author":{"gitId":"CFZeon"},"content":"    ![new-diet-session-3](pictures/UG_screenshots/new-dietsession-step-3.png)"},{"lineNumber":452,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":453,"author":{"gitId":"CFZeon"},"content":"4. You will also be redirected to the Diet Session interface, as seen below."},{"lineNumber":454,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":455,"author":{"gitId":"CFZeon"},"content":"    ![new-diet-session-4](pictures/UG_screenshots/new-dietsession-step-4.png)"},{"lineNumber":456,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":457,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":458,"author":{"gitId":"tienkhoa16"},"content":"\u003e :warning: You may choose not to add the date or tag, but diet sessions with the same date and tag will be overwritten!"},{"lineNumber":459,"author":{"gitId":"CFZeon"},"content":"  "},{"lineNumber":460,"author":{"gitId":"CFZeon"},"content":"  "},{"lineNumber":461,"author":{"gitId":"CFZeon"},"content":"#### 3.3.2.1. \u003ca id\u003d\"meal-help\"\u003eViewing Help in Diet Session: `help`\u003c/a\u003e [Shukai]"},{"lineNumber":462,"author":{"gitId":"tienkhoa16"},"content":"You can see a complete list of available commands under Diet Session and how to use them."},{"lineNumber":463,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":464,"author":{"gitId":"CFZeon"},"content":"__Format:__ `help` "},{"lineNumber":465,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":466,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `help`"},{"lineNumber":467,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":468,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":469,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":470,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":471,"author":{"gitId":"yujinyang1998"},"content":"\t Add      FORMAT:      add [FOOD_NAME] /c [CALORIES]"},{"lineNumber":472,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Add a new food item"},{"lineNumber":473,"author":{"gitId":"yujinyang1998"},"content":"\t List     FORMAT:      list"},{"lineNumber":474,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Show all food items"},{"lineNumber":475,"author":{"gitId":"yujinyang1998"},"content":"\t Delete   FORMAT:      delete [INDEX]"},{"lineNumber":476,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Delete the food item at the input index"},{"lineNumber":477,"author":{"gitId":"yujinyang1998"},"content":"\t Search   FORMAT:      search [FOOD_NAME]"},{"lineNumber":478,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Search the diet session for food with the name specified"},{"lineNumber":479,"author":{"gitId":"yujinyang1998"},"content":"\t Clear    FORMAT:      clear"},{"lineNumber":480,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Clear all food items"},{"lineNumber":481,"author":{"gitId":"yujinyang1998"},"content":"\t End      FORMAT:      end"},{"lineNumber":482,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Go back to the Diet Menu."},{"lineNumber":483,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":484,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":485,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":486,"author":{"gitId":"tienkhoa16"},"content":"#### 3.3.2.2. \u003ca id\u003d\"meal-add\"\u003eAdding Food Items to the Current Diet Session: `add`\u003c/a\u003e"},{"lineNumber":487,"author":{"gitId":"tienkhoa16"},"content":"This command adds a food item into the current diet session."},{"lineNumber":488,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":489,"author":{"gitId":"zsk612"},"content":"__Format:__ `add [FOOD_NAME] /c [CALORIES]` "},{"lineNumber":490,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":491,"author":{"gitId":"yujinyang1998"},"content":"**Example:** Whenever you want to add new food items in the diet session, you follow the steps below:"},{"lineNumber":492,"author":{"gitId":"zsk612"},"content":"1. Locate yourself in the diet session menu as shown in the screenshot below:"},{"lineNumber":493,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":494,"author":{"gitId":"zsk612"},"content":"    ![add-new-food-item-1](pictures/UG_screenshots/add-new-food-item-step-1.JPG)"},{"lineNumber":495,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":496,"author":{"gitId":"zsk612"},"content":"2. You can add food items by following the format `add [FOOD_NAME] /c [CALORIES]` after the prompt as shown in the screenshot:"},{"lineNumber":497,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":498,"author":{"gitId":"zsk612"},"content":"    ![add-new-food-item-2](pictures/UG_screenshots/add-new-food-item-step-2.JPG)"},{"lineNumber":499,"author":{"gitId":"zsk612"},"content":"    "},{"lineNumber":500,"author":{"gitId":"zsk612"},"content":"3. You should be able to see a message showing that you have added the food item like the screenshot below:"},{"lineNumber":501,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":502,"author":{"gitId":"zsk612"},"content":"    ![add-new-food-item-3](pictures/UG_screenshots/add-new-food-item-step-3.JPG)"},{"lineNumber":503,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":504,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":505,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":506,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":507,"author":{"gitId":"zsk612"},"content":"\t Yay! You have added chicken nuggets with calories: 120.0"},{"lineNumber":508,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":509,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":510,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":511,"author":{"gitId":"CFZeon"},"content":"\u003e :bulb: Your calories per food item is capped at 200,000"},{"lineNumber":512,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":513,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":514,"author":{"gitId":"tienkhoa16"},"content":"#### 3.3.2.3. \u003ca id\u003d\"meal-list\"\u003eListing Food Items from the Current Diet Session: `list`\u003c/a\u003e"},{"lineNumber":515,"author":{"gitId":"tienkhoa16"},"content":"Lists all the added food items for the current diet session, with a numbered sequence according to sequence entered."},{"lineNumber":516,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":517,"author":{"gitId":"CFZeon"},"content":"__Format:__ `list` "},{"lineNumber":518,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":519,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `list`"},{"lineNumber":520,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":521,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":522,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":523,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":524,"author":{"gitId":"CFZeon"},"content":"\t Index   Food            Calories "},{"lineNumber":525,"author":{"gitId":"CFZeon"},"content":"\t 1       chicken nuggets 120.0     "},{"lineNumber":526,"author":{"gitId":"CFZeon"},"content":"\t 2       fries           240.0"},{"lineNumber":527,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":528,"author":{"gitId":"CFZeon"},"content":"\t Your total calories for this meal is 360.0."},{"lineNumber":529,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":530,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":531,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":532,"author":{"gitId":"tienkhoa16"},"content":"#### 3.3.2.4. \u003ca id\u003d\"meal-delete\"\u003eDeleting Food Items from the Current Diet Session: `delete`\u003c/a\u003e"},{"lineNumber":533,"author":{"gitId":"CFZeon"},"content":"You can remove food items from your list according to the index in the current meal session list."},{"lineNumber":534,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":535,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `delete [INDEX]`"},{"lineNumber":536,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":537,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `delete 1`"},{"lineNumber":538,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":539,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":540,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":541,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":542,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":543,"author":{"gitId":"zsk612"},"content":"\t You have deleted chicken nuggets with calories: 120.0 from your list!"},{"lineNumber":544,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":545,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":546,"author":{"gitId":"zsk612"},"content":"``` "},{"lineNumber":547,"author":{"gitId":"tienkhoa16"},"content":"#### 3.3.2.5. \u003ca id\u003d\"meal-clear\"\u003eClearing All Food Items from the Current Diet Session: `clear`\u003c/a\u003e"},{"lineNumber":548,"author":{"gitId":"CFZeon"},"content":"You can clear all the food items in the current diet session list."},{"lineNumber":549,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":550,"author":{"gitId":"tienkhoa16"},"content":"This command is dangerous as you will not be able to recover the data. After typing this command, you will be asked to reconfirm it by typing in `YES`. Any other input will abort the clearing."},{"lineNumber":551,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":552,"author":{"gitId":"CFZeon"},"content":"__Format:__ `clear` "},{"lineNumber":553,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":554,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `clear`"},{"lineNumber":555,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":556,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":557,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":558,"author":{"gitId":"zsk612"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":559,"author":{"gitId":"zsk612"},"content":"     Are you sure you want to clear all records? This action is irrevocable."},{"lineNumber":560,"author":{"gitId":"zsk612"},"content":"     Key in \"YES\" to confirm."},{"lineNumber":561,"author":{"gitId":"zsk612"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":562,"author":{"gitId":"zsk612"},"content":" "},{"lineNumber":563,"author":{"gitId":"zsk612"},"content":" Diet Menu \u003e New Diet Session \u003e\u003e\u003e\u003e\u003e YES"},{"lineNumber":564,"author":{"gitId":"zsk612"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":565,"author":{"gitId":"zsk612"},"content":"     Oops you have cleared all the food items."},{"lineNumber":566,"author":{"gitId":"zsk612"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":567,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":568,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":569,"author":{"gitId":"CFZeon"},"content":"\u003e :warning: Your food items cannot be recovered once cleared!"},{"lineNumber":570,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":571,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":572,"author":{"gitId":"yujinyang1998"},"content":"#### 3.3.2.6. \u003ca id\u003d\"meal-search\"\u003eSearching for Food Items from the Current Diet Session: `search`\u003c/a\u003e"},{"lineNumber":573,"author":{"gitId":"CFZeon"},"content":"You can search for all food items that contain the word entered, in the current diet session."},{"lineNumber":574,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":575,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":576,"author":{"gitId":"zsk612"},"content":"__Format:__ `search [FOOD_NAME]` "},{"lineNumber":577,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":578,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `search rice`"},{"lineNumber":579,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":580,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":581,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":582,"author":{"gitId":"zsk612"},"content":"Diet Menu \u003e Diet Session 1 \u003e\u003e\u003e\u003e\u003e search rice"},{"lineNumber":583,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":584,"author":{"gitId":"zsk612"},"content":"\t Here are the search results: "},{"lineNumber":585,"author":{"gitId":"zsk612"},"content":"\t Index   Food         Calories "},{"lineNumber":586,"author":{"gitId":"zsk612"},"content":"\t 1       chicken rice 332.0     "},{"lineNumber":587,"author":{"gitId":"zsk612"},"content":"\t 2       fried rice   452.0     "},{"lineNumber":588,"author":{"gitId":"zsk612"},"content":"\t "},{"lineNumber":589,"author":{"gitId":"zsk612"},"content":"\t You have 2 record(s)"},{"lineNumber":590,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":591,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":592,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":593,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":594,"author":{"gitId":"zsk612"},"content":"#### 3.3.2.7. \u003ca id\u003d\"meal-end\"\u003eEnding the Current Diet Session: `end`\u003c/a\u003e"},{"lineNumber":595,"author":{"gitId":"CFZeon"},"content":"You can return to the diet menu by ending your current diet session."},{"lineNumber":596,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":597,"author":{"gitId":"CFZeon"},"content":"__Format:__ `end` "},{"lineNumber":598,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":599,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `end`"},{"lineNumber":600,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":601,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":602,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":603,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":604,"author":{"gitId":"zsk612"},"content":"\t Exiting Diet Session!"},{"lineNumber":605,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":606,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":607,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":608,"author":{"gitId":"CFZeon"},"content":"#### 3.3.3. \u003ca id\u003d\"diet-list\"\u003eListing All Past Diet Sessions: `list`\u003c/a\u003e [Zeon]"},{"lineNumber":609,"author":{"gitId":"CFZeon"},"content":"You can obtain a list of information about past diet sessions together with their numbered index and calories."},{"lineNumber":610,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":611,"author":{"gitId":"CFZeon"},"content":"__Format:__ `list`"},{"lineNumber":612,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":613,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `list`"},{"lineNumber":614,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":615,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":616,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":617,"author":{"gitId":"zsk612"},"content":"    _________________________________________________________________________________________________"},{"lineNumber":618,"author":{"gitId":"tienkhoa16"},"content":"    You have 2 records"},{"lineNumber":619,"author":{"gitId":"CFZeon"},"content":"    Index   Tags        Date        Calories"},{"lineNumber":620,"author":{"gitId":"tienkhoa16"},"content":"    1       dinner      2020-10-29  110.0"},{"lineNumber":621,"author":{"gitId":"tienkhoa16"},"content":"    2       lunch       2020-10-29  120.0"},{"lineNumber":622,"author":{"gitId":"zsk612"},"content":"    _________________________________________________________________________________________________"},{"lineNumber":623,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":624,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":625,"author":{"gitId":"CFZeon"},"content":"#### 3.3.4. \u003ca id\u003d\"diet-edit\"\u003eEditing a Past Diet Session: `edit`\u003c/a\u003e"},{"lineNumber":626,"author":{"gitId":"CFZeon"},"content":"You can edit a previous diet session based on a numbered index that can be found in the `list` command."},{"lineNumber":627,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":628,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `edit [INDEX]`"},{"lineNumber":629,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":630,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `edit 2` "},{"lineNumber":631,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":632,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":633,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":634,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":635,"author":{"gitId":"zsk612"},"content":"\t Starting Diet Session!"},{"lineNumber":636,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":637,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":638,"author":{"gitId":"zsk612"},"content":"Diet Menu \u003e Diet Session 2 \u003e\u003e\u003e\u003e\u003e "},{"lineNumber":639,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":640,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":641,"author":{"gitId":"CFZeon"},"content":"\u003e :bulb: Editing a diet session works exactly like how it does when you create a new diet session."},{"lineNumber":642,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":643,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":644,"author":{"gitId":"CFZeon"},"content":"#### 3.3.5. \u003ca id\u003d\"diet-delete\"\u003eDeleting a Past Diet Session: `delete`\u003c/a\u003e"},{"lineNumber":645,"author":{"gitId":"CFZeon"},"content":"You can delete a previously created diet session based on a numbered index that can be found in the `list` command."},{"lineNumber":646,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":647,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `delete [INDEX]`"},{"lineNumber":648,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":649,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `delete 2`"},{"lineNumber":650,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":651,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":652,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":653,"author":{"gitId":"zsk612"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":654,"author":{"gitId":"CFZeon"},"content":"     You have deleted that diet session!"},{"lineNumber":655,"author":{"gitId":"zsk612"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":656,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":657,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":658,"author":{"gitId":"CFZeon"},"content":"\u003e :warning: Deleted diet sessions cannot be recovered!"},{"lineNumber":659,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":660,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":661,"author":{"gitId":"CFZeon"},"content":" "},{"lineNumber":662,"author":{"gitId":"CFZeon"},"content":"#### 3.3.6. \u003ca id\u003d\"diet-clear\"\u003eClearing All Past Diet Sessions: `clear`\u003c/a\u003e"},{"lineNumber":663,"author":{"gitId":"CFZeon"},"content":"You can clear all previously saved diet sessions. "},{"lineNumber":664,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":665,"author":{"gitId":"CFZeon"},"content":"__Format:__ `clear`"},{"lineNumber":666,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":667,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `clear`"},{"lineNumber":668,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":669,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":670,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":671,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":672,"author":{"gitId":"zsk612"},"content":"\t Are you sure you want to clear all records? This action is irrevocable."},{"lineNumber":673,"author":{"gitId":"zsk612"},"content":"\t Key in \"YES\" to confirm."},{"lineNumber":674,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":675,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":676,"author":{"gitId":"zsk612"},"content":"Diet Menu \u003e\u003e\u003e\u003e\u003e YES"},{"lineNumber":677,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":678,"author":{"gitId":"zsk612"},"content":"\t You have cleared all diet sessions!"},{"lineNumber":679,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":680,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":681,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":682,"author":{"gitId":"CFZeon"},"content":"\u003e :warning: This command is dangerous as you will not be able to recover the data. After typing this command, you will be asked to reconfirm it by typing in `YES`. Any other input will abort the clearing."},{"lineNumber":683,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":684,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":685,"author":{"gitId":"CFZeon"},"content":"#### 3.3.7. \u003ca id\u003d\"diet-search\"\u003eSearching for Past Diet Sessions: `search`\u003c/a\u003e"},{"lineNumber":686,"author":{"gitId":"tienkhoa16"},"content":"Searches for specified range of diet sessions with identifiers such as start date, end date and tags."},{"lineNumber":687,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":688,"author":{"gitId":"zsk612"},"content":"__Format:__ `search \u003c/s [START DATE]\u003e \u003c/e [END DATE]\u003e \u003c/t [TAG]\u003e`"},{"lineNumber":689,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":690,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `search /s 2020-05-06 /e 2020-05-10 /t breakfast`"},{"lineNumber":691,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":692,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":693,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":694,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":695,"author":{"gitId":"zsk612"},"content":"\t Here are the search results!"},{"lineNumber":696,"author":{"gitId":"zsk612"},"content":"\t Index   Date             Tag         Calories  "},{"lineNumber":697,"author":{"gitId":"CFZeon"},"content":"\t 1       2020-05-08       breakfast   112.0"},{"lineNumber":698,"author":{"gitId":"CFZeon"},"content":"     2       2020-05-09       breakfast   250.0"},{"lineNumber":699,"author":{"gitId":"zsk612"},"content":"\t "},{"lineNumber":700,"author":{"gitId":"CFZeon"},"content":"\t You have 2 record(s)"},{"lineNumber":701,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":702,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":703,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":704,"author":{"gitId":"CFZeon"},"content":"#### 3.3.8. \u003ca id\u003d\"diet-end\"\u003eReturning to Main Menu: `end`\u003c/a\u003e"},{"lineNumber":705,"author":{"gitId":"CFZeon"},"content":"You can use this command to exit Diet Menu and return to the Main Menu."},{"lineNumber":706,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":707,"author":{"gitId":"CFZeon"},"content":"__Format:__ `end`"},{"lineNumber":708,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":709,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `end`"},{"lineNumber":710,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":711,"author":{"gitId":"zsk612"},"content":"Expected outcome:"},{"lineNumber":712,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":713,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":714,"author":{"gitId":"zsk612"},"content":"\t Returning to Main Menu..."},{"lineNumber":715,"author":{"gitId":"zsk612"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":716,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":717,"author":{"gitId":"zsk612"},"content":"```"},{"lineNumber":718,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":719,"author":{"gitId":"wgzesg"},"content":"### 3.4. \u003ca id\u003d\"workout-menu\"\u003eWorkout Menu\u003c/a\u003e [Zesong]"},{"lineNumber":720,"author":{"gitId":"wgzesg"},"content":"This section shows the command you can use when you are in workout menu."},{"lineNumber":721,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":722,"author":{"gitId":"tienkhoa16"},"content":"Click [here](#main-workout) to learn how to enter Workout Menu."},{"lineNumber":723,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.1. \u003ca id\u003d\"workout-help\"\u003eViewing Help: `help`\u003c/a\u003e"},{"lineNumber":724,"author":{"gitId":"tienkhoa16"},"content":"You can see a complete list of available commands under Workout Menu and how to use them."},{"lineNumber":725,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":726,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `help`"},{"lineNumber":727,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":728,"author":{"gitId":"tienkhoa16"},"content":"1. Type `help` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":729,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":730,"author":{"gitId":"wgzesg"},"content":"    ![main-help-1](pictures/UG_screenshots/workout-help-step-1.png)"},{"lineNumber":731,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":732,"author":{"gitId":"wgzesg"},"content":"2. You should be able to see a list of available commands like the screenshot below:"},{"lineNumber":733,"author":{"gitId":"wgzesg"},"content":"    ![main-help-2](pictures/UG_screenshots/workout-help-step-2.png)"},{"lineNumber":734,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":735,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":736,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.2. \u003ca id\u003d\"workout-start\"\u003eStarting a New Workout Session: `new`\u003c/a\u003e"},{"lineNumber":737,"author":{"gitId":"wgzesg"},"content":"You can a new workout session and go into the session. You can add tags with “/t”. "},{"lineNumber":738,"author":{"gitId":"wgzesg"},"content":"\u003e :bulb: Tags are optional and more than one tag can be attached to a session."},{"lineNumber":739,"author":{"gitId":"wgzesg"},"content":"   If you want to add more than one tags, you should separate them by `,`."},{"lineNumber":740,"author":{"gitId":"wgzesg"},"content":" "},{"lineNumber":741,"author":{"gitId":"wgzesg"},"content":"After \u003ckbd\u003eEnter\u003c/kbd\u003e, you will be directed into workout session to manage the given session. You may verify that as seen from how the cursor changes from"},{"lineNumber":742,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":743,"author":{"gitId":"wgzesg"},"content":"`Workout Menu \u003e\u003e\u003e\u003e\u003e `"},{"lineNumber":744,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":745,"author":{"gitId":"wgzesg"},"content":"to"},{"lineNumber":746,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":747,"author":{"gitId":"wgzesg"},"content":"```Workout Menu \u003e New Workout Session \u003e\u003e\u003e\u003e\u003e ```."},{"lineNumber":748,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":749,"author":{"gitId":"wgzesg"},"content":"__Format:__ `new \u003c/t [TAG]...\u003e`  "},{"lineNumber":750,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":751,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `new /t legs day, tricep`"},{"lineNumber":752,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":753,"author":{"gitId":"wgzesg"},"content":"Expected outcome:"},{"lineNumber":754,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":755,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":756,"author":{"gitId":"wgzesg"},"content":"\t You have started a new workout session!"},{"lineNumber":757,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":758,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":759,"author":{"gitId":"wgzesg"},"content":"Workout Menu \u003e New Workout Session \u003e\u003e\u003e\u003e\u003e "},{"lineNumber":760,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":761,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":762,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":763,"author":{"gitId":"wgzesg"},"content":"#### 3.4.2.1. \u003ca id\u003d\"ws-help\"\u003eViewing Help in Workout Session: `help`\u003c/a\u003e [Jinyang]"},{"lineNumber":764,"author":{"gitId":"tienkhoa16"},"content":"You can see a complete list of available commands under Workout Session and how to use them."},{"lineNumber":765,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":766,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `help`  "},{"lineNumber":767,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":768,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `help`"},{"lineNumber":769,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":770,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":771,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":772,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":773,"author":{"gitId":"tienkhoa16"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":774,"author":{"gitId":"yujinyang1998"},"content":"\t Add      FORMAT:      add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]"},{"lineNumber":775,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Add a new move"},{"lineNumber":776,"author":{"gitId":"yujinyang1998"},"content":"\t List     FORMAT:      list"},{"lineNumber":777,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Show all moves in this current session"},{"lineNumber":778,"author":{"gitId":"yujinyang1998"},"content":"\t Delete   FORMAT:      delete [INDEX]"},{"lineNumber":779,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Delete a move according to the index in the list"},{"lineNumber":780,"author":{"gitId":"yujinyang1998"},"content":"\t Search   FORMAT:      search [NAME_OF_MOVE]"},{"lineNumber":781,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Show a list of moves that match the entered keyword"},{"lineNumber":782,"author":{"gitId":"yujinyang1998"},"content":"\t End      FORMAT:      end"},{"lineNumber":783,"author":{"gitId":"yujinyang1998"},"content":"\t          DESCRIPTION: Go back to the Workout Menu"},{"lineNumber":784,"author":{"gitId":"tienkhoa16"},"content":"\t _________________________________________________________________________________________________"},{"lineNumber":785,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":786,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":787,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.2.2. \u003ca id\u003d\"ws-add\"\u003eAdding a Move to the Current Workout Session: `add`\u003c/a\u003e"},{"lineNumber":788,"author":{"gitId":"tienkhoa16"},"content":"Adds a move with number of moves per set and weights of equipment (if the move does not require weights, input 0 for weight)."},{"lineNumber":789,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":790,"author":{"gitId":"zsk612"},"content":"__Format:__ `add [NAME_OF_MOVE] /n [NUMBER_OF_MOVES_PER_SET] /w [WEIGHT]`  "},{"lineNumber":791,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":792,"author":{"gitId":"yujinyang1998"},"content":"**Example:** When you want to add an exercise to the current Workout Session, you follow the steps below:"},{"lineNumber":793,"author":{"gitId":"yujinyang1998"},"content":"1. Ensure that you are in a Workout Session.\u003cbr\u003e"},{"lineNumber":794,"author":{"gitId":"yujinyang1998"},"content":"Refer to [Section 3.4.2. Starting a New Workout Session](#workout-start) to learn how to start a Workout Session."},{"lineNumber":795,"author":{"gitId":"yujinyang1998"},"content":"    ![add-exercise-step-1](pictures/jinyang/AddCommandStart.png)"},{"lineNumber":796,"author":{"gitId":"yujinyang1998"},"content":"    "},{"lineNumber":797,"author":{"gitId":"yujinyang1998"},"content":"2. Type `add benchpress /w 45.5 /n 6` into your console and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"},{"lineNumber":798,"author":{"gitId":"yujinyang1998"},"content":"This command adds an exercise with the name benchpress, weight of 45.5 and 6 repetititons."},{"lineNumber":799,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":800,"author":{"gitId":"yujinyang1998"},"content":"    ![add-exercise-step-2](pictures/jinyang/AddCommand.png)"},{"lineNumber":801,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":802,"author":{"gitId":"yujinyang1998"},"content":"3. If the execution is successful, you should be able to see the confirmation message below:"},{"lineNumber":803,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":804,"author":{"gitId":"yujinyang1998"},"content":"    ![add-exercise-step-3](pictures/jinyang/AddCommandMessage.png)"},{"lineNumber":805,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":806,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.2.3. \u003ca id\u003d\"ws-list\"\u003eListing All Moves from the Current Workout Session: `list`\u003c/a\u003e"},{"lineNumber":807,"author":{"gitId":"yujinyang1998"},"content":"Lists all the added moves for the current workout session, with a numbered sequence according to sequence entered."},{"lineNumber":808,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":809,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `list`  "},{"lineNumber":810,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":811,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `list`"},{"lineNumber":812,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":813,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":814,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":815,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":816,"author":{"gitId":"tienkhoa16"},"content":"     Index   Exercise             Repetitions    Weight"},{"lineNumber":817,"author":{"gitId":"yujinyang1998"},"content":"     1       squat                15             40.0"},{"lineNumber":818,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":819,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":820,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":821,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.2.4. \u003ca id\u003d\"ws-delete\"\u003eDeleting a Move From the Current Workout Session: `delete`\u003c/a\u003e"},{"lineNumber":822,"author":{"gitId":"tienkhoa16"},"content":"Deletes a move according to move index in the current workout session list."},{"lineNumber":823,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":824,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `delete [INDEX]`  "},{"lineNumber":825,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":826,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `delete 1`"},{"lineNumber":827,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":828,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":829,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":830,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":831,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":832,"author":{"gitId":"tienkhoa16"},"content":"     You have deleted squat from your list!"},{"lineNumber":833,"author":{"gitId":"yujinyang1998"},"content":"     [Repetitions: 15 || Weight: 40.0]"},{"lineNumber":834,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":835,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":836,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":837,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":838,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.2.5. \u003ca id\u003d\"ws-search\"\u003eSearching for a Keyword in the Current Workout Session: `search`\u003c/a\u003e"},{"lineNumber":839,"author":{"gitId":"yujinyang1998"},"content":"Searches the current workout session for the keyword and shows the relevant data found in a neat list."},{"lineNumber":840,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":841,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `search [NAME_OF_MOVE]`  "},{"lineNumber":842,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":843,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `search bench`"},{"lineNumber":844,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":845,"author":{"gitId":"yujinyang1998"},"content":"Expected outcome:"},{"lineNumber":846,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":847,"author":{"gitId":"yujinyang1998"},"content":"```"},{"lineNumber":848,"author":{"gitId":"yujinyang1998"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":849,"author":{"gitId":"yujinyang1998"},"content":"     \t Index   Exercise             Repetitions    Weight    "},{"lineNumber":850,"author":{"gitId":"yujinyang1998"},"content":"     \t 1       bench                324            342.0"},{"lineNumber":851,"author":{"gitId":"yujinyang1998"},"content":"     \t 2       benchpress           324            342.0"},{"lineNumber":852,"author":{"gitId":"yujinyang1998"},"content":"     \t 3       bench press          324            342.0"},{"lineNumber":853,"author":{"gitId":"yujinyang1998"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":854,"author":{"gitId":"yujinyang1998"},"content":"```"},{"lineNumber":855,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":856,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":857,"author":{"gitId":"yujinyang1998"},"content":"#### 3.4.2.6. \u003ca id\u003d\"ws-end\"\u003eEnding the Current Workout Session: `end`\u003c/a\u003e "},{"lineNumber":858,"author":{"gitId":"tienkhoa16"},"content":"Ends the current workout session and saves the relevant data."},{"lineNumber":859,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":860,"author":{"gitId":"yujinyang1998"},"content":"__Format:__ `end`  "},{"lineNumber":861,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":862,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `end`"},{"lineNumber":863,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":864,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":865,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":866,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":867,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":868,"author":{"gitId":"tienkhoa16"},"content":"     Congratulations! You have finished today\u0027s workout!"},{"lineNumber":869,"author":{"gitId":"tienkhoa16"},"content":"     _________________________________________________________________________________________________"},{"lineNumber":870,"author":{"gitId":"tienkhoa16"},"content":"```"},{"lineNumber":871,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":872,"author":{"gitId":"wgzesg"},"content":"#### 3.4.3. \u003ca id\u003d\"workout-list\"\u003eListing All Past Workout Sessions: `list`\u003c/a\u003e [Zesong]"},{"lineNumber":873,"author":{"gitId":"wgzesg"},"content":"You can see all your past workout sessions. They will be summarised and printed in a table with their index, creation date and tags."},{"lineNumber":874,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":875,"author":{"gitId":"wgzesg"},"content":"You can specify start date and end date to show sessions created in a selected period using `\\s` for start date and `\\e` for end date. If start date is not specified, it will take the earliest date a start date. If end date is not specified, it will take today as the end date."},{"lineNumber":876,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":877,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `list \u003c/s [START_DATE]\u003e \u003c/e [END_DATE]\u003e`  "},{"lineNumber":878,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":879,"author":{"gitId":"wgzesg"},"content":"Example `list /e 20201026`"},{"lineNumber":880,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":881,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":882,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":883,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":884,"author":{"gitId":"tienkhoa16"},"content":"\t You have 2 records in the given period:"},{"lineNumber":885,"author":{"gitId":"wgzesg"},"content":"\t Index   Creation date   Tags    "},{"lineNumber":886,"author":{"gitId":"wgzesg"},"content":"\t 1       2020-10-26      [legs day, tricep]"},{"lineNumber":887,"author":{"gitId":"tienkhoa16"},"content":"\t 2       2020-10-26      [chest]"},{"lineNumber":888,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":889,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":890,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":891,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.4. \u003ca id\u003d\"workout-edit\"\u003eEditing a Workout Session: `edit`\u003c/a\u003e"},{"lineNumber":892,"author":{"gitId":"wgzesg"},"content":"You can edit a past workout session in the record list."},{"lineNumber":893,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":894,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `edit [INDEX]` "},{"lineNumber":895,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":896,"author":{"gitId":"tienkhoa16"},"content":"You will go into the specific workout session after typing this command. You may verify by seeing the cursor changes from "},{"lineNumber":897,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":898,"author":{"gitId":"wgzesg"},"content":"```Workout Menu \u003e\u003e\u003e\u003e\u003e``` "},{"lineNumber":899,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":900,"author":{"gitId":"wgzesg"},"content":"to"},{"lineNumber":901,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":902,"author":{"gitId":"wgzesg"},"content":"```Workout Menu \u003e Workout Session X \u003e\u003e\u003e\u003e\u003e``` ."},{"lineNumber":903,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":904,"author":{"gitId":"wgzesg"},"content":"The index can be found by listing all results or searching the target record."},{"lineNumber":905,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":906,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `edit 1`"},{"lineNumber":907,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":908,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":909,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":910,"author":{"gitId":"tienkhoa16"},"content":"Workout Menu \u003e Workout Session 1 \u003e\u003e\u003e\u003e\u003e "},{"lineNumber":911,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":912,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":913,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.5. \u003ca id\u003d\"workout-delete\"\u003eDeleting a Workout Session: `delete`\u003c/a\u003e"},{"lineNumber":914,"author":{"gitId":"wgzesg"},"content":"You can delete a past workout session in the record list."},{"lineNumber":915,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":916,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `delete [INDEX]` "},{"lineNumber":917,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":918,"author":{"gitId":"wgzesg"},"content":"The index can be found by listing the results."},{"lineNumber":919,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":920,"author":{"gitId":"wgzesg"},"content":"Example："},{"lineNumber":921,"author":{"gitId":"wgzesg"},"content":"`delete 1`"},{"lineNumber":922,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":923,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":924,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":925,"author":{"gitId":"wgzesg"},"content":"    ______________________________________________________________________________"},{"lineNumber":926,"author":{"gitId":"wgzesg"},"content":"    You have deleted that record!"},{"lineNumber":927,"author":{"gitId":"wgzesg"},"content":"    ______________________________________________________________________________"},{"lineNumber":928,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":929,"author":{"gitId":"wgzesg"},"content":"\u003e :warning: Your workout session record cannot be recovered once deleted!"},{"lineNumber":930,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":931,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.6. \u003ca id\u003d\"workout-search\"\u003eSearching a List of Workout Sessions: `search`\u003c/a\u003e"},{"lineNumber":932,"author":{"gitId":"wgzesg"},"content":"You can search for a list of workout sessions that match certain conditions. For example, you can search for sessions created on a specific day or sessions that contain certain tags. All sessions that satisify the condition will be summaried into a table and printed out."},{"lineNumber":933,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":934,"author":{"gitId":"tienkhoa16"},"content":"__Format:__ `search \u003c/d [DATE]\u003e \u003c/t [TAG]...\u003e`"},{"lineNumber":935,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":936,"author":{"gitId":"wgzesg"},"content":"- Tag condition"},{"lineNumber":937,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":938,"author":{"gitId":"wgzesg"},"content":"You can search records containing (a list of) tags with `/t` followed by the tags. Multiple tags should be separated by `,`. If you give multiple tags, only sessions that contains all the tags will be selected. You can search with part of the tag as well. For example searching with\u003cbr\u003e `search /t leg` \u003cbr\u003ewill match any tags that contains `leg`, e.g. `legs`."},{"lineNumber":939,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":940,"author":{"gitId":"wgzesg"},"content":"- Date condition"},{"lineNumber":941,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":942,"author":{"gitId":"wgzesg"},"content":"You can search records created on a specific day with `/d` followed by a date. You should key in your date following one of the supported formats. [See here](#notes) for a complete list of format supported."},{"lineNumber":943,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":944,"author":{"gitId":"wgzesg"},"content":"Both date and tag conditions are optional. You may have zero, one or both conditions while searching. If both conditions are given, only sessions that meet both conditions will be selected."},{"lineNumber":945,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":946,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":947,"author":{"gitId":"yujinyang1998"},"content":"**Example:** `search /t le`"},{"lineNumber":948,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":949,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":950,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":951,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":952,"author":{"gitId":"wgzesg"},"content":"\t 1  records are found:"},{"lineNumber":953,"author":{"gitId":"wgzesg"},"content":"\t Index   Creation date   Tags    "},{"lineNumber":954,"author":{"gitId":"wgzesg"},"content":"\t 2       2020-10-26      [legs day, tricep]"},{"lineNumber":955,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":956,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":957,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":958,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.7. \u003ca id\u003d\"workout-clear\"\u003eClearing All Workout Sessions: `clear`\u003c/a\u003e"},{"lineNumber":959,"author":{"gitId":"wgzesg"},"content":"You can erase all workout sessions."},{"lineNumber":960,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":961,"author":{"gitId":"wgzesg"},"content":"__Format:__ `clear`"},{"lineNumber":962,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":963,"author":{"gitId":"wgzesg"},"content":"Example `clear`"},{"lineNumber":964,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":965,"author":{"gitId":"tienkhoa16"},"content":"Expected outcome:"},{"lineNumber":966,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":967,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":968,"author":{"gitId":"wgzesg"},"content":"\t Are you sure you want to clear all records? This action is irrevocable."},{"lineNumber":969,"author":{"gitId":"wgzesg"},"content":"\t Key in \"YES\" to confirm."},{"lineNumber":970,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":971,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":972,"author":{"gitId":"wgzesg"},"content":"Workout Menu \u003e\u003e\u003e\u003e\u003e YES"},{"lineNumber":973,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":974,"author":{"gitId":"wgzesg"},"content":"\t You have cleared all records!"},{"lineNumber":975,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":976,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":977,"author":{"gitId":"wgzesg"},"content":"Workout Menu \u003e\u003e\u003e\u003e\u003e "},{"lineNumber":978,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":979,"author":{"gitId":"wgzesg"},"content":"\u003e :warning: This command is dangerous as you will not be able to recover the data. After typing this command, you will be asked to reconfirm it by typing in `YES`. Any other input will abort the clearing. "},{"lineNumber":980,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":981,"author":{"gitId":"tienkhoa16"},"content":"#### 3.4.8. \u003ca id\u003d\"workout-end\"\u003eReturning to Main Menu: `end`\u003c/a\u003e"},{"lineNumber":982,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":983,"author":{"gitId":"CFZeon"},"content":"You can return to the main menu."},{"lineNumber":984,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":985,"author":{"gitId":"wgzesg"},"content":"__Format:__ `end`"},{"lineNumber":986,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":987,"author":{"gitId":"wgzesg"},"content":"After typing in this, you will see your prompt in your terminal"},{"lineNumber":988,"author":{"gitId":"wgzesg"},"content":"changes from `Workout Menu\u003e\u003e\u003e` to `Main Menu\u003e\u003e\u003e`. "},{"lineNumber":989,"author":{"gitId":"wgzesg"},"content":" "},{"lineNumber":990,"author":{"gitId":"wgzesg"},"content":"Example `end`"},{"lineNumber":991,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":992,"author":{"gitId":"wgzesg"},"content":"Expected output"},{"lineNumber":993,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":994,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":995,"author":{"gitId":"wgzesg"},"content":"\t Returning to Main menu..."},{"lineNumber":996,"author":{"gitId":"wgzesg"},"content":"\t ______________________________________________________________________________"},{"lineNumber":997,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":998,"author":{"gitId":"wgzesg"},"content":"Main Menu \u003e\u003e\u003e\u003e\u003e "},{"lineNumber":999,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":1000,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1001,"author":{"gitId":"tienkhoa16"},"content":"## 4. \u003ca id\u003d\"command-summary\"\u003eCommand Summary\u003c/a\u003e"},{"lineNumber":1002,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1003,"author":{"gitId":"tienkhoa16"},"content":"**Main Menu** [Khoa]"},{"lineNumber":1004,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1005,"author":{"gitId":"tienkhoa16"},"content":"**Action** |  **Format**"},{"lineNumber":1006,"author":{"gitId":"tienkhoa16"},"content":"--------|----------------------"},{"lineNumber":1007,"author":{"gitId":"tienkhoa16"},"content":"Help|`help`"},{"lineNumber":1008,"author":{"gitId":"tienkhoa16"},"content":"Profile Menu |`profile`"},{"lineNumber":1009,"author":{"gitId":"tienkhoa16"},"content":"Diet Menu|`diet`"},{"lineNumber":1010,"author":{"gitId":"tienkhoa16"},"content":"Workout Menu|`workout`"},{"lineNumber":1011,"author":{"gitId":"tienkhoa16"},"content":"End|`end`"},{"lineNumber":1012,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1013,"author":{"gitId":"tienkhoa16"},"content":"**Profile Menu** [Khoa]"},{"lineNumber":1014,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1015,"author":{"gitId":"tienkhoa16"},"content":"**Action** |  **Format**"},{"lineNumber":1016,"author":{"gitId":"tienkhoa16"},"content":"--------|----------------------"},{"lineNumber":1017,"author":{"gitId":"tienkhoa16"},"content":"Help|`help`"},{"lineNumber":1018,"author":{"gitId":"tienkhoa16"},"content":"Add |`add /n [NAME] /h [HEIGHT] /w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]`\u003cbr\u003e\u003cbr\u003eE.g. `add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500`"},{"lineNumber":1019,"author":{"gitId":"tienkhoa16"},"content":"View|`view`"},{"lineNumber":1020,"author":{"gitId":"tienkhoa16"},"content":"Edit|`edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `edit /w 110`, `edit /h 175 /w 110`, `edit /h 175 /w 110 /e 90`"},{"lineNumber":1021,"author":{"gitId":"tienkhoa16"},"content":"Delete|`delete`"},{"lineNumber":1022,"author":{"gitId":"tienkhoa16"},"content":"Return to Main Menu|`end`"},{"lineNumber":1023,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1024,"author":{"gitId":"CFZeon"},"content":"**Diet Menu** [Zeon]"},{"lineNumber":1025,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1026,"author":{"gitId":"CFZeon"},"content":"**Action** |  **Format**"},{"lineNumber":1027,"author":{"gitId":"CFZeon"},"content":"--------|----------------------"},{"lineNumber":1028,"author":{"gitId":"CFZeon"},"content":"Help|`help`"},{"lineNumber":1029,"author":{"gitId":"zsk612"},"content":"Start diet session |`new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `new /d 2020-05-04 /t breakfast`"},{"lineNumber":1030,"author":{"gitId":"CFZeon"},"content":"List|`list`"},{"lineNumber":1031,"author":{"gitId":"tienkhoa16"},"content":"Edit|`edit [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"},{"lineNumber":1032,"author":{"gitId":"tienkhoa16"},"content":"Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"},{"lineNumber":1033,"author":{"gitId":"tienkhoa16"},"content":"Search|`search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `search /t lunch`"},{"lineNumber":1034,"author":{"gitId":"CFZeon"},"content":"Clear|`clear`"},{"lineNumber":1035,"author":{"gitId":"tienkhoa16"},"content":"Return to Main Menu|`end`"},{"lineNumber":1036,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1037,"author":{"gitId":"zsk612"},"content":"**Diet Session** [Shukai]"},{"lineNumber":1038,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1039,"author":{"gitId":"CFZeon"},"content":"**Action** |  **Format**"},{"lineNumber":1040,"author":{"gitId":"CFZeon"},"content":"--------|----------------------"},{"lineNumber":1041,"author":{"gitId":"CFZeon"},"content":"Help|`help`"},{"lineNumber":1042,"author":{"gitId":"zsk612"},"content":"Add |`add [FOOD_NAME] /c [CALORIES]`\u003cbr\u003e\u003cbr\u003eE.g. `add spinach /c 90`"},{"lineNumber":1043,"author":{"gitId":"CFZeon"},"content":"List|`list`"},{"lineNumber":1044,"author":{"gitId":"tienkhoa16"},"content":"Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"},{"lineNumber":1045,"author":{"gitId":"zsk612"},"content":"Search|`search [FOOD_NAME]`\u003cbr\u003e\u003cbr\u003eE.g. `search rice`"},{"lineNumber":1046,"author":{"gitId":"CFZeon"},"content":"Clear|`clear`"},{"lineNumber":1047,"author":{"gitId":"tienkhoa16"},"content":"Return to Diet Menu|`end`"},{"lineNumber":1048,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":1049,"author":{"gitId":"wgzesg"},"content":"**Workout Menu** [Zesong]"},{"lineNumber":1050,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1051,"author":{"gitId":"wgzesg"},"content":"**Action** |  **Format**"},{"lineNumber":1052,"author":{"gitId":"wgzesg"},"content":"--------|----------------------"},{"lineNumber":1053,"author":{"gitId":"wgzesg"},"content":"Help|`help`"},{"lineNumber":1054,"author":{"gitId":"tienkhoa16"},"content":"Start workout session |`new \u003c/t [TAG]...\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `new /t leg, chest`"},{"lineNumber":1055,"author":{"gitId":"tienkhoa16"},"content":"List|`list \u003c/s [START_DATE]\u003e \u003c/e [END_DATE]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `list /s 20201001 /e 2020/10/25`"},{"lineNumber":1056,"author":{"gitId":"tienkhoa16"},"content":"Edit|`edit \u003cINDEX\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `edit 1`"},{"lineNumber":1057,"author":{"gitId":"tienkhoa16"},"content":"Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"},{"lineNumber":1058,"author":{"gitId":"tienkhoa16"},"content":"Search|`search \u003c/t [TAG]...\u003e \u003c/d [DATE]\u003e`\u003cbr\u003e\u003cbr\u003eE.g. `search /t leg day, chest /d 2020-10-18`"},{"lineNumber":1059,"author":{"gitId":"wgzesg"},"content":"Clear|`clear`"},{"lineNumber":1060,"author":{"gitId":"tienkhoa16"},"content":"Return to Main Menu|`end`"},{"lineNumber":1061,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1062,"author":{"gitId":"zsk612"},"content":"**Workout Session** [Jinyang]"},{"lineNumber":1063,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1064,"author":{"gitId":"wgzesg"},"content":"**Action** | **Format**"},{"lineNumber":1065,"author":{"gitId":"tienkhoa16"},"content":"--------|----------------------"},{"lineNumber":1066,"author":{"gitId":"tienkhoa16"},"content":"Help|`help`"},{"lineNumber":1067,"author":{"gitId":"tienkhoa16"},"content":"Add |`add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]`\u003cbr\u003e\u003cbr\u003eE.g. `add squat /n 15 /w 40`"},{"lineNumber":1068,"author":{"gitId":"tienkhoa16"},"content":"List|`list`"},{"lineNumber":1069,"author":{"gitId":"tienkhoa16"},"content":"Delete|`delete [INDEX]`\u003cbr\u003e\u003cbr\u003eE.g. `delete 1`"},{"lineNumber":1070,"author":{"gitId":"zsk612"},"content":"Search|`search [NAME_OF_MOVE]`\u003cbr\u003e\u003cbr\u003eE.g. `search bench`"},{"lineNumber":1071,"author":{"gitId":"tienkhoa16"},"content":"Return to Workout Menu|`end`"},{"lineNumber":1072,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1073,"author":{"gitId":"wgzesg"},"content":"## 5. \u003ca id\u003d\"notes\"\u003eNotes\u003c/a\u003e [Zesong]"},{"lineNumber":1074,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":1075,"author":{"gitId":"zsk612"},"content":"[1] Here shows all 12 valid formats."},{"lineNumber":1076,"author":{"gitId":"wgzesg"},"content":"    "},{"lineNumber":1077,"author":{"gitId":"wgzesg"},"content":"    `yyyyMMdd HH:mm`"},{"lineNumber":1078,"author":{"gitId":"wgzesg"},"content":"    `yyyy-MM-dd HH:mm`"},{"lineNumber":1079,"author":{"gitId":"wgzesg"},"content":"    `yyyy MM dd HH:mm`"},{"lineNumber":1080,"author":{"gitId":"wgzesg"},"content":"    "},{"lineNumber":1081,"author":{"gitId":"wgzesg"},"content":"    `yyyyMMdd HHmm`"},{"lineNumber":1082,"author":{"gitId":"wgzesg"},"content":"    `yyyy-MM-dd HHmm`"},{"lineNumber":1083,"author":{"gitId":"wgzesg"},"content":"    `yyyy MM dd HHmm`"},{"lineNumber":1084,"author":{"gitId":"wgzesg"},"content":"    "},{"lineNumber":1085,"author":{"gitId":"wgzesg"},"content":"    `yyyyMMdd`"},{"lineNumber":1086,"author":{"gitId":"wgzesg"},"content":"    `yyyy-MM-dd`"},{"lineNumber":1087,"author":{"gitId":"wgzesg"},"content":"    `yyyy MM dd`"},{"lineNumber":1088,"author":{"gitId":"wgzesg"},"content":"    "},{"lineNumber":1089,"author":{"gitId":"wgzesg"},"content":"    `dd MM yyyy`"},{"lineNumber":1090,"author":{"gitId":"wgzesg"},"content":"    `ddMMyyyy`"},{"lineNumber":1091,"author":{"gitId":"zsk612"},"content":"    `dd-MM-yyyy`"},{"lineNumber":1092,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1093,"author":{"gitId":"tienkhoa16"},"content":"## 6. \u003ca id\u003d\"faq\"\u003eFAQ\u003c/a\u003e [Khoa]"},{"lineNumber":1094,"author":{"gitId":"tienkhoa16"},"content":"Below are the answers to some frequently asked questions about The Schwarzenegger:"},{"lineNumber":1095,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1096,"author":{"gitId":"tienkhoa16"},"content":"**Q**: Can I use The Schwarzenegger on another operating systems apart from Windows?\u003cbr\u003e"},{"lineNumber":1097,"author":{"gitId":"tienkhoa16"},"content":"**A**: Yes. The Schwarzenegger is compatible with Windows, MacOS and Linux."},{"lineNumber":1098,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1099,"author":{"gitId":"tienkhoa16"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":1100,"author":{"gitId":"tienkhoa16"},"content":"**A**: Install The Schwarzenegger in the other computer and overwrite the `saves` folder it creates with the `saves` folder of your previous The Schwarzenegger."},{"lineNumber":1101,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":1102,"author":{"gitId":"tienkhoa16"},"content":"**Q**: Can I exit The Schwarzenegger without typing `end` command?\u003cbr\u003e"},{"lineNumber":1103,"author":{"gitId":"tienkhoa16"},"content":"**A**: Yes. Your data is saved automatically to `saves` folder whenever it changes. Therefore, you can exit The Schwarzenegger worry-free."}],"authorContributionMap":{"zsk612":151,"yujinyang1998":161,"tienkhoa16":476,"wgzesg":172,"CFZeon":124,"-":19}},{"path":"docs/team/cfzeon.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"# Zeon Chua Feiyi - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"## PROJECT: The Schwarzenegger"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"## Overview"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":" "},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"+ **Major enhancement**:"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"    + **Search Diet Sessions**"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"        + Functionality: This enhancement allows the user to search for specific diet sessions within a date range of a specified tag."},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"        + Justification: This feature improves the product a lot more significantly as a user would want to search things they ate within a date range, or whatever they ate within a specified tag i.e. breakfast. This makes things more convenient for users as they would not need to manually filter through so much information to find what they need."},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"        + Highlights: The search function allows for 3 parameters, the start date, the end date and the tag. This makes it very easy to filter for specific information. "},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    + **Edit Diet Session**"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"        + Functionality: This enhancement lets users access and edit diet sessions that they have created before by searching through the save folder and loading the specified file."},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"        + Justification: The feature allows users to edit a previously created diet session instead of having to delete it and creating another one from scratch."},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"        + Highlights: Users can edit the file like they would with a new file, as it is an instantiation of the same DietSession."},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"    + **Clear all diet sessions**"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"        + Functionality: This enhancement allows users to remove all diet session records from their local storage."},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        + Justification: The feature provides an accessible interface to allow users to delete all of their diet sessions at one go."},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"        + Highlights: Clear iterates through every file in the folder then deletes them one by one."},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"           "},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"    + **Consistent file saving**"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"        + Functionality: This enhancement saves the diet session after every command that a user inputs into diet session."},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"        + Justification: The feature prevents users from accidentally deleting their data during usage."},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"        + Highlights: Users are protected against accidental file modifications and errors. "},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"            "},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"+ **Minor enhancement**:"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"    + **Get Total Calories for a specific date**"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"        + This feature opens every file within a specified date and sums up the total calories within the files with matching dates. It is used to calculate the required calories left to consume to reach the daily requirement in the view command in profile. "},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"            "},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"      + **Code contribution**: [Functional and Test code](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dCFZeon\u0026tabRepo\u003dAY2021S1-CS2113T-F11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"      + **Other contributions**:"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"           "},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"         + Documentation:"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"           + Added instructions and format for all diet manager related commands in the User Guide. (Pull Request: [#84](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/84/files), [#140](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/140))"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"           + Added and updated instructions and format for all diet manager related commands in the Developer Guide. (Pull Request: [#149](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/149))"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"           + Added and updated user stories in the Developer Guide (Pull Request: [#219](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/219))"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"          "},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"         + Community:"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"           + Review Developer Guide from other teams in the class(with non-trival review comments.) (ModTracker: [#62](https://github.com/nus-cs2113-AY2021S1/tp/pull/62))"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"           + Reported bugs for other teams in the class (example: [ped](https://github.com/CFZeon/ped/issues))"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"           + Evaluated code, tested and provided feedback to teammates during many online meetups."},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"             "},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"      #### Contributions to User Guide"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"      ```"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"      Below are my contributions to the User Guide."},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"      They show my ability to write documentation for end-users."},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"      ```"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"      + [Viewing Help](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-help)"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"      + [Starting a New Diet Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-start) "},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"      + [Listing All Past Diet Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-list)"},{"lineNumber":59,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":60,"author":{"gitId":"CFZeon"},"content":"      + [Editing a Past Diet Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-edit)"},{"lineNumber":61,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":62,"author":{"gitId":"CFZeon"},"content":"      + [Deleting a Past Diet Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-delete)"},{"lineNumber":63,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":64,"author":{"gitId":"CFZeon"},"content":"      + [Clearing All Past Diet Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-clear)"},{"lineNumber":65,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":66,"author":{"gitId":"CFZeon"},"content":"      + [Searching for Past Diet Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-search)"},{"lineNumber":67,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":68,"author":{"gitId":"CFZeon"},"content":"      + [Returning to Main Menu](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#diet-end)"},{"lineNumber":69,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":70,"author":{"gitId":"CFZeon"},"content":"      #### Contributions to Developer Guide"},{"lineNumber":71,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":72,"author":{"gitId":"CFZeon"},"content":"      ```"},{"lineNumber":73,"author":{"gitId":"CFZeon"},"content":"      Below are my contributions to the Developer Guide."},{"lineNumber":74,"author":{"gitId":"CFZeon"},"content":"      They show my ability to write technical documentation for other developers."},{"lineNumber":75,"author":{"gitId":"CFZeon"},"content":"      ```"},{"lineNumber":76,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":77,"author":{"gitId":"CFZeon"},"content":"      + [List Out All Commands](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#list-out-all-commands)"},{"lineNumber":78,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":79,"author":{"gitId":"CFZeon"},"content":"      + [Start Recordings Diet Data](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#start-recording-diet-data)"},{"lineNumber":80,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":81,"author":{"gitId":"CFZeon"},"content":"      + [List All Past Diet Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#list-all-past-diet-sessions)"},{"lineNumber":82,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":83,"author":{"gitId":"CFZeon"},"content":"      + [Edit a Past Diet Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#edit-a-past-diet-session)"},{"lineNumber":84,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":85,"author":{"gitId":"CFZeon"},"content":"      + [Delete a Past Diet Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#delete-a-past-diet-session)"},{"lineNumber":86,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":87,"author":{"gitId":"CFZeon"},"content":"      + [Clear All Past Diet Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#clear-all-past-diet-sessions)"},{"lineNumber":88,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":89,"author":{"gitId":"CFZeon"},"content":"      + [Search for Past Diet Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#search-for-past-diet-sessions)"},{"lineNumber":90,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":91,"author":{"gitId":"CFZeon"},"content":"      + [Exit the Diet Manager](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#exit-the-diet-manager)"},{"lineNumber":92,"author":{"gitId":"CFZeon"},"content":"      "},{"lineNumber":93,"author":{"gitId":"CFZeon"},"content":"      + [Appendix B: User Stories](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#appendix-b-user-stories)"}],"authorContributionMap":{"CFZeon":93}},{"path":"docs/team/tienkhoa16.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"# Nguyen Tien Khoa\u0027s Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"# Project: The Schwarzenegger"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"## Overview"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"## Summary of Contributions "},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"+ **Major Enhancement**:"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"   + **Implemented the CommonUi class to support the interactions with users**"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"      + Functionality: This enhancement supports the reading of user\u0027s commands and presenting the output messages."},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"      + Justification: Creating a class to handle the output formatting helps to alleviate the concerns of output displaying from the logic classes. In addition, the output formatting can be changed easily and consistently throughout the software development life cycles."},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"      + Highlights: Although the implementation of this class is not technically challenging, it is used frequently by other classes and plays an essential part to maintain the good coding quality. "},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"            "},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"  + **Implemented the enhancement to allow users to view fitness data**"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"       + Functionality: This enhancement enables the users to view their fitness data, including: physique measures, fitness classification (e.g. underweight, overweight, obesity, etc.), and the health advice based on the calorie intake of the day. In addition, the users also receive the advice on the weight target they set in the app. For example, if they are currently overweight, they will be advised to set the expected weight within the range of the normal weight.  "},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"       + Justification: This enhancement is important as it informs the user on their fitness and how far they are from the diet goal. Based on the information and advice given in the app, the users can act on their daily diet to achieve the goal."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"       + Highlights: The development of this feature requires careful thoughts of the user story to provide the comprehensive information that meets the users\u0027 needs."},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"       "},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"  + **Implemented the enhancement to parse the users\u0027 commands**"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"      + Functionality: This enhancement supports the parsing of users\u0027 commands for the program to execute. The arguments in the command can be specified in any order."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"      + Justification: This enhancement is essential as it identifies the operations to perform and extracts the relevant data from the users\u0027 commands. The parser can inteprete the arguments in any order, which gives the users more flexibility and thus enhances the user experience."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"      + Highlights: To parse the arguments arranged in an unknown order requires more efforts than to parse the arguments arranged in a fixed, pre-defined order. Efforts were spent on the string processing to identify the start and end indices and the type of the arguments. In addition, the implementation of this parser allows future extensions to support more types of arguments with minimum changes in the code."},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"      "},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"+ **Minor Enhancement**:"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    + Implemented `CommandResult` class to handle user\u0027s command execution result."},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    + Implemented `SchwarzeneggerLogger` with singleton patter to log program execution into file. [#60](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/60)"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    + Implemented `ExceptionHandler` class to create consistent format to handle exception. [#119](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/119)"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    + Added `logic/commands/main` to execute command under Main Menu."},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    + Added `formatList` method in `logic/commands/workout/workoutsession/WorkoutSessionList` to create dynamic column width while listing."},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    "},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"+ **Code contribution**: [Functional and Test code](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtienkhoa16\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship)"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"+ **Contributions to the User Guide:**"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    + Add instructions for Main Menu and Profile Menu commands. (This section was in several pull requests)."},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    + Update command formats in the User Guide. [#126](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/126)"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    + Update screenshots for commands under Main Menu. [#200](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/200)"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    + Add tips and notes for understanding our command format. [#198](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/198)"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"+ **Contributions to the Developer Guide:**"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    + Add Section 4.2. Profile-related Features. [#99](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/99)"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    + Add Section 4.5.1. Storage for Profile. [#156](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/156)"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    + Add Section 4.6. Logging. [#135](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/135)"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    + Add Section 5. Testing and Section 6. Dev Ops. [#199](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/199)"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"    + Fix broken links in the Developer Guide."},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"+ **Community**:"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"    + Review Developer Guide from other teams in the class (with non-trivial review comments). [#3](https://github.com/nus-cs2113-AY2021S1/tp/pull/3)"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"    + Reported bugs for other teams in the class [ped](https://github.com/tienkhoa16/ped/issues)."},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"    + Evaluated code, tested and provided feedback to teammates during many online meetups. [#29](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/29), [#90](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/90), [#94](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/90), [#96](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/96), [#120](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/120), [#127](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/127), [#131](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/131), [#134](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/134), [#139](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/139), [#140](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/140), [#144](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/144), [#160](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/160), [#202](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/202)"}],"authorContributionMap":{"zsk612":5,"tienkhoa16":44}},{"path":"docs/team/wgzesg.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wgzesg"},"content":"# Wang Zesong - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"## PROJECT: The Schwarzenegger"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"## Overview"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"+ **Major enhancement**:"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"    + **Search Workout Sessions**"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"        + Functionality: This enhancement allows the user to search for specific workout sessions created on a certain date range or containing certain tags."},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"        + Justification: This feature improves the product significantly because a user can easily find the session she intends to edit or delete."},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"      "},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"    + **Command Library**"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"        + Functionality: This enhancement organises the commands into a hashmap and retrieves correct Command object using user\u0027s input as key."},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"        + Justification: This feature improves the code neatness and reduce long selection statement for menus with many availble commands. "},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"         "},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    + **Design Workout Session Meta-info File**"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"        + Functionality: This enhancement creates the program create a file to store the meta-information of past workout sessions. "},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"        + Justification: This allows the program not to have to load every past session files at one go but only need to load the meta-information of each session. This greatly reduce the initialization time and makes the program more scalable. Past record files are only loaded on request."},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"         "},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"+ **Minor enhancement**:"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    + **Date Parser**"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"        + This feature will parse the user\u0027s input into LocalDate. The parser supports 9 formats which gives user max flexibility when using the application."},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"        "},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"    + **List Workout Sessions**"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        + This feature allows the users to view records only ranging from a given period. This helps the users to avoid seeing long list of workout sessions from long time ago."},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"        "},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"            "},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"+ **Code contribution**: [Functional and Test code](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#search\u003dwgzesg\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dwgzesg\u0026tabRepo\u003dAY2021S1-CS2113T-F11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"      "},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"+ **Other contributions**:"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"    + Project management:"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"        + Ensure that the team members are always aware of weekly deadlines and deliverables."},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"           "},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"    + Documentation:"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"         + Added instructions and format for all workout manager related commands in the User Guide. (Pull Request: [#81](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/81), [#83](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/83))"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"         + Added and updated instructions and format for all workout manager related commands in the Developer Guide. (Pull Request: [#132](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/132))"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"         + Added and updated diagrams in the Developer Guide (Pull Request: [#106](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/106))"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"         "},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"    + Community:"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        + Reported bugs for other teams in the class (Pull Request: [#36](https://github.com/nus-cs2113-AY2021S1/tp/pulls?q\u003dis%3Aopen+is%3Apr+CS2113-T13-3+) )"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"        + Perform manual testing, reported bugs and gave suggestions to teammates."},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"             "},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"#### Contributions to the User Guide"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"Given below are sections I contributed to the User Guide.   "},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":"They showcase my ability to write documentation targeting end-users."},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"  + [Starting a New Workout Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#workout-start) "},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"  + [Listing All Past Workout Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#workout-list)"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"  + [Editing a Past Workout Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#workout-edit)"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"  + [Deleting a Past Workout Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#workout-delete)"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"  + [Clearing All Past Workout Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#workout-clear)"},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"  + [Searching for Past Workout Sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#workout-search)"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"      "},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"  + [Returning to Main Menu](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#workout-end)"},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"  + [Notes](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#notes)"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"      "},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":"#### Contributions to the Developer Guide"},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":"      "},{"lineNumber":69,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":70,"author":{"gitId":"wgzesg"},"content":"      Given below are sections I contributed to the Developer Guide. "},{"lineNumber":71,"author":{"gitId":"wgzesg"},"content":"      They showcase my ability to write technical documentation and the technical depth of my contributions"},{"lineNumber":72,"author":{"gitId":"wgzesg"},"content":"      to the project."},{"lineNumber":73,"author":{"gitId":"wgzesg"},"content":"```"},{"lineNumber":74,"author":{"gitId":"wgzesg"},"content":"      "},{"lineNumber":75,"author":{"gitId":"wgzesg"},"content":"  + [Architecture](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#architecture)"},{"lineNumber":76,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":77,"author":{"gitId":"wgzesg"},"content":"  + [Start recordings workout data](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#creating-a-new-workout-session)"},{"lineNumber":78,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":79,"author":{"gitId":"wgzesg"},"content":"  + [List all past workout sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#442-listing-past-workout-sessions)"},{"lineNumber":80,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"  + [Edit a past workout session](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#443-editing-workout-session)"},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":83,"author":{"gitId":"wgzesg"},"content":"  + [Delete a past workout session](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#444-deleting-a-workout-session)"},{"lineNumber":84,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":85,"author":{"gitId":"wgzesg"},"content":"  + [Search on past workout sessions](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#445-searching-based-on-conditions)"},{"lineNumber":86,"author":{"gitId":"wgzesg"},"content":"  "},{"lineNumber":87,"author":{"gitId":"wgzesg"},"content":"  + [Appendix F: Supported Formats of Date Input](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#appendix-f-supported-formats-of-date-input)"}],"authorContributionMap":{"yujinyang1998":3,"tienkhoa16":1,"wgzesg":79,"-":4}},{"path":"docs/team/yujinyang1998.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"# Yu Jinyang - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"## PROJECT: The Schwarzenegger"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"## Overview"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"+ **Major enhancement**:"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"   + **Search Workout Sessions**"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"      + Functionality: This enhancement allows the user to search for specific exercises within the current list of exercises."},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"      + Justification: This feature improves the product significantly because this allows the user to see at a glance what they want to focus on."},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"      "},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"      + Highlights: This enhancement shows the user a targeted list with an easy to read formatting, allowing for quick reading at a glance. "},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"      "},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"   + **Dynamic list formatting**"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"      + Functionality: With this enhancement, it changes the format of the list based on the max length of the name of exercise added. "},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"      + Justification: This feature allows the list shown to the user to look nice and proper even when the name of the exercise is very long. "},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"      + Highlights: This was used in displaying the list for both list and search functions."},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"      "},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"   + **Handling of different orders of parameters**"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"      + Functionality: With this enhancement, it allows user to use any sequence of entering parameters when adding an exercise. "},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"      + Justification: This feature allows user to enter an exercise with more options of input. "},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"            "},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"      + **Minor enhancement**:"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"         + **List Exercises**"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"            + This feature allows user to view all the exercise in the current workout session in a nicely formatted list. This feature can be easily be used by typing `list` in the command line."},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"            "},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"      + **Code contribution**: [Functional and Test code](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyujinyang1998\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship)"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"      "},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"      + **Other contributions**:"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"         + Coherent output format:"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"           + Ensure that the team members had standardised formatting when showing messages to the user."},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"           "},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"         + Documentation:"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"           + Added Workout Session and logic components into the Developer Guide. (Pull Request: [#105](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/105))"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"           + Added Workout Session components for User Guide (Pull Request: [#84](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/84), [#221](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/221)) "},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"          "},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"         + Community:"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"           + Review Developer Guide from other teams in the class(with non-trival review comments.) (Pull Request: [#57](https://github.com/nus-cs2113-AY2021S1/tp/pull/57).)"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"           + Reported bugs for other teams in the class (example: [ped](https://github.com/yujinyang1998/ped/issues) )"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"           + Perform manual testing, reported bugs and gave suggestions to teammates."},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"             "},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"#### Contributions to the User Guide"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"   ```"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"   Given below are sections I contributed to the User Guide.   "},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"   They showcase my ability to write documentation targeting end-users."},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"   ```"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"  + [Adding an Exercise: `add`](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#ws-add) "},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"  "},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"  + [Listing All Exercises in This Session: `list`](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#ws-list)"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"  "},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"  + [Deleting an Exercise: `delete`](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#ws-delete)"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"  "},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"  + [Searching for Related Exercises: `search`](https://ay2021s1-cs2113t-f11-1.github.io/tp/UserGuide.html#ws-search)"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"      "},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"   "},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"#### Contributions to the Developer Guide"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"```"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"Given below are sections I contributed to the Developer Guide. "},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"They showcase my ability to write technical documentation and the technical depth of my contributions"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"to the project."},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"```"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"+ [Adding an Exercise](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#adding-an-exercise)"},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":"+ [Deleting an Exercise](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#deleting-an-exercise)"},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"+ [Listing All Exercises in This Session](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#listing-all-exercises-in-this-session)"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"+ [Searching for related exercises](https://ay2021s1-cs2113t-f11-1.github.io/tp/DeveloperGuide.html#searching-for-related-exercises)"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":""}],"authorContributionMap":{"zsk612":1,"yujinyang1998":69,"-":4}},{"path":"docs/team/zsk612.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"# Zhang Shukai - Project Portfolio Page"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"## PROJECT: The Schwarzenegger"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"### Overview"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"The Schwarzenegger is a desktop command line interface-based app for managing all your needs regarding fitness. With the built-in personal assistant, you are able to track your daily workout and diet sessions based on your profile. If you can type fast, The Schwarzenegger can help you maximise your efficiency for maintaining fitness."},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"### Summary of Contributions"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"+ **Major Enhancement**"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"    + **Search Food Items**"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"        + Functionalities: "},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"            + This enhancement allows users to search for food items by typing food names or part of the names in the current meal. "},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"        + Justification: "},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"            + It improves usability and user experience of the app because as the food item list grows, it might be hard for the user to find a specific food item."},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"            + It provides flexibility to allow user to type part of the food name to find all the related food items containing that part of food name."},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"        + Highlights: "},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"            + It supports fuzzy search where the user can input part of the food name instead of the full name, and the food items whose names contain this part of the food name will be shown. "},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"            + It allows users to search for similar food items. For example, if the user searches for \"rice\" by typing `search rice`, everything containing rice such as \"chicken rice\" and \"fried rice\" will be shown to the user."},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"   "},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"    + **List Food Items**"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"        + Functionalities: "},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"            + This enhancement allows users to see all the food items in the current diet session with calories of each food items as well as the total calories taken in the current meal."},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"        + Justification: "},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"            + It improves usability and user experience of the app because as the user might want to see a complete list of food items he or she has eaten in the current meal. "},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"        + Highlights: "},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"            + All the food items are listed in a table format for better visualization of the food items."},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"            + It lists all the food items in the chronological order, i.e. food items added earlier will be shown first."},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"  "},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"+ **Minor Enhancement**: "},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    + Implemented `clear` commands for `clear`(clearing all food)."},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"    + Implemented `help` commands for the user to see an overview of available commands in diet session. "},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"+ **Code Contributed:** [View on RepoSense](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dzsk612\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dCFZeon\u0026tabRepo\u003dAY2021S1-CS2113T-F11-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"+ **Contributions to the User Guide:**"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"    + Add instructions for diet session commands. (This section was in several pull requests)"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"    + Updated command formats in the User Guide. [#158](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/158)"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"    + Updated screenshots for commands related to diet. [#150](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/193)"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"+ **Contributions to the Developer Guide:**"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"    + Updated command formats in the Developer Guide. [#159](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/159)"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"    + Updated date parser format in Developer Guide. [#193](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/193)"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"+ **Community**:"},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"    + Reviewed Developer Guide from other teams in the class (with non-trivial review comments.) (DietaryBook: [#42](https://github.com/nus-cs2113-AY2021S1/tp/pull/42).)"},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"    + Checked and update Java Doc for team project. [#240](https://github.com/AY2021S1-CS2113T-F11-1/tp/pull/240)"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":"    + Reported bugs for other teams in the class example: [ped](https://github.com/zsk612/ped/issues)."},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"    + Evaluated code, tested and provided feedback to teammates during many online meetups."},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"    "}],"authorContributionMap":{"zsk612":54,"tienkhoa16":1}},{"path":"src/main/java/diet/dietmanager/DietManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandLib;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.ExceptionHandler;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import exceptions.diet.InvalidSearchDateException;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DietManagerParser;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import ui.diet.dietmanager.DietManagerUi;"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"import java.io.File;"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"import java.time.LocalDate;"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"import java.util.Objects;"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Logger;"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_END;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":" * A class that is responsible for interacting with user in Diet Manager."},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"public class DietManager {"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"    private CommandLib cl;"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"    private DietManagerParser parser;"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"    private DietManagerUi dietManagerUi;"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"    private DietStorage storage;"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"     * Constructs DietManager and initializes command library for dietManager."},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"    public DietManager() {"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"        storage \u003d new DietStorage();"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"        cl \u003d new CommandLib();"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"        cl.initDietManagerCl();"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"        parser \u003d new DietManagerParser();"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"        dietManagerUi \u003d new DietManagerUi();"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"     * Starts diet manager to read user input."},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"    public void start() {"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"        dietManagerUi.printOpening(\"Diet Menu\");"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"        String input \u003d dietManagerUi.getCommand(\"Diet Menu\");"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"        assert input !\u003d null : \"Null input before input loop\";"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"        inputLoop(input);"},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"        dietManagerUi.printReturning(\"Main Menu\");"},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":60,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"CFZeon"},"content":"     * Loops the command processing until user types \"end\"."},{"lineNumber":62,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"CFZeon"},"content":"     * @param input user input String"},{"lineNumber":64,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"CFZeon"},"content":"    private void inputLoop(String input) {"},{"lineNumber":66,"author":{"gitId":"CFZeon"},"content":"        while (!input.equals(COMMAND_WORD_END)) {"},{"lineNumber":67,"author":{"gitId":"CFZeon"},"content":"            try {"},{"lineNumber":68,"author":{"gitId":"CFZeon"},"content":"                processCommand(input);"},{"lineNumber":69,"author":{"gitId":"CFZeon"},"content":"            } catch (SchwarzeneggerException e) {"},{"lineNumber":70,"author":{"gitId":"CFZeon"},"content":"                dietManagerUi.showToUser(ExceptionHandler.handleCheckedExceptions(e));"},{"lineNumber":71,"author":{"gitId":"CFZeon"},"content":"            } catch (Exception e) {"},{"lineNumber":72,"author":{"gitId":"CFZeon"},"content":"                dietManagerUi.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"},{"lineNumber":73,"author":{"gitId":"CFZeon"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"CFZeon"},"content":"            input \u003d dietManagerUi.getCommand(\"Diet Menu\");"},{"lineNumber":75,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":78,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"CFZeon"},"content":"     * Processes the user input to interpret correct command words."},{"lineNumber":80,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"CFZeon"},"content":"     * @param input user input for command."},{"lineNumber":82,"author":{"gitId":"CFZeon"},"content":"     * @throws InvalidCommandWordException handles InvalidCommandWordException."},{"lineNumber":83,"author":{"gitId":"CFZeon"},"content":"     * @throws InvalidDateFormatException handles invalid date input"},{"lineNumber":84,"author":{"gitId":"CFZeon"},"content":"     * @throws InvalidSearchDateException handles invalid search date"},{"lineNumber":85,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"CFZeon"},"content":"    public void processCommand(String input) throws InvalidCommandWordException, InvalidDateFormatException,"},{"lineNumber":87,"author":{"gitId":"CFZeon"},"content":"            InvalidSearchDateException {"},{"lineNumber":88,"author":{"gitId":"CFZeon"},"content":"        String[] commParts \u003d parser.parseCommand(input.trim());"},{"lineNumber":89,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"CFZeon"},"content":"            Command command \u003d cl.getCommand(commParts[0]);"},{"lineNumber":91,"author":{"gitId":"CFZeon"},"content":"            CommandResult commandResult \u003d command.execute(commParts[1].trim(), storage);"},{"lineNumber":92,"author":{"gitId":"CFZeon"},"content":"            assert commandResult !\u003d null : \"commandResult is not null when command executes properly\";"},{"lineNumber":93,"author":{"gitId":"CFZeon"},"content":"            dietManagerUi.showToUser(commandResult.getFeedbackMessage());"},{"lineNumber":94,"author":{"gitId":"CFZeon"},"content":"        } catch (ArrayIndexOutOfBoundsException | InvalidCommandFormatException e) {"},{"lineNumber":95,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Invalid command in diet session\");"},{"lineNumber":96,"author":{"gitId":"CFZeon"},"content":"            throw new InvalidCommandWordException();"},{"lineNumber":97,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":100,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"CFZeon"},"content":"     * Gets the total calories of the diet sessions on the specified date."},{"lineNumber":102,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"CFZeon"},"content":"     * @param savePath path to storage folder"},{"lineNumber":104,"author":{"gitId":"CFZeon"},"content":"     * @param date date to find total calories"},{"lineNumber":105,"author":{"gitId":"CFZeon"},"content":"     * @return total calories"},{"lineNumber":106,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"CFZeon"},"content":"    public double getDateTotalCalories(String savePath, LocalDate date) {"},{"lineNumber":108,"author":{"gitId":"CFZeon"},"content":"        double totalCalories \u003d 0;"},{"lineNumber":109,"author":{"gitId":"CFZeon"},"content":"        File folder \u003d new File(savePath);"},{"lineNumber":110,"author":{"gitId":"CFZeon"},"content":"        File[] listOfFiles \u003d folder.listFiles();"},{"lineNumber":111,"author":{"gitId":"CFZeon"},"content":"        assert folder.exists() : \"save folder must exist before getting total calories\";"},{"lineNumber":112,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"CFZeon"},"content":"            // if date on file is same as input date, add to TotalCalories"},{"lineNumber":114,"author":{"gitId":"CFZeon"},"content":"            for (int i \u003d 0; i \u003c Objects.requireNonNull(listOfFiles).length; i++) {"},{"lineNumber":115,"author":{"gitId":"CFZeon"},"content":"                DietSession ds \u003d storage.readDietSession(savePath, listOfFiles[i].getName());"},{"lineNumber":116,"author":{"gitId":"CFZeon"},"content":"                if (ds.getDate().equals(date)) {"},{"lineNumber":117,"author":{"gitId":"CFZeon"},"content":"                    totalCalories +\u003d ds.getTotalCalories();"},{"lineNumber":118,"author":{"gitId":"CFZeon"},"content":"                }"},{"lineNumber":119,"author":{"gitId":"CFZeon"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"Calculated total calories so far today\");"},{"lineNumber":121,"author":{"gitId":"CFZeon"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":122,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"No instances of diet sessions saved\");"},{"lineNumber":123,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"CFZeon"},"content":"        return totalCalories;"},{"lineNumber":125,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":6,"yujinyang1998":3,"tienkhoa16":5,"wgzesg":1,"CFZeon":111}},{"path":"src/main/java/diet/dietsession/DietSession.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.ExceptionHandler;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":"import logic.commands.Command;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandLib;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DietSessionParser;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import models.Food;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DateParser;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"import java.time.LocalDate;"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_DIET_FOLDER;"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":" * A class that is responsible for interacting with user in Diet Session."},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"public class DietSession {"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"    private final ArrayList\u003cFood\u003e foodList;"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"    private final String dateInput;"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"    private final String typeInput;"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"    private final LocalDate date;"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"    private boolean isNew;"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"    private int index;"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"    private final DietSessionUi dietSessionUi;"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"    private transient CommandLib cl;"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"    private final DietStorage storage;"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"    private final DietSessionParser parser \u003d new DietSessionParser();"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"    public boolean endDietSession \u003d false;"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"     * Constructs DietSession and initialize command library for dietSession."},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"     * @param typeInput User input for meal type"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"     * @param dateInput User input for meal date"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":"     * @param isNew Boolean that indicates whether the Diet Session is new or not"},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"     * @param index Integer for the index of the Diet Session"},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"     * @throws InvalidDateFormatException handles invalid date input"},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":"    public DietSession(String typeInput, String dateInput, boolean isNew, int index) throws InvalidDateFormatException {"},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"        this.cl \u003d new CommandLib();"},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"        cl.initDietSessionCl();"},{"lineNumber":56,"author":{"gitId":"zsk612"},"content":"        this.dateInput \u003d dateInput;"},{"lineNumber":57,"author":{"gitId":"zsk612"},"content":"        this.date \u003d DateParser.parseDate(dateInput).toLocalDate();"},{"lineNumber":58,"author":{"gitId":"zsk612"},"content":"        this.typeInput \u003d typeInput;"},{"lineNumber":59,"author":{"gitId":"zsk612"},"content":"        this.foodList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitId":"zsk612"},"content":"        storage \u003d new DietStorage();"},{"lineNumber":61,"author":{"gitId":"zsk612"},"content":"        dietSessionUi \u003d new DietSessionUi();"},{"lineNumber":62,"author":{"gitId":"zsk612"},"content":"        this.isNew \u003d isNew;"},{"lineNumber":63,"author":{"gitId":"zsk612"},"content":"        this.index \u003d index;"},{"lineNumber":64,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":66,"author":{"gitId":"zsk612"},"content":"    public String getDateInput() {"},{"lineNumber":67,"author":{"gitId":"zsk612"},"content":"        return dateInput;"},{"lineNumber":68,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":70,"author":{"gitId":"zsk612"},"content":"    public LocalDate getDate() {"},{"lineNumber":71,"author":{"gitId":"zsk612"},"content":"        return date;"},{"lineNumber":72,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":74,"author":{"gitId":"zsk612"},"content":"    public String getTypeInput() {"},{"lineNumber":75,"author":{"gitId":"zsk612"},"content":"        return typeInput;"},{"lineNumber":76,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":78,"author":{"gitId":"zsk612"},"content":"    public void setEndDietSession(Boolean hasEnded) {"},{"lineNumber":79,"author":{"gitId":"zsk612"},"content":"        this.endDietSession \u003d hasEnded;"},{"lineNumber":80,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":82,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"zsk612"},"content":"     * Starts dietSession and initializes command library for dietSession."},{"lineNumber":84,"author":{"gitId":"zsk612"},"content":"     * @param isNew Boolean that indicates whether the Diet Session is new or not"},{"lineNumber":85,"author":{"gitId":"zsk612"},"content":"     * @param index Integer for the index of the Diet Session"},{"lineNumber":86,"author":{"gitId":"zsk612"},"content":"     * @throws IOException handles input/output exception"},{"lineNumber":87,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"zsk612"},"content":"    public void start(boolean isNew, int index) throws IOException {"},{"lineNumber":89,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":90,"author":{"gitId":"zsk612"},"content":"        logger.log(Level.INFO, \"starting diet session\");"},{"lineNumber":91,"author":{"gitId":"zsk612"},"content":"        this.cl \u003d new CommandLib();"},{"lineNumber":92,"author":{"gitId":"zsk612"},"content":"        cl.initDietSessionCl();"},{"lineNumber":93,"author":{"gitId":"zsk612"},"content":"        dietSessionUi.printOpening();"},{"lineNumber":94,"author":{"gitId":"zsk612"},"content":"        setEndDietSession(false);"},{"lineNumber":95,"author":{"gitId":"zsk612"},"content":"        this.isNew \u003d isNew;"},{"lineNumber":96,"author":{"gitId":"zsk612"},"content":"        this.index \u003d index;"},{"lineNumber":97,"author":{"gitId":"zsk612"},"content":"        // save the file upon creation"},{"lineNumber":98,"author":{"gitId":"zsk612"},"content":"        saveToFile(PATH_TO_DIET_FOLDER, storage, this);"},{"lineNumber":99,"author":{"gitId":"zsk612"},"content":"        dietSessionInputLoop();"},{"lineNumber":100,"author":{"gitId":"zsk612"},"content":"        setEndDietSession(true);"},{"lineNumber":101,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":103,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"zsk612"},"content":"     * Starts reading user input for dietSession commands."},{"lineNumber":105,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"zsk612"},"content":"    private void dietSessionInputLoop() {"},{"lineNumber":107,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"\";"},{"lineNumber":108,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":109,"author":{"gitId":"zsk612"},"content":"        if (isNew) {"},{"lineNumber":110,"author":{"gitId":"zsk612"},"content":"            input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e New Diet Session\");"},{"lineNumber":111,"author":{"gitId":"zsk612"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"zsk612"},"content":"            input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e Diet Session \" + index);"},{"lineNumber":113,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":115,"author":{"gitId":"zsk612"},"content":"        while (!input.equals(\"end\")) {"},{"lineNumber":116,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":117,"author":{"gitId":"zsk612"},"content":"            try {"},{"lineNumber":118,"author":{"gitId":"zsk612"},"content":"                processCommand(input);"},{"lineNumber":119,"author":{"gitId":"zsk612"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":120,"author":{"gitId":"zsk612"},"content":"                dietSessionUi.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"},{"lineNumber":121,"author":{"gitId":"zsk612"},"content":"                break;"},{"lineNumber":122,"author":{"gitId":"zsk612"},"content":"            } catch (InvalidCommandWordException e) {"},{"lineNumber":123,"author":{"gitId":"zsk612"},"content":"                dietSessionUi.showToUser(ExceptionHandler.handleCheckedExceptions(e));"},{"lineNumber":124,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"zsk612"},"content":"            if (isNew) {"},{"lineNumber":126,"author":{"gitId":"zsk612"},"content":"                input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e New Diet Session\");"},{"lineNumber":127,"author":{"gitId":"zsk612"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"zsk612"},"content":"                input \u003d dietSessionUi.getCommand(\"Diet Menu \u003e Diet Session \" + index);"},{"lineNumber":129,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":133,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"zsk612"},"content":"     * Processes user input for dietSession commands."},{"lineNumber":135,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command"},{"lineNumber":137,"author":{"gitId":"zsk612"},"content":"     * @throws NullPointerException handles null pointer exception"},{"lineNumber":138,"author":{"gitId":"zsk612"},"content":"     * @throws InvalidCommandWordException handles invalid commands"},{"lineNumber":139,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"zsk612"},"content":"    private void processCommand(String input) throws NullPointerException, InvalidCommandWordException {"},{"lineNumber":141,"author":{"gitId":"zsk612"},"content":"        String[] commParts \u003d parser.parseCommand(input);"},{"lineNumber":142,"author":{"gitId":"zsk612"},"content":"        Command command \u003d cl.getCommand(commParts[0]);"},{"lineNumber":143,"author":{"gitId":"zsk612"},"content":"        CommandResult commandResult \u003d command.execute(commParts[1].trim(), foodList, storage, index);"},{"lineNumber":144,"author":{"gitId":"zsk612"},"content":"        dietSessionUi.showToUser(commandResult.getFeedbackMessage());"},{"lineNumber":145,"author":{"gitId":"zsk612"},"content":"        saveToFile(PATH_TO_DIET_FOLDER, storage, this);"},{"lineNumber":146,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":148,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"zsk612"},"content":"     * Calculates the sum of all food calories in diet session."},{"lineNumber":150,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"zsk612"},"content":"     * @return sum of calories of food"},{"lineNumber":152,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"zsk612"},"content":"    public double getTotalCalories() {"},{"lineNumber":154,"author":{"gitId":"zsk612"},"content":"        double totalCalories \u003d 0;"},{"lineNumber":155,"author":{"gitId":"zsk612"},"content":"        for (int i \u003d 0; i \u003c foodList.size(); i++) {"},{"lineNumber":156,"author":{"gitId":"zsk612"},"content":"            totalCalories +\u003d foodList.get(i).getCalories();"},{"lineNumber":157,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"zsk612"},"content":"        return totalCalories;"},{"lineNumber":159,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":161,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":162,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"zsk612"},"content":"     * Constructs method to save changes to storage file."},{"lineNumber":164,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"zsk612"},"content":"     * @param filePath string for file path"},{"lineNumber":166,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet manager"},{"lineNumber":167,"author":{"gitId":"zsk612"},"content":"     * @param ds      dietSession that is being changed"},{"lineNumber":168,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"zsk612"},"content":"    public void saveToFile(String filePath, DietStorage storage, DietSession ds) {"},{"lineNumber":170,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"zsk612"},"content":"            storage.init(filePath, ds.getDate().toString() + \" \" + ds.getTypeInput());"},{"lineNumber":172,"author":{"gitId":"zsk612"},"content":"            storage.writeToStorageDietSession(filePath, ds.getDate().toString() + \" \" + ds.getTypeInput(), ds);"},{"lineNumber":173,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.INFO, \"Diet session successfully saved\");"},{"lineNumber":174,"author":{"gitId":"zsk612"},"content":"        } catch (IOException e) {"},{"lineNumber":175,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"save profile session failed\");"},{"lineNumber":176,"author":{"gitId":"zsk612"},"content":"            dietSessionUi.showToUser(\"Failed to save your diet session!\");"},{"lineNumber":177,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":163,"yujinyang1998":5,"tienkhoa16":4,"wgzesg":1,"CFZeon":6}},{"path":"src/main/java/exceptions/EndException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_END;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when user wants to return to Main Menu."},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"public class EndException extends SchwarzeneggerException {"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs EndException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    public EndException() {"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"        super(MESSAGE_END);"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":16}},{"path":"src/main/java/exceptions/ExceptionHandler.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import java.util.logging.Level;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" * A class that deals with handling exceptions."},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"public class ExceptionHandler {"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * Handles checked exceptions."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     * @param e Checked exceptions in The Schwarzenegger."},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     * @return Error message."},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"    public static String handleCheckedExceptions(SchwarzeneggerException e) {"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"        logger.log(Level.WARNING, \"handling Schwarzenegger Exception: \" + e.toString());"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"        return e.getMessage();"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"     * Handles unchecked exceptions."},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"     * @param e Unchecked exception in Duke."},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"     * @return Error message."},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    public static String handleUncheckedExceptions(Exception e) {"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        logger.log(Level.WARNING, \"handling unchecked exception: \" + e.toString());"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        return e.toString();"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"yujinyang1998":5,"tienkhoa16":31}},{"path":"src/main/java/exceptions/InsufficientArgumentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_INSUFFICIENT_ARGUMENT;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":" * Represents exception when user inputs insufficient arguments to command."},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"public class InsufficientArgumentException extends SchwarzeneggerException {"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"     * Constructs InsufficientArgumentException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"     * @param format Correct format of command."},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    public InsufficientArgumentException(String format) {"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"        super(String.format(MESSAGE_INSUFFICIENT_ARGUMENT, format));"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"tienkhoa16":1,"wgzesg":18}},{"path":"src/main/java/exceptions/InvalidCommandWordException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_INVALID_COMMAND_WORD;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when command word is invalid."},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"public class InvalidCommandWordException extends SchwarzeneggerException {"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidCommandWordException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"    public InvalidCommandWordException() {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"        super(MESSAGE_INVALID_COMMAND_WORD);"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"tienkhoa16":16}},{"path":"src/main/java/exceptions/InvalidDateFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":" * Represents exception when date time format is invalid."},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"public class InvalidDateFormatException extends SchwarzeneggerException {"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"     * Constructs InvalidDateFormatException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"    public InvalidDateFormatException() {"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"        super(\"Wrong format, please enter in the format: \\n\""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"                + \"\\t new /d [DATE: DD-MM-YYYY]\");"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"zsk612":1,"yujinyang1998":14}},{"path":"src/main/java/exceptions/SchwarzeneggerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":" * A base class for the checked exceptions in Schwarzenegger."},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"public abstract class SchwarzeneggerException extends Exception {"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs SchwarzeneggerException object inheriting class Exception."},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"     * @param message Error message."},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"    public SchwarzeneggerException(String message) {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":17}},{"path":"src/main/java/exceptions/diet/InvalidSearchDateException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package exceptions.diet;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when search date is invalid."},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"public class InvalidSearchDateException extends SchwarzeneggerException {"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidSearchDateException object inheriting class SchwarzeneggerException."},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"    public InvalidSearchDateException() {"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"        super(\"Starting date should be earlier than end date.\");"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":10,"tienkhoa16":4,"CFZeon":2}},{"path":"src/main/java/exceptions/diet/NegativeCaloriesException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package exceptions.diet;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietsession.DietSessionUi.MESSAGE_NEGATIVE_CALORIES;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":" * Represents exception when calories is negative."},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"public class NegativeCaloriesException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"     * Constructs NegativeCaloriesException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    public NegativeCaloriesException() {"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"        super(MESSAGE_NEGATIVE_CALORIES);"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":3,"CFZeon":16}},{"path":"src/main/java/exceptions/diet/NoNameException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package exceptions.diet;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import static ui.diet.dietsession.DietSessionUi.MESSAGE_NO_FOOD_NAME;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":" * Represents exception when no food name is entered."},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"public class NoNameException extends SchwarzeneggerException {"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"     * Constructs SchwarzeneggerException object inheriting class Exception."},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"    public NoNameException() {"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"        super(MESSAGE_NO_FOOD_NAME);"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":18}},{"path":"src/main/java/exceptions/profile/InvalidCaloriesException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_INVALID_CALORIES;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when input calories is invalid."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class InvalidCaloriesException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidCaloriesException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    public InvalidCaloriesException() {"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"        super(MESSAGE_INVALID_CALORIES);"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":19}},{"path":"src/main/java/exceptions/profile/InvalidCommandFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when command format is invalid."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class InvalidCommandFormatException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidCommandFormatException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * @param format Correct format of the command."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    public InvalidCommandFormatException(String format) {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        super(String.format(MESSAGE_INVALID_COMMAND_FORMAT, format));"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":21}},{"path":"src/main/java/exceptions/profile/InvalidHeightException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_INVALID_HEIGHT;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when input height is invalid."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class InvalidHeightException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidHeightException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    public InvalidHeightException() {"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"        super(MESSAGE_INVALID_HEIGHT);"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":19}},{"path":"src/main/java/exceptions/profile/InvalidNameException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_INVALID_NAME;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when input name is invalid."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class InvalidNameException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidNameException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    public InvalidNameException() {"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"        super(MESSAGE_INVALID_NAME);"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":19}},{"path":"src/main/java/exceptions/profile/InvalidSaveFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_INVALID_SAVE_FORMAT;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when there is corruption in data save format."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class InvalidSaveFormatException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidSaveFormatException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * @param filePath Path to file with invalid save format."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    public InvalidSaveFormatException(String filePath) {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        super(String.format(MESSAGE_INVALID_SAVE_FORMAT, filePath));"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":22}},{"path":"src/main/java/exceptions/profile/InvalidWeightException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_INVALID_WEIGHT;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception when input weight is invalid."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class InvalidWeightException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs InvalidWeightException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    public InvalidWeightException() {"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"        super(MESSAGE_INVALID_WEIGHT);"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":19}},{"path":"src/main/java/exceptions/profile/LoadingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_LOADING_ERROR;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception while loading data."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class LoadingException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs LoadingException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * @param message The cause of the error."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    public LoadingException(String message) {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        super(String.format(MESSAGE_LOADING_ERROR, message));"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":21}},{"path":"src/main/java/exceptions/profile/SavingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package exceptions.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_SAVING_ERROR;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * Represents exception while saving data."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class SavingException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs SavingException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * @param message The cause of the error."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    public SavingException(String message) {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        super(String.format(MESSAGE_SAVING_ERROR, message));"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":21}},{"path":"src/main/java/exceptions/workout/workoutmanager/NotANumberException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package exceptions.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_NOT_A_NUMBER;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":" * Represents exception when input is not a number."},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"public class NotANumberException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"     * Constructs NotANumberException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    public NotANumberException() {"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"        super(MESSAGE_NOT_A_NUMBER);"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"wgzesg":18}},{"path":"src/main/java/exceptions/workout/workoutmanager/OutOfArrayException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package exceptions.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.MESSAGE_OUT_OF_ARRAY;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":" * Represents exception when index is out of array."},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"public class OutOfArrayException extends SchwarzeneggerException {"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"     * Constructs OutOfArrayException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    public OutOfArrayException() {"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"        super(MESSAGE_OUT_OF_ARRAY);"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"wgzesg":18}},{"path":"src/main/java/exceptions/workout/workoutmanager/SchwIoException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package exceptions.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":" * Represents exception when IOException is thrown in WorkoutManagerStorage."},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"public class SchwIoException extends SchwarzeneggerException {"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"     * Constructs SchwIoException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"     * @param content Content of the error message."},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    public SchwIoException(String content) {"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"        super(content);"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"wgzesg":18}},{"path":"src/main/java/exceptions/workout/workoutsession/AddFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package exceptions.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":" * Represents exception when add format in WorkoutSession is invalid."},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"public class AddFormatException extends SchwarzeneggerException {"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"     * Constructs AddFormatException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"    public AddFormatException() {"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"        super(\"AddFormatException\");"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":17}},{"path":"src/main/java/exceptions/workout/workoutsession/DeleteFormatException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package exceptions.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":" * Represents exception when delete format in WorkoutSession is invalid."},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"public class DeleteFormatException extends SchwarzeneggerException {"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"     * Constructs DeleteFormatException object inheriting abstract class SchwarzeneggerException."},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"    public DeleteFormatException() {"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"        super(\"DeleteFormatException\");"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":17}},{"path":"src/main/java/logger/SchwarzeneggerLogger.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logger;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_LOG_FILE;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":" * A class to handle file logging."},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"public class SchwarzeneggerLogger {"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    private static SchwarzeneggerLogger singleInstance \u003d null;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    private Logger logger;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs SchwarzeneggerLogger object."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    private SchwarzeneggerLogger() {"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"            File file \u003d new File(PATH_TO_LOG_FILE);"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"            file.createNewFile();"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"            SimpleFormatter formatter \u003d new SimpleFormatter();"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"            FileHandler fh \u003d new FileHandler(PATH_TO_LOG_FILE);"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"            fh.setFormatter(formatter);"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"            logger \u003d Logger.getLogger(\"SchwarzeneggerLogger\");"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"            logger.addHandler(fh);"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"            logger.setUseParentHandlers(false);"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        } catch (SecurityException e) {"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"     * Gets logger attribute of SchwarzeneggerLogger."},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"     * @return Logger."},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    public static Logger getInstanceLogger() {"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"        if (singleInstance \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"            singleInstance \u003d new SchwarzeneggerLogger();"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        return singleInstance.logger;"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":52,"wgzesg":1}},{"path":"src/main/java/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import exceptions.diet.InvalidSearchDateException;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import models.ExerciseList;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import models.Food;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"import ui.CommonUi;"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"import java.util.logging.Level;"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"import java.util.logging.Logger;"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":" * A base class for command."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"public abstract class Command {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    protected static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    public CommonUi ui;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs Command object."},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    public Command() {"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        ui \u003d new CommonUi();"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"    //@@author wgzesg"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"     * Executes the command with given arguments."},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"     * @param args Array of user\u0027s input."},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"     *         to user."},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"Executing \" + this);"},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult();"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    //@@author tienkhoa16"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"     * Executes the command with user\u0027s input."},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"     *         to user."},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"        logger.log(Level.INFO, \"Executing \" + this);"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"        return new CommandResult();"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"    //@@author"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"     * Executes the command with user\u0027s input."},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"     * @param input User\u0027s input for command."},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Diet Storage to load and save data."},{"lineNumber":71,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":72,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidCommandWordException If command word is invalid."},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidCommandFormatException If command format is invalid."},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidDateFormatException If date format is invalid."},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidSearchDateException If search date is invalid."},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) throws InvalidCommandWordException,"},{"lineNumber":79,"author":{"gitId":"zsk612"},"content":"            InvalidCommandFormatException, InvalidDateFormatException, InvalidSearchDateException {"},{"lineNumber":80,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult();"},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"     * Executes the command with user\u0027s input."},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"     * @param input User\u0027s input for command."},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"     * @param foodList List containing food in diet session."},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Diet Storage to load and save data."},{"lineNumber":89,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of diet session"},{"lineNumber":90,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":91,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidCommandWordException If command word is invalid."},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList,"},{"lineNumber":95,"author":{"gitId":"zsk612"},"content":"                                 DietStorage storage, Integer index) throws InvalidCommandWordException {"},{"lineNumber":96,"author":{"gitId":"zsk612"},"content":"        return new CommandResult();"},{"lineNumber":97,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":99,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":100,"author":{"gitId":"yujinyang1998"},"content":"    //@@author yujinyang1998"},{"lineNumber":101,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":102,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"yujinyang1998"},"content":"     * Executes the command with user\u0027s input."},{"lineNumber":104,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":106,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":107,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":108,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":109,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":110,"author":{"gitId":"yujinyang1998"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":111,"author":{"gitId":"yujinyang1998"},"content":"     *         to user."},{"lineNumber":112,"author":{"gitId":"yujinyang1998"},"content":"     * @throws InvalidCommandWordException If command word is invalid."},{"lineNumber":113,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":115,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":116,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) throws InvalidCommandWordException {"},{"lineNumber":117,"author":{"gitId":"yujinyang1998"},"content":"        logger.log(Level.INFO, \"Executing \" + this);"},{"lineNumber":118,"author":{"gitId":"yujinyang1998"},"content":"        return new CommandResult();"},{"lineNumber":119,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"yujinyang1998"},"content":"    //@@author"},{"lineNumber":121,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":12,"yujinyang1998":24,"tienkhoa16":54,"wgzesg":29,"CFZeon":2}},{"path":"src/main/java/logic/commands/CommandLib.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionClear;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionCreate;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionDelete;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionEdit;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionHelp;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionList;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionSearch;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionWrong;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemAdd;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemClear;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemDelete;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemHelp;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemList;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemSearch;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemWrong;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.MainEnd;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.MainHelp;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.MainWrong;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.ToDiet;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.ToProfile;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.ToWorkout;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileAdd;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileDelete;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileEdit;"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileEnd;"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileHelp;"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileView;"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileWrong;"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.ByeWS;"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.ClearWS;"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.DeleteWS;"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.EditWS;"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.HelpWS;"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.ListWS;"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.NewWS;"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.SearchWS;"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.WrongWS;"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionAdd;"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionDelete;"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionEnd;"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionHelp;"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionList;"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionSearch;"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionWrong;"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"import java.util.Hashtable;"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_ADD;"},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_CLEAR;"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_DELETE;"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_DIET;"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_EDIT;"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_END;"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_HELP;"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_LIST;"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_NEW;"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_PROFILE;"},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_SEARCH;"},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_VIEW;"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_WORKOUT;"},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_WRONG;"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":" * A class for extracting the correct Command object for each command word."},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":69,"author":{"gitId":"wgzesg"},"content":"public class CommandLib {"},{"lineNumber":70,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":71,"author":{"gitId":"wgzesg"},"content":"    public Hashtable\u003cString, Command\u003e library;"},{"lineNumber":72,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":73,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"wgzesg"},"content":"     * Constructs CommandLib object."},{"lineNumber":75,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"wgzesg"},"content":"    public CommandLib() {"},{"lineNumber":77,"author":{"gitId":"wgzesg"},"content":"        library \u003d new Hashtable\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":80,"author":{"gitId":"wgzesg"},"content":"    //@@author wgzesg"},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":"     * Initializes the commandLib with main menu\u0027s commands."},{"lineNumber":83,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"wgzesg"},"content":"    public void initMainMenuCl() {"},{"lineNumber":85,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_WRONG, new MainWrong());"},{"lineNumber":86,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_HELP, new MainHelp());"},{"lineNumber":87,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_DIET, new ToDiet());"},{"lineNumber":88,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_PROFILE, new ToProfile());"},{"lineNumber":89,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_WORKOUT, new ToWorkout());"},{"lineNumber":90,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_END, new MainEnd());"},{"lineNumber":91,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"    //@@author tienkhoa16"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"     * Initializes the commandLib with profile menu\u0027s commands."},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"    public void initProfileSessionCl() {"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_HELP, new ProfileHelp());"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_ADD, new ProfileAdd());"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_DELETE, new ProfileDelete());"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_VIEW, new ProfileView());"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_EDIT, new ProfileEdit());"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_END, new ProfileEnd());"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_WRONG, new ProfileWrong());"},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"    //@@author"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"     * Initializes the commandLib with workout menu\u0027s commands."},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"yujinyang1998"},"content":"    public void initWorkoutManagerCl() {"},{"lineNumber":112,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_LIST, new ListWS());"},{"lineNumber":113,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_NEW, new NewWS());"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_DELETE, new DeleteWS());"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_END, new ByeWS());"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_EDIT, new EditWS());"},{"lineNumber":117,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_CLEAR, new ClearWS());"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_HELP, new HelpWS());"},{"lineNumber":119,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_WRONG, new WrongWS());"},{"lineNumber":120,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_SEARCH, new SearchWS());"},{"lineNumber":121,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":123,"author":{"gitId":"yujinyang1998"},"content":"    //@@author yujinyang1998"},{"lineNumber":124,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"yujinyang1998"},"content":"     * Initializes the commandLib with workout session\u0027s commands."},{"lineNumber":126,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"yujinyang1998"},"content":"    public void initWorkoutSessionCl() {"},{"lineNumber":128,"author":{"gitId":"yujinyang1998"},"content":"        library.put(COMMAND_WORD_ADD, new WorkoutSessionAdd());"},{"lineNumber":129,"author":{"gitId":"yujinyang1998"},"content":"        library.put(COMMAND_WORD_DELETE, new WorkoutSessionDelete());"},{"lineNumber":130,"author":{"gitId":"yujinyang1998"},"content":"        library.put(COMMAND_WORD_LIST, new WorkoutSessionList());"},{"lineNumber":131,"author":{"gitId":"yujinyang1998"},"content":"        library.put(COMMAND_WORD_END, new WorkoutSessionEnd());"},{"lineNumber":132,"author":{"gitId":"yujinyang1998"},"content":"        library.put(COMMAND_WORD_HELP, new WorkoutSessionHelp());"},{"lineNumber":133,"author":{"gitId":"yujinyang1998"},"content":"        library.put(COMMAND_WORD_SEARCH, new WorkoutSessionSearch());"},{"lineNumber":134,"author":{"gitId":"yujinyang1998"},"content":"        library.put(COMMAND_WORD_WRONG, new WorkoutSessionWrong());"},{"lineNumber":135,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":137,"author":{"gitId":"yujinyang1998"},"content":"    //@@author"},{"lineNumber":138,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"     * Initializes the commandLib with diet manager\u0027s commands."},{"lineNumber":140,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"yujinyang1998"},"content":"    public void initDietManagerCl() {"},{"lineNumber":142,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_LIST, new DietSessionList());"},{"lineNumber":143,"author":{"gitId":"zsk612"},"content":"        library.put(COMMAND_WORD_NEW, new DietSessionCreate());"},{"lineNumber":144,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_HELP, new DietSessionHelp());"},{"lineNumber":145,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_CLEAR, new DietSessionClear());"},{"lineNumber":146,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_SEARCH, new DietSessionSearch());"},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_EDIT, new DietSessionEdit());"},{"lineNumber":148,"author":{"gitId":"tienkhoa16"},"content":"        library.put(COMMAND_WORD_DELETE, new DietSessionDelete());"},{"lineNumber":149,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_WRONG, new DietSessionWrong());"},{"lineNumber":150,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":152,"author":{"gitId":"wgzesg"},"content":"    //@@author wgzesg"},{"lineNumber":153,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"wgzesg"},"content":"     * Initializes the commandLib with diet session\u0027s commands."},{"lineNumber":155,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"wgzesg"},"content":"    public void initDietSessionCl() {"},{"lineNumber":157,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_ADD, new FoodItemAdd());"},{"lineNumber":158,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_DELETE, new FoodItemDelete());"},{"lineNumber":159,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_HELP, new FoodItemHelp());"},{"lineNumber":160,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_CLEAR, new FoodItemClear());"},{"lineNumber":161,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_SEARCH, new FoodItemSearch());"},{"lineNumber":162,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_LIST, new FoodItemList());"},{"lineNumber":163,"author":{"gitId":"wgzesg"},"content":"        library.put(COMMAND_WORD_WRONG, new FoodItemWrong());"},{"lineNumber":164,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":166,"author":{"gitId":"wgzesg"},"content":"    //@@author wgzesg"},{"lineNumber":167,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"wgzesg"},"content":"     * Gets specific Command object based on command keyword."},{"lineNumber":169,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"wgzesg"},"content":"     * @param keyword Keyword specifying type of command."},{"lineNumber":171,"author":{"gitId":"wgzesg"},"content":"     * @return Command object."},{"lineNumber":172,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"wgzesg"},"content":"    public Command getCommand(String keyword) {"},{"lineNumber":174,"author":{"gitId":"wgzesg"},"content":"        if (keyword \u003d\u003d null || !library.containsKey(keyword.toLowerCase())) {"},{"lineNumber":175,"author":{"gitId":"wgzesg"},"content":"            return library.get(COMMAND_WORD_WRONG);"},{"lineNumber":176,"author":{"gitId":"wgzesg"},"content":"        } else {"},{"lineNumber":177,"author":{"gitId":"wgzesg"},"content":"            return library.get(keyword.toLowerCase());"},{"lineNumber":178,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":5,"yujinyang1998":17,"tienkhoa16":72,"wgzesg":86}},{"path":"src/main/java/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":" * A class representing result shown to user after executing the requested command."},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"public class CommandResult {"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"    private String feedbackMessage;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"    private ExecutionResult status;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs CommandResult object."},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"     * @param feedbackMessage Feedback message after executing command."},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * @param status Execution status."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult(String feedbackMessage, ExecutionResult status) {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        this.feedbackMessage \u003d feedbackMessage;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"        this.status \u003d status;"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs CommandResult object with status OK."},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"     * @param feedbackMessage Feedback message after executing command."},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult(String feedbackMessage) {"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"        this.feedbackMessage \u003d feedbackMessage;"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        status \u003d ExecutionResult.OK;"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs CommandResult object with empty feedback message and status OK."},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"    public CommandResult() {"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        feedbackMessage \u003d EMPTY_STRING;"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        status \u003d ExecutionResult.OK;"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"     * Gets execution status."},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"     * @return Execution status."},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"    public ExecutionResult getStatus() {"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"        return status;"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"     * Gets feedback message to user."},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"     * @return Feedback message to user."},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    public String getFeedbackMessage() {"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        return feedbackMessage;"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":50,"wgzesg":8}},{"path":"src/main/java/logic/commands/ExecutionResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":" * Enumerations of execution result status."},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"public enum ExecutionResult {"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"    OK,"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"    ABORTED,"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"    FAILED,"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"    SKIPPED"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"tienkhoa16":1,"wgzesg":11}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionClear.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import ui.CommonUi;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_DIET_FOLDER;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.CLEAR_RECORD;"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_CLEAR_MSG;"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_MENU_NAME;"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_NOTHING_TO_CLEAR_MSG;"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.EMPTY_STRING;"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for clear commands in diet manager."},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"public class DietSessionClear extends Command {"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for clear command to clear all diet sessions."},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for command"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage for diet manager"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult instance"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) {"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"        String resultMessage \u003d EMPTY_STRING;"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"            if (ui.checkConfirmation(DIET_MENU_NAME, CLEAR_RECORD)) {"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"                File folder \u003d new File(PATH_TO_DIET_FOLDER);"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"                File[] listOfFiles \u003d folder.listFiles();"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"                for (int index \u003d 0; index \u003c Objects.requireNonNull(listOfFiles).length; index++) {"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"                    listOfFiles[index].delete();"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"                resultMessage \u003d CommonUi.clearMsg(DIET_CLEAR_MSG);"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"                logger.log(Level.INFO, \"Cleared all diet sessions\");"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"            } else {"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"                resultMessage \u003d CLEAR_ABORTED;"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"            resultMessage \u003d DIET_NOTHING_TO_CLEAR_MSG;"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"No sessions in dietManager for deletion\");"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult(resultMessage);"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":7,"tienkhoa16":3,"wgzesg":1,"CFZeon":42}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionCreate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DietManagerParser;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":"import logic.commands.Command;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"import java.util.HashMap;"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_CREATE_WRONG_FORMAT;"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_DATE_WRONG_FORMAT;"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_IO_WRONG_FORMAT;"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_NEW_SUCCESS;"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.EMPTY_STRING;"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for create commands in diet manager."},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"public class DietSessionCreate extends Command {"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"    private final DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for create command to create new diet sessions."},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for command"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage for diet manager"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult with ended diet session message"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) {"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        String result \u003d EMPTY_STRING;"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"            StringBuilder message \u003d new StringBuilder();"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"            HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"            // extract the date and tags and assigns it to the string"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"            String date \u003d parser.extractNewDate(parsedParams, message);"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"            String tag \u003d parser.extractNewTag(parsedParams, message);"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"            if (message.length() !\u003d 0) {"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"                ui.showToUser(message.toString().trim());"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"            DietSession ds \u003d new DietSession(tag, date, true, -1);"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"            assert ds !\u003d null : \"Diet session constructed without error\";"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"Diet session successfully created\");"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"            ds.start(true, -1);"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_NEW_SUCCESS;"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_IO_WRONG_FORMAT;"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Wrong date format\");"},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_DATE_WRONG_FORMAT;"},{"lineNumber":59,"author":{"gitId":"CFZeon"},"content":"        } catch (InvalidCommandFormatException e) {"},{"lineNumber":60,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Invalid command in dietSessionCreate\");"},{"lineNumber":61,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_CREATE_WRONG_FORMAT;"},{"lineNumber":62,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult(result);"},{"lineNumber":64,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":7,"yujinyang1998":1,"tienkhoa16":2,"CFZeon":55}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionDelete.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_DIET_FOLDER;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_DELETE_SUCCESS;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_DELETE_WRONG_FORMAT;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_FILE_ARRAY_OUT_OF_BOUND;"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_NO_SESSIONS_SAVED;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for delete commands in diet manager."},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"public class DietSessionDelete extends Command {"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for delete command to delete diet sessions."},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for command"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage for diet manager"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult instance for delete message"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) {"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"        File folder \u003d new File(PATH_TO_DIET_FOLDER);"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"        File[] listOfFiles \u003d folder.listFiles();"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"        String result \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"            assert !input.isEmpty() : \"No files to delete or wrong folder\";"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"            assert listOfFiles !\u003d null;"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_DELETE_SUCCESS;"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"            listOfFiles[Integer.parseInt(input) - 1].delete();"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"Deleted Diet Session successfully\");"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_DELETE_WRONG_FORMAT;"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"No or wrong index for deletion in dietManager\");"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_FILE_ARRAY_OUT_OF_BOUND;"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"No input for session index\");"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_NO_SESSIONS_SAVED;"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult(result);"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":3,"tienkhoa16":4,"wgzesg":1,"CFZeon":43}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionEdit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_DIET_FOLDER;"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_EDIT_WRONG_FORMAT;"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_FILE_ARRAY_OUT_OF_BOUND;"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_FILE_CORRUPTED_MSG;"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_NEW_SUCCESS;"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.EMPTY_STRING;"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for diet commands in diet manager."},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"public class DietSessionEdit extends Command {"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for edit command to edit diet sessions."},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for command"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage for diet manager"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult instance to print command message"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) {"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"        String result \u003d EMPTY_STRING;"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"        File folder \u003d new File(PATH_TO_DIET_FOLDER);"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"        File[] listOfFiles \u003d folder.listFiles();"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"            DietSession ds \u003d null;"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"            assert listOfFiles !\u003d null : \"List of files should not be null\";"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"            ds \u003d storage.readDietSession(PATH_TO_DIET_FOLDER, listOfFiles[Integer.parseInt(input) - 1].getName());"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"            ds.start(false, Integer.parseInt(input));"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"Diet session in edit mode\");"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_NEW_SUCCESS;"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"        } catch (FileNotFoundException"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"                | NumberFormatException e) {"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_EDIT_WRONG_FORMAT;"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"No file found at array index\");"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"failed to execute diet session\");"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_FILE_ARRAY_OUT_OF_BOUND;"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"File might be corrupted\");"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"            result \u003d DIET_FILE_CORRUPTED_MSG;"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult(result);"},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":8,"tienkhoa16":3,"wgzesg":1,"CFZeon":46}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import static ui.CommonUi.helpFormatter;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for help commands in diet manager."},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"public class DietSessionHelp extends Command {"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for help command to display help information."},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for command"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage for diet manager"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult with help message"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) {"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"        message.append(helpFormatter(\"New\", \"new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e\","},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"                \"Create a new diet session\"));"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"        message.append(helpFormatter(\"List\", \"list\","},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"                \"Show all past diet sessions\"));"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"        message.append(helpFormatter(\"Delete\", \"delete [INDEX]\","},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"                \"Delete the diet session at the input index\"));"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"        message.append(helpFormatter(\"Edit\", \"edit [INDEX]\","},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"                \"Edit the diet session at the input index\"));"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"        message.append(helpFormatter(\"Search\","},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"                \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\","},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"                \"Search the diet session in between starting and end dates with a specific tag\"));"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        message.append(helpFormatter(\"Clear\", \"clear\","},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"                \"Clear all past diet sessions\"));"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        message.append(helpFormatter(\"End\", \"end\","},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"                \"Go back to Main Menu\"));"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"        logger.log(Level.INFO, \"Displayed help in dietManager\");"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult(message.toString().trim());"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":4,"tienkhoa16":3,"CFZeon":37}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietmanager.DietManagerUi;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import java.util.Comparator;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_DIET_FOLDER;"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.EMPTY_STRING;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for list commands in diet manager."},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"public class DietSessionList extends Command {"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for list command to list diet sessions."},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for command"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage for diet manager"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult with list message"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) {"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"        String message \u003d EMPTY_STRING;"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        File folder \u003d new File(PATH_TO_DIET_FOLDER);"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"        File[] listOfFiles \u003d folder.listFiles();"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        StringBuilder listResult \u003d new StringBuilder();"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"        assert folder.exists();"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"            String dietSessionListSize \u003d \"You have \" + listOfFiles.length + \" record(s)\" + LS;"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"            String dietSessionList \u003d formatList(listOfFiles, storage);"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"            listResult.append(dietSessionListSize);"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"            listResult.append(dietSessionList);"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"            message \u003d listResult.toString();"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.INFO, \"Listed all available diet sessions\");"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"        } catch (NullPointerException | NoSuchElementException e) {"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"            message \u003d DietManagerUi.DIET_NO_SESSION_SAVED;"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"No instances of diet sessions saved\");"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult(message);"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    //@@author CFZeon-reused"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Formats the list of files into a table input."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param listOfFiles list of files in the folder"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param storage storage instance to load files from folder"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @return string with formatted table of files"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private String formatList(File[] listOfFiles, DietStorage storage) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ArrayList\u003cFile\u003e fileArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // converts all files in the array to an arraylist format"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Collections.addAll(fileArrayList, listOfFiles);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // converts the file names into a stream"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e fileNames \u003d (ArrayList\u003cString\u003e) fileArrayList.stream()"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .map(f -\u003e f.getName().split(\" \", 2)[1].trim()).collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // determine length of column for dynamic resizing"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        int descriptionMaxLenInt \u003d Math.max(8,"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                fileNames.stream().max(Comparator.comparingInt(String::length)).get().length());"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Tags\")"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                + String.format(\"%-12s\", \"Date\") + String.format(\"%-10s\", \"Calories\") + LS;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-11s %s\";"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // adds the contents of each diet session and consolidates it into table format"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c fileArrayList.size(); i++) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            DietSession ds \u003d storage.readDietSession(PATH_TO_DIET_FOLDER, listOfFiles[i].getName());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            double totalCalories \u003d ds.getTotalCalories();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            // formats each diet session entry into column form"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            String rowContent \u003d formatRow(fileArrayList, listDescriptionFormat, i, totalCalories);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            infoBuilder.append(row);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        returnString \u003d infoBuilder.toString().trim();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return returnString;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Formats the row of text for each file."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param fileArrayList list of files in the folder converted to arraylist"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @param listDescriptionFormat description of the file"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param i iterator integer for the file"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param totalCalories double for calories in that loaded diet session"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @return formatted string of a row"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private String formatRow(ArrayList\u003cFile\u003e fileArrayList, String listDescriptionFormat, int i, double totalCalories) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String rowContent \u003d String.format(listDescriptionFormat,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                fileArrayList.get(i).getName().replaceFirst(\"[.][^.]+$\", \"\").split(\" \", 2)[1],"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                fileArrayList.get(i).getName().replaceFirst(\"[.][^.]+$\", \"\").split(\" \", 2)[0],"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                totalCalories);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return rowContent;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zsk612":4,"tienkhoa16":3,"wgzesg":1,"CFZeon":46,"-":56}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionSearch.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DateParser;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DietManagerParser;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import exceptions.diet.InvalidSearchDateException;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"import java.time.LocalDateTime;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"import java.util.Comparator;"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"import java.util.HashMap;"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"import java.util.Objects;"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"import java.util.stream.Collectors;"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_DIET_FOLDER;"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_DATE_WRONG_FORMAT;"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_NO_SESSIONS_SAVED;"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_SEARCH_EMPTY_TAG;"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_SEARCH_RESULTS_MESSAGE;"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.EMPTY_STRING;"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for search commands in diet manager."},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"public class DietSessionSearch extends Command {"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"    private final DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for search command to search diet sessions."},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for search command"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage file"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult string variable"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"     * @throws InvalidDateFormatException if the date is in wrong format"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"     * @throws InvalidSearchDateException if the starting date is later than end date"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) throws InvalidDateFormatException,"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"            InvalidSearchDateException {"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        String message \u003d EMPTY_STRING;"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"        File folder \u003d new File(PATH_TO_DIET_FOLDER);"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"        File[] listOfFiles \u003d folder.listFiles();"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"        StringBuilder searchResult \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"            HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"            LocalDateTime startDate \u003d parser.extractStartDates(parsedParams, searchResult);"},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"            LocalDateTime endDate \u003d parser.extractEndDates(parsedParams, searchResult);"},{"lineNumber":59,"author":{"gitId":"CFZeon"},"content":"            if (startDate.compareTo(endDate) \u003e 0) {"},{"lineNumber":60,"author":{"gitId":"CFZeon"},"content":"                throw new InvalidSearchDateException();"},{"lineNumber":61,"author":{"gitId":"CFZeon"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"CFZeon"},"content":"            String tag \u003d parser.extractSearchTag(parsedParams, searchResult);"},{"lineNumber":63,"author":{"gitId":"CFZeon"},"content":"            //check for empty tag in search parameter"},{"lineNumber":64,"author":{"gitId":"CFZeon"},"content":"            checkEmptyTag(searchResult, tag);"},{"lineNumber":65,"author":{"gitId":"CFZeon"},"content":"            searchResult.append(DIET_SEARCH_RESULTS_MESSAGE + \"\\n\\t \");"},{"lineNumber":66,"author":{"gitId":"CFZeon"},"content":"            //check for presence of files in diet session save folder"},{"lineNumber":67,"author":{"gitId":"CFZeon"},"content":"            checkEmptyFolder(listOfFiles, searchResult);"},{"lineNumber":68,"author":{"gitId":"CFZeon"},"content":"            addToSearchResult(listOfFiles, searchResult, startDate, endDate, tag, storage);"},{"lineNumber":69,"author":{"gitId":"CFZeon"},"content":"            message \u003d searchResult.toString();"},{"lineNumber":70,"author":{"gitId":"CFZeon"},"content":"        } catch (NullPointerException | InvalidCommandFormatException e) {"},{"lineNumber":71,"author":{"gitId":"CFZeon"},"content":"            message \u003d \"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":72,"author":{"gitId":"CFZeon"},"content":"                    + \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\";"},{"lineNumber":73,"author":{"gitId":"CFZeon"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":74,"author":{"gitId":"CFZeon"},"content":"            searchResult.append(DIET_DATE_WRONG_FORMAT + \"\\n\\t \");"},{"lineNumber":75,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Invalid date format in diet session search\");"},{"lineNumber":76,"author":{"gitId":"CFZeon"},"content":"            throw new InvalidDateFormatException();"},{"lineNumber":77,"author":{"gitId":"CFZeon"},"content":"        } catch (InvalidSearchDateException e) {"},{"lineNumber":78,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Invalid date format in diet session search\");"},{"lineNumber":79,"author":{"gitId":"CFZeon"},"content":"            throw new InvalidSearchDateException();"},{"lineNumber":80,"author":{"gitId":"CFZeon"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":81,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"No such element in diet session search\");"},{"lineNumber":82,"author":{"gitId":"CFZeon"},"content":"            ui.showToUser(\"Sorry, there is nothing found in your diet menu.\");"},{"lineNumber":83,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"CFZeon"},"content":"        return new CommandResult(message.trim());"},{"lineNumber":85,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":87,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"CFZeon"},"content":"     * Checks if the folder is empty."},{"lineNumber":89,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"CFZeon"},"content":"     * @param listOfFiles Array for list of files in folder"},{"lineNumber":91,"author":{"gitId":"CFZeon"},"content":"     * @param searchResult String builder for search result"},{"lineNumber":92,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"CFZeon"},"content":"    private void checkEmptyFolder(File[] listOfFiles, StringBuilder searchResult) {"},{"lineNumber":94,"author":{"gitId":"CFZeon"},"content":"        if (Objects.requireNonNull(listOfFiles).length \u003d\u003d 0) {"},{"lineNumber":95,"author":{"gitId":"CFZeon"},"content":"            searchResult.append(DIET_NO_SESSIONS_SAVED + \"\\n\\t \");"},{"lineNumber":96,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":99,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"CFZeon"},"content":"     * Checks if the tag is empty in the diet session."},{"lineNumber":101,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"CFZeon"},"content":"     * @param searchResult String builder for search result"},{"lineNumber":103,"author":{"gitId":"CFZeon"},"content":"     * @param tag string to check if tag is empty"},{"lineNumber":104,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"CFZeon"},"content":"    private void checkEmptyTag(StringBuilder searchResult, String tag) {"},{"lineNumber":106,"author":{"gitId":"CFZeon"},"content":"        if (tag.isEmpty()) {"},{"lineNumber":107,"author":{"gitId":"CFZeon"},"content":"            searchResult.append(DIET_SEARCH_EMPTY_TAG + \"\\n\\t \");"},{"lineNumber":108,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    //@@author CFZeon-reused"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Prints search results."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @param listOfFiles  list of files from local storage"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @param searchResult string builder that accumulates warning messages"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @param startDate    starting date for search"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @param endDate      end date for search"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @param tag          tag for search"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @param storage      storage for diet sessions"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @throws InvalidDateFormatException if date is in wrong format"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void addToSearchResult(File[] listOfFiles, StringBuilder searchResult, LocalDateTime startDate,"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                                   LocalDateTime endDate, String tag, DietStorage storage)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throws InvalidDateFormatException {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        //convert the file array to an arraylist for easier manipulation"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        ArrayList\u003cFile\u003e fileArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Collections.addAll(fileArrayList, listOfFiles);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e fileNames \u003d (ArrayList\u003cString\u003e) fileArrayList.stream()"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .map(f -\u003e f.getName().split(\" \", 2)[1].trim()).collect(Collectors.toList());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // get column boundaries for the table format for printing"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        int descriptionMaxLenInt \u003d Math.max(8,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                fileNames.stream().max(Comparator.comparingInt(String::length)).get().length());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Date\")"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + String.format(\"%-12s\", \"Tag\") + String.format(\"%-10s\", \"Calories\") + LS;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        searchResult.append(returnString);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-11s %s\";"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        int numberOfResult \u003d 0;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        numberOfResult \u003d addRow(listOfFiles, searchResult, startDate, endDate, tag, storage, fileArrayList,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                listDescriptionFormat, numberOfResult);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String dietSessionSearchSize \u003d \"\\n\\t You have \" + numberOfResult + \" record(s)\" + LS;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        if (numberOfResult \u003d\u003d 0) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            searchResult.setLength(0);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            searchResult.append(\"Sorry, there is nothing found in your diet menu.\");"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        searchResult.append(dietSessionSearchSize);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Adds to the string builder for table printing."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @param listOfFiles  list of files from local storage"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * @param searchResult string builder that accumulates warning messages"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * @param startDate    starting date for search"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * @param endDate      end date for search"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * @param tag          tag for search"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * @param storage      storage for diet sessions"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * @param fileArrayList for file array converted to arraylist"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * @param listDescriptionFormat the description of the files in array list"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * @param numberOfResult integer of results"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * @return number of results total"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * @throws InvalidDateFormatException if date is in wrong format"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    private int addRow(File[] listOfFiles, StringBuilder searchResult, LocalDateTime startDate,"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                       LocalDateTime endDate, String tag, DietStorage storage, ArrayList\u003cFile\u003e fileArrayList,"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                       String listDescriptionFormat, int numberOfResult) throws InvalidDateFormatException {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c fileArrayList.size(); i++) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            //instantiates stored diet session to get total calorie count"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            DietSession ds \u003d storage.readDietSession(PATH_TO_DIET_FOLDER, listOfFiles[i].getName());"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            double totalCalories \u003d ds.getTotalCalories();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            //extract tags and dates and assigns to string from filename"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            String fileTag \u003d getFileTag(fileArrayList, i);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            String fileDate \u003d getFileDate(fileArrayList, i);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            // converts extracted date string to java dateFormat"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            LocalDateTime dateFormat \u003d DateParser.parseDate(fileDate);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            if (startDate.compareTo(dateFormat) \u003c\u003d 0 \u0026\u0026 endDate.compareTo(dateFormat) \u003e\u003d 0 \u0026\u0026 fileTag.contains(tag)) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                String rowContent \u003d String.format(listDescriptionFormat, fileDate, fileTag, totalCalories);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                String row \u003d String.format(\"%-8s\", ++numberOfResult) + rowContent + LS;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                searchResult.append(row);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        return numberOfResult;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     * Reads file name and returns date."},{"lineNumber":190,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     * @param fileArrayList list of files from local storage into array list"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * @param i index of file from search result"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * @return date as string"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    private String getFileDate(ArrayList\u003cFile\u003e fileArrayList, int i) {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        String fileDate \u003d fileArrayList.get(i).getName().replaceFirst(\"[.][^.]+$\", \"\")"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .split(\" \", 2)[0];"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return fileDate;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Reads file name and returns tags."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @param fileArrayList list of files from local storage into array list"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * @param i index of file from search result"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * @return date as string"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    private String getFileTag(ArrayList\u003cFile\u003e fileArrayList, int i) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return fileArrayList.get(i).getName().replaceFirst(\"[.][^.]+$\", \"\")"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                        .split(\" \", 2)[1];"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zsk612":19,"yujinyang1998":2,"tienkhoa16":3,"wgzesg":1,"CFZeon":85,"-":102}},{"path":"src/main/java/logic/commands/diet/dietmanager/DietSessionWrong.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":" * A representation of the command for wrong commands in diet manager."},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"public class DietSessionWrong extends Command {"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"     * Overrides execute for wrong command."},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"     * @param input   user input for command."},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"     * @param storage storage for diet manager."},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"     * @return CommandResult with invalid input message."},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"    public CommandResult execute(String input, DietStorage storage) throws InvalidCommandWordException {"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        throw new InvalidCommandWordException();"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":1,"yujinyang1998":1,"tienkhoa16":2,"CFZeon":21}},{"path":"src/main/java/logic/commands/diet/dietsession/FoodItemAdd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DietSessionParser;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import exceptions.diet.NegativeCaloriesException;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import exceptions.diet.NoNameException;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.CALORIES_UPPER_BOUND;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":" * A representation of the command for add commands in diet session."},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"public class FoodItemAdd extends Command {"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     * Overrides execute for add command to add food items."},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     * @param foodList arraylist that stored all the food items"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet session"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of the session"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"        DietSessionParser parser \u003d new DietSessionParser();"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"        String result \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"            assert !input.isEmpty();"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"            StringBuilder userOutput \u003d new StringBuilder();"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"            Double calories \u003d parser.processFoodCalories(input);"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"            Food temp \u003d new Food(parser.processFoodName(input), Math.min(calories, CALORIES_UPPER_BOUND));"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"            foodList.add(temp);"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"            if (calories \u003e CALORIES_UPPER_BOUND) {"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"                userOutput.append(DietSessionUi.MESSAGE_HIGH_CALORIES);"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"            userOutput.append(\"Yay! You have added \" + temp.toString());"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"            result \u003d userOutput.toString();"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.INFO, \"Added food to arraylist\");"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_ADD_WRONG_FORMAT;"},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"Wrong Add food item format\");"},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_WRONG_CALORIES;"},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"Put calories in a wrong format\");"},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"        } catch (NegativeCaloriesException e) {"},{"lineNumber":56,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_NEGATIVE_CALORIES;"},{"lineNumber":57,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"Put negative calories\");"},{"lineNumber":58,"author":{"gitId":"zsk612"},"content":"        } catch (NoNameException e) {"},{"lineNumber":59,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_NO_FOOD_NAME;"},{"lineNumber":60,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"no food name\");"},{"lineNumber":61,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"zsk612"},"content":"        return new CommandResult(result);"},{"lineNumber":63,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":55,"yujinyang1998":1,"tienkhoa16":5,"CFZeon":3}},{"path":"src/main/java/logic/commands/diet/dietsession/FoodItemClear.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":" * A representation of the command for clear commands in diet session."},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"public class FoodItemClear extends Command {"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"     * Overrides execute for clear command to clear all food items."},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"     * @param foodList arraylist that stored all the food items"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet session"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of the session"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"        String result \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"        String prompt;"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"        if (index \u003c\u003d 0) {"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"            prompt \u003d DietSessionUi.DIET_INPUT_PROMPT_NEW;"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"            prompt \u003d DietSessionUi.DIET_INPUT_PROMPT_EDIT + index;"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"        if (ui.checkConfirmation(prompt, \"clear all records\")) {"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"            foodList.clear();"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_CLEAR_SUCCESS;"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.INFO, \"Cleared all food in arraylist\");"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"            return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_CLEAR_ABORTED;"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"            return new CommandResult(result, ExecutionResult.ABORTED);"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":45,"tienkhoa16":3}},{"path":"src/main/java/logic/commands/diet/dietsession/FoodItemDelete.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":" * A representation of the command for delete commands in diet session."},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"public class FoodItemDelete extends Command {"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"     * Overrides execute for delete command to delete food items."},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"     * @param foodList arraylist that stored all the food items"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet session"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of the session"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"        String result \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"            assert !input.isEmpty();"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"            int indexOfSession \u003d Integer.parseInt(input);"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"            Food temp \u003d foodList.get(indexOfSession - 1);"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"            result \u003d \"You have deleted \" + temp.toString() + \" from your list!\";"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"            foodList.remove(temp);"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.INFO, \"Removed food from arraylist\");"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_NO_SUCH_INDEX;"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"Did not input index\");"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_DELETE_WRONG_FORMAT;"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"Did not input correct index\");"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":43,"tienkhoa16":3,"CFZeon":2}},{"path":"src/main/java/logic/commands/diet/dietsession/FoodItemHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":" * A representation of the command for help commands in diet session."},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"public class FoodItemHelp extends Command {"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"     * Overrides execute for help command to display help information for dietSession."},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"     * @param foodList arraylist that stored all the food items"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet session"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of the session"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"        StringBuilder helpMessage \u003d new StringBuilder();"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"        DietSessionUi.printHelp(helpMessage);"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"        logger.log(Level.INFO, \"Displayed help in dietSession\");"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"        return new CommandResult(helpMessage.toString().trim());"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":32,"tienkhoa16":3}},{"path":"src/main/java/logic/commands/diet/dietsession/FoodItemList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import java.util.logging.Level;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":" * A representation of the command for list commands in diet session."},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"public class FoodItemList extends Command {"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     * Overrides execute for list command to list food items."},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     * @param foodList arraylist that stored all the food items"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet session"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of the session"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"        String result \u003d \"\";"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"            double totalCalories \u003d 0;"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"            StringBuilder listResult \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"            if (foodList.size() \u003e 0) {"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"                for (int i \u003d 0; i \u003c foodList.size(); i++) {"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"                    totalCalories +\u003d foodList.get(i).getCalories();"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"                }"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"                String totalMealCalories \u003d \"\\n\" + LS + \"Your total calories for this meal is \" + totalCalories + \".\";"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"                String formattedList \u003d formatList(foodList);"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"                listResult.append(formattedList);"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"                listResult.append(totalMealCalories);"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"                result \u003d listResult.toString().trim();"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"                logger.log(Level.INFO, \"Listed all foods in Diet Session\");"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"                listResult.append(DietSessionUi.MESSAGE_NO_FOOD);"},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"                result \u003d listResult.toString().trim();"},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_NO_FOOD;"},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"No item in food list\");"},{"lineNumber":56,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"zsk612"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":58,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":60,"author":{"gitId":"zsk612"},"content":"    private String formatList(ArrayList\u003cFood\u003e foodList) {"},{"lineNumber":61,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":62,"author":{"gitId":"zsk612"},"content":"        ArrayList\u003cString\u003e foodNames \u003d (ArrayList\u003cString\u003e) foodList.stream()"},{"lineNumber":63,"author":{"gitId":"zsk612"},"content":"                .map(Food::getName).collect(Collectors.toList());"},{"lineNumber":64,"author":{"gitId":"zsk612"},"content":"        int descriptionMaxLenInt \u003d Math.max(10,"},{"lineNumber":65,"author":{"gitId":"zsk612"},"content":"                foodNames.stream().max(Comparator.comparingInt(String::length)).get().length());"},{"lineNumber":66,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":67,"author":{"gitId":"zsk612"},"content":"        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"},{"lineNumber":68,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":69,"author":{"gitId":"zsk612"},"content":"        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Food\")"},{"lineNumber":70,"author":{"gitId":"zsk612"},"content":"                + String.format(\"%-9s\", \"Calories\") + LS;"},{"lineNumber":71,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":72,"author":{"gitId":"zsk612"},"content":"        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"},{"lineNumber":73,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":74,"author":{"gitId":"zsk612"},"content":"        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-9s \";"},{"lineNumber":75,"author":{"gitId":"zsk612"},"content":"        for (int i \u003d 0; i \u003c foodList.size(); i++) {"},{"lineNumber":76,"author":{"gitId":"zsk612"},"content":"            String rowContent \u003d String.format(listDescriptionFormat, foodList.get(i).getName(),"},{"lineNumber":77,"author":{"gitId":"zsk612"},"content":"                    foodList.get(i).getCalories());"},{"lineNumber":78,"author":{"gitId":"zsk612"},"content":"            String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"},{"lineNumber":79,"author":{"gitId":"zsk612"},"content":"            infoBuilder.append(row);"},{"lineNumber":80,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"zsk612"},"content":"        returnString \u003d infoBuilder.toString().trim();"},{"lineNumber":82,"author":{"gitId":"zsk612"},"content":"        return returnString;"},{"lineNumber":83,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":76,"tienkhoa16":3,"CFZeon":5}},{"path":"src/main/java/logic/commands/diet/dietsession/FoodItemSearch.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import java.util.Comparator;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":" * A representation of the command for search commands in diet session."},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"public class FoodItemSearch extends Command {"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"    DietSessionUi ui \u003d new DietSessionUi();"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     * Overrides execute for search command to search food items."},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"     * @param foodList arraylist that stored all the food items"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet session"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of the session"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList, DietStorage storage, Integer index) {"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"        String result \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"            StringBuilder searchResult \u003d new StringBuilder();"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"            searchResult.append(DietSessionUi.MESSAGE_SEARCH_PROMPT);"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"            String formattedList \u003d formatList(foodList, input.trim());"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"            searchResult.append(formattedList);"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"            result \u003d searchResult.toString().trim();"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.INFO, \"Listed all searched foods in Diet Session\");"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"            result \u003d DietSessionUi.MESSAGE_NO_FOOD;"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"No item in food list for search\");"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"    private String formatList(ArrayList\u003cFood\u003e foodList, String searchTag) {"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"        ArrayList\u003cString\u003e foodNames \u003d (ArrayList\u003cString\u003e) foodList.stream()"},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"                .map(Food::getName).collect(Collectors.toList());"},{"lineNumber":56,"author":{"gitId":"zsk612"},"content":"        int descriptionMaxLenInt \u003d Math.max(10,"},{"lineNumber":57,"author":{"gitId":"zsk612"},"content":"                foodNames.stream().max(Comparator.comparingInt(String::length)).get().length());"},{"lineNumber":58,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":59,"author":{"gitId":"zsk612"},"content":"        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"},{"lineNumber":60,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":61,"author":{"gitId":"zsk612"},"content":"        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Food\")"},{"lineNumber":62,"author":{"gitId":"zsk612"},"content":"                + String.format(\"%-9s\", \"Calories\") + LS;"},{"lineNumber":63,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":64,"author":{"gitId":"zsk612"},"content":"        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"},{"lineNumber":65,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":66,"author":{"gitId":"zsk612"},"content":"        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-9s \";"},{"lineNumber":67,"author":{"gitId":"zsk612"},"content":"        int numberOfResults \u003d 0;"},{"lineNumber":68,"author":{"gitId":"zsk612"},"content":"        for (int i \u003d 0; i \u003c foodList.size(); i++) {"},{"lineNumber":69,"author":{"gitId":"zsk612"},"content":"            String foodName \u003d foodList.get(i).getName();"},{"lineNumber":70,"author":{"gitId":"zsk612"},"content":"            Double calories \u003d foodList.get(i).getCalories();"},{"lineNumber":71,"author":{"gitId":"zsk612"},"content":"            if (foodName.contains(searchTag)) {"},{"lineNumber":72,"author":{"gitId":"zsk612"},"content":"                String rowContent \u003d String.format(listDescriptionFormat, foodName, calories);"},{"lineNumber":73,"author":{"gitId":"zsk612"},"content":"                String row \u003d String.format(\"%-8s\",  ++numberOfResults) + rowContent + LS;"},{"lineNumber":74,"author":{"gitId":"zsk612"},"content":"                infoBuilder.append(row);"},{"lineNumber":75,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"zsk612"},"content":"        String foodItemSearchSize \u003d \"\\n\\t You have \" + numberOfResults + \" record(s)\" + LS;"},{"lineNumber":78,"author":{"gitId":"zsk612"},"content":"        infoBuilder.append(foodItemSearchSize);"},{"lineNumber":79,"author":{"gitId":"zsk612"},"content":"        if (numberOfResults \u003d\u003d 0) {"},{"lineNumber":80,"author":{"gitId":"zsk612"},"content":"            infoBuilder.setLength(0);"},{"lineNumber":81,"author":{"gitId":"zsk612"},"content":"            infoBuilder.append(\"Sorry, there is nothing found in your food list.\");"},{"lineNumber":82,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"zsk612"},"content":"        returnString \u003d infoBuilder.toString().trim();"},{"lineNumber":84,"author":{"gitId":"zsk612"},"content":"        return returnString;"},{"lineNumber":85,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":83,"tienkhoa16":3}},{"path":"src/main/java/logic/commands/diet/dietsession/FoodItemWrong.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":" * A representation of the command for wrong commands in diet session."},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"public class FoodItemWrong extends Command {"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"     * Overrides execute for wrong command."},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"     * @param input user input for command."},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"     * @param foodList arraylist that stored all the food items."},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"     * @param storage storage for diet session."},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     * @param index Integer variable that shows the index of the session"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"     * @return An object CommandResult containing the executing status and feedback message to be displayed"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     *         to user."},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"    public CommandResult execute(String input, ArrayList\u003cFood\u003e foodList,"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"                                 DietStorage storage, Integer index) throws InvalidCommandWordException {"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"        throw new InvalidCommandWordException();"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":29,"yujinyang1998":1,"tienkhoa16":3}},{"path":"src/main/java/logic/commands/main/MainEnd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for exiting The Schwarzenegger."},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"public class MainEnd extends Command {"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides execute method of class Command to execute end command requested by user\u0027s input."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     * @param args User\u0027s input."},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"        assert args !\u003d null : \"arguments cannot be null\";"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(args);"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        if (!args.isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"end\\\" command does not take in parameters\");"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        throw new EndException();"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":33}},{"path":"src/main/java/logic/commands/main/MainHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import org.apache.commons.lang3.StringUtils;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_DIET;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_END;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_PROFILE;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_WORKOUT;"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import static ui.CommonUi.helpFormatter;"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for showing help message in Main Menu."},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"public class MainHelp extends Command {"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"     * Executes help command in Main Menu."},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"     * @param args User\u0027s input."},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"     * @return Help message."},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        assert args !\u003d null : \"arguments cannot be null\";"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(args);"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        if (!args.isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"help\\\" command does not take in parameters\");"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        StringBuilder helpMessage \u003d new StringBuilder();"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_PROFILE), COMMAND_WORD_PROFILE,"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"                \"Go to Profile Menu to manage your profile\"));"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_WORKOUT), COMMAND_WORD_WORKOUT,"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"                \"Go to Workout Menu to manage your workout records and create new workout records\"));"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_DIET), COMMAND_WORD_DIET,"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"                \"Go to Diet Menu to manage your past diet records\""},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"                        + \" and create new diet records\"));"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_END), \"end\","},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"                \"Exit The Schwarzenegger\"));"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"        ui.showToUser(helpMessage.toString().trim());"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        return new CommandResult(\"\", ExecutionResult.OK);"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":43,"wgzesg":8}},{"path":"src/main/java/logic/commands/main/MainWrong.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":" * A representation of invalid command in Main Menu."},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"public class MainWrong extends Command {"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"     * Notifies user invalid input command."},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     * @param args User\u0027s input."},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     * @return Invalid input command message."},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"        assert args !\u003d null : \"arguments cannot be null\";"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(args);"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        throw new InvalidCommandWordException();"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":27,"wgzesg":1}},{"path":"src/main/java/logic/commands/main/ToDiet.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import diet.dietmanager.DietManager;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for redirecting to Diet Menu from Main Menu."},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"public class ToDiet extends Command {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     * Executes redirecting to Diet Menu command from Main Menu."},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     * @param args User\u0027s input."},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @return Redirecting to Diet Menu message."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"        assert args !\u003d null : \"arguments cannot be null\";"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(args);"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        if (!args.isEmpty()) {"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"diet\\\" command does not take in parameters\");"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        DietManager dietManager \u003d new DietManager();"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        dietManager.start();"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        return new CommandResult(\"\", ExecutionResult.OK);"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":35,"wgzesg":1}},{"path":"src/main/java/logic/commands/main/ToProfile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import profile.ProfileSession;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_PROFILE_FILE;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_PROFILE_FOLDER;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for redirecting to Profile Menu from Main Menu."},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"public class ToProfile extends Command {"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * Executes redirecting to Profile Menu command from Main Menu."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     * @param args User\u0027s input."},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"     * @return Redirecting to Profile Menu message."},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        assert args !\u003d null : \"arguments cannot be null\";"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(args);"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        if (!args.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"profile\\\" command does not take in parameters\");"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        ProfileSession profileSession \u003d ProfileSession.getInstance(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE);"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"        profileSession.run();"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        return new CommandResult(\"\", ExecutionResult.OK);"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":34,"wgzesg":5}},{"path":"src/main/java/logic/commands/main/ToWorkout.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import workout.workoutmanager.WorkoutManager;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for redirecting to Workout Menu from Main Menu."},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"public class ToWorkout extends Command {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     * Executes redirecting to Workout Menu command from Main Menu."},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     * @param args User\u0027s input."},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @return Redirecting to Workout Menu message."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"        assert args !\u003d null : \"arguments cannot be null\";"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(args);"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        if (!args.isEmpty()) {"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"workout\\\" command does not take in parameters\");"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        WorkoutManager workoutManager \u003d new WorkoutManager();"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        workoutManager.start();"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        return new CommandResult(\"\", ExecutionResult.OK);"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":34,"wgzesg":3}},{"path":"src/main/java/logic/commands/profile/ProfileAdd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidSaveFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.FAILED;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.OK;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractCalories;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractCommandTagAndInfo;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractExpectedWeight;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractHeight;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractName;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractWeight;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.findInvalidTags;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.CALORIES_UPPER_BOUND;"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_ADD;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_ADJUST_CALORIES;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_CREATE_PROFILE_ACK;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_PROFILE_EXIST;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for adding profile."},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileAdd extends Command {"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides execute method of class Command to execute the add profile command requested by user\u0027s input."},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        assert commandArgs !\u003d null : \"command args cannot be null\";"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        assert storage !\u003d null : \"profile storage cannot be null\";"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(commandArgs, storage);"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        Profile profile;"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"            profile \u003d storage.loadData();"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(MESSAGE_PROFILE_EXIST, FAILED);"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"        } catch (InvalidSaveFormatException e) {"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"            HashMap\u003cString, String\u003e parsedParams \u003d extractCommandTagAndInfo(COMMAND_WORD_ADD, commandArgs);"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"            String invalidTags \u003d findInvalidTags(parsedParams);"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"            if (!invalidTags.isEmpty()) {"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"                ui.showWarning(\"\\\"add\\\" command does not take in the following parameters: \" + invalidTags);"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"            String name \u003d extractName(parsedParams);"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"            int height \u003d extractHeight(parsedParams);"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"            double weight \u003d extractWeight(parsedParams);"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"            double expectedWeight \u003d extractExpectedWeight(parsedParams);"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"            double calories \u003d extractCalories(parsedParams);"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"            double adjustedCalories \u003d Math.min(calories, CALORIES_UPPER_BOUND);"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"            profile \u003d new Profile(name, height, weight, expectedWeight, adjustedCalories);"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"            storage.saveData(profile);"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"            if (calories \u003e CALORIES_UPPER_BOUND) {"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"                ui.showWarning(MESSAGE_ADJUST_CALORIES);"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(String.format(MESSAGE_CREATE_PROFILE_ACK, profile.toString()), OK);"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":77,"wgzesg":1}},{"path":"src/main/java/logic/commands/profile/ProfileDelete.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidSaveFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.FAILED;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.OK;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_DELETE_NOTHING;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_DELETE_PROFILE;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for deleting user profile."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileDelete extends Command {"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides execute method of class Command to execute the delete profile command requested by user\u0027s input."},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        assert commandArgs !\u003d null : \"command args cannot be null\";"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        assert storage !\u003d null : \"profile storage cannot be null\";"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(commandArgs, storage);"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        if (!commandArgs.isEmpty()) {"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"delete\\\" command does not take in parameters\");"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"            Profile profile \u003d storage.loadData();"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"            if (!ui.checkConfirmation(\"Profile Menu\", \"clear your profile\")) {"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"                return new CommandResult(CLEAR_ABORTED, ExecutionResult.ABORTED);"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"            storage.saveData(null);"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(MESSAGE_DELETE_PROFILE, OK);"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        } catch (InvalidSaveFormatException e) {"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(MESSAGE_DELETE_NOTHING, FAILED);"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":56}},{"path":"src/main/java/logic/commands/profile/ProfileEdit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidSaveFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.FAILED;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.OK;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.SKIPPED;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractCalories;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractCommandTagAndInfo;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractExpectedWeight;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractHeight;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractName;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractWeight;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.findInvalidTags;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.CALORIES_UPPER_BOUND;"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_EDIT;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_ADJUST_CALORIES;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_EDIT_NOTHING;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_EDIT_PROFILE_ACK;"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_PROFILE_NOT_EXIST;"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for editing profile."},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileEdit extends Command {"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides execute method of class Command to execute the edit profile command requested by user\u0027s input."},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        assert commandArgs !\u003d null : \"command args cannot be null\";"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"        assert storage !\u003d null : \"profile storage cannot be null\";"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(commandArgs, storage);"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"            Profile profile \u003d storage.loadData();"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"            assert profile !\u003d null : \"profile should not be null after loading\";"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"            HashMap\u003cString, String\u003e parsedParams \u003d extractCommandTagAndInfo(COMMAND_WORD_EDIT, commandArgs);"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"            String invalidTags \u003d findInvalidTags(parsedParams);"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"            if (!invalidTags.isEmpty()) {"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"                ui.showWarning(\"\\\"edit\\\" command does not take in the following parameter(s): \" + invalidTags);"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"            Profile editedProfile \u003d createEditedProfile(parsedParams, profile);"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"            if (profile.equals(editedProfile)) {"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"                return new CommandResult(MESSAGE_EDIT_NOTHING, SKIPPED);"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"            storage.saveData(editedProfile);"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString()), OK);"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"        } catch (InvalidSaveFormatException e) {"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_EDIT), FAILED);"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"     * Creates a new Profile object from edited information."},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"     * @param profile User\u0027s existing profile."},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"     * @return Edited Profile object."},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"    private Profile createEditedProfile(HashMap\u003cString, String\u003e parsedParams, Profile profile)"},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"        String name \u003d parsedParams.containsKey(\"/n\") ? extractName(parsedParams) : profile.getName();"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"        int height \u003d parsedParams.containsKey(\"/h\") ? extractHeight(parsedParams) : profile.getHeight();"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"        double weight \u003d parsedParams.containsKey(\"/w\") ? extractWeight(parsedParams) : profile.getWeight();"},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"        double expectedWeight \u003d parsedParams.containsKey(\"/e\")"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"                ? extractExpectedWeight(parsedParams) : profile.getExpectedWeight();"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"        double calories \u003d parsedParams.containsKey(\"/c\") ? extractCalories(parsedParams) : profile.getCalories();"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"        double adjustedCalories \u003d Math.min(calories, CALORIES_UPPER_BOUND);"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"        if (calories \u003e CALORIES_UPPER_BOUND) {"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(MESSAGE_ADJUST_CALORIES);"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"        return new Profile(name, height, weight, expectedWeight, adjustedCalories);"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":99,"wgzesg":1}},{"path":"src/main/java/logic/commands/profile/ProfileEnd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for exiting Profile Menu."},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileEnd extends Command {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides execute method of class Command to execute end command requested by user\u0027s input."},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        assert commandArgs !\u003d null : \"command args cannot be null\";"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        assert storage !\u003d null : \"profile storage cannot be null\";"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(commandArgs, storage);"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        if (!commandArgs.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"end\\\" command does not take in parameters\");"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        throw new EndException();"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":37}},{"path":"src/main/java/logic/commands/profile/ProfileHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import org.apache.commons.lang3.StringUtils;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.ADD_PROFILE_FORMAT;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EDIT_PROFILE_FORMAT;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_ADD;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_DELETE;"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_EDIT;"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_END;"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_VIEW;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.helpFormatter;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for showing help message in Profile Menu."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileHelp extends Command {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides execute method of class Command to execute help command requested by user\u0027s input."},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        assert commandArgs !\u003d null : \"command args cannot be null\";"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"        assert storage !\u003d null : \"profile storage cannot be null\";"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(commandArgs, storage);"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"        if (!commandArgs.isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"help\\\" command does not take in parameters\");"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        StringBuilder helpMessage \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_ADD), ADD_PROFILE_FORMAT,"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"                \"Add your new profile\"));"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_VIEW), COMMAND_WORD_VIEW,"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"                \"View your profile\"));"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_EDIT), EDIT_PROFILE_FORMAT,"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"                \"Edit your existing profile. You may edit from 1 field to all fields\"));"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_DELETE), COMMAND_WORD_DELETE,"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"                \"Delete your existing profile\"));"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_END), COMMAND_WORD_END,"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"                \"Go back to Main Menu\"));"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        return new CommandResult(helpMessage.toString().trim());"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":53,"wgzesg":5}},{"path":"src/main/java/logic/commands/profile/ProfileView.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import diet.dietmanager.DietManager;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidSaveFormatException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.FAILED;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.NORMAL_WEIGHT_AVERAGE;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.NORMAL_WEIGHT_THRESHOLD;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.UNDER_WEIGHT_THRESHOLD;"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_VIEW;"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_DIET_FOLDER;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_ENOUGH_CALORIES;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_MORE_CALORIES;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_PROFILE_NOT_EXIST;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_SET_EXPECTED_WEIGHT;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_VIEW_PROFILE;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":" * A representation of the command for viewing profile."},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileView extends Command {"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    private String pathToDietData;"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    private LocalDate date;"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs ProfileView object."},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"     * @param pathToDietData Path to diet folder to get total calories."},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"     * @param date Date to get total calories."},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    public ProfileView(String pathToDietData, LocalDate date) {"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"        super();"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        this.pathToDietData \u003d Objects.requireNonNullElse(pathToDietData, PATH_TO_DIET_FOLDER);"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        this.date \u003d Objects.requireNonNullElseGet(date, LocalDate::now);"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs ProfileView object with default path to data file and current date."},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"    public ProfileView() {"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        this(PATH_TO_DIET_FOLDER, LocalDate.now());"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides execute method of class Command to execute the view profile command requested by user\u0027s input."},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        assert commandArgs !\u003d null : \"command args cannot be null\";"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"        assert storage !\u003d null : \"profile storage cannot be null\";"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(commandArgs, storage);"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"        if (!commandArgs.isEmpty()) {"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"            ui.showWarning(\"\\\"view\\\" command does not take in parameters\");"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"            Profile profile \u003d storage.loadData();"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"            assert profile !\u003d null : \"profile should not be null after loading\";"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(String.format(MESSAGE_VIEW_PROFILE, profile.toString(),"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"                    getCalorieProgressMsg(profile), getExpectedWeightTip(profile)).trim());"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"        } catch (InvalidSaveFormatException e) {"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"            return new CommandResult(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_VIEW), FAILED);"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"     * Gets message for user\u0027s today calorie intake progress."},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"     * @param profile User\u0027s profile."},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"     * @return Message for user\u0027s today calorie intake progress."},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"    private String getCalorieProgressMsg(Profile profile) {"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"        double totalCalories \u003d new DietManager().getDateTotalCalories(pathToDietData, date);"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"        double caloriesToGoal \u003d profile.getCalories() - totalCalories;"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"        String caloriesMessage;"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"        if (caloriesToGoal \u003e 0) {"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"            caloriesMessage \u003d String.format(MESSAGE_MORE_CALORIES, caloriesToGoal);"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"            caloriesMessage \u003d MESSAGE_ENOUGH_CALORIES;"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"        return caloriesMessage;"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"     * Gets tip for setting expected weight to achieve Normal Weight classification."},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"     * @param profile User\u0027s profile."},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"     * @return Tip for setting expected weight to achieve Normal Weight classification."},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"    private String getExpectedWeightTip(Profile profile) {"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"        double bmiIndex \u003d profile.calculateBmi(profile.getHeight(), profile.getExpectedWeight());"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"        if (bmiIndex \u003c UNDER_WEIGHT_THRESHOLD || bmiIndex \u003e NORMAL_WEIGHT_THRESHOLD) {"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"            double normalWeight \u003d Math.pow((double) profile.getHeight() / 100, 2) * NORMAL_WEIGHT_AVERAGE;"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"            return String.format(MESSAGE_SET_EXPECTED_WEIGHT, normalWeight, normalWeight);"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"        return EMPTY_STRING;"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":118,"wgzesg":2}},{"path":"src/main/java/logic/commands/profile/ProfileWrong.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":" * A representation of invalid command in Profile Menu."},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileWrong extends Command {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"     * Notifies user invalid input command."},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @param storage Profile Storage to load and save data."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result of command execution."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult execute(String commandArgs, ProfileStorage storage) throws SchwarzeneggerException {"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        assert commandArgs !\u003d null : \"command args cannot be null\";"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        assert storage !\u003d null : \"profile storage cannot be null\";"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        super.execute(commandArgs, storage);"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        throw new InvalidCommandWordException();"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"tienkhoa16":31}},{"path":"src/main/java/logic/commands/workout/workoutmanager/ByeWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":" * A representation of the command for bye commands in workout manager."},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"public class ByeWS extends Command {"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"     * Terminates workout manager and return to main menu."},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"     * @return null."},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"        throw new EndException();"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":5,"tienkhoa16":4,"wgzesg":17}},{"path":"src/main/java/logic/commands/workout/workoutmanager/ClearWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import models.PastRecordList;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import static ui.CommonUi.clearMsg;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for clear commands in workout manager."},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"public class ClearWS extends Command {"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"     * Executes all workout sessions."},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"     * @return Status OK and feedback message if the execution is affirmed."},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"     *         Status ABORTED if the execution is withdrawn."},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"        if (!ui.checkConfirmation(\"Workout Menu\", \"clear all records\")) {"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"            return new CommandResult(CLEAR_ABORTED, ExecutionResult.ABORTED);"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"        PastRecordList.getInstance().clear();"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"Cleared successfully\");"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"        String content \u003d clearMsg(\"past workout records have\");"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult(content, ExecutionResult.OK);"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":1,"tienkhoa16":4,"wgzesg":32}},{"path":"src/main/java/logic/commands/workout/workoutmanager/DeleteWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.OutOfArrayException;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import models.PastRecordList;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.WorkoutManagerParser;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.DELETE_SUCCESS;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for delete commands in workout manager."},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"public class DeleteWS extends Command {"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     * Deletes a record at a specific index."},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"     * @return Status OK and feedback message if file is deleted."},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"        int index \u003d WorkoutManagerParser.getInstance().parseIndex(args);"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"            PastRecordList.getInstance().delete(index);"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"            throw new OutOfArrayException();"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"deleted successfully\");"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult(DELETE_SUCCESS, ExecutionResult.OK);"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":2,"yujinyang1998":2,"tienkhoa16":5,"wgzesg":29}},{"path":"src/main/java/logic/commands/workout/workoutmanager/EditWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InsufficientArgumentException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.NotANumberException;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.OutOfArrayException;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import models.PastRecordList;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import workout.workoutsession.WorkoutSession;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.EDIT_SUCCESS;"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.START_NEW_SESSION;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for edit commands in workout manager."},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"public class EditWS extends Command {"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"     * Edits a record at a given index."},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"     * @return Status OK and feedback message if file is edit."},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"        int index;"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"            index \u003d Integer.parseInt(args);"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"            logger.warning(\"Number format exception caught\");"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"            throw new NotANumberException();"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"            logger.warning(\"Insufficient arguments given!\");"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"            throw new InsufficientArgumentException(\"edit [INDEX]\");"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"        String filePath;"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"            filePath \u003d PastRecordList.getInstance().edit(index);"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"            logger.warning(\"Index Out Of Bounds Exception caught\");"},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":"            throw new OutOfArrayException();"},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"        WorkoutSession ws \u003d new WorkoutSession(filePath, false, index);"},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"editing workout session created\");"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"        ui.showToUser(START_NEW_SESSION);"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"        ws.workoutSessionStart();"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"edited successfully\");"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult(EDIT_SUCCESS, ExecutionResult.OK);"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":2,"tienkhoa16":6,"wgzesg":52}},{"path":"src/main/java/logic/commands/workout/workoutmanager/HelpWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import static ui.CommonUi.helpFormatter;"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for help commands in workout manager."},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"public class HelpWS extends Command {"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"     * Executes help command in Workout Menu."},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"        String helpMessage \u003d helpFormatter(\"New\", \"new \u003c/t [TAG]...\u003e\","},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"                \"Create a new workout session and tags. Multiple tags are separated by \u0027,\u0027\")"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"                + helpFormatter(\"List\", \"list \u003c/s [START_DATE]\u003e \u003c/e [END_DATE]\u003e\","},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"                \"Show all past sessions. Can display sessions between a certain period\")"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"                + helpFormatter(\"Delete\", \"delete [INDEX]\","},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"                \"Delete the record indexed at x\")"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"                + helpFormatter(\"Edit\", \"edit [INDEX]\","},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"                \"Edit the record indexed at x\")"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"                + helpFormatter(\"Clear\", \"clear\","},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"                \"Clear all past results\")"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"                + helpFormatter(\"Search\", \"search \u003c/t [TAG]...\u003e \u003c/d [DATE]\u003e\","},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"                \"Search records based on tags and dates. Multiple tags are seperated by \u0027,\u0027\")"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"                + helpFormatter(\"End\", \"end\","},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"                \"Go back to Main Menu\");"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult(helpMessage.trim(), ExecutionResult.OK);"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"tienkhoa16":4,"wgzesg":38}},{"path":"src/main/java/logic/commands/workout/workoutmanager/ListWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import models.PastRecordList;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.OK;"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for list commands in workout manager."},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"public class ListWS extends Command {"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"     * Lists past record of workout sessions."},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     * @return Status OK and all past records in a table."},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"        String formattedInfo \u003d PastRecordList.getInstance().list(args);"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"Listed successfully\");"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult(formattedInfo, OK);"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":1,"tienkhoa16":5,"wgzesg":24}},{"path":"src/main/java/logic/commands/workout/workoutmanager/NewWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import logic.parser.WorkoutManagerParser;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import models.PastRecordList;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import workout.workoutsession.WorkoutSession;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static logic.commands.ExecutionResult.OK;"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.NEW_SUCCESS;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.START_NEW_SESSION;"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for create commands in workout manager."},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"public class NewWS extends Command {"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"     * Creates new workout session."},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"     * @return Status OK and feedback message."},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e tags \u003d WorkoutManagerParser.getInstance().parseTags(args);"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"        String filePath \u003d PastRecordList.getInstance().add(tags);"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"        WorkoutSession ws \u003d new WorkoutSession(filePath, true, -1);"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"New workout session created\");"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"        ui.showToUser(START_NEW_SESSION);"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"        ws.workoutSessionStart();"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"Ended workout session\");"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult(NEW_SUCCESS, OK);"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":3,"yujinyang1998":1,"tienkhoa16":4,"wgzesg":36}},{"path":"src/main/java/logic/commands/workout/workoutmanager/SearchWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import models.PastRecordList;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for search commands in workout manager."},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"public class SearchWS extends Command {"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"     * Searches workout session."},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"        super.execute(args);"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"        String formattedInfo \u003d PastRecordList.getInstance().search(args);"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"        return new CommandResult(formattedInfo, ExecutionResult.OK);"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"tienkhoa16":4,"wgzesg":25}},{"path":"src/main/java/logic/commands/workout/workoutmanager/WrongWS.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":" * A representation of the command for wrong commands in workout manager."},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"public class WrongWS extends Command {"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"     * Notifies user invalid input command."},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"     * @return Status MISSING and COMMAND_NOT_FOUND feedback."},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    public CommandResult execute(String args) throws SchwarzeneggerException {"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"        throw new InvalidCommandWordException();"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"tienkhoa16":3,"wgzesg":21}},{"path":"src/main/java/logic/commands/workout/workoutsession/WorkoutSessionAdd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutsession.AddFormatException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.WorkoutSessionParser;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":" * A representation of the command for adding an exercise."},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionAdd extends Command {"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"     * Adds an exercise to the exercise list."},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) {"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        assert (inputs !\u003d null \u0026\u0026 exerciseList !\u003d null \u0026\u0026 filePath !\u003d null \u0026\u0026 workoutSessionStorage !\u003d null"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"                \u0026\u0026 hasEndedWorkoutSessions !\u003d null) : \"File Corrupted\";"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        String result \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"            exerciseList.exerciseList.add(WorkoutSessionParser.addParser(inputs));"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionStorage.writeToStorage(filePath, exerciseList);"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"            Exercise addedExercise \u003d exerciseList.exerciseList.get(exerciseList.exerciseList.size() - 1);"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"            result \u003d WorkoutSessionUi.addExerciseSuccess(addedExercise);"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.ADD_FORMAT_ERROR);"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.PRINT_ERROR);"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"        } catch (AddFormatException e) {"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.ADD_FORMAT_NEGATIVE_ERROR);"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":50,"tienkhoa16":2}},{"path":"src/main/java/logic/commands/workout/workoutsession/WorkoutSessionDelete.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.WorkoutSessionParser;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":" * A representation of the command for deleting an exercise."},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionDelete extends Command {"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"     * Deletes an exercise from the exercise list."},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) {"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        assert (inputs !\u003d null \u0026\u0026 exerciseList !\u003d null \u0026\u0026 filePath !\u003d null"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"                \u0026\u0026 workoutSessionStorage !\u003d null \u0026\u0026 hasEndedWorkoutSessions !\u003d null) : \"File Corrupted\";"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        String result \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"            int removeIndex \u003d WorkoutSessionParser.deleteParser(inputs);"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"            Exercise deletedExercise \u003d exerciseList.exerciseList.get(removeIndex - 1);"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"            exerciseList.exerciseList.remove(removeIndex - 1);"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionStorage.writeToStorage(filePath, exerciseList);"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"            result \u003d WorkoutSessionUi.deleteExerciseSuccess(deletedExercise);"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.PRINT_ERROR);"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.DELETE_FORMAT_ERROR);"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.DELETE_INDEX_ERROR);"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"        } catch (SchwarzeneggerException e) {"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.DELETE_FORMAT_ERROR);"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":53,"tienkhoa16":2}},{"path":"src/main/java/logic/commands/workout/workoutsession/WorkoutSessionEnd.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":" * A representation of the command for ending the current Workout Session."},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionEnd extends Command {"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"     * Edits a boolean array to signal the end of the workout session."},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) {"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"        assert (inputs !\u003d null \u0026\u0026 exerciseList !\u003d null \u0026\u0026 filePath !\u003d null"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"                \u0026\u0026 workoutSessionStorage !\u003d null \u0026\u0026 hasEndedWorkoutSessions !\u003d null) : \"File Corrupted\";"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"        setEndWorkoutSessionT(hasEndedWorkoutSessions);"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionStorage.writeToStorage(filePath, exerciseList);"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.PRINT_ERROR);"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        return new CommandResult(\"\", ExecutionResult.OK);"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"    private void setEndWorkoutSessionT(boolean[] hasEndedWorkoutSessions) {"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        hasEndedWorkoutSessions[0] \u003d true;"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":46,"tienkhoa16":2}},{"path":"src/main/java/logic/commands/workout/workoutsession/WorkoutSessionHelp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":" * A representation of the command for displaying help message for Workout Session."},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionHelp extends Command {"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"     * Gets ready a help message for Workout Session."},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) {"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"        assert (inputs !\u003d null \u0026\u0026 exerciseList !\u003d null \u0026\u0026 filePath !\u003d null"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"                \u0026\u0026 workoutSessionStorage !\u003d null \u0026\u0026 hasEndedWorkoutSessions !\u003d null) : \"File Corrupted\";"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"        String result \u003d WorkoutSessionUi.printHelp();"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":34,"tienkhoa16":2}},{"path":"src/main/java/logic/commands/workout/workoutsession/WorkoutSessionList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import java.util.Comparator;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"import java.util.stream.Collectors;"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":" * A representation of the command for listing all exercise of current workout session."},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionList extends Command {"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"     * Gets a formatted list to be printed to the user of all current exercises."},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) {"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        assert (inputs !\u003d null \u0026\u0026 exerciseList !\u003d null \u0026\u0026 filePath !\u003d null"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"                \u0026\u0026 workoutSessionStorage !\u003d null \u0026\u0026 hasEndedWorkoutSessions !\u003d null) : \"File Corrupted\";"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"        String result \u003d \"\";"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"            result \u003d printList(exerciseList.exerciseList);"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionStorage.writeToStorage(filePath, exerciseList);"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.PRINT_ERROR);"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"    private String printList(ArrayList\u003cExercise\u003e exercise) {"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"        assert exercise !\u003d null : \"exercise list not found\";"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"        String list \u003d \"\";"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"        if (exercise.size() \u003c\u003d 0) {"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"            list \u003d WorkoutSessionUi.EMPTY_LIST_ERROR;"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"            list \u003d formatList(exercise);"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"        return list;"},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"    private String formatList(ArrayList\u003cExercise\u003e exercise) {"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"        ArrayList\u003cString\u003e exerciseNames \u003d (ArrayList\u003cString\u003e) exercise.stream()"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"                .map(Exercise::getDescription).collect(Collectors.toList());"},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"        int descriptionMaxLenInt \u003d Math.max(20,"},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"                exerciseNames.stream().max(Comparator.comparingInt(String::length)).get().length());"},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":"        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":"        String returnString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Exercise\")"},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"                + String.format(\"%-15s\", \"Repetitions\") + String.format(\"%-10s\", \"Weight\") + LS;"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":"        StringBuilder infoBuilder \u003d new StringBuilder(returnString);"},{"lineNumber":75,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":76,"author":{"gitId":"yujinyang1998"},"content":"        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-14s %s\";"},{"lineNumber":77,"author":{"gitId":"yujinyang1998"},"content":"        for (int i \u003d 0; i \u003c exercise.size(); i++) {"},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":"            String rowContent \u003d String.format(listDescriptionFormat, exercise.get(i).getDescription(),"},{"lineNumber":79,"author":{"gitId":"yujinyang1998"},"content":"                    exercise.get(i).getRepetitions(), exercise.get(i).getWeight());"},{"lineNumber":80,"author":{"gitId":"yujinyang1998"},"content":"            String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"},{"lineNumber":81,"author":{"gitId":"yujinyang1998"},"content":"            infoBuilder.append(row);"},{"lineNumber":82,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"yujinyang1998"},"content":"        returnString \u003d infoBuilder.toString().trim();"},{"lineNumber":84,"author":{"gitId":"yujinyang1998"},"content":"        return returnString;"},{"lineNumber":85,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":87,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":88,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":86,"tienkhoa16":2}},{"path":"src/main/java/logic/commands/workout/workoutsession/WorkoutSessionSearch.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.WorkoutSessionParser;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import java.util.Comparator;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":" * A representation of the command for searching for an exercise."},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionSearch extends Command {"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"    private boolean isEmptySearchResult;"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"     * Searches exercise list for matching exercises."},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"     * @return Status OK and information to be printed."},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) {"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        assert (inputs !\u003d null \u0026\u0026 exerciseList !\u003d null \u0026\u0026 filePath !\u003d null"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"                \u0026\u0026 workoutSessionStorage !\u003d null \u0026\u0026 hasEndedWorkoutSessions !\u003d null) : \"File Corrupted\";"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        isEmptySearchResult \u003d true;"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"        String result \u003d \"\";"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        String searchTerm \u003d WorkoutSessionParser.searchParser(inputs).toLowerCase();"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"            if (searchTerm.length() \u003e 0) {"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"                String searchResult \u003d formatList(exerciseList.exerciseList, searchTerm);"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"                if (!isEmptySearchResult) {"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"                    result \u003d (searchResult);"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"                } else {"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"                    result \u003d WorkoutSessionUi.SEARCH_RESULTS_EMPTY;"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"            } else {"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"                result \u003d WorkoutSessionUi.SEARCH_INPUT_ERROR;"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"            return new CommandResult(WorkoutSessionUi.SEARCH_RESULTS_EMPTY);"},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"        return new CommandResult(result, ExecutionResult.OK);"},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"    private String formatList(ArrayList\u003cExercise\u003e exercise, String searchTerm) {"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"        ArrayList\u003cString\u003e exerciseNames \u003d (ArrayList\u003cString\u003e) exercise.stream()"},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"                .map(Exercise::getDescription).collect(Collectors.toList());"},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":"        int descriptionMaxLenInt \u003d Math.max(20,"},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"                exerciseNames.stream().max(Comparator.comparingInt(String::length)).get().length());"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"        String descriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt + 1) + \"s\";"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":"        String formattedString \u003d String.format(\"%-8s\", \"Index\") + String.format(descriptionFormat, \"Exercise\")"},{"lineNumber":75,"author":{"gitId":"yujinyang1998"},"content":"                + String.format(\"%-15s\", \"Repetitions\") + String.format(\"%-10s\", \"Weight\") + LS;"},{"lineNumber":76,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":77,"author":{"gitId":"yujinyang1998"},"content":"        StringBuilder infoBuilder \u003d new StringBuilder(formattedString);"},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":79,"author":{"gitId":"yujinyang1998"},"content":"        String listDescriptionFormat \u003d \"%-\" + String.format(\"%d\", descriptionMaxLenInt) + \"s %-14s %s\";"},{"lineNumber":80,"author":{"gitId":"yujinyang1998"},"content":"        for (int i \u003d 0; i \u003c exercise.size(); i++) {"},{"lineNumber":81,"author":{"gitId":"yujinyang1998"},"content":"            if (exercise.get(i).getDescription().toLowerCase().contains(searchTerm)) {"},{"lineNumber":82,"author":{"gitId":"yujinyang1998"},"content":"                String rowContent \u003d String.format(listDescriptionFormat, exercise.get(i).getDescription(),"},{"lineNumber":83,"author":{"gitId":"yujinyang1998"},"content":"                        exercise.get(i).getRepetitions(), exercise.get(i).getWeight());"},{"lineNumber":84,"author":{"gitId":"yujinyang1998"},"content":"                String row \u003d String.format(\"%-8s\", i + 1) + rowContent + LS;"},{"lineNumber":85,"author":{"gitId":"yujinyang1998"},"content":"                infoBuilder.append(row);"},{"lineNumber":86,"author":{"gitId":"yujinyang1998"},"content":"                isEmptySearchResult \u003d false;"},{"lineNumber":87,"author":{"gitId":"yujinyang1998"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"yujinyang1998"},"content":"        formattedString \u003d infoBuilder.toString().trim();"},{"lineNumber":90,"author":{"gitId":"yujinyang1998"},"content":"        return formattedString;"},{"lineNumber":91,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":90,"tienkhoa16":2}},{"path":"src/main/java/logic/commands/workout/workoutsession/WorkoutSessionWrong.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":" * A representation of invalid command in Workout Session."},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionWrong extends Command {"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"     * Notifies user invalid input command."},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"     * @param inputs Array of user\u0027s input."},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"     * @param workoutSessionStorage Workout Session Storage to load and save data."},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"     * @param hasEndedWorkoutSessions Array of booleans indicating if user has ended workout sessions."},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"     * @throws InvalidCommandWordException If the user input does not match the ones stated in help."},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"    public CommandResult execute(String[] inputs, ExerciseList exerciseList,"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"                                 String filePath, WorkoutSessionStorage workoutSessionStorage,"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"                                 boolean[] hasEndedWorkoutSessions) throws InvalidCommandWordException {"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"        assert (exerciseList !\u003d null \u0026\u0026 filePath !\u003d null \u0026\u0026 workoutSessionStorage !\u003d null"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"                \u0026\u0026 hasEndedWorkoutSessions !\u003d null) : \"File Corrupted\";"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"        throw new InvalidCommandWordException();"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":30,"tienkhoa16":2}},{"path":"src/main/java/logic/parser/CommonParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":" * A base class for dealing with making sense of user command."},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"public class CommonParser {"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"    public static final int COMMAND_ARGS_INDEX \u003d 1;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    public static final int COMMAND_SPLIT_LIMIT \u003d 2;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"    public static final int COMMAND_TYPE_INDEX \u003d 0;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    public static final String GREEDY_WHITE_SPACE \u003d \"\\\\s+\";"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     * Parses and returns the Command associated with the user input."},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @param userInputString User\u0027s raw input string."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     * @return Size 2 array; first element is the command type and second element is the arguments string."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    public String[] parseCommand(String userInputString) {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"        assert userInputString !\u003d null : \"user input cannot be null\";"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"        assert !userInputString.isEmpty() : \"user input cannot be empty\";"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        String[] split \u003d userInputString.trim().split(GREEDY_WHITE_SPACE, COMMAND_SPLIT_LIMIT);"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        String commandType \u003d split[COMMAND_TYPE_INDEX].toLowerCase();"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d (split.length \u003d\u003d COMMAND_SPLIT_LIMIT ? split[COMMAND_ARGS_INDEX] : EMPTY_STRING);"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        return new String[]{commandType, commandArgs};"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":33}},{"path":"src/main/java/logic/parser/DateParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":" * Represents the class containing all the date formats."},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"public class DateParser {"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    private static final List\u003cDateTimeFormatter\u003e dtFormatters \u003d Arrays.asList("},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuuMMdd HH:mm\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu-MM-dd HH:mm\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu MM dd HH:mm\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu/MM/dd HH:mm\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuuMMdd HHmm\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu-MM-dd HHmm\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu MM dd HHmm\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu/MM/dd HHmm\").withResolverStyle(ResolverStyle.STRICT)"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"    );"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"    private static final List\u003cDateTimeFormatter\u003e dFormatters \u003d Arrays.asList("},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuuMMdd\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu/MM/dd\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu-MM-dd\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"uuuu MM dd\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"dd-MM-uuuu\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/uuuu\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"dd MM uuuu\").withResolverStyle(ResolverStyle.STRICT),"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"            DateTimeFormatter.ofPattern(\"ddMMuuuu\").withResolverStyle(ResolverStyle.STRICT)"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"    );"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"     * Parses a given string following one of the accepted format into date-time format."},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"     * @param targetString String input to be parsed."},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"     * @return Parsed result in the form of LocalDateTime or null if no value parsing is found."},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"     * @throws InvalidDateFormatException If date format is invalid."},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"    public static LocalDateTime parseDate(String targetString) throws InvalidDateFormatException {"},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":"        for (DateTimeFormatter dtf : dtFormatters) {"},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"                return LocalDateTime.parse(targetString, dtf);"},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"                continue;"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"        for (DateTimeFormatter dtf : dFormatters) {"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"            try {"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"                return LocalDate.parse(targetString, dtf).atStartOfDay();"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"                continue;"},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"        throw new InvalidDateFormatException();"},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"wgzesg":65}},{"path":"src/main/java/logic/parser/DietManagerParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.util.HashMap;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":" * A class that is responsible for parsing user inputs in Diet Manager."},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"public class DietManagerParser extends CommonParser {"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"    public Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"     * Extracts out date and time by looking for date strings in YYYY-MM-DD format."},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"     * @param parsedParams user input for new diet session"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     * @param extractDateMessage string builder that appends warnings and messages"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"     * @return date in MMM dd yyyy if the user inputs date in YYYY-MM-DD format;"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"     *         else returns original string"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"     * @throws IllegalStateException if the date is in wrong state"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"     * @throws InvalidDateFormatException if the date is in wrong format"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"    public String extractNewDate(HashMap\u003cString, String\u003e parsedParams, StringBuilder extractDateMessage)"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"            throws IllegalStateException, InvalidDateFormatException {"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"            String dateString \u003d parsedParams.get(\"/d\").trim();"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"            if (!dateString.isEmpty()) {"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"                return DateParser.parseDate(dateString).format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"            } else {"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"                extractDateMessage.append(\"Date input is empty.\\n\");"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"            throw new InvalidDateFormatException();"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"            extractDateMessage.append(\"No date input is detected.\\n\");"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"        extractDateMessage.append(\"\\t I\u0027ve replaced it with today\u0027s date.\\n\\t \");"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"        return dtf.format(now);"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"     * Extracts out tag of the diet session."},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":"     * @param parsedParams user input for new diet session"},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"     * @param extractMealMessage string builder that appends warnings and messages"},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"     * @return tag input if there is any;"},{"lineNumber":56,"author":{"gitId":"zsk612"},"content":"     *         else returns \"unspecified\""},{"lineNumber":57,"author":{"gitId":"zsk612"},"content":"     * @throws NullPointerException if there is nothing in tag input"},{"lineNumber":58,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"zsk612"},"content":"    public String extractNewTag(HashMap\u003cString, String\u003e parsedParams, StringBuilder extractMealMessage)"},{"lineNumber":60,"author":{"gitId":"zsk612"},"content":"            throws NullPointerException {"},{"lineNumber":61,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"zsk612"},"content":"            String tag \u003d parsedParams.get(\"/t\").trim();"},{"lineNumber":63,"author":{"gitId":"zsk612"},"content":"            if (tag.isEmpty()) {"},{"lineNumber":64,"author":{"gitId":"zsk612"},"content":"                extractMealMessage.append(\"Tag input is empty, \""},{"lineNumber":65,"author":{"gitId":"zsk612"},"content":"                        + \"and it is replaced with \\\"unspecified\\\".\");"},{"lineNumber":66,"author":{"gitId":"zsk612"},"content":"                return \"unspecified\";"},{"lineNumber":67,"author":{"gitId":"zsk612"},"content":"            } else {"},{"lineNumber":68,"author":{"gitId":"zsk612"},"content":"                return tag;"},{"lineNumber":69,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"zsk612"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":71,"author":{"gitId":"zsk612"},"content":"            extractMealMessage.append(\"No tag is detected, \""},{"lineNumber":72,"author":{"gitId":"zsk612"},"content":"                    + \"and the session is tagged as \\\"unspecified\\\".\");"},{"lineNumber":73,"author":{"gitId":"zsk612"},"content":"            return \"unspecified\";"},{"lineNumber":74,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":77,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"zsk612"},"content":"     * Extracts out starting date, end date and tag information."},{"lineNumber":79,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"zsk612"},"content":"     * @param cmd user command"},{"lineNumber":81,"author":{"gitId":"zsk612"},"content":"     * @param commandArgs user input"},{"lineNumber":82,"author":{"gitId":"zsk612"},"content":"     * @return a hashmap where each information corresponds to the correct separator"},{"lineNumber":83,"author":{"gitId":"zsk612"},"content":"     * @throws InvalidCommandFormatException if user enters invalid commands"},{"lineNumber":84,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"zsk612"},"content":"    public HashMap\u003cString, String\u003e extractDietManagerCommandTagAndInfo(String cmd, String commandArgs)"},{"lineNumber":86,"author":{"gitId":"zsk612"},"content":"            throws InvalidCommandFormatException {"},{"lineNumber":87,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":88,"author":{"gitId":"zsk612"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"},{"lineNumber":89,"author":{"gitId":"zsk612"},"content":"        int startIndex \u003d 0;"},{"lineNumber":90,"author":{"gitId":"zsk612"},"content":"        int endIndex \u003d 0;"},{"lineNumber":91,"author":{"gitId":"zsk612"},"content":"        if ((cmd.equals(\"search\")) \u0026\u0026 (commandArgs.isEmpty() || !(commandArgs.contains(\"/t\")"},{"lineNumber":92,"author":{"gitId":"zsk612"},"content":"                || commandArgs.contains(\"/s\") || commandArgs.contains(\"/e\")))) {"},{"lineNumber":93,"author":{"gitId":"zsk612"},"content":"            throw new InvalidCommandFormatException(\"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":94,"author":{"gitId":"zsk612"},"content":"                    + \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\");"},{"lineNumber":95,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":97,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"zsk612"},"content":"            while (commandArgs.indexOf(\"/\", startIndex) !\u003d -1) {"},{"lineNumber":99,"author":{"gitId":"zsk612"},"content":"                endIndex \u003d commandArgs.indexOf(\"/\", startIndex + 1);"},{"lineNumber":100,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":101,"author":{"gitId":"zsk612"},"content":"                if (endIndex \u003d\u003d -1) {"},{"lineNumber":102,"author":{"gitId":"zsk612"},"content":"                    endIndex \u003d commandArgs.length();"},{"lineNumber":103,"author":{"gitId":"zsk612"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":105,"author":{"gitId":"zsk612"},"content":"                String parsedOption \u003d commandArgs.substring(startIndex + 2, endIndex).trim();"},{"lineNumber":106,"author":{"gitId":"zsk612"},"content":"                String optionIndicator \u003d commandArgs.substring(startIndex, startIndex + 2).trim().toLowerCase();"},{"lineNumber":107,"author":{"gitId":"zsk612"},"content":"                parsedParams.put(optionIndicator, parsedOption);"},{"lineNumber":108,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":109,"author":{"gitId":"zsk612"},"content":"                startIndex \u003d endIndex;"},{"lineNumber":110,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":112,"author":{"gitId":"zsk612"},"content":"            return parsedParams;"},{"lineNumber":113,"author":{"gitId":"zsk612"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":114,"author":{"gitId":"zsk612"},"content":"            if (cmd.equals(\"search\")) {"},{"lineNumber":115,"author":{"gitId":"zsk612"},"content":"                logger.log(Level.WARNING, \"Wrong format for search input\");"},{"lineNumber":116,"author":{"gitId":"zsk612"},"content":"                throw new InvalidCommandFormatException(\"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":117,"author":{"gitId":"zsk612"},"content":"                        + \"search \u003c/s [STARTING_DATE]\u003e \u003c/e [END_DATE]\u003e \u003c/t [TAG]\u003e\");"},{"lineNumber":118,"author":{"gitId":"zsk612"},"content":"            } else if (cmd.equals(\"new\")) {"},{"lineNumber":119,"author":{"gitId":"zsk612"},"content":"                logger.log(Level.WARNING, \"Wrong format for create input\");"},{"lineNumber":120,"author":{"gitId":"zsk612"},"content":"                throw new InvalidCommandFormatException(\"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":121,"author":{"gitId":"zsk612"},"content":"                        + \"new /d [DATE] /t [TAG]\");"},{"lineNumber":122,"author":{"gitId":"zsk612"},"content":"            } else {"},{"lineNumber":123,"author":{"gitId":"zsk612"},"content":"                throw new InvalidCommandFormatException(\"Wrong format\");"},{"lineNumber":124,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":128,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"zsk612"},"content":"     * Extracts out search tag."},{"lineNumber":130,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"zsk612"},"content":"     * @param parsedParams a hashmap that contains information about tag"},{"lineNumber":132,"author":{"gitId":"zsk612"},"content":"     * @param searchResult string build that contains warning messages"},{"lineNumber":133,"author":{"gitId":"zsk612"},"content":"     * @return search tag"},{"lineNumber":134,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"zsk612"},"content":"    public String extractSearchTag(HashMap\u003cString, String\u003e parsedParams, StringBuilder searchResult) {"},{"lineNumber":136,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":137,"author":{"gitId":"zsk612"},"content":"            String tag \u003d parsedParams.get(\"/t\").trim();"},{"lineNumber":138,"author":{"gitId":"zsk612"},"content":"            return tag;"},{"lineNumber":139,"author":{"gitId":"zsk612"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":140,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"It looks like there is no input for search tag\");"},{"lineNumber":141,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"zsk612"},"content":"        return \"\";"},{"lineNumber":143,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":145,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"zsk612"},"content":"     * Extracts out starting date."},{"lineNumber":147,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"zsk612"},"content":"     * @param parsedParams a hashmap that contains information about starting date"},{"lineNumber":149,"author":{"gitId":"zsk612"},"content":"     * @param searchResult string build that contains warning messages"},{"lineNumber":150,"author":{"gitId":"zsk612"},"content":"     * @return starting date"},{"lineNumber":151,"author":{"gitId":"zsk612"},"content":"     * @throws InvalidDateFormatException if the date is in wrong format"},{"lineNumber":152,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"zsk612"},"content":"    public LocalDateTime extractStartDates(HashMap\u003cString, String\u003e parsedParams, StringBuilder searchResult)"},{"lineNumber":154,"author":{"gitId":"zsk612"},"content":"            throws InvalidDateFormatException {"},{"lineNumber":155,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":156,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":157,"author":{"gitId":"zsk612"},"content":"            String startDate \u003d parsedParams.get(\"/s\");"},{"lineNumber":158,"author":{"gitId":"zsk612"},"content":"            if (!startDate.isEmpty()) {"},{"lineNumber":159,"author":{"gitId":"zsk612"},"content":"                return DateParser.parseDate(startDate);"},{"lineNumber":160,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"zsk612"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":162,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"It looks like there is no date input in start date\");"},{"lineNumber":163,"author":{"gitId":"zsk612"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":164,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"Invalid date in start date\");"},{"lineNumber":165,"author":{"gitId":"zsk612"},"content":"            throw new InvalidDateFormatException();"},{"lineNumber":166,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"zsk612"},"content":"        searchResult.append(\"Starting date is empty, \""},{"lineNumber":168,"author":{"gitId":"zsk612"},"content":"                + \"and it is replaced with the earliest date.\\n\\t \");"},{"lineNumber":169,"author":{"gitId":"zsk612"},"content":"        return DateParser.parseDate(\"0001-01-01\");"},{"lineNumber":170,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":172,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"zsk612"},"content":"     * Extracts out end date."},{"lineNumber":174,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"zsk612"},"content":"     * @param parsedParams a hashmap that contains information about end date"},{"lineNumber":176,"author":{"gitId":"zsk612"},"content":"     * @param searchResult string build that contains warning messages"},{"lineNumber":177,"author":{"gitId":"zsk612"},"content":"     * @return end date"},{"lineNumber":178,"author":{"gitId":"zsk612"},"content":"     * @throws InvalidDateFormatException if the date is in wrong format"},{"lineNumber":179,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"zsk612"},"content":"    public LocalDateTime extractEndDates(HashMap\u003cString, String\u003e parsedParams, StringBuilder searchResult)"},{"lineNumber":181,"author":{"gitId":"zsk612"},"content":"            throws InvalidDateFormatException {"},{"lineNumber":182,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":183,"author":{"gitId":"zsk612"},"content":"        try {"},{"lineNumber":184,"author":{"gitId":"zsk612"},"content":"            String endDate \u003d parsedParams.get(\"/e\");"},{"lineNumber":185,"author":{"gitId":"zsk612"},"content":"            if (!endDate.isEmpty()) {"},{"lineNumber":186,"author":{"gitId":"zsk612"},"content":"                return DateParser.parseDate(endDate);"},{"lineNumber":187,"author":{"gitId":"zsk612"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"zsk612"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":189,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"It looks like there is no date input in end date\");"},{"lineNumber":190,"author":{"gitId":"zsk612"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":191,"author":{"gitId":"zsk612"},"content":"            logger.log(Level.WARNING, \"Invalid date in start date\");"},{"lineNumber":192,"author":{"gitId":"zsk612"},"content":"            throw new InvalidDateFormatException();"},{"lineNumber":193,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"zsk612"},"content":"        searchResult.append(\"End date is empty, \""},{"lineNumber":195,"author":{"gitId":"zsk612"},"content":"                + \"and it is replaced with the latest date.\\n\\t \");"},{"lineNumber":196,"author":{"gitId":"zsk612"},"content":"        return DateParser.parseDate(\"9999-12-12\");"},{"lineNumber":197,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":199,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":197,"yujinyang1998":1,"tienkhoa16":1}},{"path":"src/main/java/logic/parser/DietSessionParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import exceptions.diet.NegativeCaloriesException;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import exceptions.diet.NoNameException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":" * A class that is responsible for parsing user inputs in Diet Session."},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"public class DietSessionParser extends CommonParser {"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"     * Processes the name of the food item."},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"     * @param food string for food content"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"     * @return food name"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"     * @throws IndexOutOfBoundsException handles exception for not inputting food name or calories"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"     * @throws NoNameException handles empty food name"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"    public String processFoodName(String food) throws IndexOutOfBoundsException, NoNameException {"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"        String[] temp \u003d food.trim().split(\"/c\", 2);"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"        if (temp[0].trim().isEmpty()) {"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"            throw new NoNameException();"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"        return temp[0].trim();"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"     * Processes the calories of the food item."},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"     * @param food string for food content"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"     * @return food calories"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"     * @throws NumberFormatException handles exception for wrong calories input"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"     * @throws NegativeCaloriesException handles negative calories input"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"    public double processFoodCalories(String food) throws NumberFormatException, NegativeCaloriesException {"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"        String[] temp \u003d food.trim().split(\"/c\", 2);"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"        if (Double.parseDouble(temp[1]) \u003c 0) {"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"            throw new NegativeCaloriesException();"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"        logger.log(Level.INFO, \"Processed food calories successfully\");"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"        return Double.parseDouble(temp[1]);"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":46,"yujinyang1998":1,"tienkhoa16":3,"CFZeon":1}},{"path":"src/main/java/logic/parser/ProfileParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InsufficientArgumentException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidCaloriesException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidHeightException;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidNameException;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidWeightException;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import org.apache.commons.lang3.text.WordUtils;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import profile.Utils;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import java.util.HashMap;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.ADD_PROFILE_FORMAT;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EDIT_PROFILE_FORMAT;"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_ADD;"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_EDIT;"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_HELP;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":" * A class that deals with making sense of user\u0027s command inside Profile Session."},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileParser extends CommonParser {"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    public static final String NAME_SPECIFIER \u003d \"/n\";"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    public static final String HEIGHT_SPECIFIER \u003d \"/h\";"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    public static final String WEIGHT_SPECIFIER \u003d \"/w\";"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    public static final String EXPECTED_WEIGHT_SPECIFIER \u003d \"/e\";"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    public static final String CALORIES_SPECIFIER \u003d \"/c\";"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    public static final String SPECIFIER_START_INDICATOR \u003d \"/\";"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    public static final int CHARACTER_NOT_FOUND_INDEX \u003d -1;"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    public static final int STRING_START_INDEX \u003d 0;"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"    public static final int NEXT_INDEX_OFFSET \u003d 1;"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    public static final int PARSED_OPTION_OFFSET \u003d 2;"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"     * Extracts command tags from user input to get option indicator and parsed option."},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"     * @param command Command being executed."},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandArgs User\u0027s input arguments."},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"     * @return HashMap containing option indicator and parsed option pairs."},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    public static HashMap\u003cString, String\u003e extractCommandTagAndInfo(String command, String commandArgs)"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        if (!commandArgs.contains(SPECIFIER_START_INDICATOR)) {"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"            throwInvalidCommandFormat(command);"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"        int startIndex \u003d STRING_START_INDEX;"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        int endIndex;"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"            while (commandArgs.indexOf(SPECIFIER_START_INDICATOR, startIndex) !\u003d CHARACTER_NOT_FOUND_INDEX) {"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"                endIndex \u003d commandArgs.indexOf(SPECIFIER_START_INDICATOR, startIndex + NEXT_INDEX_OFFSET);"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"                if (endIndex \u003d\u003d CHARACTER_NOT_FOUND_INDEX) {"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"                    endIndex \u003d commandArgs.length();"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"                String parsedOption \u003d commandArgs.substring(startIndex + PARSED_OPTION_OFFSET, endIndex).trim();"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"                String optionIndicator \u003d commandArgs.substring(startIndex, startIndex + PARSED_OPTION_OFFSET)"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"                        .trim().toLowerCase();"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"                parsedParams.put(optionIndicator, parsedOption);"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"                startIndex \u003d endIndex;"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"            if (!checkSufficientParams(command, parsedParams)) {"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"                throwInsufficientArgument(command);"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"            throwInvalidCommandFormat(command);"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"        return parsedParams;"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"     * Checks if user inputs sufficient number of params to the command."},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"     * @param command Type of command being executed."},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"     * @return If the number of params input to the command is sufficient."},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"    private static boolean checkSufficientParams(String command, HashMap\u003cString, String\u003e parsedParams) {"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"        boolean isSufficient \u003d true;"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"        switch (command) {"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"        case COMMAND_WORD_ADD:"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"            if (!parsedParams.containsKey(NAME_SPECIFIER)"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"                    || !parsedParams.containsKey(HEIGHT_SPECIFIER)"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"                    || !parsedParams.containsKey(WEIGHT_SPECIFIER)"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"                    || !parsedParams.containsKey(EXPECTED_WEIGHT_SPECIFIER)"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"                    || !parsedParams.containsKey(CALORIES_SPECIFIER)) {"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"                isSufficient \u003d false;"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"            break;"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"        case COMMAND_WORD_EDIT:"},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"            if (!(parsedParams.containsKey(NAME_SPECIFIER)"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"                    || parsedParams.containsKey(HEIGHT_SPECIFIER)"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"                    || parsedParams.containsKey(WEIGHT_SPECIFIER)"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"                    || parsedParams.containsKey(EXPECTED_WEIGHT_SPECIFIER)"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"                    || parsedParams.containsKey(CALORIES_SPECIFIER))) {"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"                isSufficient \u003d false;"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"            break;"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"        default:"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"            isSufficient \u003d true;"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"            break;"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"        return isSufficient;"},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"     * Finds invalid tags (option indicators) in user\u0027s input."},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"     * @return String containing invalid tags."},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"    public static String findInvalidTags(HashMap\u003cString, String\u003e parsedParams) {"},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":"        Set\u003cString\u003e validTags \u003d new HashSet\u003c\u003e(Arrays.asList(NAME_SPECIFIER, HEIGHT_SPECIFIER, WEIGHT_SPECIFIER,"},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":"                EXPECTED_WEIGHT_SPECIFIER, CALORIES_SPECIFIER));"},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"        parsedParams.keySet().stream()"},{"lineNumber":134,"author":{"gitId":"tienkhoa16"},"content":"                .filter(tag -\u003e !validTags.contains(tag))"},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"                .forEach(tag -\u003e result.append(String.format(\"\\\"%s\\\", \", tag)));"},{"lineNumber":136,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":"        String trimmedResult \u003d result.toString().trim();"},{"lineNumber":138,"author":{"gitId":"tienkhoa16"},"content":"        return trimmedResult.isEmpty()"},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"                ? trimmedResult"},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":"                : trimmedResult.substring(STRING_START_INDEX, trimmedResult.length() - NEXT_INDEX_OFFSET);"},{"lineNumber":141,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":143,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"tienkhoa16"},"content":"     * Throws InsufficientArgumentException with the correct param based on the command."},{"lineNumber":145,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"tienkhoa16"},"content":"     * @param command Command with invalid format."},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InsufficientArgumentException If command has invalid format."},{"lineNumber":148,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"tienkhoa16"},"content":"    private static void throwInsufficientArgument(String command)"},{"lineNumber":150,"author":{"gitId":"tienkhoa16"},"content":"            throws InsufficientArgumentException {"},{"lineNumber":151,"author":{"gitId":"tienkhoa16"},"content":"        if (command.equals(COMMAND_WORD_ADD)) {"},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"            throw new InsufficientArgumentException(ADD_PROFILE_FORMAT);"},{"lineNumber":153,"author":{"gitId":"tienkhoa16"},"content":"        } else if (command.equals(COMMAND_WORD_EDIT)) {"},{"lineNumber":154,"author":{"gitId":"tienkhoa16"},"content":"            throw new InsufficientArgumentException(EDIT_PROFILE_FORMAT);"},{"lineNumber":155,"author":{"gitId":"tienkhoa16"},"content":"        } else {"},{"lineNumber":156,"author":{"gitId":"tienkhoa16"},"content":"            throw new InsufficientArgumentException(COMMAND_WORD_HELP);"},{"lineNumber":157,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":160,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"tienkhoa16"},"content":"     * Throws InvalidCommandFormatException with the correct param based on the command."},{"lineNumber":162,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"tienkhoa16"},"content":"     * @param command Command with invalid format."},{"lineNumber":164,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidCommandFormatException If command has invalid format."},{"lineNumber":165,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"tienkhoa16"},"content":"    private static void throwInvalidCommandFormat(String command) throws InvalidCommandFormatException {"},{"lineNumber":167,"author":{"gitId":"tienkhoa16"},"content":"        if (command.equals(COMMAND_WORD_ADD)) {"},{"lineNumber":168,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidCommandFormatException(ADD_PROFILE_FORMAT);"},{"lineNumber":169,"author":{"gitId":"tienkhoa16"},"content":"        } else if (command.equals(COMMAND_WORD_EDIT)) {"},{"lineNumber":170,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidCommandFormatException(EDIT_PROFILE_FORMAT);"},{"lineNumber":171,"author":{"gitId":"tienkhoa16"},"content":"        } else {"},{"lineNumber":172,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidCommandFormatException(COMMAND_WORD_HELP);"},{"lineNumber":173,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":176,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"tienkhoa16"},"content":"     * Extracts name from parsed HashMap."},{"lineNumber":178,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":179,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":180,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s name."},{"lineNumber":181,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidNameException If input name is empty."},{"lineNumber":182,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"tienkhoa16"},"content":"    public static String extractName(HashMap\u003cString, String\u003e parsedParams) throws InvalidNameException {"},{"lineNumber":184,"author":{"gitId":"tienkhoa16"},"content":"        String name \u003d WordUtils.capitalizeFully(parsedParams.get(NAME_SPECIFIER));"},{"lineNumber":185,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":186,"author":{"gitId":"tienkhoa16"},"content":"        if (!Utils.checkValidName(name)) {"},{"lineNumber":187,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidNameException();"},{"lineNumber":188,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":190,"author":{"gitId":"tienkhoa16"},"content":"        return name;"},{"lineNumber":191,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":193,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"tienkhoa16"},"content":"     * Extracts calories from parsed HashMap."},{"lineNumber":195,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":197,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s calories."},{"lineNumber":198,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidCaloriesException If input calories amount is invalid."},{"lineNumber":199,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"tienkhoa16"},"content":"    public static double extractCalories(HashMap\u003cString, String\u003e parsedParams) throws InvalidCaloriesException {"},{"lineNumber":201,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":202,"author":{"gitId":"tienkhoa16"},"content":"            double calories \u003d Double.parseDouble(parsedParams.get(CALORIES_SPECIFIER));"},{"lineNumber":203,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":204,"author":{"gitId":"tienkhoa16"},"content":"            if (!Utils.checkValidCalories(calories)) {"},{"lineNumber":205,"author":{"gitId":"tienkhoa16"},"content":"                throw new InvalidCaloriesException();"},{"lineNumber":206,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"tienkhoa16"},"content":"            return calories;"},{"lineNumber":208,"author":{"gitId":"tienkhoa16"},"content":"        } catch (NumberFormatException | NullPointerException e) {"},{"lineNumber":209,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidCaloriesException();"},{"lineNumber":210,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":213,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":214,"author":{"gitId":"tienkhoa16"},"content":"     * Extracts height from parsed HashMap."},{"lineNumber":215,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":216,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":217,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s height."},{"lineNumber":218,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidHeightException If input height is invalid."},{"lineNumber":219,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"tienkhoa16"},"content":"    public static int extractHeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidHeightException {"},{"lineNumber":221,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"tienkhoa16"},"content":"            int height \u003d Integer.parseInt(parsedParams.get(HEIGHT_SPECIFIER));"},{"lineNumber":223,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":224,"author":{"gitId":"tienkhoa16"},"content":"            if (!Utils.checkValidHeight(height)) {"},{"lineNumber":225,"author":{"gitId":"tienkhoa16"},"content":"                throw new InvalidHeightException();"},{"lineNumber":226,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":227,"author":{"gitId":"tienkhoa16"},"content":"            return height;"},{"lineNumber":228,"author":{"gitId":"tienkhoa16"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":229,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidHeightException();"},{"lineNumber":230,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":233,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"tienkhoa16"},"content":"     * Extracts weight from parsed HashMap."},{"lineNumber":235,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":236,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":237,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s weight."},{"lineNumber":238,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidWeightException If input weight is invalid."},{"lineNumber":239,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":240,"author":{"gitId":"tienkhoa16"},"content":"    public static double extractWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"},{"lineNumber":241,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":242,"author":{"gitId":"tienkhoa16"},"content":"            double weight \u003d Double.parseDouble(parsedParams.get(WEIGHT_SPECIFIER));"},{"lineNumber":243,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":244,"author":{"gitId":"tienkhoa16"},"content":"            if (!Utils.checkValidWeight(weight)) {"},{"lineNumber":245,"author":{"gitId":"tienkhoa16"},"content":"                throw new InvalidWeightException();"},{"lineNumber":246,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":247,"author":{"gitId":"tienkhoa16"},"content":"            return weight;"},{"lineNumber":248,"author":{"gitId":"tienkhoa16"},"content":"        } catch (NumberFormatException | NullPointerException e) {"},{"lineNumber":249,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidWeightException();"},{"lineNumber":250,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":253,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"tienkhoa16"},"content":"     * Extracts expected weight from parsed HashMap."},{"lineNumber":255,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":256,"author":{"gitId":"tienkhoa16"},"content":"     * @param parsedParams HashMap containing option indicator and parsed option pairs."},{"lineNumber":257,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s expected weight."},{"lineNumber":258,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidWeightException If input expected weight is invalid."},{"lineNumber":259,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"tienkhoa16"},"content":"    public static double extractExpectedWeight(HashMap\u003cString, String\u003e parsedParams) throws InvalidWeightException {"},{"lineNumber":261,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":262,"author":{"gitId":"tienkhoa16"},"content":"            double expectedWeight \u003d Double.parseDouble(parsedParams.get(EXPECTED_WEIGHT_SPECIFIER));"},{"lineNumber":263,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":264,"author":{"gitId":"tienkhoa16"},"content":"            if (!Utils.checkValidWeight(expectedWeight)) {"},{"lineNumber":265,"author":{"gitId":"tienkhoa16"},"content":"                throw new InvalidWeightException();"},{"lineNumber":266,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":267,"author":{"gitId":"tienkhoa16"},"content":"            return expectedWeight;"},{"lineNumber":268,"author":{"gitId":"tienkhoa16"},"content":"        } catch (NumberFormatException | NullPointerException e) {"},{"lineNumber":269,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidWeightException();"},{"lineNumber":270,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":271,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":269,"wgzesg":3}},{"path":"src/main/java/logic/parser/WorkoutManagerParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.NotANumberException;"},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import models.PastWorkoutSessionRecord;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":" * A class that is responsible for parsing user inputs in Workout Manager."},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"public class WorkoutManagerParser {"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"    public static final String TAG_SPECIFIER \u003d \"/t\";"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"    public static final String TAG_SPLITTER \u003d \",\";"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"    public static final String DATE_SPECIFIER \u003d \"/d\";"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    public static final String START_DATE_SPECIFIER \u003d \"/s\";"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    public static final String END_DATE_SPECIFIER \u003d \"/e\";"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    private static WorkoutManagerParser wmp;"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"     * Gets instance of PastRecordList."},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"     * @return Instance of PastRecordList."},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"    public static WorkoutManagerParser getInstance() {"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"        if (wmp \u003d\u003d null) {"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"            wmp \u003d new WorkoutManagerParser();"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"        return wmp;"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"     * Parses user inputs into single words."},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"     * @param comm User\u0027s raw input."},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"     * @return An array of strings."},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"    public String[] parseCommandKw(String comm) {"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"        return comm.split(\" \", 2);"},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":"     * Parses user input into a list of tags."},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"     * @param arr User inputs."},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"     * @return A list of tags."},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"    public ArrayList\u003cString\u003e parseTags(String arr) {"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"        String[] content \u003d arr.split(\" \", 2);"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"            if (!content[0].equals(TAG_SPECIFIER)) {"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"                return result;"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"            String[] tags \u003d content[1].split(TAG_SPLITTER);"},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"            for (String tag : tags) {"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"                if (!result.contains(tag.trim())) {"},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"                    result.add(tag.trim());"},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"        } catch (Exception e) {"},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"wgzesg"},"content":"        return result;"},{"lineNumber":70,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":72,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"wgzesg"},"content":"     * Parses user input into a list of predicates which will be used as search conditions."},{"lineNumber":74,"author":{"gitId":"wgzesg"},"content":"     * @param arr User input."},{"lineNumber":75,"author":{"gitId":"wgzesg"},"content":"     * @return A list of predicate which will be used as search conditions."},{"lineNumber":76,"author":{"gitId":"wgzesg"},"content":"     * @throws InvalidDateFormatException handles invalid date input."},{"lineNumber":77,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"wgzesg"},"content":"    public ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e parseSearchConditions(String arr)"},{"lineNumber":79,"author":{"gitId":"wgzesg"},"content":"            throws InvalidDateFormatException {"},{"lineNumber":80,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e test \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":83,"author":{"gitId":"wgzesg"},"content":"        // parse tag conditions"},{"lineNumber":84,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"wgzesg"},"content":"            String[] part1 \u003d arr.split(TAG_SPECIFIER);"},{"lineNumber":86,"author":{"gitId":"wgzesg"},"content":"            String[] tagPart \u003d part1[1].split(DATE_SPECIFIER);"},{"lineNumber":87,"author":{"gitId":"wgzesg"},"content":"            String[] tgs \u003d tagPart[0].split(\",\");"},{"lineNumber":88,"author":{"gitId":"wgzesg"},"content":"            for (String t : tgs) {"},{"lineNumber":89,"author":{"gitId":"wgzesg"},"content":"                tags.add(t.trim());"},{"lineNumber":90,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"wgzesg"},"content":"            test.add(x -\u003e x.containsAll(tags));"},{"lineNumber":92,"author":{"gitId":"wgzesg"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":93,"author":{"gitId":"wgzesg"},"content":"            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No tag identifier is given.\");"},{"lineNumber":94,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":96,"author":{"gitId":"wgzesg"},"content":"        // parse date conditions"},{"lineNumber":97,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"wgzesg"},"content":"            String[] part2 \u003d arr.split(DATE_SPECIFIER);"},{"lineNumber":99,"author":{"gitId":"wgzesg"},"content":"            String[] datePart \u003d part2[1].split(TAG_SPECIFIER);"},{"lineNumber":100,"author":{"gitId":"wgzesg"},"content":"            LocalDateTime finalDate \u003d DateParser.parseDate(datePart[0].trim());"},{"lineNumber":101,"author":{"gitId":"wgzesg"},"content":"            if (finalDate !\u003d null) {"},{"lineNumber":102,"author":{"gitId":"wgzesg"},"content":"                test.add(x -\u003e x.isCreatedOn(finalDate.toLocalDate()));"},{"lineNumber":103,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"wgzesg"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":105,"author":{"gitId":"wgzesg"},"content":"            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No date identifier is given.\");"},{"lineNumber":106,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":108,"author":{"gitId":"wgzesg"},"content":"        return test;"},{"lineNumber":109,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":111,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"wgzesg"},"content":"     * Parses the given input into a integer index."},{"lineNumber":113,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"wgzesg"},"content":"     * @param args user input."},{"lineNumber":115,"author":{"gitId":"wgzesg"},"content":"     * @return a integer which is the index given."},{"lineNumber":116,"author":{"gitId":"wgzesg"},"content":"     * @throws NotANumberException if args is null, empty or not a number."},{"lineNumber":117,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"wgzesg"},"content":"    public int parseIndex(String args) throws NotANumberException {"},{"lineNumber":119,"author":{"gitId":"wgzesg"},"content":"        int index;"},{"lineNumber":120,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"wgzesg"},"content":"            index \u003d Integer.parseInt(args);"},{"lineNumber":122,"author":{"gitId":"wgzesg"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":123,"author":{"gitId":"wgzesg"},"content":"            throw new NotANumberException();"},{"lineNumber":124,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"wgzesg"},"content":"        return index;"},{"lineNumber":126,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":128,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"wgzesg"},"content":"     * Parses user input into a list of predicates which will be used to limit period of record being listed."},{"lineNumber":130,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"wgzesg"},"content":"     * @param args user input."},{"lineNumber":132,"author":{"gitId":"wgzesg"},"content":"     * @return predicates to limit period of record being listed."},{"lineNumber":133,"author":{"gitId":"wgzesg"},"content":"     * @throws InvalidDateFormatException handles invalid date input."},{"lineNumber":134,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"wgzesg"},"content":"    public ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e parseList(String args)"},{"lineNumber":136,"author":{"gitId":"wgzesg"},"content":"            throws InvalidDateFormatException {"},{"lineNumber":137,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e test \u003d new ArrayList\u003c\u003e();"},{"lineNumber":138,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":139,"author":{"gitId":"wgzesg"},"content":"        // parse start date"},{"lineNumber":140,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":141,"author":{"gitId":"wgzesg"},"content":"            String[] part2 \u003d args.split(START_DATE_SPECIFIER);"},{"lineNumber":142,"author":{"gitId":"wgzesg"},"content":"            String[] datePart \u003d part2[1].split(END_DATE_SPECIFIER);"},{"lineNumber":143,"author":{"gitId":"wgzesg"},"content":"            LocalDateTime start \u003d DateParser.parseDate(datePart[0].trim());"},{"lineNumber":144,"author":{"gitId":"wgzesg"},"content":"            if (start !\u003d null) {"},{"lineNumber":145,"author":{"gitId":"wgzesg"},"content":"                test.add(x -\u003e x.isCreatedAfter(start.toLocalDate()));"},{"lineNumber":146,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"wgzesg"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":148,"author":{"gitId":"wgzesg"},"content":"            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No start date identifier is given.\");"},{"lineNumber":149,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":151,"author":{"gitId":"wgzesg"},"content":"        // parse end date"},{"lineNumber":152,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":153,"author":{"gitId":"wgzesg"},"content":"            String[] part2 \u003d args.split(END_DATE_SPECIFIER);"},{"lineNumber":154,"author":{"gitId":"wgzesg"},"content":"            String[] datePart \u003d part2[1].split(START_DATE_SPECIFIER);"},{"lineNumber":155,"author":{"gitId":"wgzesg"},"content":"            LocalDateTime end \u003d DateParser.parseDate(datePart[0].trim());"},{"lineNumber":156,"author":{"gitId":"wgzesg"},"content":"            if (end !\u003d null) {"},{"lineNumber":157,"author":{"gitId":"wgzesg"},"content":"                test.add(x -\u003e x.isCreatedBefore(end.toLocalDate()));"},{"lineNumber":158,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":159,"author":{"gitId":"wgzesg"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":160,"author":{"gitId":"wgzesg"},"content":"            SchwarzeneggerLogger.getInstanceLogger().log(Level.INFO, \"No end date identifier is given.\");"},{"lineNumber":161,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":163,"author":{"gitId":"wgzesg"},"content":"        return test;"},{"lineNumber":164,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":1,"yujinyang1998":2,"wgzesg":162}},{"path":"src/main/java/logic/parser/WorkoutSessionParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutsession.AddFormatException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutsession.DeleteFormatException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":" * A class that deals with making sense of user\u0027s command inside Workout Session."},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionParser {"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"     * Splits the user\u0027s input by space and return as a string array."},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"     * @param input User\u0027s input arguments."},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"     * @return String array containing the user\u0027s inputs"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"    public static String[] workoutSessionParser(String input) {"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"        return input.split(\" \");"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     * Sorts the string array into parts for Exercise."},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"     * @param input String array containing the user\u0027s inputs."},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"     * @return Exercise containing the user\u0027s input information."},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"     * @throws AddFormatException If input is empty or is negative."},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    public static Exercise addParser(String[] input) throws AddFormatException {"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        String[] returnString \u003d new String[4];"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"        Arrays.fill(returnString, \"\");"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        int tracker \u003d 0;"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        for (String s : input) {"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"            if (s.compareTo(\"/n\") \u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"                tracker \u003d 2;"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"            } else if (s.compareTo(\"/w\") \u003d\u003d 0) {"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"                tracker \u003d 3;"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"            } else if (s.compareTo(\"add\") \u003d\u003d 0) {"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"                tracker \u003d 1;"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"            } else if (tracker \u003d\u003d 2 || tracker \u003d\u003d 3) {"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"                returnString[tracker] \u003d s;"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"                returnString[tracker] +\u003d (s + \" \");"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"        int repetitions \u003d Integer.parseInt(returnString[2]);"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"        double weight \u003d Double.parseDouble(returnString[3]);"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"        String description \u003d returnString[1].trim();"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"        if (repetitions \u003c 0 || weight \u003c 0 || description.length() \u003c\u003d 0) {"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"            throw new AddFormatException();"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"        return new Exercise(description, repetitions, weight);"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"     * Sorts the string array to return an delete value."},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"     * @param input String array containing the user\u0027s inputs."},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"     * @return Integer for the index of the exercise to be deleted."},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":"     * @throws DeleteFormatException If input is not an integer."},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"    public static int deleteParser(String[] input) throws DeleteFormatException {"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":"        int returnInt;"},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":"            returnInt \u003d Integer.parseInt(input[1]);"},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":75,"author":{"gitId":"yujinyang1998"},"content":"            throw new DeleteFormatException();"},{"lineNumber":76,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"yujinyang1998"},"content":"        return returnInt;"},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":80,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"yujinyang1998"},"content":"     * Sorts the string array to return an string that represents the search term."},{"lineNumber":82,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"yujinyang1998"},"content":"     * @param input String array containing the user\u0027s inputs."},{"lineNumber":84,"author":{"gitId":"yujinyang1998"},"content":"     * @return String that the user whats to search."},{"lineNumber":85,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"yujinyang1998"},"content":"    public static String searchParser(String[] input) {"},{"lineNumber":87,"author":{"gitId":"yujinyang1998"},"content":"        StringBuilder returnString \u003d new StringBuilder();"},{"lineNumber":88,"author":{"gitId":"yujinyang1998"},"content":"        for (int i \u003d 1; i \u003c input.length; i++) {"},{"lineNumber":89,"author":{"gitId":"yujinyang1998"},"content":"            returnString.append(\" \").append(input[i]);"},{"lineNumber":90,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"yujinyang1998"},"content":"        return returnString.toString().trim();"},{"lineNumber":92,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"zsk612":2,"yujinyang1998":91}},{"path":"src/main/java/models/Exercise.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":" * A class that contains Exercise information."},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"public class Exercise {"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"    private String moveName;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"    private int repetitions;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"    private double weight;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"     * Constructs Exercise object."},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"     * @param moveName Name of exercise."},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"     * @param repetitions Number of repetitions."},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"     * @param weight Weight of exercise."},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"    public Exercise(String moveName, int repetitions, double weight) {"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        this.moveName \u003d moveName;"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        this.repetitions \u003d repetitions;"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        this.weight \u003d weight;"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"     * To get a string representation of Exercise."},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     * @return String of exercise information."},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        return moveName"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"                + \", Repetitions:\" + repetitions"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"                + \", Weight\u003d\" + weight;"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"     * Gets description of exercise."},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"     * @return Description of exercise."},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"    public String getDescription() {"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"        return moveName;"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"     * Gets number of repetition of this exercise."},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"     * @return Number of repetition."},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"    public String getRepetitions() {"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"        return Integer.toString(repetitions);"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"     * Gets weight of this exercise."},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"     * @return Weight of this exercise."},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"    public String getWeight() {"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"        return Double.toString(weight);"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"zsk612":1,"yujinyang1998":65}},{"path":"src/main/java/models/ExerciseList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":" * A class that contains an arraylist of Exercise."},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"public class ExerciseList {"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"    public ArrayList\u003cExercise\u003e exerciseList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":11}},{"path":"src/main/java/models/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"public class Food {"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"    protected String name;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"    protected double calories;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"    public Food(String name, double calories) {"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"        this.name \u003d name;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"        this.calories \u003d calories;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"        return this.name + \" with calories: \" + this.calories;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"    public double getCalories() {"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"        return calories;"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"    public String getName() {"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"        return this.name;"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":24}},{"path":"src/main/java/models/PastRecordList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wgzesg"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import logic.parser.WorkoutManagerParser;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import storage.workout.WorkOutManagerStorage;"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"import java.util.logging.Level;"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"import java.util.logging.Logger;"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"import static ui.CommonUi.searchRecords;"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":" * A singleton class representing list of past records."},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"public class PastRecordList {"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"    public static final int OFFSET \u003d 1;"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"    private static PastRecordList singlePastFile \u003d null;"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"    private final Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"    private static List\u003cPastWorkoutSessionRecord\u003e pastFiles;"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"    WorkOutManagerStorage storage;"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"     * Constructs PastRecordList object."},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"    private PastRecordList() {"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"        storage \u003d new WorkOutManagerStorage();"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"        storage.init();"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"            pastFiles \u003d storage.readPastRecords();"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"            logger.log(Level.INFO, \"Workout records loaded.\");"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"        } catch (SchwIoException e) {"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"            pastFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"            logger.log(Level.INFO, \"Workout records cannot be loaded.\");"},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"            System.out.println(\"got bug\");"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"     * Gets instance of PastRecordList."},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"     * @return Instance of PastRecordList."},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"    public static PastRecordList getInstance() {"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"        if (singlePastFile \u003d\u003d null) {"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"            singlePastFile \u003d new PastRecordList();"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"        return singlePastFile;"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"     * Clears all the local storage file and past records."},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwIoException If error occurred writing to file."},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"    public void clear() throws SchwIoException {"},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":"        while (pastFiles.size() !\u003d 0) {"},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":"            delete(1);"},{"lineNumber":69,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.WARNING, \"Record is cleared.\");"},{"lineNumber":71,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":73,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"wgzesg"},"content":"     * Deletes a file and its past record at a given index."},{"lineNumber":75,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"wgzesg"},"content":"     * @param index Index of the file to be cleared."},{"lineNumber":77,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwIoException If error occurred while writing to file."},{"lineNumber":78,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"wgzesg"},"content":"    public void delete(int index) throws SchwIoException {"},{"lineNumber":80,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord deletedRecord;"},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"        deletedRecord \u003d pastFiles.get(index - 1);"},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":"        pastFiles.remove(index - 1);"},{"lineNumber":83,"author":{"gitId":"wgzesg"},"content":"        File myFile \u003d new File(deletedRecord.getFilePath());"},{"lineNumber":84,"author":{"gitId":"wgzesg"},"content":"        myFile.delete();"},{"lineNumber":85,"author":{"gitId":"wgzesg"},"content":"        storage.writePastRecords(pastFiles);"},{"lineNumber":86,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"Record is deleted.\");"},{"lineNumber":87,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":89,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"wgzesg"},"content":"     * Searches based on conditions and returns a string representation of all the records"},{"lineNumber":91,"author":{"gitId":"wgzesg"},"content":"     * that satisfies the condition."},{"lineNumber":92,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"wgzesg"},"content":"     * @param args String of user input."},{"lineNumber":94,"author":{"gitId":"wgzesg"},"content":"     * @return String representation of all the records that satisfies the condition."},{"lineNumber":95,"author":{"gitId":"wgzesg"},"content":"     * @throws InvalidDateFormatException handles invalid date input."},{"lineNumber":96,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"wgzesg"},"content":"    public String search(String args) throws InvalidDateFormatException {"},{"lineNumber":98,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e conditions \u003d"},{"lineNumber":99,"author":{"gitId":"wgzesg"},"content":"                WorkoutManagerParser.getInstance().parseSearchConditions(args);"},{"lineNumber":100,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":101,"author":{"gitId":"wgzesg"},"content":"        List\u003cPastWorkoutSessionRecord\u003e result \u003d pastFiles.stream()"},{"lineNumber":102,"author":{"gitId":"wgzesg"},"content":"                .filter(conditions.stream().reduce(x -\u003e true, Predicate::and))"},{"lineNumber":103,"author":{"gitId":"wgzesg"},"content":"                .collect(Collectors.toList());"},{"lineNumber":104,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":105,"author":{"gitId":"wgzesg"},"content":"        String info;"},{"lineNumber":106,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":107,"author":{"gitId":"wgzesg"},"content":"        if (result.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitId":"wgzesg"},"content":"            info \u003d \"You do not have any record that satisfies the condition.\";"},{"lineNumber":109,"author":{"gitId":"wgzesg"},"content":"            logger.log(Level.INFO, \"Search completed.\");"},{"lineNumber":110,"author":{"gitId":"wgzesg"},"content":"            return info;"},{"lineNumber":111,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":113,"author":{"gitId":"wgzesg"},"content":"        info \u003d searchRecords(result.size(), ((result.size() \u003e 1) ? \"records have\" : \"record has\"));"},{"lineNumber":114,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":115,"author":{"gitId":"wgzesg"},"content":"        info \u003d getListInTable(result, info);"},{"lineNumber":116,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"Search completed.\");"},{"lineNumber":117,"author":{"gitId":"wgzesg"},"content":"        return info;"},{"lineNumber":118,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":120,"author":{"gitId":"wgzesg"},"content":"    private String getListInTable(List\u003cPastWorkoutSessionRecord\u003e result, String info) {"},{"lineNumber":121,"author":{"gitId":"wgzesg"},"content":"        info +\u003d String.format(\"%-8s\", \"Index\") + String.format(\"%-16s\", \"Creation date\")"},{"lineNumber":122,"author":{"gitId":"wgzesg"},"content":"                + String.format(\"%-8s\", \"Tags\") + LS;"},{"lineNumber":123,"author":{"gitId":"wgzesg"},"content":"        StringBuilder infoBuilder \u003d new StringBuilder(info);"},{"lineNumber":124,"author":{"gitId":"wgzesg"},"content":"        int index;"},{"lineNumber":125,"author":{"gitId":"wgzesg"},"content":"        for (PastWorkoutSessionRecord wsr : result) {"},{"lineNumber":126,"author":{"gitId":"wgzesg"},"content":"            index \u003d pastFiles.indexOf(wsr);"},{"lineNumber":127,"author":{"gitId":"wgzesg"},"content":"            String row \u003d String.format(\"%-8s\", index + OFFSET) + wsr.toString() + LS;"},{"lineNumber":128,"author":{"gitId":"wgzesg"},"content":"            infoBuilder.append(row);"},{"lineNumber":129,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"wgzesg"},"content":"        info \u003d infoBuilder.toString().trim();"},{"lineNumber":131,"author":{"gitId":"wgzesg"},"content":"        return info;"},{"lineNumber":132,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":134,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"wgzesg"},"content":"     * Edits a file and its past record at a given index."},{"lineNumber":136,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"wgzesg"},"content":"     * @param index Index of the file to be edited."},{"lineNumber":138,"author":{"gitId":"wgzesg"},"content":"     * @return File path string."},{"lineNumber":139,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwIoException If error occurred while reading or writing to file."},{"lineNumber":140,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"wgzesg"},"content":"    public String edit(int index) throws SchwIoException {"},{"lineNumber":142,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord editedRecord;"},{"lineNumber":143,"author":{"gitId":"wgzesg"},"content":"        editedRecord \u003d pastFiles.get(index - 1);"},{"lineNumber":144,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord newRecord \u003d editedRecord.edit();"},{"lineNumber":145,"author":{"gitId":"wgzesg"},"content":"        pastFiles.set(index - 1, newRecord);"},{"lineNumber":146,"author":{"gitId":"wgzesg"},"content":"        storage.writePastRecords(pastFiles);"},{"lineNumber":147,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"Edit completed.\");"},{"lineNumber":148,"author":{"gitId":"wgzesg"},"content":"        return newRecord.getFilePath();"},{"lineNumber":149,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":151,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"wgzesg"},"content":"     * Adds a new file and records."},{"lineNumber":153,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":154,"author":{"gitId":"wgzesg"},"content":"     * @param tags Tags on the new record."},{"lineNumber":155,"author":{"gitId":"wgzesg"},"content":"     * @return new file path string."},{"lineNumber":156,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwarzeneggerException If error occurred while reading or writing to file."},{"lineNumber":157,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"wgzesg"},"content":"    public String add(ArrayList\u003cString\u003e tags) throws SchwarzeneggerException {"},{"lineNumber":159,"author":{"gitId":"wgzesg"},"content":"        String newFilePath \u003d storage.createfile();"},{"lineNumber":160,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord newRecord \u003d new PastWorkoutSessionRecord(newFilePath, tags);"},{"lineNumber":161,"author":{"gitId":"wgzesg"},"content":"        pastFiles.add(newRecord);"},{"lineNumber":162,"author":{"gitId":"wgzesg"},"content":"        storage.writePastRecords(pastFiles);"},{"lineNumber":163,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"Add completed.\");"},{"lineNumber":164,"author":{"gitId":"wgzesg"},"content":"        return newFilePath;"},{"lineNumber":165,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":167,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"wgzesg"},"content":"     * Lists all records."},{"lineNumber":169,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"wgzesg"},"content":"     * @param args User\u0027s input."},{"lineNumber":171,"author":{"gitId":"wgzesg"},"content":"     * @return message for dates."},{"lineNumber":172,"author":{"gitId":"wgzesg"},"content":"     * @throws InvalidDateFormatException handles invalid dates format."},{"lineNumber":173,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"wgzesg"},"content":"    public String list(String args) throws InvalidDateFormatException {"},{"lineNumber":175,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":176,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e conditions \u003d WorkoutManagerParser.getInstance().parseList(args);"},{"lineNumber":177,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":178,"author":{"gitId":"wgzesg"},"content":"        List\u003cPastWorkoutSessionRecord\u003e result \u003d pastFiles.stream()"},{"lineNumber":179,"author":{"gitId":"wgzesg"},"content":"                .filter(conditions.stream().reduce(x -\u003e true, Predicate::and))"},{"lineNumber":180,"author":{"gitId":"wgzesg"},"content":"                .collect(Collectors.toList());"},{"lineNumber":181,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":182,"author":{"gitId":"wgzesg"},"content":"        String info \u003d \"\";"},{"lineNumber":183,"author":{"gitId":"wgzesg"},"content":"        if (pastFiles.size() \u003d\u003d 0) {"},{"lineNumber":184,"author":{"gitId":"wgzesg"},"content":"            info \u003d \"You do not have any record yet. Key in \u0027new\u0027 to start one.\";"},{"lineNumber":185,"author":{"gitId":"wgzesg"},"content":"            logger.log(Level.INFO, \"List completed.\");"},{"lineNumber":186,"author":{"gitId":"wgzesg"},"content":"            return info;"},{"lineNumber":187,"author":{"gitId":"wgzesg"},"content":"        } else if (result.size() \u003d\u003d 0) {"},{"lineNumber":188,"author":{"gitId":"wgzesg"},"content":"            info \u003d \"You do not have any records between that period.\";"},{"lineNumber":189,"author":{"gitId":"wgzesg"},"content":"            logger.log(Level.INFO, \"List completed.\");"},{"lineNumber":190,"author":{"gitId":"wgzesg"},"content":"            return info;"},{"lineNumber":191,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"wgzesg"},"content":"        info \u003d getListInTable(result, info);"},{"lineNumber":193,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"List completed.\");"},{"lineNumber":194,"author":{"gitId":"wgzesg"},"content":"        return info;"},{"lineNumber":195,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"wgzesg":195}},{"path":"src/main/java/models/PastWorkoutSessionRecord.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wgzesg"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":" * A class that represents past workout session records."},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"public class PastWorkoutSessionRecord implements Comparable\u003cPastWorkoutSessionRecord\u003e {"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"    private final String filePath;"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"    private final LocalDateTime creationTime;"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"    private final LocalDateTime lastEditTime;"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    private final ArrayList\u003cString\u003e tags;"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"     * Constructor of a new PastWorkoutSessionRecord."},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"     * @param filePath File path of where the records of the session are stored."},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"     * @param tags Tags attached to this session."},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    public PastWorkoutSessionRecord(String filePath, ArrayList\u003cString\u003e tags) {"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"        creationTime \u003d LocalDateTime.now();"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"        lastEditTime \u003d LocalDateTime.now();"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"        this.tags \u003d tags;"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"     * Constructor of a new PastWorkoutSessionRecord."},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"     * @param filePath File path of where the records of the session are stored."},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"     * @param creationTime Creation time."},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"     * @param lastEditTime Last edited time."},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"     * @param tags Tags attached to this session."},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"    public PastWorkoutSessionRecord(String filePath, LocalDateTime creationTime,"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"                                    LocalDateTime lastEditTime, ArrayList\u003cString\u003e tags) {"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"        this.creationTime \u003d creationTime;"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"        this.lastEditTime \u003d lastEditTime;"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"        this.tags \u003d tags;"},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":"     * Checks if this record contains all the given tag."},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"     * @param tgs list of tags specified."},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"     * @return True if all contained; otherwise false"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"    public boolean containsAll(ArrayList\u003cString\u003e tgs) {"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"        for (String s : tgs) {"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"            if (!isContained(s)) {"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"                return false;"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"        return true;"},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"    private boolean isContained(String s) {"},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"        for (String t : tags) {"},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"            if (t.contains(s)) {"},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"                return true;"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":"        return false;"},{"lineNumber":69,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":71,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"wgzesg"},"content":"     * Checks if this record is created on a given date."},{"lineNumber":73,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"wgzesg"},"content":"     * @param date the given date"},{"lineNumber":75,"author":{"gitId":"wgzesg"},"content":"     * @return True if it is created on that day; otherwise false"},{"lineNumber":76,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"wgzesg"},"content":"    public boolean isCreatedOn(LocalDate date) {"},{"lineNumber":78,"author":{"gitId":"wgzesg"},"content":"        return date.equals(creationTime.toLocalDate());"},{"lineNumber":79,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":"     * Check if this record is created after a given date(inclusive)."},{"lineNumber":83,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"wgzesg"},"content":"     * @param date the given date."},{"lineNumber":85,"author":{"gitId":"wgzesg"},"content":"     * @return True if it is created after or on that day; otherwise false."},{"lineNumber":86,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"wgzesg"},"content":"    public boolean isCreatedAfter(LocalDate date) {"},{"lineNumber":88,"author":{"gitId":"wgzesg"},"content":"        return date.equals(creationTime.toLocalDate()) || date.isBefore(creationTime.toLocalDate());"},{"lineNumber":89,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":91,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"wgzesg"},"content":"     * Check if this record is created before a given date(inclusive)."},{"lineNumber":93,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"wgzesg"},"content":"     * @param date the given date."},{"lineNumber":95,"author":{"gitId":"wgzesg"},"content":"     * @return True if it is created before or on that day; otherwise false."},{"lineNumber":96,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"wgzesg"},"content":"    public boolean isCreatedBefore(LocalDate date) {"},{"lineNumber":98,"author":{"gitId":"wgzesg"},"content":"        return date.equals(creationTime.toLocalDate()) || date.isAfter(creationTime.toLocalDate());"},{"lineNumber":99,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":101,"author":{"gitId":"wgzesg"},"content":"    public String getFilePath() {"},{"lineNumber":102,"author":{"gitId":"wgzesg"},"content":"        return filePath;"},{"lineNumber":103,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":105,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"wgzesg"},"content":"    public String toString() {"},{"lineNumber":107,"author":{"gitId":"wgzesg"},"content":"        return String.format(\"%-15s %s\", creationTime.toLocalDate(), tags.toString());"},{"lineNumber":108,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":110,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"wgzesg"},"content":"    public int compareTo(PastWorkoutSessionRecord o) {"},{"lineNumber":112,"author":{"gitId":"wgzesg"},"content":"        if (creationTime.isBefore(o.creationTime)) {"},{"lineNumber":113,"author":{"gitId":"wgzesg"},"content":"            return -1;"},{"lineNumber":114,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"wgzesg"},"content":"        return 1;"},{"lineNumber":116,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":118,"author":{"gitId":"wgzesg"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"wgzesg"},"content":"    public boolean equals(Object o) {"},{"lineNumber":120,"author":{"gitId":"wgzesg"},"content":"        if (!(o instanceof PastWorkoutSessionRecord)) {"},{"lineNumber":121,"author":{"gitId":"wgzesg"},"content":"            return false;"},{"lineNumber":122,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"wgzesg"},"content":"        return creationTime.equals(((PastWorkoutSessionRecord) o).creationTime)"},{"lineNumber":124,"author":{"gitId":"wgzesg"},"content":"                \u0026\u0026 lastEditTime.equals(((PastWorkoutSessionRecord) o).lastEditTime)"},{"lineNumber":125,"author":{"gitId":"wgzesg"},"content":"                \u0026\u0026 tags.equals(((PastWorkoutSessionRecord) o).tags);"},{"lineNumber":126,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":128,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"wgzesg"},"content":"     * Updates last edited time when edited."},{"lineNumber":130,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"wgzesg"},"content":"     * @return A new PastWorkoutSessionRecord with updated lastEdit time."},{"lineNumber":132,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"wgzesg"},"content":"    public PastWorkoutSessionRecord edit() {"},{"lineNumber":134,"author":{"gitId":"wgzesg"},"content":"        return new PastWorkoutSessionRecord(filePath, creationTime, LocalDateTime.now(), this.tags);"},{"lineNumber":135,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":3,"wgzesg":133}},{"path":"src/main/java/models/Profile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import profile.Constants;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.PROFILE_STRING_REPRESENTATION;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Utils.checkValidProfile;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":" * A class that contains user profile."},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"public class Profile {"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    protected String name;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    protected int height;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    protected double weight;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    protected double expectedWeight;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    protected double calories;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs Profile object."},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"     * @param name User\u0027s name."},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"     * @param height User\u0027s height in centimeters."},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"     * @param weight User\u0027s weight in kilograms."},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"     * @param expectedWeight User\u0027s expected weight in kilograms."},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"     * @param calories User\u0027s expected calories intake daily."},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    public Profile(String name, int height, double weight, double expectedWeight, double calories) {"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        this.height \u003d height;"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        this.weight \u003d weight;"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        this.expectedWeight \u003d expectedWeight;"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        this.calories \u003d calories;"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides toString method of class Object to get string presentation of Profile object."},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"     * @return String presentation of Profile object."},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        assert checkValidProfile(this) : \"Profile is invalid\";"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        return String.format(PROFILE_STRING_REPRESENTATION, getName(), getHeight(), getWeight(),"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"                getExpectedWeight(), getCalories(), getBmiClassification());"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s name."},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s name."},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"    public String getName() {"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"        return name;"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s height."},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s height."},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"    public int getHeight() {"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"        return height;"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s weight."},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s weight."},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"    public double getWeight() {"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"        return weight;"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s expected weight."},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s expected weight."},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"    public double getExpectedWeight() {"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"        return expectedWeight;"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s expected calories intake daily."},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s expected calories intake daily."},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"    public double getCalories() {"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"        return calories;"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"     * Calculates user\u0027s BMI."},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"     * @param height User\u0027s height."},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"     * @param weight User\u0027s weight."},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s BMI."},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"    public double calculateBmi(int height, double weight) {"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        return weight / Math.pow((double) height / 100, 2);"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s bmi index and classification."},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"     * @return User\u0027s bmi index and classification."},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"    public String getBmiClassification() {"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"        String classification;"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"        double bmiIndex \u003d calculateBmi(height, weight);"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"        if (bmiIndex \u003c Constants.UNDER_WEIGHT_THRESHOLD) {"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"            classification \u003d \"Underweight\";"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        } else if (bmiIndex \u003c\u003d Constants.NORMAL_WEIGHT_THRESHOLD) {"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"            classification \u003d \"Normal Weight\";"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"        } else if (bmiIndex \u003c\u003d Constants.OVERWEIGHT_THRESHOLD) {"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"            classification \u003d \"Overweight\";"},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"        } else if (bmiIndex \u003c\u003d Constants.OBESITY_CLASS_ONE_THRESHOLD) {"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"            classification \u003d \"Obesity Class 1\";"},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"        } else if (bmiIndex \u003c\u003d Constants.OBESITY_CLASS_TWO_THRESHOLD) {"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"            classification \u003d \"Obesity Class 2\";"},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"        } else {"},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"            classification \u003d \"Extreme Obesity Class 3\";"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"        return String.format(\"%.1f (%s)\", bmiIndex, classification);"},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":"     * Overrides equals method of class Object to compare Profile object."},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"tienkhoa16"},"content":"     * @param o Object to compare."},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"     * @return True if this Profile object is the same as the obj"},{"lineNumber":136,"author":{"gitId":"tienkhoa16"},"content":"     *         argument; false otherwise."},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"tienkhoa16"},"content":"    @Override"},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"    public boolean equals(Object o) {"},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":141,"author":{"gitId":"tienkhoa16"},"content":"            return true;"},{"lineNumber":142,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"tienkhoa16"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":144,"author":{"gitId":"tienkhoa16"},"content":"            return false;"},{"lineNumber":145,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"tienkhoa16"},"content":"        Profile profile \u003d (Profile) o;"},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"        return name.equals(profile.name)"},{"lineNumber":148,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 calories \u003d\u003d profile.calories"},{"lineNumber":149,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 height \u003d\u003d profile.height"},{"lineNumber":150,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 Double.compare(profile.weight, weight) \u003d\u003d 0"},{"lineNumber":151,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 Double.compare(profile.expectedWeight, expectedWeight) \u003d\u003d 0;"},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":153}},{"path":"src/main/java/profile/Constants.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.LS;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":" * Constants used in profile-related code."},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"public class Constants {"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"    public static final String ADD_PROFILE_FORMAT \u003d \"add /n [NAME] /h [HEIGHT] \""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"            + \"/w [CURRENT_WEIGHT] /e [EXPECTED_WEIGHT] /c [DAILY_CALORIE_INTAKE]\";"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"    public static final String EDIT_PROFILE_FORMAT \u003d \"edit \u003c/n [NAME]\u003e \u003c/h [HEIGHT]\u003e \""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"            + \"\u003c/w [CURRENT_WEIGHT]\u003e \u003c/e [EXPECTED_WEIGHT]\u003e \u003c/c [DAILY_CALORIE_INTAKE]\u003e\";"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    public static final String EXAMPLE_BMI \u003d \"32.0 (Obesity Class 1)\";"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    public static final double EXAMPLE_CALORIES \u003d 2500;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    public static final double EXAMPLE_EXPECTED_WEIGHT \u003d 100;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    public static final int EXAMPLE_HEIGHT \u003d 188;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"    public static final String EXAMPLE_NAME \u003d \"Schwarzenegger\";"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    public static final double EXAMPLE_WEIGHT \u003d 113;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    public static final int HEIGHT_LOWER_BOUND \u003d 63;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    public static final int HEIGHT_UPPER_BOUND \u003d 231;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    public static final double NORMAL_WEIGHT_AVERAGE \u003d 21.7;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    public static final double NORMAL_WEIGHT_THRESHOLD \u003d 24.9;"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    public static final double OBESITY_CLASS_ONE_THRESHOLD \u003d 34.9;"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    public static final double OBESITY_CLASS_TWO_THRESHOLD \u003d 39.9;"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    public static final double OVERWEIGHT_THRESHOLD \u003d 29.9;"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    public static final String PROFILE_STRING_REPRESENTATION \u003d \"\\tName: %s\" + LS"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"            + \"\\tHeight: %d cm\" + LS + \"\\tWeight: %.1f kg\" + LS + \"\\tExpected Weight: %.1f kg\""},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"            + LS + \"\\tExpected daily calorie intake: %.1f calories\" + LS + \"\\tYour current BMI: %s\";"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    public static final double UNDER_WEIGHT_THRESHOLD \u003d 18.5;"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    public static final double WEIGHT_LOWER_BOUND \u003d 2.1;"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    public static final double WEIGHT_UPPER_BOUND \u003d 635;"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    public static final double CALORIES_UPPER_BOUND \u003d 200000;"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    public static final double CALORIES_LOWER_BOUND \u003d 0;"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":38}},{"path":"src/main/java/profile/ProfileSession.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.ExceptionHandler;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandLib;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import logic.parser.CommonParser;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import ui.CommonUi;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Level;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.CommonParser.COMMAND_ARGS_INDEX;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.CommonParser.COMMAND_TYPE_INDEX;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":" * A class that is responsible for interacting with user in Profile Session."},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileSession {"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    private static ProfileSession singleInstance \u003d null;"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    private CommonUi ui;"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    private CommonParser parser;"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    private ProfileStorage storage;"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    private CommandLib cl;"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs ProfileSession object with customised path to save data file."},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"     * @param pathToProfileFolder Path to profile data folder."},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"     * @param pathToProfileFile Path to profile data file."},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    private ProfileSession(Path pathToProfileFolder, Path pathToProfileFile) {"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"        logger.log(Level.INFO, \"initialising ProfileSession object\");"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"        ui \u003d new CommonUi();"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"        storage \u003d new ProfileStorage(pathToProfileFolder, pathToProfileFile);"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        parser \u003d new CommonParser();"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        cl \u003d new CommandLib();"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"     * Gets the single instance of ProfileSession class."},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"     * @param pathToProfileFolder Path to profile data folder."},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"     * @param pathToProfileFile Path to profile data file."},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"     * @return Single instance of ProfileSession class."},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"    public static ProfileSession getInstance(Path pathToProfileFolder, Path pathToProfileFile) {"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"        if (singleInstance \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"            singleInstance \u003d new ProfileSession(pathToProfileFolder, pathToProfileFile);"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"        return singleInstance;"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"     * Runs Profile Session."},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"    public void run() {"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        start();"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"        runCommandLoopTillEnd();"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"     * Starts up Profile Session."},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"    private void start() {"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"        logger.log(Level.INFO, \"starting profile session\");"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"        ui.printOpening(\"Profile Menu\");"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s command and executes repeatedly until user requests to exit Profile Session."},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"    private void runCommandLoopTillEnd() {"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"        logger.log(Level.INFO, \"executing profile session loop\");"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"        while (true) {"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"            String userCommand \u003d ui.getCommand(\"Profile Menu\");"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"            assert userCommand !\u003d null : \"input should not be null before process loop\";"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"            try {"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"                CommandResult result \u003d processCommand(userCommand);"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(result.getFeedbackMessage());"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"            } catch (SchwarzeneggerException e) {"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"                if (e instanceof EndException) {"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"                    break;"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"                }"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"            } catch (Exception e) {"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        logger.log(Level.INFO, \"exiting profile session loop\");"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"     * Processes and displays command execution result to user."},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"     * @param userCommand User\u0027s trimmed input."},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"     * @return Result after processing command."},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SchwarzeneggerException If there are caught exceptions."},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"    public CommandResult processCommand(String userCommand) throws SchwarzeneggerException {"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"        String[] commParts \u003d parser.parseCommand(userCommand);"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"        assert commParts !\u003d null : \"parsed array should not be null before process loop\";"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        Command command \u003d cl.getCommand(commParts[COMMAND_TYPE_INDEX]);"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"        assert command !\u003d null : \"command object should not be null null\";"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"        CommandResult result \u003d command.execute(commParts[COMMAND_ARGS_INDEX], storage);"},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"        assert result !\u003d null : \"command result object should not be null null\";"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"        return result;"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":124}},{"path":"src/main/java/profile/Utils.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.CALORIES_LOWER_BOUND;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.HEIGHT_LOWER_BOUND;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.HEIGHT_UPPER_BOUND;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.WEIGHT_LOWER_BOUND;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.WEIGHT_UPPER_BOUND;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":" * A class containing utility methods used in Profile Session."},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"public class Utils {"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"     * Verifies if user\u0027s input when creating profile is valid."},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"     * @param profile User Profile object."},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"     * @return Whether input profile is valid."},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    public static boolean checkValidProfile(Profile profile) {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"        return (profile !\u003d null"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 checkValidName(profile.getName())"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 checkValidCalories(profile.getCalories())"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 checkValidHeight(profile.getHeight())"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 checkValidWeight(profile.getWeight())"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"                \u0026\u0026 checkValidWeight(profile.getExpectedWeight()));"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"     * Verifies if user\u0027s input name is not empty string."},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"     * @param name User\u0027s input name."},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"     * @return Whether input name is valid."},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    public static boolean checkValidName(String name) {"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        return name !\u003d null \u0026\u0026 !name.isEmpty();"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"     * Verifies if user\u0027s input calories is not negative."},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"     * @param calories User\u0027s expected calories intake daily."},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"     * @return Whether calories amount is not negative."},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    public static boolean checkValidCalories(double calories) {"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        return (calories \u003e\u003d CALORIES_LOWER_BOUND);"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"     * Verifies if user\u0027s input height is in the valid range"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"     * (between {@link HEIGHT_LOWER_BOUND} and {@link HEIGHT_UPPER_BOUND} inclusive)."},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"     * @param height User\u0027s input height."},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"     * @return Whether input height is valid."},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    public static boolean checkValidHeight(int height) {"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"        return (height \u003e\u003d HEIGHT_LOWER_BOUND \u0026\u0026 height \u003c\u003d HEIGHT_UPPER_BOUND);"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"     * Verifies if user\u0027s input weight is in the valid range"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"     * (between {@link WEIGHT_LOWER_BOUND} and {@link WEIGHT_UPPER_BOUND} inclusive)."},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"     * @param weight User\u0027s input weight."},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"     * @return Whether input weight is valid."},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"    public static boolean checkValidWeight(double weight) {"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"        return (weight \u003e\u003d WEIGHT_LOWER_BOUND \u0026\u0026 weight \u003c\u003d WEIGHT_UPPER_BOUND);"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":73}},{"path":"src/main/java/seedu/duke/Constants.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":" * Represents class that contains all the constants."},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"public class Constants {"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_DIET \u003d \"diet\";"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_PROFILE \u003d \"profile\";"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_WORKOUT \u003d \"workout\";"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_ADD \u003d \"add\";"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_NEW \u003d \"new\";"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_DELETE \u003d \"delete\";"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_EDIT \u003d \"edit\";"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_END \u003d \"end\";"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_HELP \u003d \"help\";"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_VIEW \u003d \"view\";"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_CLEAR \u003d \"clear\";"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_SEARCH \u003d \"search\";"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_LIST \u003d \"list\";"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    public static final String COMMAND_WORD_WRONG \u003d \"wrong\";"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    public static final String PROJECT_ROOT \u003d System.getProperty(\"user.dir\");"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    public static final String DATA_FOLDER \u003d \"saves\";"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    public static final Path PATH_TO_PROFILE_FILE \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"profile\", \"profile.json\");"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    public static final Path PATH_TO_PROFILE_FOLDER \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"profile\");"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    public static final String PATH_TO_WORKOUT_SESSION_HISTORY \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"workout\","},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"            \"history.json\").toString();"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    public static final String PATH_TO_WORKOUT_SESSION_FOLDER \u003d Paths.get(PROJECT_ROOT, DATA_FOLDER, \"workout\","},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"            \"workoutSession\").toString();"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"    public static final String PATH_TO_DIET_FOLDER \u003d \"saves/diet/\";"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"    public static final String PATH_TO_LOG_FILE \u003d Paths.get(PROJECT_ROOT, \"logs\", \"SchwarzeneggerLogs.log\").toString();"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":6,"tienkhoa16":15,"wgzesg":17,"CFZeon":2}},{"path":"src/main/java/seedu/duke/Duke.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.duke;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":"import exceptions.ExceptionHandler;"},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidSaveFormatException;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandLib;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import logic.parser.CommonParser;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import ui.CommonUi;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.CommonParser.COMMAND_ARGS_INDEX;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.CommonParser.COMMAND_TYPE_INDEX;"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_PROFILE_FILE;"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_PROFILE_FOLDER;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.LOGO;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_WELCOME_EXISTING_USER;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_WELCOME_NEW_USER;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_WELCOME_WITH_INVALID_SAVE_FORMAT;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":" * The Schwarzenegger program implements an application that keeps track of the user\u0027s gym and diet record."},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    private static Logger logger;"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    private CommandLib cl;"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    private CommonUi ui;"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    private CommonParser parser;"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs Duke object."},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    private Duke() {"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"        cl \u003d new CommandLib();"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"        cl.initMainMenuCl();"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"        ui \u003d new CommonUi();"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"        parser \u003d new CommonParser();"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"     * Main entry-point for the java.seedu.duke.Duke application."},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"     * @param args Unused in Schwarzenegger."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        new Duke().run();"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"     * Runs Schwarzenegger."},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"    private void run() {"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"        start();"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"        runCommandLoopTillEnd();"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"        end();"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"     * Starts up Duke with greeting message."},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"    private void start() {"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"        Profile profile;"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"            ui.showToUser(LOGO);"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"            profile \u003d new ProfileStorage(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE).loadData();"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"            ui.showToUser(String.format(MESSAGE_WELCOME_EXISTING_USER, profile.getName()));"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"        } catch (SchwarzeneggerException e) {"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"            if (e instanceof InvalidSaveFormatException) {"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(MESSAGE_WELCOME_WITH_INVALID_SAVE_FORMAT);"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"            } else {"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(MESSAGE_WELCOME_NEW_USER);"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"        } catch (Exception e) {"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"            if (!(e instanceof NullPointerException)) {"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"            ui.showToUser(MESSAGE_WELCOME_NEW_USER);"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user\u0027s command and executes repeatedly until user requests to end Schwarzenegger."},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"    private void runCommandLoopTillEnd() {"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"        logger.info(\"running main menu loop\");"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"        while (true) {"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"            String userInput \u003d ui.getCommand(\"Main Menu\");"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"            String[] commParts \u003d parser.parseCommand(userInput);"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"            Command cm \u003d cl.getCommand(commParts[COMMAND_TYPE_INDEX]);"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":100,"author":{"gitId":"wgzesg"},"content":"            try {"},{"lineNumber":101,"author":{"gitId":"yujinyang1998"},"content":"                cm.execute(commParts[COMMAND_ARGS_INDEX]);"},{"lineNumber":102,"author":{"gitId":"wgzesg"},"content":"            } catch (SchwarzeneggerException e) {"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"                if (e instanceof EndException) {"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":"                    break;"},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"                }"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"            } catch (Exception e) {"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"                ui.showToUser(ExceptionHandler.handleUncheckedExceptions(e));"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"     * Ends Schwarzenegger."},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"    private void end() {"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"        ui.showToUser(\"Bye, you have exited The Schwarzenegger.\");"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"        System.exit(0);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zsk612":3,"yujinyang1998":2,"tienkhoa16":97,"wgzesg":10,"-":9}},{"path":"src/main/java/storage/diet/DietStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package storage.diet;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import com.google.gson.Gson;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import com.google.gson.GsonBuilder;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import com.google.gson.stream.MalformedJsonException;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"import java.io.FileReader;"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"import java.io.FileWriter;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"import java.io.Reader;"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"import java.util.logging.Level;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_FILE_CORRUPTED;"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_FILE_NOT_FOUND;"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":" * This class holds the data loaded during runtime and read and writes to the local storage."},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"public class DietStorage {"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"    private static Gson gson;"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"    private static File file \u003d null;"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"    private static DietSessionUi ui \u003d new DietSessionUi();"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"     * Initialise the database with locally stored data."},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"     * If the local file is not found. It creates the relevant file and folder."},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"     * @param filePath a string that represents file path."},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"     * @param filePathName a string that represents file path name."},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"     * @throws IOException If director or file cannot be created."},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"    public void init(String filePath, String filePathName) throws IOException {"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"        logger.log(Level.INFO, \"creating diet session save file\");"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"        gson \u003d new GsonBuilder().setPrettyPrinting()"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"                .create();"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"        String fileName \u003d filePath + filePathName + \".json\";"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"        file \u003d new File(fileName);"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        file.getParentFile().mkdirs();"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"        file.createNewFile();"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"     * Writes the content in dietSession to a local file."},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"     * If the local file is not found. It creates the relevant file and folder."},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"     * @param filePath a string that represents file path."},{"lineNumber":59,"author":{"gitId":"CFZeon"},"content":"     * @param filePathName a string that represents file path name."},{"lineNumber":60,"author":{"gitId":"CFZeon"},"content":"     * @param dietSession that represents the class diet session"},{"lineNumber":61,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"CFZeon"},"content":"     * @throws IOException If director or file cannot be created."},{"lineNumber":63,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"CFZeon"},"content":"    public void writeToStorageDietSession(String filePath, String filePathName,"},{"lineNumber":65,"author":{"gitId":"CFZeon"},"content":"                                          DietSession dietSession) throws IOException {"},{"lineNumber":66,"author":{"gitId":"CFZeon"},"content":"        logger.log(Level.INFO, \"saving file to location\");"},{"lineNumber":67,"author":{"gitId":"CFZeon"},"content":"        File file \u003d new File(filePath + filePathName + \".json\");"},{"lineNumber":68,"author":{"gitId":"CFZeon"},"content":"        if (file.exists()) {"},{"lineNumber":69,"author":{"gitId":"CFZeon"},"content":"            file.delete();"},{"lineNumber":70,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"CFZeon"},"content":"        FileWriter writer \u003d new FileWriter(file.getPath());"},{"lineNumber":72,"author":{"gitId":"CFZeon"},"content":"        gson.toJson(dietSession, writer);"},{"lineNumber":73,"author":{"gitId":"CFZeon"},"content":"        logger.log(Level.INFO, \"file saving complete\");"},{"lineNumber":74,"author":{"gitId":"CFZeon"},"content":"        writer.flush();"},{"lineNumber":75,"author":{"gitId":"CFZeon"},"content":"        writer.close();"},{"lineNumber":76,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":78,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"CFZeon"},"content":"     * Reads the content of the .json file and instantiates as a DietSession."},{"lineNumber":80,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"CFZeon"},"content":"     * @param filePath path from source folder to save folder"},{"lineNumber":82,"author":{"gitId":"CFZeon"},"content":"     * @param filePathName name of file"},{"lineNumber":83,"author":{"gitId":"CFZeon"},"content":"     * @return DietSession instance"},{"lineNumber":84,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"CFZeon"},"content":"    public DietSession readDietSession(String filePath, String filePathName) {"},{"lineNumber":86,"author":{"gitId":"CFZeon"},"content":"        Gson gson \u003d new Gson();"},{"lineNumber":87,"author":{"gitId":"CFZeon"},"content":"        DietSession dietSession;"},{"lineNumber":88,"author":{"gitId":"CFZeon"},"content":"        dietSession \u003d null;"},{"lineNumber":89,"author":{"gitId":"CFZeon"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"CFZeon"},"content":"            File file \u003d new File(System.getProperty(\"user.dir\") + \"/\""},{"lineNumber":91,"author":{"gitId":"CFZeon"},"content":"                    + filePath + filePathName);"},{"lineNumber":92,"author":{"gitId":"CFZeon"},"content":"            Reader reader \u003d new FileReader(file.getPath());"},{"lineNumber":93,"author":{"gitId":"CFZeon"},"content":"            dietSession \u003d gson.fromJson(reader, DietSession.class);"},{"lineNumber":94,"author":{"gitId":"CFZeon"},"content":"            reader.close();"},{"lineNumber":95,"author":{"gitId":"CFZeon"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":96,"author":{"gitId":"CFZeon"},"content":"            ui.showToUser(DIET_FILE_NOT_FOUND);"},{"lineNumber":97,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Diet Session file not found\");"},{"lineNumber":98,"author":{"gitId":"CFZeon"},"content":"        } catch (MalformedJsonException | JsonSyntaxException e) {"},{"lineNumber":99,"author":{"gitId":"CFZeon"},"content":"            ui.showToUser(DIET_FILE_CORRUPTED);"},{"lineNumber":100,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Corrupted diet session\");"},{"lineNumber":101,"author":{"gitId":"CFZeon"},"content":"        } catch (IOException e) {"},{"lineNumber":102,"author":{"gitId":"CFZeon"},"content":"            logger.log(Level.WARNING, \"Could not read diet session\");"},{"lineNumber":103,"author":{"gitId":"CFZeon"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"CFZeon"},"content":"        return dietSession;"},{"lineNumber":105,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":14,"tienkhoa16":2,"CFZeon":90}},{"path":"src/main/java/storage/profile/ProfileStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package storage.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import com.google.gson.Gson;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import com.google.gson.GsonBuilder;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import com.google.gson.reflect.TypeToken;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import com.google.gson.stream.JsonReader;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidSaveFormatException;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.LoadingException;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.SavingException;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import profile.Utils;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import java.io.File;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import java.io.FileReader;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import java.io.FileWriter;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import java.io.IOException;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import java.lang.reflect.Type;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Files;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Level;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":" * A class that saves and loads user profile data on local hard disk."},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileStorage {"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    private Gson gson;"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    private Path pathToProfileFolder;"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    private Path pathToProfileFile;"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"     * Constructs Storage object."},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"     * @param pathToProfileFolder Path to profile data folder."},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"     * @param pathToProfileFile Path to profile data file."},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"    public ProfileStorage(Path pathToProfileFolder, Path pathToProfileFile) {"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        gson \u003d new GsonBuilder().setPrettyPrinting().create();"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        this.pathToProfileFolder \u003d pathToProfileFolder;"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"        this.pathToProfileFile \u003d pathToProfileFile;"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"     * Loads user profile from data file."},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"     * @return User profile."},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"     * @throws LoadingException If there are failed or interrupted I/O operations."},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidSaveFormatException If data file saving format is corrupted."},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"    public Profile loadData() throws LoadingException, InvalidSaveFormatException {"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        Profile profile \u003d null;"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"        if (Files.exists(pathToProfileFolder)) {"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"            try {"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"                logger.log(Level.INFO, \"starting to decode profile data\");"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"                profile \u003d decodeProfile();"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"                assert profile !\u003d null : \"profile should not be null\";"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"                logger.log(Level.INFO, \"finishing profile data decoding\");"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"            } catch (FileNotFoundException e) {"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"                createDataFile();"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"            createDataFolder();"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"            createDataFile();"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"        return profile;"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"     * Decodes user profile save data to a profile object."},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"     * @return Profile object."},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"     * @throws InvalidSaveFormatException If the saving format is invalid."},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"     * @throws FileNotFoundException If data file is not found."},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"    public Profile decodeProfile() throws InvalidSaveFormatException, FileNotFoundException {"},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"            logger.log(Level.INFO, \"decoding profile data\");"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"            Type profileType \u003d new TypeToken\u003cProfile\u003e() {"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"            }.getType();"},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"            File file \u003d new File(pathToProfileFile.toString());"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"            Profile profile \u003d gson.fromJson(reader, profileType);"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"            if (!Utils.checkValidProfile(profile)) {"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"                logger.log(Level.WARNING, \"processing invalid profile data\");"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"                throw new InvalidSaveFormatException(pathToProfileFile.toString());"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"            return profile;"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"        } catch (JsonSyntaxException e) {"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"            logger.log(Level.WARNING, \"processing invalid syntax in data file\", e);"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"            throw new InvalidSaveFormatException(pathToProfileFile.toString());"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"     * Creates data file."},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"     * @throws LoadingException If there are failed or interrupted I/O operations."},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"    public void createDataFile() throws LoadingException {"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"            Files.createFile(pathToProfileFile);"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"            logger.log(Level.INFO, \"created saves/profile/profile.txt\");"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"        } catch (IOException e) {"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"            throw new LoadingException(e.getMessage());"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"     * Creates data folder."},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"     * @throws LoadingException If there are failed or interrupted I/O operations."},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"    public void createDataFolder() throws LoadingException {"},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"            Files.createDirectories(pathToProfileFolder);"},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"            logger.log(Level.INFO, \"created saves/profile\");"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"        } catch (IOException e) {"},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"            throw new LoadingException(e.getMessage());"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"tienkhoa16"},"content":"     * Saves user profile data to hard disk after profile changes."},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"tienkhoa16"},"content":"     * @param profile User\u0027s profile."},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":"     * @throws SavingException If there are failed or interrupted I/O operations."},{"lineNumber":138,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"    public void saveData(Profile profile) throws SavingException {"},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":"        try {"},{"lineNumber":141,"author":{"gitId":"tienkhoa16"},"content":"            logger.log(Level.INFO, \"starting to save profile data\");"},{"lineNumber":142,"author":{"gitId":"tienkhoa16"},"content":"            FileWriter fw \u003d new FileWriter(pathToProfileFile.toString());"},{"lineNumber":143,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":144,"author":{"gitId":"tienkhoa16"},"content":"            if (profile \u003d\u003d null) {"},{"lineNumber":145,"author":{"gitId":"tienkhoa16"},"content":"                fw.write(EMPTY_STRING);"},{"lineNumber":146,"author":{"gitId":"tienkhoa16"},"content":"            } else {"},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"                gson.toJson(profile, fw);"},{"lineNumber":148,"author":{"gitId":"tienkhoa16"},"content":"                fw.flush();"},{"lineNumber":149,"author":{"gitId":"tienkhoa16"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":151,"author":{"gitId":"tienkhoa16"},"content":"            fw.close();"},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"            logger.log(Level.INFO, \"finishing data saving\");"},{"lineNumber":153,"author":{"gitId":"tienkhoa16"},"content":"        } catch (IOException e) {"},{"lineNumber":154,"author":{"gitId":"tienkhoa16"},"content":"            logger.log(Level.WARNING, \"processing IOException while saving data\", e);"},{"lineNumber":155,"author":{"gitId":"tienkhoa16"},"content":"            throw new SavingException(e.getMessage());"},{"lineNumber":156,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":158}},{"path":"src/main/java/storage/workout/WorkOutManagerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package storage.workout;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import com.google.gson.Gson;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import com.google.gson.GsonBuilder;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import com.google.gson.reflect.TypeToken;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import com.google.gson.stream.JsonReader;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import models.PastWorkoutSessionRecord;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import seedu.duke.Constants;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"import java.io.FileReader;"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"import java.io.FileWriter;"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"import java.io.IOException;"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"import java.lang.reflect.Type;"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"import java.util.logging.Logger;"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":" * A class that is responsible for storing Workout Manager data."},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"public class WorkOutManagerStorage {"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"     * This list contains all the past record files\u0027 file name and some other relevant info."},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"     * It is saved in a file called history.json."},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"     * Each time it initialises, it will read history.json file and save it to this list."},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"     * Each time adding/removing record will update this list and write again to local storage."},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"    private Gson gson;"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"    private final Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"     * This variable keeps track of file name."},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"    private int recordCount \u003d 0;"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"    public void init() {"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"        gson \u003d new GsonBuilder().setPrettyPrinting().create();"},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":"     * Reads all past records."},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"     * @return A list of PastWorkoutSessionRecord."},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwIoException If error in reading the file."},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"    public ArrayList\u003cPastWorkoutSessionRecord\u003e readPastRecords() throws SchwIoException {"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"Start loading files\");"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPastWorkoutSessionRecord\u003e pastFiles;"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"        File file \u003d new File(Constants.PATH_TO_WORKOUT_SESSION_HISTORY);"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"        Type taskListType \u003d new TypeToken\u003cArrayList\u003cPastWorkoutSessionRecord\u003e\u003e() {"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"        }.getType();"},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"            JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"            pastFiles \u003d gson.fromJson(reader, taskListType);"},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"            logger.info(\"File is not found.\");"},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"            createMetaFile(Constants.PATH_TO_WORKOUT_SESSION_HISTORY);"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"            pastFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":"        } catch (JsonSyntaxException e) {"},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":"            logger.info(\"File is corrupted.\");"},{"lineNumber":69,"author":{"gitId":"wgzesg"},"content":"            pastFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"wgzesg"},"content":"        if (pastFiles \u003d\u003d null) {"},{"lineNumber":72,"author":{"gitId":"wgzesg"},"content":"            pastFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"wgzesg"},"content":"        assert (pastFiles !\u003d null);"},{"lineNumber":75,"author":{"gitId":"wgzesg"},"content":"        recordCount \u003d pastFiles.size();"},{"lineNumber":76,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"Loading completed\");"},{"lineNumber":77,"author":{"gitId":"wgzesg"},"content":"        return pastFiles;"},{"lineNumber":78,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":80,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"     * Writes all past records to local storage."},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"wgzesg"},"content":"     * @param pastFiles The list of records to be stored."},{"lineNumber":84,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwIoException If error occurs in writing to file."},{"lineNumber":85,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"wgzesg"},"content":"    public void writePastRecords(List\u003cPastWorkoutSessionRecord\u003e pastFiles) throws SchwIoException {"},{"lineNumber":87,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"Saving the changes...\");"},{"lineNumber":88,"author":{"gitId":"wgzesg"},"content":"        File file \u003d new File(Constants.PATH_TO_WORKOUT_SESSION_HISTORY);"},{"lineNumber":89,"author":{"gitId":"wgzesg"},"content":"        FileWriter writer;"},{"lineNumber":90,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"wgzesg"},"content":"            writer \u003d new FileWriter(file.getPath());"},{"lineNumber":92,"author":{"gitId":"wgzesg"},"content":"            gson.toJson(pastFiles, writer);"},{"lineNumber":93,"author":{"gitId":"wgzesg"},"content":"            writer.flush();"},{"lineNumber":94,"author":{"gitId":"wgzesg"},"content":"            writer.close();"},{"lineNumber":95,"author":{"gitId":"wgzesg"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitId":"wgzesg"},"content":"            logger.info(\"Error occured when saving the progress.\");"},{"lineNumber":97,"author":{"gitId":"wgzesg"},"content":"            throw new SchwIoException(\"Error occured when saving the progress...\");"},{"lineNumber":98,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"wgzesg"},"content":"        logger.info(\"All changes saved.\");"},{"lineNumber":100,"author":{"gitId":"wgzesg"},"content":"        recordCount \u003d pastFiles.size();"},{"lineNumber":101,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":103,"author":{"gitId":"wgzesg"},"content":"    private void createMetaFile(String path) throws SchwIoException {"},{"lineNumber":104,"author":{"gitId":"wgzesg"},"content":"        File file \u003d new File(path);"},{"lineNumber":105,"author":{"gitId":"wgzesg"},"content":"        file.getParentFile().mkdirs();"},{"lineNumber":106,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"wgzesg"},"content":"            file.createNewFile();"},{"lineNumber":108,"author":{"gitId":"wgzesg"},"content":"        } catch (IOException e) {"},{"lineNumber":109,"author":{"gitId":"wgzesg"},"content":"            logger.info(\"File cannot be created at \" + path + \".\");"},{"lineNumber":110,"author":{"gitId":"wgzesg"},"content":"            throw new SchwIoException(\"The local storage file cannot be created at \" + path);"},{"lineNumber":111,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":114,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"wgzesg"},"content":"     * Creates a new file to store a new workout session data."},{"lineNumber":116,"author":{"gitId":"wgzesg"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"wgzesg"},"content":"     * @return File path of new created file"},{"lineNumber":118,"author":{"gitId":"wgzesg"},"content":"     * @throws SchwIoException If error occurs in creating the file."},{"lineNumber":119,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"wgzesg"},"content":"    public String createfile() throws SchwIoException {"},{"lineNumber":121,"author":{"gitId":"wgzesg"},"content":"        String newFilePath \u003d Constants.PATH_TO_WORKOUT_SESSION_FOLDER + recordCount + \".json\";"},{"lineNumber":122,"author":{"gitId":"wgzesg"},"content":"        File file \u003d new File(newFilePath);"},{"lineNumber":123,"author":{"gitId":"wgzesg"},"content":"        file.getParentFile().mkdirs();"},{"lineNumber":124,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":125,"author":{"gitId":"wgzesg"},"content":"            file.createNewFile();"},{"lineNumber":126,"author":{"gitId":"wgzesg"},"content":"            return newFilePath;"},{"lineNumber":127,"author":{"gitId":"wgzesg"},"content":"        } catch (IOException e) {"},{"lineNumber":128,"author":{"gitId":"wgzesg"},"content":"            logger.info(\"File is not created at \" + newFilePath + \".\");"},{"lineNumber":129,"author":{"gitId":"wgzesg"},"content":"            throw new SchwIoException(\"The local storage file cannot be created at \" + newFilePath);"},{"lineNumber":130,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":15,"yujinyang1998":2,"wgzesg":115}},{"path":"src/main/java/storage/workout/WorkoutSessionStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package storage.workout;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import com.google.gson.Gson;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import com.google.gson.GsonBuilder;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import com.google.gson.reflect.TypeToken;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import com.google.gson.stream.JsonReader;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import ui.CommonUi;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"import java.io.File;"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"import java.io.FileReader;"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"import java.io.FileWriter;"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"import java.io.IOException;"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"import java.lang.reflect.Type;"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":" * A class that saves and loads Workout Session data on local hard disk."},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionStorage {"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"    private CommonUi ui \u003d new CommonUi();"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"    private static Gson gson \u003d new GsonBuilder().setPrettyPrinting().create();"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     * Writes to storage file with exercise data."},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"     * @throws IOException If file is missing or corrupted."},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    public void writeToStorage(String filePath, ExerciseList exerciseList) throws IOException {"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        assert (filePath !\u003d null \u0026\u0026 exerciseList !\u003d null) : \"File corrupted\";"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        FileWriter writer \u003d new FileWriter(file.getPath());"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        gson.toJson(exerciseList.exerciseList, writer);"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"        writer.flush();"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        writer.close();"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"     * Reads file from drive and loads exercise information."},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"     * @param exerciseList List of exercise."},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"     * @throws FileNotFoundException If file is missing or corrupted."},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"    public void readFileContents(String filePath, ExerciseList exerciseList) throws FileNotFoundException {"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"        assert (filePath !\u003d null \u0026\u0026 exerciseList !\u003d null) : \"File corrupted\";"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"        Type taskListType \u003d new TypeToken\u003cArrayList\u003cExercise\u003e\u003e() {"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"        }.getType();"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"        JsonReader reader \u003d new JsonReader(new FileReader(file.getPath()));"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"        exerciseList.exerciseList.clear();"},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"            exerciseList.exerciseList.addAll(gson.fromJson(reader, taskListType));"},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"            System.out.print(\"\");"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"        } catch (JsonSyntaxException e) {"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"            ui.showToUser(WorkoutSessionUi.saveCorruptedError(filePath));"},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"zsk612":15,"yujinyang1998":55}},{"path":"src/main/java/ui/CommonUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.CommonParser.GREEDY_WHITE_SPACE;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":" * A base class for interacting with user."},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"public class CommonUi {"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    public static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"    public static final String LINE_PREFIX \u003d \"\\t \";"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    public static final String LS \u003d System.lineSeparator() + LINE_PREFIX;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    public static final String LOGO \u003d \"   _____        _\" + LS"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"            + \"  / ____|      | |\" + LS"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"            + \" | (___    ___ | |__ __      __ __ _  _ __  ____ ___  _ __    ___   __ _   __ _   ___  _ __ \" + LS"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"            + \"  \\\\___ \\\\  / __|| \u0027_ \\\\\\\\ \\\\ /\\\\ / // _` || \u0027__||_  // _ \\\\| \u0027_ \\\\  / _ \\\\ / _` | / _` | / _ \\\\| \""},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"            + \"\u0027__|\" + LS"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"            + \"  ____) || (__ | | | |\\\\ V  V /| (_| || |    / /|  __/| | | ||  __/| (_| || (_| ||  __/| |\" + LS"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"            + \" |_____/  \\\\___||_| |_| \\\\_/\\\\_/  \\\\__,_||_|   /___|\\\\___||_| |_| \\\\___| \\\\__, | \\\\__, | \\\\___||_|\" + LS"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"            + \"                                                                    __/ |  __/ |\" + LS"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"            + \"                                                                   |___/  |___/\";"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    public static final String HELP_FORMAT \u003d \"%-8s FORMAT:      %s\" + LS + \"%-8s DESCRIPTION: %s\" + LS;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    public static final String WARNING_FORMAT \u003d \"! WARNING: %s!\";"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_CLEAR_FORMAT \u003d \"Alright, your %s been cleared!\";"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    public static final String HORIZONTAL_LINE \u003d LINE_PREFIX"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"            + \"_________________________________________________________________________________________________\";"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_FORMAT_GENERAL \u003d HORIZONTAL_LINE + LS + \"%s\" + System.lineSeparator()"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"            + HORIZONTAL_LINE + System.lineSeparator();"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"     * Shows a message to the user."},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"     * @param result Message to be displayed."},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    public void showToUser(String result) {"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        assert result !\u003d null : \"result should not be null\";"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"        System.out.println(String.format(MESSAGE_FORMAT_GENERAL, result));"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"     * Adjusts help message in the correct format."},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandName User command input"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"     * @param commandFormat Command formatter"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"     * @param description Description of the commands"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"     * @return Formatted string of help message"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"    public static String helpFormatter(String commandName, String commandFormat, String description) {"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        return String.format(HELP_FORMAT, commandName, commandFormat, EMPTY_STRING, description);"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"     * Adjusts clear message in the correct format."},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"     * @param content Clear message"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"     * @return Formatted string of clear message"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    public static String clearMsg(String content) {"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"        return String.format(MESSAGE_CLEAR_FORMAT, content);"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"     * Adjusts search result in the correct format."},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"     * @param num Index of results"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"     * @param content Content of searched items"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"     * @return Formatted string of the search result"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"    public static String searchRecords(int num, String content) {"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"        return String.format(\"%d %s been found!\", num, content) + LS;"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"     * Prints formatted warning message."},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"     * @param message Warning message."},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"    public void showWarning(String message) {"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"        showToUser(String.format(WARNING_FORMAT, message));"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"     * Gets input from user."},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"     * @param menuName Current menu name."},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"     * @return User input in a string."},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"    public String getCommand(String menuName) {"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"        System.out.print(menuName + \" \u003e\u003e\u003e\u003e\u003e \");"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"        String inputLine \u003d sc.nextLine();"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"        // Silently consume all blank lines"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"        while (inputLine.trim().isEmpty()) {"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"            System.out.print(menuName + \" \u003e\u003e\u003e\u003e\u003e \");"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"            inputLine \u003d sc.nextLine();"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        return inputLine.replaceAll(GREEDY_WHITE_SPACE, \" \").trim();"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"     * Gets user confirmation a specific command."},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"     * @param menuName Current menu name."},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"     * @param action Action description."},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"     * @return If user confirms the command execution."},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"    public boolean checkConfirmation(String menuName, String action) {"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"        String message \u003d String.format(\"Are you sure you want to %s? This action is irrevocable.\\n\\t \""},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"                + \"Key in \\\"YES\\\" to confirm.\", action);"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"        showToUser(message);"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        String input \u003d getCommand(menuName);"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"        return input.equals(\"YES\");"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"     * Prints opening message to user."},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"     * @param menuName Name of menu entering."},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"    public void printOpening(String menuName) {"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"        showToUser(String.format(\"Starting %s...\", menuName));"},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":"     * Prints returning message to user."},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":"     * @param menuName Name of menu to return to."},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"tienkhoa16"},"content":"    public void printReturning(String menuName) {"},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"        showToUser(String.format(\"Returning to %s...\", menuName));"},{"lineNumber":136,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":135,"wgzesg":2}},{"path":"src/main/java/ui/diet/dietmanager/DietManagerUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package ui.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import ui.CommonUi;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":" * A class that is responsible for user interface of Diet Manager."},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"public class DietManagerUi extends CommonUi {"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_NO_SESSION_SAVED \u003d \"Sorry! It seems like you have no diet sessions saved!\";"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_IO_WRONG_FORMAT \u003d \"It seems like we ran into some problems saving your session...\";"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_FILE_ARRAY_OUT_OF_BOUND \u003d \"Sorry, there is no file at that index.\";"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_FILE_NOT_FOUND \u003d \"Sorry, there seems to be no file.\";"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_FILE_CORRUPTED \u003d \"Sorry, it seems like your file is corrupted...\";"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_NEW_SUCCESS \u003d \"Exiting Diet Session!\";"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_DELETE_SUCCESS \u003d \"You have deleted that diet session!\";"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_EDIT_WRONG_FORMAT \u003d \"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"            + \"edit [INDEX_OF_SESSION]\";"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_DELETE_WRONG_FORMAT \u003d \"Wrong format, please enter in the format:\\n\\t delete [INDEX]\";"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_CREATE_WRONG_FORMAT \u003d \"Wrong format, please enter in the format: \\n\\t \""},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"            + \"new \u003c/d [DATE]\u003e \u003c/t [TAG]\u003e\";"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_DATE_WRONG_FORMAT \u003d \"Wrong date format, please enter in the format:\\n\\t /d yyyy-MM-dd\";"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_NO_SESSIONS_SAVED \u003d \"It looks like you have no sessions saved!\";"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_SEARCH_RESULTS_MESSAGE \u003d \"Here are the search result(s)!\";"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_SEARCH_EMPTY_TAG \u003d \"Tag is empty, \""},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"            + \"all the sessions within input dates will be shown.\";"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_MENU_NAME \u003d \"Diet Menu\";"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"    public static String CLEAR_RECORD \u003d \"clear all records\";"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_CLEAR_MSG \u003d \"diet sessions have\";"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_NOTHING_TO_CLEAR_MSG \u003d \"Sorry, there is no diet session to be cleared!\";"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"    public static String DIET_FILE_CORRUPTED_MSG \u003d \"File Corrupted... Returning to Diet Menu...\";"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"    public static String EMPTY_STRING \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":3,"tienkhoa16":1,"CFZeon":29}},{"path":"src/main/java/ui/diet/dietsession/DietSessionUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package ui.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import ui.CommonUi;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":" * A class that contains templates of message to show to user."},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":" */"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"public class DietSessionUi extends CommonUi {"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"    public static final String DIET_INPUT_PROMPT_EDIT \u003d \"Diet Menu \u003e Diet Session \";"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"    public static final String DIET_INPUT_PROMPT_NEW \u003d \"Diet Menu \u003e New Diet Session\";"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_ADD_WRONG_FORMAT \u003d \"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"            + \"add [FOOD_NAME] /c [CALORIES]\";"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_CLEAR_ABORTED \u003d \"You have aborted clear operation.\";"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"Alright, your food items have been cleared.\";"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_DELETE_WRONG_FORMAT \u003d \"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"            + \"delete [INDEX]\";"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_HIGH_CALORIES \u003d \"Your calories for this food item seems a little high, \""},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"            + \"so I\u0027ve set it to 200,000.\\n\\t \";"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_NEGATIVE_CALORIES \u003d \"Please enter a positive number for calories!\";"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_NO_FOOD \u003d \"Sorry, there is nothing in your food list.\";"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_NO_FOOD_NAME \u003d \"Please enter food name!\";"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_NO_SUCH_INDEX \u003d \"Sorry, there is no food item at that index.\";"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_SEARCH_PROMPT \u003d \"Here are the search results: \\n\\t \";"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"    public static final String MESSAGE_WRONG_CALORIES \u003d \"Please input a number for calories.\";"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"     * Prints help message."},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"     * @param helpMessage appends all the help messages"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"    public static void printHelp(StringBuilder helpMessage) {"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"        helpMessage.append(helpFormatter(\"Add\", \"add [FOOD_NAME] /c [CALORIES]\","},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"                \"Add a new food item\"));"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"        helpMessage.append(helpFormatter(\"List\", \"list\","},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"                \"Show all food items\"));"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"        helpMessage.append(helpFormatter(\"Delete\", \"delete [INDEX]\","},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"                \"Delete the food item at the input index\"));"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"        helpMessage.append(helpFormatter(\"Search\", \"search [FOOD_NAME]\","},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"                \"Search the diet session for food with the name specified\"));"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"        helpMessage.append(helpFormatter(\"Clear\", \"clear\","},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"                \"Clear all food items\"));"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"        helpMessage.append(helpFormatter(\"End\", \"end\","},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"                \"Go back to the Diet Menu.\"));"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"     * Prints opening messages for diet sessions."},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"    public void printOpening() {"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":"        showToUser(\"Starting Diet Session!\");"},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":54,"tienkhoa16":1}},{"path":"src/main/java/ui/profile/ProfileUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package ui.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import ui.CommonUi;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.CALORIES_LOWER_BOUND;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.CALORIES_UPPER_BOUND;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.HEIGHT_LOWER_BOUND;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.HEIGHT_UPPER_BOUND;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.WEIGHT_LOWER_BOUND;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.WEIGHT_UPPER_BOUND;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":" * A class that contains templates of message to show to user."},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":" */"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"public class ProfileUi extends CommonUi {"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_ADJUST_CALORIES \u003d \"Your expected daily calorie intake seems a little \""},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"            + \"high, so I\u0027ve set it to 200,000\";"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_CREATE_PROFILE_ACK \u003d \"Got it. Here\u0027s a confirmation of your profile:\""},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"            + LS + \"%s\";"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_DELETE_PROFILE \u003d String.format(MESSAGE_CLEAR_FORMAT, \"profile has\");"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_EDIT_PROFILE_ACK \u003d \"Yay! Your profile is edited successfully. \""},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"            + \"Here\u0027s your new profile:\" + LS + \"%s\";"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_END \u003d \"Returning to Main Menu...\";"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_ENOUGH_CALORIES \u003d \"you\u0027ve achieved your target calories intake for today!\";"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_HELP_FOR_MORE_INFO \u003d \"For more information on command syntax, please type \""},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"            + \"\\\"help\\\".\";"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Wrong format, please enter in the format:\" + LS"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"            + \"%s\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_MORE_CALORIES \u003d \"take %.1f more calories to achieve your target for today!\";"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_SET_EXPECTED_WEIGHT \u003d \"TIP: Edit your expected weight to %.1f kg to have \""},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"            + \"Normal Weight BMI classification.\" + LS + \"     Just type \\\"edit /e %.1f\\\"!\";"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_PROFILE_EXIST \u003d \"There\u0027s currently a profile in the database. \" + LS"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"            + \"Please delete it using \\\"delete\\\" command before adding a new one.\";"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_PROFILE_NOT_EXIST \u003d \"There\u0027s no profile to %s. \""},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"            + \"Please add a new one using \\\"add\\\" command :D\";"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_VIEW_PROFILE \u003d \"Here\u0027s your profile:\" + LS + \"%s\" + LS + \"By the way, %s\""},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"            + LS + \"%s\";"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_WELCOME_EXISTING_USER \u003d \"Welcome back to The Schwarzenegger, %s!\" + LS"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"            + \"How can I help you today?\";"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_WELCOME_NEW_USER \u003d \"Welcome new user to The Schwarzenegger! :D\" + LS"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"            + \"Please add your profile under Profile Menu.\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_WELCOME_WITH_INVALID_SAVE_FORMAT \u003d \"Welcome back to The Schwarzenegger!\" + LS"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"            + \"It seems like your profile data is corrupted!\" + LS"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"            + \"Please add your profile again under Profile Menu.\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    public static final String SAD_FACE \u003d \":(  OOPS!!! \";"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_INVALID_WEIGHT \u003d String.format("},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"            SAD_FACE + \"Please input current weight/ expected weight as a number from %.1f to %.1f.\","},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"            WEIGHT_LOWER_BOUND, WEIGHT_UPPER_BOUND);"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_EDIT_NOTHING \u003d SAD_FACE"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"            + \"The information you entered is the same as your current profile!\";"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_DELETE_NOTHING \u003d SAD_FACE + \"You haven\u0027t added any profile yet!\";"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_SAVING_ERROR \u003d SAD_FACE + \"An error has occurred while saving data.\""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"            + LS + \"%s\";"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_LOADING_ERROR \u003d SAD_FACE + \"An error has occurred while loading data.\""},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"            + LS + \"%s\";"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_INVALID_HEIGHT \u003d String.format("},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"            SAD_FACE + \"Please input height as an integer from %d to %d.\", HEIGHT_LOWER_BOUND, HEIGHT_UPPER_BOUND);"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_INVALID_CALORIES \u003d SAD_FACE"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"            + String.format(\"Please input expected daily calorie intake as a number from %.1f to %.1f\","},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"            CALORIES_LOWER_BOUND, CALORIES_UPPER_BOUND);"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_INVALID_NAME \u003d SAD_FACE + \"Name cannot be empty.\";"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_INVALID_SAVE_FORMAT \u003d SAD_FACE + \"Save format in %s is invalid.\";"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"    public static final String MESSAGE_INVALID_COMMAND_WORD \u003d SAD_FACE + \"Sorry, but I don\u0027t know what that means.\""},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"            + LS + \"Please enter \\\"help\\\" for a list of available commands.\";"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":68}},{"path":"src/main/java/ui/workout/workoutmanager/WorkoutManagerUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package ui.workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import ui.CommonUi;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_HELP_FOR_MORE_INFO;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":" * A class that is responsible for user interface in Workout Manager."},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"public class WorkoutManagerUi extends CommonUi {"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"    public static String CLEAR_ABORTED \u003d \"You have aborted the action!\";"},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"    public static String DELETE_SUCCESS \u003d \"You have deleted that record!\";"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"    public static String EDIT_SUCCESS \u003d \"Congratulations! You have successfully edited the workout!\";"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    public static String NEW_SUCCESS \u003d \"Congratulations! You have finished today\u0027s workout!\";"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"    public static String START_NEW_SESSION \u003d \"Starting Workout Session!\";"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"    public static String MESSAGE_NOT_A_NUMBER \u003d \"Index must be a number. Your input is not a number!\";"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"    public static String MESSAGE_INSUFFICIENT_ARGUMENT \u003d \"Insufficient arguments are given! \""},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"            + \"Please follow this format:\" + LS + \"%s\" + LS + MESSAGE_HELP_FOR_MORE_INFO;"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    public static String MESSAGE_OUT_OF_ARRAY \u003d \"The record specified is not found. Please check the index!\";"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":1,"tienkhoa16":3,"wgzesg":19}},{"path":"src/main/java/ui/workout/workoutsession/WorkoutSessionUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package ui.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import ui.CommonUi;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":" * A class that contains templates of message to show to user."},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSessionUi extends CommonUi {"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"    public static final String PRINT_ERROR \u003d \"File not found, re-creating file.\";"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"    public static final String ADD_FORMAT_ERROR \u003d \"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"            + \"add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\";"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"    public static final String ADD_FORMAT_NEGATIVE_ERROR \u003d \"Wrong format, please enter in the format:\\n\\t \""},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"            + \"add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\\n\\t \""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"            + \"Please make sure [NUMBER_OF_REPETITIONS] and [WEIGHT] are non negative numbers.\";"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    public static final String EMPTY_LIST_ERROR \u003d \"List is empty. Please enter something.\";"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"    public static final String DELETE_FORMAT_ERROR \u003d \"Wrong format, please enter in the format:\\n\\t delete [INDEX]\";"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"    public static final String DELETE_INDEX_ERROR \u003d \"Index does not exist. Please refer to the list.\";"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"    public static final String EMPTY_INPUT_ERROR \u003d \"Please enter something.\";"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"    public static final String SEARCH_INPUT_ERROR \u003d \"Wrong format, please enter in the format:\\n\\t search \""},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"            + \"[NAME_OF_MOVE]\";"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"    public static final String SEARCH_RESULTS_EMPTY \u003d \"No matching result has been found.\";"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"     * Formats a message when the file is corrupted."},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"     * @return Message to show to user."},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    public static String saveCorruptedError(String filePath) {"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"        return (\":( Save format in \""},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"                + filePath + \" is invalid.\\n\\t \""},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"                + \"File is cleared.\");"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"     * Formats a message when the file is corrupted."},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"     * @return Message to show to user."},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"    public static String printHelp() {"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        StringBuilder helpMessage \u003d new StringBuilder();"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"        helpMessage.append(helpFormatter(\"Add\", \"add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\","},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"                \"Add a new move\"));"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"        helpMessage.append(helpFormatter(\"List\", \"list\","},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"                \"Show all moves in this current session\"));"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"        helpMessage.append(helpFormatter(\"Delete\", \"delete [INDEX]\","},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"                \"Delete a move according to the index in the list\"));"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"        helpMessage.append(helpFormatter(\"Search\", \"search [NAME_OF_MOVE]\","},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"                \"Show a list of moves that match the entered keyword\"));"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"        helpMessage.append(helpFormatter(\"End\", \"end\","},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"                \"Go back to the Workout Menu\"));"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"        return (helpMessage.toString().trim());"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"     * Formats a message when an Exercise is added."},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"     * @param exercise Exercise to be added."},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"     * @return Message to show to user."},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"    public static String addExerciseSuccess(Exercise exercise) {"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"        String toPrint \u003d String.format(\"Yay! You have added %s to your list.\\n\\t [Repetitions: %s || Weight: %s]\","},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"                exercise.getDescription(), exercise.getRepetitions(), exercise.getWeight());"},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"        return (toPrint);"},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":"     * Formats a message when an Exercise is deleted."},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":"     * @param exercise Exercise to be deleted."},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":"     * @return Message to show to user."},{"lineNumber":75,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"yujinyang1998"},"content":"    public static String deleteExerciseSuccess(Exercise exercise) {"},{"lineNumber":77,"author":{"gitId":"yujinyang1998"},"content":"        String toPrint \u003d String.format(\"You have deleted %s from your list!\\n\\t [Repetitions: %s || Weight: %s]\","},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":"                exercise.getDescription(), exercise.getRepetitions(), exercise.getWeight());"},{"lineNumber":79,"author":{"gitId":"yujinyang1998"},"content":"        return (toPrint);"},{"lineNumber":80,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"zsk612":1,"yujinyang1998":79,"tienkhoa16":1}},{"path":"src/main/java/workout/workoutmanager/WorkoutManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package workout.workoutmanager;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandLib;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.WorkoutManagerParser;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import models.PastRecordList;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import ui.workout.workoutmanager.WorkoutManagerUi;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":"import java.util.logging.Level;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"//@@author wgzesg"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":" * A class that is responsible for interacting with user in Workout Manager."},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":" */"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"public class WorkoutManager {"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"    private static final Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    private final CommandLib cl;"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    private final WorkoutManagerUi ui;"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"     * Constructs Workout Manager."},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"    public WorkoutManager() {"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"        cl \u003d new CommandLib();"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"        cl.initWorkoutManagerCl();"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"Initialised workout manager command library\");"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"        ui \u003d new WorkoutManagerUi();"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"     * Starts a workout manager. Goes into a REPL until \u0027end\u0027 command is given."},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"    public void start() {"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"        logger.log(Level.INFO, \"Entered workout manager\");"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"        ui.printOpening(\"Workout Menu\");"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"        while (true) {"},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"            String command \u003d ui.getCommand(\"Workout Menu\");"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":"            logger.log(Level.INFO, \"Received input\" + command);"},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":"            String[] commParts \u003d WorkoutManagerParser.getInstance().parseCommandKw(command);"},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"                processCommand(commParts);"},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"            } catch (EndException e) {"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"                logger.log(Level.INFO, \"exiting workout manager\");"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"            } catch (SchwarzeneggerException e) {"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"                logger.log(Level.WARNING, \"processing SchwarzeneggerException\", e);"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"                ui.showToUser(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"        ui.printReturning(\"Main Menu\");"},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"    private void processCommand(String[] commands) throws SchwarzeneggerException {"},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"        Command command \u003d cl.getCommand(commands[0]);"},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"        CommandResult result \u003d command.execute((commands.length \u003e 1) ? commands[1].trim() : \"\");"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"        ui.showToUser(result.getFeedbackMessage());"},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"zsk612":4,"yujinyang1998":1,"tienkhoa16":6,"wgzesg":57}},{"path":"src/main/java/workout/workoutsession/WorkoutSession.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandLib;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.ExceptionHandler;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logger.SchwarzeneggerLogger;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.WorkoutSessionParser;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import ui.CommonUi;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"import java.util.logging.Level;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import java.util.logging.Logger;"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":" * A class that is responsible for interacting with user in a Workout Session."},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":" */"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"public class WorkoutSession {"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"    private static Logger logger \u003d SchwarzeneggerLogger.getInstanceLogger();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"    private String filePath \u003d null;"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"    private boolean[] endWorkoutSession;"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"    public ExerciseList exerciseList;"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"    private boolean isNew;"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"    private int index;"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"    private transient CommandLib cl;"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    private final WorkoutSessionStorage workoutSessionStorage;"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"    private CommonUi ui;"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"     * Constructs WorkoutSession object."},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"     * @param filePath Path to data file."},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"     * @param isNew New or existing file."},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"     * @param index Index of this WorkoutSession in the list of WorkoutSession."},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"    public WorkoutSession(String filePath, boolean isNew, int index) {"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        this.exerciseList \u003d new ExerciseList();"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"        this.workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"        this.endWorkoutSession \u003d new boolean[1];"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"        this.ui \u003d new CommonUi();"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"        this.isNew \u003d isNew;"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"        this.index \u003d index;"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"    private void setEndWorkoutSessionF() {"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"        this.endWorkoutSession[0] \u003d false;"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"     * Starts workout session."},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"    public void workoutSessionStart() {"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"        setEndWorkoutSessionF();"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"        logger.log(Level.INFO, \"starting workout session\");"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"        this.cl \u003d new CommandLib();"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionStorage.readFileContents(filePath, exerciseList);"},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"            ui.showToUser(WorkoutSessionUi.PRINT_ERROR);"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":"        while (!endWorkoutSession[0]) {"},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":"            try {"},{"lineNumber":75,"author":{"gitId":"yujinyang1998"},"content":"                if (isNew) {"},{"lineNumber":76,"author":{"gitId":"yujinyang1998"},"content":"                    workoutSessionProcessCommand(ui.getCommand(\"Workout Menu \u003e New Workout Session\"));"},{"lineNumber":77,"author":{"gitId":"yujinyang1998"},"content":"                } else {"},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":"                    workoutSessionProcessCommand(ui.getCommand(\"Workout Menu \u003e Workout Session \" + index));"},{"lineNumber":79,"author":{"gitId":"yujinyang1998"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"yujinyang1998"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":81,"author":{"gitId":"yujinyang1998"},"content":"                ui.showToUser(WorkoutSessionUi.EMPTY_INPUT_ERROR);"},{"lineNumber":82,"author":{"gitId":"yujinyang1998"},"content":"            } catch (InvalidCommandWordException e) {"},{"lineNumber":83,"author":{"gitId":"yujinyang1998"},"content":"                ui.showToUser(ExceptionHandler.handleCheckedExceptions(e));"},{"lineNumber":84,"author":{"gitId":"yujinyang1998"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":88,"author":{"gitId":"yujinyang1998"},"content":"    private void workoutSessionProcessCommand(String input) throws NullPointerException, InvalidCommandWordException {"},{"lineNumber":89,"author":{"gitId":"yujinyang1998"},"content":"        String[] commParts \u003d WorkoutSessionParser.workoutSessionParser(input.trim());"},{"lineNumber":90,"author":{"gitId":"yujinyang1998"},"content":"        Command command \u003d cl.getCommand(commParts[0]);"},{"lineNumber":91,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult commandResult \u003d command.execute(commParts, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":92,"author":{"gitId":"yujinyang1998"},"content":"                endWorkoutSession);"},{"lineNumber":93,"author":{"gitId":"yujinyang1998"},"content":"        if (commandResult.getFeedbackMessage().compareTo(\"\") !\u003d 0) {"},{"lineNumber":94,"author":{"gitId":"yujinyang1998"},"content":"            ui.showToUser(commandResult.getFeedbackMessage());"},{"lineNumber":95,"author":{"gitId":"yujinyang1998"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":98,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"zsk612":4,"yujinyang1998":88,"tienkhoa16":5,"wgzesg":1}},{"path":"src/test/java/diet/dietmanager/DietManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"public class DietManagerTest {"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"    private static final String TEST_SAVES_FOLDER_DIET \u003d \"src/test/java/diet/dietmanager/saves/\";"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"    private static final String TEST_DATE \u003d \"2020-04-04\";"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    private static final Double TEST_CALORIES \u003d 444.0;"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"    void getDateTotalCalories_validInput_returnDouble() {"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"        DietManager dietManager \u003d new DietManager();"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"        LocalDate date \u003d LocalDate.parse(TEST_DATE);"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"        Double expected \u003d TEST_CALORIES;"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        Double totalCalories \u003d dietManager.getDateTotalCalories(TEST_SAVES_FOLDER_DIET, date);"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, totalCalories);"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"    void getDateTotalCalories_wrongFolderInput_throwsAssertionError() {"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"        DietManager dietManager \u003d new DietManager();"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"        LocalDate date \u003d LocalDate.parse(TEST_DATE);"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"        assertThrows(AssertionError.class, () -\u003e"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"                dietManager.getDateTotalCalories(TEST_SAVES_FOLDER_DIET + \"wrong\", date));"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"    void getDateTotalCalories_wrongDateInput_returnsZero() {"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        DietManager dietManager \u003d new DietManager();"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"        Double expected \u003d 0.0;"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        Double totalCalories \u003d dietManager.getDateTotalCalories(TEST_SAVES_FOLDER_DIET, java.time.LocalDate.now());"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, totalCalories);"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"    void processCommand_invalidInput_throwsInvalidCommandWordException() {"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"        DietManager dietManager \u003d new DietManager();"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidCommandWordException.class, () -\u003e"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"                dietManager.processCommand(\"asdf\"));"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"CFZeon":49}},{"path":"src/test/java/diet/dietmanager/DietSessionStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"public class DietSessionStorageTest {"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    private static final String TEST_SAVES_FOLDER_DIET \u003d \"src/test/java/diet/dietmanager/saves/\";"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"    private static final String TEST_SAVES_FOLDER_CORRUPTED_DIET \u003d \"src/test/java/diet/dietmanager/corruptedsaves/\";"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    private static final String TEST_SAVE_NAME \u003d \"2020-05-04 breakfast\";"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"     * Tests readDietSession method of class DietStorage when data from file is read."},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"    void testReadDietSession_exampleDietData_returnsDietSessionInstance() {"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"        DietSession loadedInstance \u003d null;"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"        loadedInstance \u003d storage.readDietSession(TEST_SAVES_FOLDER_DIET, \"2020-11-05 breakfast.json\");"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"        assertNotNull(loadedInstance);"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"     * Tests readDietSession method of class DietStorage when corrupted data from file is read."},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"    void testReadDietSession_corruptedDietData_returnsNull() {"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        DietSession loadedInstance \u003d null;"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"        loadedInstance \u003d storage.readDietSession(TEST_SAVES_FOLDER_CORRUPTED_DIET, \"2020-11-09 unspecified.json\");"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        assertNull(loadedInstance);"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"     * Tests the saveDietSession by saving and reading from folder."},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"     * @throws IOException if file is not read properly"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"     * @throws InvalidDateFormatException if date format is wrong during DietSession instantiation"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"    void saveDietSession_newDietData_returnsDietSessionInstance() throws IOException, InvalidDateFormatException {"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"        storage.init(TEST_SAVES_FOLDER_DIET, TEST_SAVE_NAME);"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"        DietSession savedInstance \u003d new DietSession(\"breakfast\", \"2020-05-04\", true, 1);"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"        savedInstance.saveToFile(TEST_SAVES_FOLDER_DIET, storage, savedInstance);"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"        DietSession loadedInstance \u003d null;"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"        loadedInstance \u003d storage.readDietSession(TEST_SAVES_FOLDER_DIET, TEST_SAVE_NAME + \".json\");"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"        assertNotNull(loadedInstance);"},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"CFZeon":58}},{"path":"src/test/java/logic/commands/CommandLibTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionClear;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionCreate;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionDelete;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionEdit;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionHelp;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionList;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietmanager.DietSessionWrong;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemAdd;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemClear;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemDelete;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemHelp;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemList;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.diet.dietsession.FoodItemWrong;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.MainHelp;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.MainWrong;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.ToDiet;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.ToProfile;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.main.ToWorkout;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileAdd;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileDelete;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileEdit;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileEnd;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileHelp;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileView;"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.profile.ProfileWrong;"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.ByeWS;"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.DeleteWS;"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.ListWS;"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.NewWS;"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutmanager.WrongWS;"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionAdd;"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionDelete;"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionEnd;"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionHelp;"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionList;"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionSearch;"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.workout.workoutsession.WorkoutSessionWrong;"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"class CommandLibTest {"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_dietManagerUnrecognisedCommand_returnDietSessionWrong() {"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietManagerCl();"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"unregconised\") instanceof DietSessionWrong);"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_listDietSession_returnListCommand() {"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietManagerCl();"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"list\") instanceof DietSessionList);"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_deleteDietSession_returnDeleteCommand() {"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietManagerCl();"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"delete\") instanceof DietSessionDelete);"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_newDietSession_returnNewCommand() {"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietManagerCl();"},{"lineNumber":72,"author":{"gitId":"zsk612"},"content":"        assertTrue(cl.getCommand(\"new\") instanceof DietSessionCreate);"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_clearDietSession_returnClearCommand() {"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietManagerCl();"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"clear\") instanceof DietSessionClear);"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_editDietSession_returnEditCommand() {"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":85,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietManagerCl();"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"edit\") instanceof DietSessionEdit);"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_helpDietSession_returnHelpCommand() {"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":92,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietManagerCl();"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"help\") instanceof DietSessionHelp);"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_DietManagerUnrecognisedCommand_returnFoodItemWrong() {"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":99,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietSessionCl();"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"unregconised\") instanceof FoodItemWrong);"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_listFoodItem_returnListCommand() {"},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":106,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietSessionCl();"},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"list\") instanceof FoodItemList);"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_deleteFoodItem_returnDeleteCommand() {"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":113,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietSessionCl();"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"delete\") instanceof FoodItemDelete);"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_newFoodItem_returnNewCommand() {"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":120,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietSessionCl();"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"add\") instanceof FoodItemAdd);"},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_clearFoodItem_returnClearCommand() {"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":127,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietSessionCl();"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"clear\") instanceof FoodItemClear);"},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_helpFoodItem_returnHelpCommand() {"},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":134,"author":{"gitId":"yujinyang1998"},"content":"        cl.initDietSessionCl();"},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"help\") instanceof FoodItemHelp);"},{"lineNumber":136,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":138,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_WorkoutManagerUnrecognisedCommand_returnNull() {"},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":141,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutManagerCl();"},{"lineNumber":142,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"unregconised\") instanceof WrongWS);"},{"lineNumber":143,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":145,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_listWS_returnListCommand() {"},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":148,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutManagerCl();"},{"lineNumber":149,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"list\") instanceof ListWS);"},{"lineNumber":150,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_deleteWS_returnDeleteCommand() {"},{"lineNumber":154,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":155,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutManagerCl();"},{"lineNumber":156,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"delete\") instanceof DeleteWS);"},{"lineNumber":157,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":159,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_newWS_returnNewCommand() {"},{"lineNumber":161,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":162,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutManagerCl();"},{"lineNumber":163,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"new\") instanceof NewWS);"},{"lineNumber":164,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":166,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_byeWS_returnByeCommand() {"},{"lineNumber":168,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":169,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutManagerCl();"},{"lineNumber":170,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"end\") instanceof ByeWS);"},{"lineNumber":171,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":173,"author":{"gitId":"yujinyang1998"},"content":"    //@@author yujinyang1998"},{"lineNumber":174,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"yujinyang1998"},"content":"    void getCommandTest_WorkoutSessionUnrecognisedCommand_returnNull() {"},{"lineNumber":176,"author":{"gitId":"yujinyang1998"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":177,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":178,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(cl.getCommand(\"unregconised\") instanceof WorkoutSessionWrong);"},{"lineNumber":179,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":181,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":182,"author":{"gitId":"yujinyang1998"},"content":"    void getCommandTest_workoutSessionList_returnListCommand() {"},{"lineNumber":183,"author":{"gitId":"yujinyang1998"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":184,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":185,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(cl.getCommand(\"list\") instanceof WorkoutSessionList);"},{"lineNumber":186,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":188,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":189,"author":{"gitId":"yujinyang1998"},"content":"    void getCommandTest_workoutSessionDelete_returnDeleteCommand() {"},{"lineNumber":190,"author":{"gitId":"yujinyang1998"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":191,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":192,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(cl.getCommand(\"delete\") instanceof WorkoutSessionDelete);"},{"lineNumber":193,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":195,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"yujinyang1998"},"content":"    void getCommandTest_workoutSessionAdd_returnAddCommand() {"},{"lineNumber":197,"author":{"gitId":"yujinyang1998"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":198,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":199,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(cl.getCommand(\"add\") instanceof WorkoutSessionAdd);"},{"lineNumber":200,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":202,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":203,"author":{"gitId":"yujinyang1998"},"content":"    void getCommandTest_workoutSessionEnd_returnEndCommand() {"},{"lineNumber":204,"author":{"gitId":"yujinyang1998"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":205,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":206,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(cl.getCommand(\"end\") instanceof WorkoutSessionEnd);"},{"lineNumber":207,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":209,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":210,"author":{"gitId":"yujinyang1998"},"content":"    void getCommandTest_workoutSessionSearch_returnSearchCommand() {"},{"lineNumber":211,"author":{"gitId":"yujinyang1998"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":212,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":213,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(cl.getCommand(\"search\") instanceof WorkoutSessionSearch);"},{"lineNumber":214,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":216,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":217,"author":{"gitId":"yujinyang1998"},"content":"    void getCommandTest_workoutSessionHelp_returnHelpCommand() {"},{"lineNumber":218,"author":{"gitId":"yujinyang1998"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":219,"author":{"gitId":"yujinyang1998"},"content":"        cl.initWorkoutSessionCl();"},{"lineNumber":220,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(cl.getCommand(\"help\") instanceof WorkoutSessionHelp);"},{"lineNumber":221,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":223,"author":{"gitId":"tienkhoa16"},"content":"    //@@author tienkhoa16"},{"lineNumber":224,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":225,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileSessionAddCommand_returnProfileAdd() {"},{"lineNumber":226,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":227,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":228,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"add\") instanceof ProfileAdd);"},{"lineNumber":229,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":231,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":232,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileSessionDeleteCommand_returnProfileDelete() {"},{"lineNumber":233,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":234,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":235,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"delete\") instanceof ProfileDelete);"},{"lineNumber":236,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":238,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":239,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileSessionEditCommand_returnProfileEdit() {"},{"lineNumber":240,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":241,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":242,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"edit\") instanceof ProfileEdit);"},{"lineNumber":243,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":244,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":245,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":246,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileSessionEndCommand_returnProfileEnd() {"},{"lineNumber":247,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":248,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":249,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"end\") instanceof ProfileEnd);"},{"lineNumber":250,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":252,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":253,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileSessionHelpCommand_returnProfileHelp() {"},{"lineNumber":254,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":255,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":256,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"help\") instanceof ProfileHelp);"},{"lineNumber":257,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":259,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":260,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileSessionViewCommand_returnProfileView() {"},{"lineNumber":261,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":262,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":263,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"view\") instanceof ProfileView);"},{"lineNumber":264,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":266,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":267,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileSessionUnrecognisedCommand_returnProfileWrong() {"},{"lineNumber":268,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":269,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":270,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"unregconised\") instanceof ProfileWrong);"},{"lineNumber":271,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":273,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":274,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileInputNull_returnWrong() {"},{"lineNumber":275,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":276,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":277,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(null) instanceof ProfileWrong);"},{"lineNumber":278,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":280,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":281,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_profileInputEmpty_returnWrong() {"},{"lineNumber":282,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":283,"author":{"gitId":"tienkhoa16"},"content":"        cl.initProfileSessionCl();"},{"lineNumber":284,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(EMPTY_STRING) instanceof ProfileWrong);"},{"lineNumber":285,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":287,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":288,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_mainHelpCommand_returnHelp() {"},{"lineNumber":289,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":290,"author":{"gitId":"tienkhoa16"},"content":"        cl.initMainMenuCl();"},{"lineNumber":291,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"help\") instanceof MainHelp);"},{"lineNumber":292,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":293,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":294,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":295,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_mainDietCommand_returnToDiet() {"},{"lineNumber":296,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":297,"author":{"gitId":"tienkhoa16"},"content":"        cl.initMainMenuCl();"},{"lineNumber":298,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"diet\") instanceof ToDiet);"},{"lineNumber":299,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":300,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":301,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":302,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_mainProfileCommand_returnToProfile() {"},{"lineNumber":303,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":304,"author":{"gitId":"tienkhoa16"},"content":"        cl.initMainMenuCl();"},{"lineNumber":305,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"profile\") instanceof ToProfile);"},{"lineNumber":306,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":307,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":308,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":309,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_mainWorkoutCommand_returnToWorkout() {"},{"lineNumber":310,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":311,"author":{"gitId":"tienkhoa16"},"content":"        cl.initMainMenuCl();"},{"lineNumber":312,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"workout\") instanceof ToWorkout);"},{"lineNumber":313,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":315,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":316,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_mainUnrecognisedCommand_returnWrong() {"},{"lineNumber":317,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":318,"author":{"gitId":"tienkhoa16"},"content":"        cl.initMainMenuCl();"},{"lineNumber":319,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(\"unregconised\") instanceof MainWrong);"},{"lineNumber":320,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":321,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":322,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":323,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_mainInputNull_returnWrong() {"},{"lineNumber":324,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":325,"author":{"gitId":"tienkhoa16"},"content":"        cl.initMainMenuCl();"},{"lineNumber":326,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(null) instanceof MainWrong);"},{"lineNumber":327,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":329,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":330,"author":{"gitId":"tienkhoa16"},"content":"    void getCommandTest_mainInputEmpty_returnWrong() {"},{"lineNumber":331,"author":{"gitId":"tienkhoa16"},"content":"        CommandLib cl \u003d new CommandLib();"},{"lineNumber":332,"author":{"gitId":"tienkhoa16"},"content":"        cl.initMainMenuCl();"},{"lineNumber":333,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(cl.getCommand(EMPTY_STRING) instanceof MainWrong);"},{"lineNumber":334,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"zsk612":1,"yujinyang1998":68,"tienkhoa16":266}},{"path":"src/test/java/logic/commands/diet/dietmanager/DietSessionClearTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import storage.diet.DietStorage;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"public class DietSessionClearTest {"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsNoSuchElementException() {"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"        assertThrows(NoSuchElementException.class, () -\u003e {"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"            new DietSessionClear().execute(EMPTY_STRING, (DietStorage) null);"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"        });"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputEmptyArguments_throwsNoSuchElementException() {"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"        DietStorage dietStorage \u003d new DietStorage();"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"        assertThrows(NoSuchElementException.class, () -\u003e {"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"            new DietSessionClear().execute(EMPTY_STRING, dietStorage);"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"        });"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputNotYes_success() {"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"        DietStorage dietStorage \u003d new DietStorage();"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"not Yes\".getBytes()));"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        CommandResult commandResult \u003d new DietSessionClear().execute(EMPTY_STRING, dietStorage);"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"        assertEquals(CLEAR_ABORTED, commandResult.getFeedbackMessage());"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"CFZeon":40}},{"path":"src/test/java/logic/commands/diet/dietmanager/DietSessionCreateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import storage.diet.DietStorage;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_CREATE_WRONG_FORMAT;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_DATE_WRONG_FORMAT;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_NEW_SUCCESS;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"public class DietSessionCreateTest {"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputEmptyArguments_success() {"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionCreate().execute(EMPTY_STRING, storage);"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_NEW_SUCCESS, result.getFeedbackMessage());"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputOnlyDate_success() {"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"        String dateInput \u003d \"/d 2020-05-04\";"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionCreate().execute(dateInput, storage);"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_NEW_SUCCESS, result.getFeedbackMessage());"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputTag_success() {"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        String tagInput \u003d \"/t breakfast\";"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionCreate().execute(tagInput, storage);"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_NEW_SUCCESS, result.getFeedbackMessage());"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"    void testExecute_validInput_success() {"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"        String tagInput \u003d \"/d 2020-05-04 /t breakfast\";"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionCreate().execute(tagInput, storage);"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_NEW_SUCCESS, result.getFeedbackMessage());"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"    void testExecute_invalidDate_returnsResultDateWrongFormat() {"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/d 2020-1234\";"},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionCreate().execute(input, storage);"},{"lineNumber":59,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_DATE_WRONG_FORMAT, result.getFeedbackMessage());"},{"lineNumber":60,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":62,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"CFZeon"},"content":"    void testExecute_invalidInput_placeholder() {"},{"lineNumber":64,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":65,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"//d\";"},{"lineNumber":66,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":67,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionCreate().execute(input, storage);"},{"lineNumber":68,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_CREATE_WRONG_FORMAT, result.getFeedbackMessage());"},{"lineNumber":69,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"CFZeon":70}},{"path":"src/test/java/logic/commands/diet/dietmanager/DietSessionDeleteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import storage.diet.DietStorage;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_DELETE_SUCCESS;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_DELETE_WRONG_FORMAT;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_FILE_ARRAY_OUT_OF_BOUND;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"public class DietSessionDeleteTest {"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    private static String EMPTY_STRING \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"    void testExecute_validInput_success() {"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"        // to ensure there is something to delete"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        new DietSessionCreate().execute(EMPTY_STRING, storage);"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"        String deleteInput \u003d \"1\";"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionDelete().execute(deleteInput, storage);"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_DELETE_SUCCESS, result.getFeedbackMessage());"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"    void testExecute_outOfBoundsInput_resultOutOfBounds() {"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"        // to ensure there is something to delete"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"        new DietSessionCreate().execute(EMPTY_STRING, storage);"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        String deleteInput \u003d \"0\";"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionDelete().execute(deleteInput, storage);"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_FILE_ARRAY_OUT_OF_BOUND, result.getFeedbackMessage());"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"    void testExecute_wrongInput_resultDeleteWrongFormat() {"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"        // to ensure there is something to delete"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"        new DietSessionCreate().execute(EMPTY_STRING, storage);"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"        String deleteInput \u003d \"a\";"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionDelete().execute(deleteInput, storage);"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_DELETE_WRONG_FORMAT, result.getFeedbackMessage());"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"CFZeon":53}},{"path":"src/test/java/logic/commands/diet/dietmanager/DietSessionEditTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import storage.diet.DietStorage;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_EDIT_WRONG_FORMAT;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_FILE_ARRAY_OUT_OF_BOUND;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"import static ui.diet.dietmanager.DietManagerUi.DIET_NEW_SUCCESS;"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"public class DietSessionEditTest {"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"    private static String EMPTY_STRING \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"    void testExecute_validInput_success() {"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"        // to ensure there is something to edit"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        new DietSessionCreate().execute(EMPTY_STRING, storage);"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"        String editInput \u003d \"1\";"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionEdit().execute(editInput, storage);"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_NEW_SUCCESS, result.getFeedbackMessage());"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"    void testExecute_invalidInput_resultArrayOutOfBound() {"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"        // to ensure there is something to edit"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"        new DietSessionCreate().execute(EMPTY_STRING, storage);"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"        String editInput \u003d \"0\";"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionEdit().execute(editInput, storage);"},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_FILE_ARRAY_OUT_OF_BOUND, result.getFeedbackMessage());"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"    void testExecute_emptyInput_resultEditWrongFormat() {"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":"        DietStorage storage \u003d new DietStorage();"},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"        // to ensure there is something to edit"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"        new DietSessionCreate().execute(EMPTY_STRING, storage);"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"        CommandResult result \u003d new DietSessionEdit().execute(EMPTY_STRING, storage);"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":"        assertEquals(DIET_EDIT_WRONG_FORMAT, result.getFeedbackMessage());"},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"CFZeon":52}},{"path":"src/test/java/logic/commands/diet/dietmanager/DietSessionSearchTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"CFZeon"},"content":"package logic.commands.diet.dietmanager;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import exceptions.diet.InvalidSearchDateException;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":8,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"public class DietSessionSearchTest {"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputEndDateBeforeStartDate_ValidStorage_throwsInvalidSearchDateException() {"},{"lineNumber":14,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/s 2020-05-04 /e 2020-05-03\";"},{"lineNumber":15,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidSearchDateException.class, () -\u003e {"},{"lineNumber":16,"author":{"gitId":"CFZeon"},"content":"            new DietSessionSearch().execute(input, (DietStorage) null);"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":"        });"},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"    void testExecute_inputInvalidDate_throwsInvalidDateFormatException() {"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/s 2020-\";"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidDateFormatException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"            new DietSessionSearch().execute(input, (DietStorage) null);"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"CFZeon":27}},{"path":"src/test/java/logic/commands/diet/dietsession/FoodItemAddTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"import static profile.Constants.CALORIES_UPPER_BOUND;"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"public class FoodItemAddTest {"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"    ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"    DietStorage storage \u003d new DietStorage();"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"    FoodItemAdd foodItemAdd \u003d new FoodItemAdd();"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"    public void execute_correctFoodItem_addSuccessful() {"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"Noodles /c 300\";"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"        StringBuilder userOutput \u003d new StringBuilder();"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"        Food temp \u003d new Food(\"Noodles\", 300);"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"        userOutput.append(\"Yay! You have added \" + temp.toString());"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemAdd.execute(input, foodList, storage, -1);"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"        assertEquals(userOutput.toString(), result.getFeedbackMessage());"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"    public void execute_exceedMaxCalories_returnMaxCalories() {"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"Noodles /c 1000000000000\";"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"        StringBuilder userOutput \u003d new StringBuilder();"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"        Food temp \u003d new Food(\"Noodles\", CALORIES_UPPER_BOUND);"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"        userOutput.append(DietSessionUi.MESSAGE_HIGH_CALORIES);"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"        userOutput.append(\"Yay! You have added \" + temp.toString());"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemAdd.execute(input, foodList, storage, -1);"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"        assertEquals(userOutput.toString(), result.getFeedbackMessage());"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"    public void execute_noFoodName_returnNoNameWarning() {"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"/c 300\";"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"        String expected \u003d DietSessionUi.MESSAGE_NO_FOOD_NAME;"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemAdd.execute(input, foodList, storage, -1);"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"        assertEquals(expected, result.getFeedbackMessage());"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":50,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"zsk612"},"content":"    public void execute_wrongCaloriesNumber_returnNumberFormatWarning() {"},{"lineNumber":52,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"Noodles /c haha\";"},{"lineNumber":53,"author":{"gitId":"zsk612"},"content":"        String expected \u003d DietSessionUi.MESSAGE_WRONG_CALORIES;"},{"lineNumber":54,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemAdd.execute(input, foodList, storage, -1);"},{"lineNumber":55,"author":{"gitId":"zsk612"},"content":"        assertEquals(expected, result.getFeedbackMessage());"},{"lineNumber":56,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":58,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"zsk612"},"content":"    public void execute_negativeCaloriesNumber_returnNegativeCaloriesWarning() {"},{"lineNumber":60,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"Noodles /c -100\";"},{"lineNumber":61,"author":{"gitId":"zsk612"},"content":"        String expected \u003d DietSessionUi.MESSAGE_NEGATIVE_CALORIES;"},{"lineNumber":62,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemAdd.execute(input, foodList, storage, -1);"},{"lineNumber":63,"author":{"gitId":"zsk612"},"content":"        assertEquals(expected, result.getFeedbackMessage());"},{"lineNumber":64,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":65}},{"path":"src/test/java/logic/commands/diet/dietsession/FoodItemClearTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.io.InputStream;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"public class FoodItemClearTest {"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"    ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"    DietStorage storage \u003d new DietStorage();"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"    FoodItemClear foodItemClear \u003d new FoodItemClear();"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"    public void execute_clearWithYes_clearSuccessful() {"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"        Food temp \u003d new Food(\"Noodles\", 300);"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"        foodList.add(temp);"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"        String userOutput \u003d \"Alright, your food items have been cleared.\";"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"        InputStream sysInBackup \u003d System.in; // backup System.in to restore it later"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"YES\".getBytes());"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"        System.setIn(in);"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemClear.execute(input, foodList, storage, -1);"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"        assertEquals(userOutput, result.getFeedbackMessage());"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"    public void execute_clearWithoutYes_deleteAborted() {"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"        Food temp \u003d new Food(\"Noodles\", 300);"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"        foodList.add(temp);"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":"        String userOutput \u003d \"You have aborted clear operation.\";"},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"        InputStream sysInBackup \u003d System.in; // backup System.in to restore it later"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"        ByteArrayInputStream in \u003d new ByteArrayInputStream(\"NO\".getBytes());"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"        System.setIn(in);"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemClear.execute(input, foodList, storage, 1);"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"        assertEquals(userOutput, result.getFeedbackMessage());"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":46}},{"path":"src/test/java/logic/commands/diet/dietsession/FoodItemDeleteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"zsk612"},"content":"package logic.commands.diet.dietsession;"},{"lineNumber":2,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":3,"author":{"gitId":"zsk612"},"content":"import logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import models.Food;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"zsk612"},"content":"import storage.diet.DietStorage;"},{"lineNumber":7,"author":{"gitId":"zsk612"},"content":"import ui.diet.dietsession.DietSessionUi;"},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":11,"author":{"gitId":"zsk612"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"//@@author zsk612"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"public class FoodItemDeleteTest {"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"    ArrayList\u003cFood\u003e foodList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"    DietStorage storage \u003d new DietStorage();"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"    FoodItemDelete foodItemDelete \u003d new FoodItemDelete();"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":"    public void execute_correctFoodItemIndex_deleteSuccessful() {"},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":"        Food temp \u003d new Food(\"Noodles\", 300);"},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"        foodList.add(temp);"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"1\";"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"        String userOutput \u003d \"You have deleted \" + temp.toString() + \" from your list!\";"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemDelete.execute(input, foodList, storage, -1);"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"        assertEquals(userOutput, result.getFeedbackMessage());"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"zsk612"},"content":"    public void execute_wrongFoodItemIndex_returnWrongIndexWarning() {"},{"lineNumber":32,"author":{"gitId":"zsk612"},"content":"        Food temp \u003d new Food(\"Noodles\", 300);"},{"lineNumber":33,"author":{"gitId":"zsk612"},"content":"        foodList.add(temp);"},{"lineNumber":34,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"10\";"},{"lineNumber":35,"author":{"gitId":"zsk612"},"content":"        String userOutput \u003d DietSessionUi.MESSAGE_NO_SUCH_INDEX;"},{"lineNumber":36,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemDelete.execute(input, foodList, storage, -1);"},{"lineNumber":37,"author":{"gitId":"zsk612"},"content":"        assertEquals(userOutput, result.getFeedbackMessage());"},{"lineNumber":38,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":40,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"zsk612"},"content":"    public void execute_indexNotNumber_returnWrongIndexFormatWarning() {"},{"lineNumber":42,"author":{"gitId":"zsk612"},"content":"        Food temp \u003d new Food(\"Noodles\", 300);"},{"lineNumber":43,"author":{"gitId":"zsk612"},"content":"        foodList.add(temp);"},{"lineNumber":44,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"haha\";"},{"lineNumber":45,"author":{"gitId":"zsk612"},"content":"        String userOutput \u003d DietSessionUi.MESSAGE_DELETE_WRONG_FORMAT;"},{"lineNumber":46,"author":{"gitId":"zsk612"},"content":"        CommandResult result \u003d foodItemDelete.execute(input, foodList, storage, -1);"},{"lineNumber":47,"author":{"gitId":"zsk612"},"content":"        assertEquals(userOutput, result.getFeedbackMessage());"},{"lineNumber":48,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"zsk612"},"content":"}"}],"authorContributionMap":{"zsk612":49}},{"path":"src/test/java/logic/commands/main/MainEndTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"class MainEndTest {"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_throwsAssertionError() {"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"            new MainEnd().execute(null);"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_ValidStorage_throwsEndException() {"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(EndException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"            new MainEnd().execute(EMPTY_STRING);"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":25}},{"path":"src/test/java/logic/commands/main/MainHelpTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"class MainHelpTest {"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_throwsAssertionError() {"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"            new MainHelp().execute(null);"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(ExecutionResult.OK, new MainHelp().execute(EMPTY_STRING).getStatus());"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":25}},{"path":"src/test/java/logic/commands/main/MainWrongTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"class MainWrongTest {"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_throwsAssertionError() {"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"            new MainWrong().execute(null);"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_returnSuccess() {"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandWordException.class, () -\u003e {"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"            new MainWrong().execute(EMPTY_STRING);"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":25}},{"path":"src/test/java/logic/commands/main/ToDietTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"class ToDietTest {"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_throwsAssertionError() {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"            new ToDiet().execute(null);"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        CommandResult result \u003d new ToDiet().execute(EMPTY_STRING);"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(System.in);"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(ExecutionResult.OK, result.getStatus());"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":31}},{"path":"src/test/java/logic/commands/main/ToProfileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"class ToProfileTest {"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_throwsAssertionError() {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"            new ToProfile().execute(null);"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        CommandResult result \u003d new ToProfile().execute(EMPTY_STRING);"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(System.in);"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(ExecutionResult.OK, result.getStatus());"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":31}},{"path":"src/test/java/logic/commands/main/ToWorkoutTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.main;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.ExecutionResult;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"class ToWorkoutTest {"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_throwsAssertionError() {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"            new ToWorkout().execute(null);"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(new ByteArrayInputStream(\"end\".getBytes()));"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        CommandResult result \u003d new ToWorkout().execute(EMPTY_STRING);"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(System.in);"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(ExecutionResult.OK, result.getStatus());"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":31}},{"path":"src/test/java/logic/commands/profile/ProfileAddTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.SavingException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_CREATE_PROFILE_ACK;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_PROFILE_EXIST;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"class ProfileAddTest {"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path SAMPLE_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\", \"ProfileCommandsTest\");"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_PROFILE \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_noExistingProfile_inputValidArguments_ValidStorage_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/n Schwarzenegger /h 188 /w 113 /e 100 /c 2500\";"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(null);"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_CREATE_PROFILE_ACK, SAMPLE_PROFILE.toString());"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, new ProfileAdd().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputValidArguments_ValidStorage_returnFailure()"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/n Schwarzenegger /h 188 /w 113 /e 100 /c 2500\";"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(MESSAGE_PROFILE_EXIST, new ProfileAdd().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_noExistingProfile_inputEmptyArguments_ValidStorage_throwsInvalidCommandFormatException()"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"            throws SavingException {"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(null);"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e {"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileAdd().execute(EMPTY_STRING, storage);"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_ValidStorage_throwsAssertionError() {"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileAdd().execute(null, storage);"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsAssertionError() {"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileAdd().execute(EMPTY_STRING, (ProfileStorage) null);"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":79}},{"path":"src/test/java/logic/commands/profile/ProfileDeleteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_DELETE_NOTHING;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_DELETE_PROFILE;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import static ui.workout.workoutmanager.WorkoutManagerUi.CLEAR_ABORTED;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"class ProfileDeleteTest {"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path SAMPLE_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\", \"ProfileCommandsTest\");"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_PROFILE \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_ValidStorage_throwsAssertionError() {"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileDelete().execute(null, new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile));"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsAssertionError() {"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileDelete().execute(EMPTY_STRING, (ProfileStorage) null);"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputYes_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(new ByteArrayInputStream(\"YES\".getBytes()));"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"        CommandResult result \u003d new ProfileDelete().execute(EMPTY_STRING, storage);"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(System.in);"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(MESSAGE_DELETE_PROFILE, result.getFeedbackMessage());"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputDifferentFromYes_returnFailure() throws SchwarzeneggerException {"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(new ByteArrayInputStream(\"some input different from YES\".getBytes()));"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"        CommandResult result \u003d new ProfileDelete().execute(EMPTY_STRING, storage);"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(System.in);"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(CLEAR_ABORTED, result.getFeedbackMessage());"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_noExistingProfile_returnFailure() throws SchwarzeneggerException {"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(null);"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(MESSAGE_DELETE_NOTHING, new ProfileDelete().execute(EMPTY_STRING, storage).getFeedbackMessage());"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":80}},{"path":"src/test/java/logic/commands/profile/ProfileEditTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.SavingException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.CALORIES_UPPER_BOUND;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_EDIT;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_EDIT_NOTHING;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_EDIT_PROFILE_ACK;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_PROFILE_NOT_EXIST;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"class ProfileEditTest {"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path SAMPLE_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\", \"ProfileCommandsTest\");"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_PROFILE \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_ValidStorage_throwsAssertionError() {"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileEdit().execute(null, storage);"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsAssertionError() {"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileEdit().execute(EMPTY_STRING, (ProfileStorage) null);"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_noExistingProfile_inputValidArguments_ValidStorage_returnFailure() throws SchwarzeneggerException {"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/n Arnold\";"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(null);"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_EDIT),"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"                new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputEmptyArguments_ValidStorage_throwsInvalidCommandFormatException()"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"            throws SavingException {"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e {"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileEdit().execute(EMPTY_STRING, storage);"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputEditName_ValidStorage_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/n Arnold\";"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"        Profile editedProfile \u003d new Profile(\"Arnold\", EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString());"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputEditHeight_ValidStorage_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/h 200\";"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"        Profile editedProfile \u003d new Profile(EXAMPLE_NAME, 200, EXAMPLE_WEIGHT,"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString());"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputEditWeight_ValidStorage_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/w 200\";"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"        Profile editedProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 200,"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString());"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputEditExpectedWeight_ValidStorage_returnSuccess()"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/e 200\";"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"        Profile editedProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, 200, EXAMPLE_CALORIES);"},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString());"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputEditCaloriesToUpperBound_ValidStorage_returnSuccess()"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/c 200000\";"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":"        Profile editedProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, CALORIES_UPPER_BOUND);"},{"lineNumber":134,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString());"},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":136,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":138,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputEditCaloriesMoreThanUpperBound_ValidStorage_returnSuccess()"},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":141,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/c 200001\";"},{"lineNumber":142,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":143,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":144,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":145,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":146,"author":{"gitId":"tienkhoa16"},"content":"        Profile editedProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, CALORIES_UPPER_BOUND);"},{"lineNumber":148,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString());"},{"lineNumber":149,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":150,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_inputSameInformation_ValidStorage_returnFailure()"},{"lineNumber":154,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":155,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/n Schwarzenegger\";"},{"lineNumber":156,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":157,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":158,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":159,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":160,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(MESSAGE_EDIT_NOTHING, new ProfileEdit().execute(commandArgs, storage).getFeedbackMessage());"},{"lineNumber":161,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":161,"wgzesg":1}},{"path":"src/test/java/logic/commands/profile/ProfileEndTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"class ProfileEndTest {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path SAMPLE_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\", \"ProfileCommandsTest\");"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_ValidStorage_throwsAssertionError() {"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileEnd().execute(null, new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile));"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsAssertionError() {"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileEnd().execute(EMPTY_STRING, (ProfileStorage) null);"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputValidArguments_ValidStorage_throwsEndException() {"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(EndException.class, () -\u003e {"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileEnd().execute(EMPTY_STRING, new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile));"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":39}},{"path":"src/test/java/logic/commands/profile/ProfileHelpTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import org.apache.commons.lang3.StringUtils;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.ADD_PROFILE_FORMAT;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EDIT_PROFILE_FORMAT;"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_ADD;"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_DELETE;"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_EDIT;"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_END;"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_VIEW;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.helpFormatter;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"class ProfileHelpTest {"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path SAMPLE_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\", \"ProfileCommandsTest\");"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_ValidStorage_throwsAssertionError() {"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileHelp().execute(null, storage);"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsAssertionError() {"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileHelp().execute(EMPTY_STRING, (ProfileStorage) null);"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_ValidStorage_returnHelpMessage() throws SchwarzeneggerException {"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        StringBuilder helpMessage \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_ADD), ADD_PROFILE_FORMAT,"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"                \"Add your new profile\"));"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_VIEW), COMMAND_WORD_VIEW,"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"                \"View your profile\"));"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_EDIT), EDIT_PROFILE_FORMAT,"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"                \"Edit your existing profile. You may edit from 1 field to all fields\"));"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_DELETE), COMMAND_WORD_DELETE,"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"                \"Delete your existing profile\"));"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_END), COMMAND_WORD_END,"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"                \"Go back to Main Menu\"));"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_DATA_FOLDER, dataFile);"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(helpMessage.toString().trim(),"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"                new ProfileHelp().execute(EMPTY_STRING, storage).getFeedbackMessage());"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":57,"wgzesg":5}},{"path":"src/test/java/logic/commands/profile/ProfileViewTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_VIEW;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_ENOUGH_CALORIES;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_MORE_CALORIES;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_PROFILE_NOT_EXIST;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_SET_EXPECTED_WEIGHT;"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_VIEW_PROFILE;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"class ProfileViewTest {"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    private static final String SAMPLE_DIET_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\","},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"            \"ProfileCommandsTest\", \"diet\").toString() + \"/\";"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path SAMPLE_PROFILE_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\","},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"            \"ProfileCommandsTest\");"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    private static final double EXAMPLE_NORMAL_EXPECTED_WEIGHT \u003d 76.7;"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    private static final double EXAMPLE_UNDERWEIGHT_EXPECTED_WEIGHT \u003d 40;"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    private static final double EXAMPLE_OBESITY_EXPECTED_WEIGHT \u003d 100;"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_NORMAL_EXPECTED_WEIGHT_PROFILE \u003d new Profile(EXAMPLE_NAME,"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_NORMAL_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_UNDERWEIGHT_EXPECTED_WEIGHT_PROFILE \u003d new Profile(EXAMPLE_NAME,"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_UNDERWEIGHT_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_OBESITY_EXPECTED_WEIGHT_PROFILE \u003d new Profile(EXAMPLE_NAME,"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_OBESITY_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_ValidStorage_throwsAssertionError() {"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, dataFile);"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileView().execute(null, storage);"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsAssertionError() {"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileView().execute(EMPTY_STRING, (ProfileStorage) null);"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_noExistingProfile_inputEmptyArguments_ValidStorage_returnFailure() throws SchwarzeneggerException {"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, dataFile);"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(null);"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(String.format(MESSAGE_PROFILE_NOT_EXIST, COMMAND_WORD_VIEW),"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"                new ProfileView().execute(EMPTY_STRING, storage).getFeedbackMessage());"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_notReachedTarget_normalWeight_inputEmptyArguments_ValidStorage_returnSuccess()"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"        Path profileDataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, profileDataFile);"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_NORMAL_EXPECTED_WEIGHT_PROFILE);"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"        String sampleCaloriesMsg \u003d String.format(MESSAGE_MORE_CALORIES, 2200.0);"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(String.format(MESSAGE_VIEW_PROFILE, SAMPLE_NORMAL_EXPECTED_WEIGHT_PROFILE.toString(),"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"                sampleCaloriesMsg, EMPTY_STRING).trim(),"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"                new ProfileView(SAMPLE_DIET_DATA_FOLDER, LocalDate.of(2020, 11, 8))"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"                        .execute(EMPTY_STRING, storage).getFeedbackMessage());"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_reachedTarget_normalWeight_inputEmptyArguments_ValidStorage_returnSuccess()"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"        Path profileDataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, profileDataFile);"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_NORMAL_EXPECTED_WEIGHT_PROFILE);"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(String.format(MESSAGE_VIEW_PROFILE, SAMPLE_NORMAL_EXPECTED_WEIGHT_PROFILE.toString(),"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"                MESSAGE_ENOUGH_CALORIES, EMPTY_STRING).trim(),"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"                new ProfileView(SAMPLE_DIET_DATA_FOLDER, LocalDate.of(2020, 11, 7))"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"                        .execute(EMPTY_STRING, storage).getFeedbackMessage());"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_reachedTarget_underWeight_inputEmptyArguments_ValidStorage_returnSuccess()"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"        Path profileDataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, profileDataFile);"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_UNDERWEIGHT_EXPECTED_WEIGHT_PROFILE);"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"        String weightTip \u003d String.format(MESSAGE_SET_EXPECTED_WEIGHT,"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_NORMAL_EXPECTED_WEIGHT, EXAMPLE_NORMAL_EXPECTED_WEIGHT);"},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(String.format(MESSAGE_VIEW_PROFILE, SAMPLE_UNDERWEIGHT_EXPECTED_WEIGHT_PROFILE.toString(),"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"                MESSAGE_ENOUGH_CALORIES, weightTip).trim(),"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"                new ProfileView(SAMPLE_DIET_DATA_FOLDER, LocalDate.of(2020, 11, 7))"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"                        .execute(EMPTY_STRING, storage).getFeedbackMessage());"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_hasExistingProfile_reachedTarget_obesity_inputEmptyArguments_ValidStorage_returnSuccess()"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        Path profileDataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, profileDataFile);"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_OBESITY_EXPECTED_WEIGHT_PROFILE);"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"        String weightTip \u003d String.format(MESSAGE_SET_EXPECTED_WEIGHT,"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_NORMAL_EXPECTED_WEIGHT, EXAMPLE_NORMAL_EXPECTED_WEIGHT);"},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(String.format(MESSAGE_VIEW_PROFILE, SAMPLE_OBESITY_EXPECTED_WEIGHT_PROFILE.toString(),"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"                MESSAGE_ENOUGH_CALORIES, weightTip).trim(),"},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":"                new ProfileView(SAMPLE_DIET_DATA_FOLDER, LocalDate.of(2020, 11, 7))"},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"                        .execute(EMPTY_STRING, storage).getFeedbackMessage());"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":126,"wgzesg":1}},{"path":"src/test/java/logic/commands/profile/ProfileWrongTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"class ProfileWrongTest {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path SAMPLE_PROFILE_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\","},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"            \"ProfileCommandsTest\");"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputNullArguments_ValidStorage_throwsAssertionError() {"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, dataFile);"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileWrong().execute(null, storage);"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_NullStorage_throwsAssertionError() {"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileWrong().execute(EMPTY_STRING, (ProfileStorage) null);"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    void testExecute_inputEmptyArguments_ValidStorage_throwsInvalidCommandWordException() {"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"        Path dataFile \u003d Paths.get(SAMPLE_PROFILE_DATA_FOLDER.toString(), \"profileDataFile.json\");"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(SAMPLE_PROFILE_DATA_FOLDER, dataFile);"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandWordException.class, () -\u003e {"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"            new ProfileWrong().execute(EMPTY_STRING, storage);"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":42}},{"path":"src/test/java/logic/commands/workout/workoutsession/WorkoutSessionAddTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import org.apache.commons.lang3.builder.EqualsBuilder;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkOutManagerStorage;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionAddTest {"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    void execute_validInput_success() throws SchwIoException {"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputs \u003d {\"add\", \"bench\", \"/n\", \"3244\", \"/w\", \"4324\"};"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionAdd.execute(inputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"Yay! You have added bench to your list.\\n\""},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t [Repetitions: 3244 || Weight: 4324.0]\");"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    void execute_invalidInput_formatError() throws SchwIoException {"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputs \u003d {\"add\", \"bench\", \"3244\", \"/w\", \"4324\"};"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionAdd.execute(inputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"Wrong format, please enter in the format:\\n\""},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\");"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"    void execute_invalidInput_negativeFormatError() throws SchwIoException {"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputs \u003d {\"add\", \"bench\", \"/n\", \"-3244\", \"/w\", \"4324\"};"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionAdd.execute(inputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"Wrong format, please enter in the format:\\n\""},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\\n\""},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t Please make sure [NUMBER_OF_REPETITIONS] and [WEIGHT] are non negative numbers.\");"},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert() {"},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":75,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":76,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionAdd.execute(null, null, null, null, null);"},{"lineNumber":77,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":80,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert1() throws SchwIoException {"},{"lineNumber":82,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":83,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":84,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputs \u003d {\"add\", \"bench\", \"/n\", \"-3244\", \"/w\", \"4324\"};"},{"lineNumber":85,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":86,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":87,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionAdd.execute(inputs, null, null, null, null);"},{"lineNumber":88,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":89,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":91,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert3() throws SchwIoException {"},{"lineNumber":93,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":94,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":95,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputs \u003d {\"add\", \"bench\", \"/n\", \"-3244\", \"/w\", \"4324\"};"},{"lineNumber":96,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":97,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":98,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":99,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionAdd.execute(inputs, exerciseList, filePath, null, null);"},{"lineNumber":100,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":101,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":101,"tienkhoa16":1}},{"path":"src/test/java/logic/commands/workout/workoutsession/WorkoutSessionDeleteTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import org.apache.commons.lang3.builder.EqualsBuilder;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkOutManagerStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionDeleteTest {"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    void execute_validInput_success() throws SchwIoException {"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"        String[] addInputs \u003d {\"add\", \"bench\", \"/n\", \"3244\", \"/w\", \"4324\"};"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        String[] deleteInputs \u003d {\"delete\", \"1\"};"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"        workoutSessionAdd.execute(addInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionDelete workoutSessionDelete \u003d new WorkoutSessionDelete();"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionDelete.execute(deleteInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"You have deleted bench from your list!\\n\""},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t [Repetitions: 3244 || Weight: 4324.0]\");"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"    void execute_invalidInput_formatError() throws SchwIoException {"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        String[] addInputs \u003d {\"add\", \"bench\", \"/n\", \"3244\", \"/w\", \"4324\"};"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"        String[] deleteInputs \u003d {\"delete\", \"fsdg\"};"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"        workoutSessionAdd.execute(addInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionDelete workoutSessionDelete \u003d new WorkoutSessionDelete();"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionDelete.execute(deleteInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"Wrong format, please enter in the format:\\n\""},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t delete [INDEX]\");"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"    void execute_invalidInput_indexError() throws SchwIoException {"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"        String[] addInputs \u003d {\"add\", \"bench\", \"/n\", \"3244\", \"/w\", \"4324\"};"},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"        String[] deleteInputs \u003d {\"delete\", \"10\"};"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionAdd workoutSessionAdd \u003d new WorkoutSessionAdd();"},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"        workoutSessionAdd.execute(addInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionDelete workoutSessionDelete \u003d new WorkoutSessionDelete();"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionDelete.execute(deleteInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":74,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":75,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"Index does not exist. Please refer to the list.\");"},{"lineNumber":76,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":77,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":79,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert() {"},{"lineNumber":81,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionDelete workoutSessionDelete \u003d new WorkoutSessionDelete();"},{"lineNumber":82,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":83,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionDelete.execute(null, null, null, null, null);"},{"lineNumber":84,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":85,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":87,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":87}},{"path":"src/test/java/logic/commands/workout/workoutsession/WorkoutSessionEndTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import org.apache.commons.lang3.builder.EqualsBuilder;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkOutManagerStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionEndTest {"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    void execute_validInput_success() throws SchwIoException {"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"        String[] input \u003d {\"end\"};"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionEnd workoutSessionEnd \u003d new WorkoutSessionEnd();"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionEnd.execute(input, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"\");"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert() {"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionEnd workoutSessionEnd \u003d new WorkoutSessionEnd();"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionEnd.execute(null, null, null, null, null);"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":41}},{"path":"src/test/java/logic/commands/workout/workoutsession/WorkoutSessionHelpTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import org.apache.commons.lang3.builder.EqualsBuilder;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkOutManagerStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import ui.workout.workoutsession.WorkoutSessionUi;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionHelpTest {"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"    void execute_validInput_success() throws SchwIoException {"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        String[] input \u003d {\"help\"};"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionHelp workoutSessionHelp \u003d new WorkoutSessionHelp();"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionHelp.execute(input, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(WorkoutSessionUi.printHelp());"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert() {"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionHelp workoutSessionHelp \u003d new WorkoutSessionHelp();"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionHelp.execute(null, null, null, null, null);"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":42}},{"path":"src/test/java/logic/commands/workout/workoutsession/WorkoutSessionListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import org.apache.commons.lang3.builder.EqualsBuilder;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkOutManagerStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionListTest {"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    void execute_validInput_emptyList() throws SchwIoException {"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"        String[] input \u003d {\"list\"};"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionList workoutSessionList \u003d new WorkoutSessionList();"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionList.execute(input, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"List is empty. Please enter something.\");"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert() {"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionList workoutSessionList \u003d new WorkoutSessionList();"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionList.execute(null, null, null, null, null);"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":41}},{"path":"src/test/java/logic/commands/workout/workoutsession/WorkoutSessionSearchTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package logic.commands.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import org.apache.commons.lang3.builder.EqualsBuilder;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkOutManagerStorage;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"import storage.workout.WorkoutSessionStorage;"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionSearchTest {"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    void execute_validInput_success() throws SchwIoException {"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"        String[] searchInputs \u003d {\"search\", \"ben\"};"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionSearch workoutSessionSearch \u003d new WorkoutSessionSearch();"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionSearch.execute(searchInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"No matching result has been found.\");"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"    void execute_emptyInput_success() throws SchwIoException {"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        String[] searchInputs \u003d {\"search\"};"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList exerciseList \u003d new ExerciseList();"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"        boolean[] hasEndedWorkoutSessions \u003d {false};"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionSearch workoutSessionSearch \u003d new WorkoutSessionSearch();"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult actual \u003d workoutSessionSearch.execute(searchInputs, exerciseList, filePath, workoutSessionStorage,"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"                hasEndedWorkoutSessions);"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"        CommandResult expected \u003d new CommandResult(\"Wrong format, please enter in the format:\\n\""},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t search [NAME_OF_MOVE]\");"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"    void execute_nullParams_assert() {"},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionSearch workoutSessionSearch \u003d new WorkoutSessionSearch();"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"            workoutSessionSearch.execute(null, null, null, null, null);"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"        });"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":57}},{"path":"src/test/java/logic/parser/CommonParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"class CommonParserTest {"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"    void testParseCommand_inputTwoWords_returnNonEmptyStringInSecondElement() {"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"        CommonParser parser \u003d new CommonParser();"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"        String rawUserInput \u003d \"add /n\";"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"        String[] expectedSplit \u003d {\"add\", \"/n\"};"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(Arrays.toString(expectedSplit),"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"                Arrays.toString(parser.parseCommand(rawUserInput)));"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    void testParseCommand_inputThreeWords_returnNonEmptyStringInSecondElement() {"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"        CommonParser parser \u003d new CommonParser();"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        String rawUserInput \u003d \"add /n test\";"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        String[] expectedSplit \u003d {\"add\", \"/n test\"};"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(Arrays.toString(expectedSplit),"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"                Arrays.toString(parser.parseCommand(rawUserInput)));"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    void testParseCommand_inputOneWord_returnEmptyStringInSecondElement() {"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"        CommonParser parser \u003d new CommonParser();"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        String rawUserInput \u003d \"add\";"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        String[] expectedSplit \u003d {\"add\", EMPTY_STRING};"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(Arrays.toString(expectedSplit),"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"                Arrays.toString(parser.parseCommand(rawUserInput)));"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"    void testParseCommand_inputEmptyString_throwsAssertionError() {"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        CommonParser parser \u003d new CommonParser();"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"            parser.parseCommand(EMPTY_STRING);"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"    void testParseCommand_inputNull_throwsAssertionError() {"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"        CommonParser parser \u003d new CommonParser();"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"            parser.parseCommand(null);"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":60}},{"path":"src/test/java/logic/parser/DateParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"wgzesg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DateParser;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"class DateParserTest {"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"    void parseDate_correctFormat_returnParsedDate() {"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":"        LocalDateTime dt \u003d LocalDateTime.of(2020, 10, 22, 0, 0);"},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"            String in1 \u003d \"20201022\";"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":"            assertEquals(dt, DateParser.parseDate(in1));"},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"            String in2 \u003d \"2020-10-22\";"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"            assertEquals(dt, DateParser.parseDate(in2));"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"            String in3 \u003d \"2020 10 22\";"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"            assertEquals(dt, DateParser.parseDate(in3));"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"    void parseDate_wrongFormat_returnNull() {"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"        assertThrows(InvalidDateFormatException.class, () -\u003e DateParser.parseDate(\"2020:10:22\"));"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"    void parseDate_invalidDate_throwsInvalidDateFormatException() {"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"        assertThrows(InvalidDateFormatException.class, () -\u003e DateParser.parseDate(\"20202131\"));"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"tienkhoa16":1,"wgzesg":41}},{"path":"src/test/java/logic/parser/DietManagerParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"CFZeon"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"CFZeon"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":5,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"zsk612"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":13,"author":{"gitId":"CFZeon"},"content":"import static logic.parser.ProfileParser.extractCommandTagAndInfo;"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":17,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":18,"author":{"gitId":"CFZeon"},"content":"//@@author CFZeon"},{"lineNumber":19,"author":{"gitId":"CFZeon"},"content":"public class DietManagerParserTest {"},{"lineNumber":20,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":21,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"CFZeon"},"content":"    void parseString_validInput_success() {"},{"lineNumber":23,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"first second\";"},{"lineNumber":24,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":25,"author":{"gitId":"CFZeon"},"content":"        String[] expected \u003d {\"first\", \"second\"};"},{"lineNumber":26,"author":{"gitId":"CFZeon"},"content":"        String[] result \u003d parser.parseCommand(input);"},{"lineNumber":27,"author":{"gitId":"CFZeon"},"content":"        assertTrue(Arrays.equals(expected, result));"},{"lineNumber":28,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":30,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"    void parseString_invalidInput_failure() {"},{"lineNumber":32,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"FirstSecond\";"},{"lineNumber":33,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":34,"author":{"gitId":"CFZeon"},"content":"        String[] expected \u003d {\"First\", \"Second\"};"},{"lineNumber":35,"author":{"gitId":"CFZeon"},"content":"        String[] result \u003d parser.parseCommand(input);"},{"lineNumber":36,"author":{"gitId":"CFZeon"},"content":"        Assertions.assertFalse(Arrays.equals(expected, result));"},{"lineNumber":37,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":39,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"CFZeon"},"content":"    void extractTagAndInfo_missingSlashInput_success() {"},{"lineNumber":41,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e"},{"lineNumber":42,"author":{"gitId":"CFZeon"},"content":"                extractCommandTagAndInfo(\"search\", \"t breakfast\"));"},{"lineNumber":43,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":45,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"CFZeon"},"content":"    void extractTagAndInfo_multipleSlashInput_throwInvalidCommandFormatException() {"},{"lineNumber":47,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e"},{"lineNumber":48,"author":{"gitId":"CFZeon"},"content":"                extractCommandTagAndInfo(\"search\", \"//t breakfast\"));"},{"lineNumber":49,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":51,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"CFZeon"},"content":"    void extractTagAndInfo_wrongCommandFormatInput_throwInvalidCommandFormatException() {"},{"lineNumber":53,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e"},{"lineNumber":54,"author":{"gitId":"CFZeon"},"content":"                extractCommandTagAndInfo(\"search\", \"j\"));"},{"lineNumber":55,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":57,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"CFZeon"},"content":"    void extractNewDate_validDateInput_success() throws InvalidCommandFormatException, InvalidDateFormatException {"},{"lineNumber":59,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/d 2020-05-04\";"},{"lineNumber":60,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d \"04-05-2020\";"},{"lineNumber":61,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":62,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":63,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":64,"author":{"gitId":"CFZeon"},"content":"        String extractedDate \u003d parser.extractNewDate(parsedParams, message);"},{"lineNumber":65,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedDate);"},{"lineNumber":66,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":68,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"CFZeon"},"content":"    void extractNewDate_invalidDateInput_throwInvalidDateFormatException() throws InvalidCommandFormatException {"},{"lineNumber":70,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/d 2131-14-51\";"},{"lineNumber":71,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":73,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":74,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidDateFormatException.class, () -\u003e"},{"lineNumber":75,"author":{"gitId":"CFZeon"},"content":"                parser.extractNewDate(parsedParams, message));"},{"lineNumber":76,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":78,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"CFZeon"},"content":"    void extractNewDate_emptyDateInput_returnCurrentDate() throws InvalidCommandFormatException,"},{"lineNumber":80,"author":{"gitId":"CFZeon"},"content":"            InvalidDateFormatException {"},{"lineNumber":81,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/d \";"},{"lineNumber":82,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":83,"author":{"gitId":"CFZeon"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":84,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d dtf.format(now);"},{"lineNumber":85,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":86,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":87,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":88,"author":{"gitId":"CFZeon"},"content":"        String extractedDate \u003d parser.extractNewDate(parsedParams, message);"},{"lineNumber":89,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedDate);"},{"lineNumber":90,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":92,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"CFZeon"},"content":"    void extractNewDate_noDateInputDetected_returnCurrentDate() throws InvalidCommandFormatException,"},{"lineNumber":94,"author":{"gitId":"CFZeon"},"content":"            InvalidDateFormatException {"},{"lineNumber":95,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"\";"},{"lineNumber":96,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":97,"author":{"gitId":"CFZeon"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":98,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d dtf.format(now);"},{"lineNumber":99,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":100,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":101,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":102,"author":{"gitId":"CFZeon"},"content":"        String extractedDate \u003d parser.extractNewDate(parsedParams, message);"},{"lineNumber":103,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedDate);"},{"lineNumber":104,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":106,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"CFZeon"},"content":"    void extractSearchTag_validTagInput_success() throws InvalidCommandFormatException {"},{"lineNumber":108,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/t lunch\";"},{"lineNumber":109,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d \"lunch\";"},{"lineNumber":110,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":111,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":112,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":113,"author":{"gitId":"CFZeon"},"content":"        String extractedTag \u003d parser.extractSearchTag(parsedParams, message);"},{"lineNumber":114,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedTag);"},{"lineNumber":115,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":117,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"CFZeon"},"content":"    void extractSearchTag_noTagInputDetected_returnDefaultTag() throws InvalidCommandFormatException {"},{"lineNumber":119,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/s 2020-11-11 /e 2020-11-23\";"},{"lineNumber":120,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d \"\";"},{"lineNumber":121,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":122,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":123,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":124,"author":{"gitId":"CFZeon"},"content":"        String extractedTag \u003d parser.extractSearchTag(parsedParams, message);"},{"lineNumber":125,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedTag);"},{"lineNumber":126,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":128,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"CFZeon"},"content":"    void extractNewTag_validTagInput_success() throws InvalidCommandFormatException {"},{"lineNumber":130,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/t lunch\";"},{"lineNumber":131,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d \"lunch\";"},{"lineNumber":132,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":133,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":134,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":135,"author":{"gitId":"CFZeon"},"content":"        String extractedTag \u003d parser.extractNewTag(parsedParams, message);"},{"lineNumber":136,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedTag);"},{"lineNumber":137,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":139,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"CFZeon"},"content":"    void extractNewTag_emptyTagInput_returnDefaultTag() throws InvalidCommandFormatException {"},{"lineNumber":141,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/t \";"},{"lineNumber":142,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d \"unspecified\";"},{"lineNumber":143,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":144,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":145,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":146,"author":{"gitId":"CFZeon"},"content":"        String extractedTag \u003d parser.extractNewTag(parsedParams, message);"},{"lineNumber":147,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedTag);"},{"lineNumber":148,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":150,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"CFZeon"},"content":"    void extractNewTag_noTagInputDetected_returnDefaultTag() throws InvalidCommandFormatException {"},{"lineNumber":152,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"\";"},{"lineNumber":153,"author":{"gitId":"CFZeon"},"content":"        String expected \u003d \"unspecified\";"},{"lineNumber":154,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":155,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":156,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"new\", input);"},{"lineNumber":157,"author":{"gitId":"CFZeon"},"content":"        String extractedTag \u003d parser.extractNewTag(parsedParams, message);"},{"lineNumber":158,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedTag);"},{"lineNumber":159,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":161,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"CFZeon"},"content":"    void extractStartDates_correctDateInput_success()"},{"lineNumber":163,"author":{"gitId":"CFZeon"},"content":"            throws InvalidDateFormatException, InvalidCommandFormatException {"},{"lineNumber":164,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/s 2020-11-02\";"},{"lineNumber":165,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime expected \u003d DateParser.parseDate(\"2020-11-02\");"},{"lineNumber":166,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":167,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":168,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":169,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime extractedDate \u003d parser.extractStartDates(parsedParams, message);"},{"lineNumber":170,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedDate);"},{"lineNumber":171,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":173,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"CFZeon"},"content":"    void extractStartDates_noDateInputDetected_returnDefaultDate()"},{"lineNumber":175,"author":{"gitId":"CFZeon"},"content":"            throws InvalidDateFormatException, InvalidCommandFormatException {"},{"lineNumber":176,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/e 2020-11-11 /t lunch\";"},{"lineNumber":177,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime expected \u003d DateParser.parseDate(\"0001-01-01\");"},{"lineNumber":178,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":179,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":180,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":181,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime extractedDate \u003d parser.extractStartDates(parsedParams, message);"},{"lineNumber":182,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedDate);"},{"lineNumber":183,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":185,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"CFZeon"},"content":"    void extractStartDates_invalidDateInput_throwInvalidDateFormatException() throws InvalidCommandFormatException {"},{"lineNumber":187,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/s 2131-14-51\";"},{"lineNumber":188,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":189,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":190,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":191,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidDateFormatException.class, () -\u003e"},{"lineNumber":192,"author":{"gitId":"CFZeon"},"content":"                parser.extractStartDates(parsedParams, message));"},{"lineNumber":193,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":195,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"CFZeon"},"content":"    void extractEndDates_correctDateInput_success()"},{"lineNumber":197,"author":{"gitId":"CFZeon"},"content":"            throws InvalidDateFormatException, InvalidCommandFormatException {"},{"lineNumber":198,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/e 2020-11-02\";"},{"lineNumber":199,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime expected \u003d DateParser.parseDate(\"2020-11-02\");"},{"lineNumber":200,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":201,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":202,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":203,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime extractedDate \u003d parser.extractEndDates(parsedParams, message);"},{"lineNumber":204,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedDate);"},{"lineNumber":205,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":207,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":208,"author":{"gitId":"CFZeon"},"content":"    void extractEndDates_noDateInputDetected_returnDefaultDate()"},{"lineNumber":209,"author":{"gitId":"CFZeon"},"content":"            throws InvalidDateFormatException, InvalidCommandFormatException {"},{"lineNumber":210,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/s 2020-11-11 /t lunch\";"},{"lineNumber":211,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime expected \u003d DateParser.parseDate(\"9999-12-12\");"},{"lineNumber":212,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":213,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":214,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":215,"author":{"gitId":"CFZeon"},"content":"        LocalDateTime extractedDate \u003d parser.extractEndDates(parsedParams, message);"},{"lineNumber":216,"author":{"gitId":"CFZeon"},"content":"        assertEquals(expected, extractedDate);"},{"lineNumber":217,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":219,"author":{"gitId":"CFZeon"},"content":"    @Test"},{"lineNumber":220,"author":{"gitId":"CFZeon"},"content":"    void extractEndDates_invalidDateInput_throwInvalidDateFormatException() throws InvalidCommandFormatException {"},{"lineNumber":221,"author":{"gitId":"CFZeon"},"content":"        String input \u003d \"/e 2131-14-51\";"},{"lineNumber":222,"author":{"gitId":"CFZeon"},"content":"        StringBuilder message \u003d new StringBuilder();"},{"lineNumber":223,"author":{"gitId":"CFZeon"},"content":"        DietManagerParser parser \u003d new DietManagerParser();"},{"lineNumber":224,"author":{"gitId":"CFZeon"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d parser.extractDietManagerCommandTagAndInfo(\"search\", input);"},{"lineNumber":225,"author":{"gitId":"CFZeon"},"content":"        assertThrows(InvalidDateFormatException.class, () -\u003e"},{"lineNumber":226,"author":{"gitId":"CFZeon"},"content":"                parser.extractEndDates(parsedParams, message));"},{"lineNumber":227,"author":{"gitId":"CFZeon"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":5,"tienkhoa16":1,"CFZeon":222}},{"path":"src/test/java/logic/parser/DietSessionParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.DietSessionParser;"},{"lineNumber":4,"author":{"gitId":"zsk612"},"content":"import exceptions.diet.NegativeCaloriesException;"},{"lineNumber":5,"author":{"gitId":"zsk612"},"content":"import exceptions.diet.NoNameException;"},{"lineNumber":6,"author":{"gitId":"CFZeon"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":8,"author":{"gitId":"zsk612"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"CFZeon"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"CFZeon"},"content":""},{"lineNumber":11,"author":{"gitId":"CFZeon"},"content":"public class DietSessionParserTest {"},{"lineNumber":12,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":13,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"zsk612"},"content":"    void processFoodName_ValidInput_Success() throws NoNameException {"},{"lineNumber":15,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"Food /c 123\";"},{"lineNumber":16,"author":{"gitId":"zsk612"},"content":"        DietSessionParser parser \u003d new DietSessionParser();"},{"lineNumber":17,"author":{"gitId":"zsk612"},"content":"        String expected \u003d \"Food\";"},{"lineNumber":18,"author":{"gitId":"zsk612"},"content":"        String result \u003d parser.processFoodName(input);"},{"lineNumber":19,"author":{"gitId":"zsk612"},"content":"        assertEquals(expected, result);"},{"lineNumber":20,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":22,"author":{"gitId":"zsk612"},"content":""},{"lineNumber":23,"author":{"gitId":"zsk612"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"zsk612"},"content":"    void processFoodCalories_ValidInput_Success() throws NegativeCaloriesException {"},{"lineNumber":25,"author":{"gitId":"zsk612"},"content":"        String input \u003d \"Food /c 123\";"},{"lineNumber":26,"author":{"gitId":"zsk612"},"content":"        DietSessionParser parser \u003d new DietSessionParser();"},{"lineNumber":27,"author":{"gitId":"zsk612"},"content":"        Double expected \u003d 123.0;"},{"lineNumber":28,"author":{"gitId":"zsk612"},"content":"        double result \u003d parser.processFoodCalories(input);"},{"lineNumber":29,"author":{"gitId":"zsk612"},"content":"        assertEquals(expected, result);"},{"lineNumber":30,"author":{"gitId":"zsk612"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"CFZeon"},"content":"}"}],"authorContributionMap":{"zsk612":22,"yujinyang1998":1,"tienkhoa16":1,"CFZeon":7}},{"path":"src/test/java/logic/parser/ProfileParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static logic.parser.ProfileParser.extractCommandTagAndInfo;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"class ProfileParserTest {"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"    void testExtractCommandTagAndInfo_missingSlashInput_throwInvalidCommandFormatException() {"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"                extractCommandTagAndInfo(\"add\", \"add n Schwarzenegger\"));"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    void testExtractCommandTagAndInfo_excessiveSlashInput_throwInvalidCommandFormatException() {"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"                extractCommandTagAndInfo(\"add\", \"add //n Schwarzenegger\"));"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    void testExtractCommandTagAndInfo_validInput_returnValidParsedParams() throws SchwarzeneggerException {"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        HashMap\u003cString, String\u003e parsedParams \u003d new HashMap\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"        parsedParams.put(\"/n\", \"Schwarzenegger\");"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        parsedParams.put(\"/c\", \"2500\");"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        parsedParams.put(\"/h\", \"188\");"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        parsedParams.put(\"/w\", \"113\");"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"        parsedParams.put(\"/e\", \"100\");"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        String command \u003d \"add\";"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        String commandArgs \u003d \"/n Schwarzenegger /c 2500 /h 188 /w 113 /e 100\";"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(parsedParams.toString(), extractCommandTagAndInfo(command, commandArgs).toString());"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":42}},{"path":"src/test/java/logic/parser/WorkoutManagerParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wgzesg"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":3,"author":{"gitId":"wgzesg"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.NotANumberException;"},{"lineNumber":5,"author":{"gitId":"wgzesg"},"content":"import models.PastWorkoutSessionRecord;"},{"lineNumber":6,"author":{"gitId":"wgzesg"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":8,"author":{"gitId":"wgzesg"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"wgzesg"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"wgzesg"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"wgzesg"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"wgzesg"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":14,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;"},{"lineNumber":15,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":16,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":17,"author":{"gitId":"wgzesg"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":18,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":19,"author":{"gitId":"wgzesg"},"content":"class WorkoutManagerParserTest {"},{"lineNumber":20,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":21,"author":{"gitId":"wgzesg"},"content":"    private static final WorkoutManagerParser ps \u003d WorkoutManagerParser.getInstance();"},{"lineNumber":22,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":23,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"wgzesg"},"content":"    void parseTags_validInput_success() {"},{"lineNumber":25,"author":{"gitId":"wgzesg"},"content":"        String args \u003d \"/t legs, chest\";"},{"lineNumber":26,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e result \u003d ps.parseTags(args);"},{"lineNumber":27,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"wgzesg"},"content":"        expected.add(\"legs\");"},{"lineNumber":29,"author":{"gitId":"wgzesg"},"content":"        expected.add(\"chest\");"},{"lineNumber":30,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected, result);"},{"lineNumber":31,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"    void parseTags_missingOrWrongIdentifierKey_empty() {"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"        String in1 \u003d \"/tt legs chest\";"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e out1 \u003d ps.parseTags(in1);"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e expected \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected, out1);"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":40,"author":{"gitId":"wgzesg"},"content":"        String in2 \u003d \"legs /t chest\";"},{"lineNumber":41,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e out2 \u003d ps.parseTags(in2);"},{"lineNumber":42,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected, out2);"},{"lineNumber":43,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":44,"author":{"gitId":"wgzesg"},"content":"        String in3 \u003d \"legs chest\";"},{"lineNumber":45,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e out3 \u003d ps.parseTags(in3);"},{"lineNumber":46,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected, out3);"},{"lineNumber":47,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":49,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"wgzesg"},"content":"    void parseSearchConditions_correctDateTagCondition_success() {"},{"lineNumber":51,"author":{"gitId":"wgzesg"},"content":"        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"},{"lineNumber":52,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"},{"lineNumber":53,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":54,"author":{"gitId":"wgzesg"},"content":"        LocalDateTime date \u003d LocalDateTime.of(2020,"},{"lineNumber":55,"author":{"gitId":"wgzesg"},"content":"                10,"},{"lineNumber":56,"author":{"gitId":"wgzesg"},"content":"                17,"},{"lineNumber":57,"author":{"gitId":"wgzesg"},"content":"                12,"},{"lineNumber":58,"author":{"gitId":"wgzesg"},"content":"                0);"},{"lineNumber":59,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","},{"lineNumber":60,"author":{"gitId":"wgzesg"},"content":"                date, date, tags);"},{"lineNumber":61,"author":{"gitId":"wgzesg"},"content":"        String in1 \u003d \"/d 20201017\";"},{"lineNumber":62,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"},{"lineNumber":63,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d null;"},{"lineNumber":65,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseSearchConditions(in1);"},{"lineNumber":67,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":68,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":69,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":71,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":72,"author":{"gitId":"wgzesg"},"content":"            testResults1.add(t.test(record));"},{"lineNumber":73,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected1, testResults1);"},{"lineNumber":75,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":76,"author":{"gitId":"wgzesg"},"content":"        String in2 \u003d \"/d 20201017 /t arms\";"},{"lineNumber":77,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(false, true);"},{"lineNumber":78,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseSearchConditions(in2);"},{"lineNumber":81,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":82,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":83,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":85,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":86,"author":{"gitId":"wgzesg"},"content":"            testResults2.add(t.test(record));"},{"lineNumber":87,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected2, testResults2);"},{"lineNumber":89,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":90,"author":{"gitId":"wgzesg"},"content":"        String in3 \u003d \"/d 20201017 /t legs, ch\";"},{"lineNumber":91,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"},{"lineNumber":92,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseSearchConditions(in3);"},{"lineNumber":95,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":96,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":97,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":99,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":100,"author":{"gitId":"wgzesg"},"content":"            testResults3.add(t.test(record));"},{"lineNumber":101,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected3, testResults3);"},{"lineNumber":103,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":105,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"wgzesg"},"content":"    void parseSearchConditions_wrongConditionFormat_emptyChecks() {"},{"lineNumber":107,"author":{"gitId":"wgzesg"},"content":"        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"},{"lineNumber":108,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"},{"lineNumber":109,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":110,"author":{"gitId":"wgzesg"},"content":"        LocalDateTime date \u003d LocalDateTime.of(2020,"},{"lineNumber":111,"author":{"gitId":"wgzesg"},"content":"                10,"},{"lineNumber":112,"author":{"gitId":"wgzesg"},"content":"                17,"},{"lineNumber":113,"author":{"gitId":"wgzesg"},"content":"                12,"},{"lineNumber":114,"author":{"gitId":"wgzesg"},"content":"                0);"},{"lineNumber":115,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","},{"lineNumber":116,"author":{"gitId":"wgzesg"},"content":"                date, date, tags);"},{"lineNumber":117,"author":{"gitId":"wgzesg"},"content":"        String in1 \u003d \"20201017 /d\";"},{"lineNumber":118,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d null;"},{"lineNumber":121,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseSearchConditions(in1);"},{"lineNumber":123,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":124,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":125,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":127,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":128,"author":{"gitId":"wgzesg"},"content":"            testResults1.add(t.test(record));"},{"lineNumber":129,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected1, testResults1);"},{"lineNumber":131,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":132,"author":{"gitId":"wgzesg"},"content":"        String in2 \u003d \"20201017 arms\";"},{"lineNumber":133,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":134,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":135,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseSearchConditions(in2);"},{"lineNumber":137,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":138,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":139,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":141,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":142,"author":{"gitId":"wgzesg"},"content":"            testResults2.add(t.test(record));"},{"lineNumber":143,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected2, testResults2);"},{"lineNumber":145,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":147,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"wgzesg"},"content":"    void parseCommandKw_correctFormat_success() {"},{"lineNumber":149,"author":{"gitId":"wgzesg"},"content":"        String in1 \u003d \"list aa\";"},{"lineNumber":150,"author":{"gitId":"wgzesg"},"content":"        String[] ex1 \u003d {\"list\", \"aa\"};"},{"lineNumber":151,"author":{"gitId":"wgzesg"},"content":"        assertArrayEquals(ex1, ps.parseCommandKw(in1));"},{"lineNumber":152,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":153,"author":{"gitId":"wgzesg"},"content":"        String in \u003d \"list    /d 20201025\";"},{"lineNumber":154,"author":{"gitId":"wgzesg"},"content":"        String[] ex2 \u003d {\"list\", \"   /d 20201025\"};"},{"lineNumber":155,"author":{"gitId":"wgzesg"},"content":"        assertArrayEquals(ex2, ps.parseCommandKw(in));"},{"lineNumber":156,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":158,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"wgzesg"},"content":"    void parseCommandKw_empty_emptyOutput() {"},{"lineNumber":160,"author":{"gitId":"wgzesg"},"content":"        String in1 \u003d \"\";"},{"lineNumber":161,"author":{"gitId":"wgzesg"},"content":"        String[] ex1 \u003d {\"\"};"},{"lineNumber":162,"author":{"gitId":"wgzesg"},"content":"        assertArrayEquals(ex1, ps.parseCommandKw(in1));"},{"lineNumber":163,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":164,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":166,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"wgzesg"},"content":"    void parseIndex_correctInput_success() throws NotANumberException {"},{"lineNumber":168,"author":{"gitId":"wgzesg"},"content":"        assertEquals(5, ps.parseIndex(\"5\"));"},{"lineNumber":169,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":171,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":172,"author":{"gitId":"wgzesg"},"content":"    void parseIndex_inputNotANumber_throwNotANumberException() {"},{"lineNumber":173,"author":{"gitId":"wgzesg"},"content":"        assertThrows(NotANumberException.class, () -\u003e ps.parseIndex(\"5.0\"));"},{"lineNumber":174,"author":{"gitId":"wgzesg"},"content":"        assertThrows(NotANumberException.class, () -\u003e ps.parseIndex(\"abc\"));"},{"lineNumber":175,"author":{"gitId":"wgzesg"},"content":"        assertThrows(NotANumberException.class, () -\u003e ps.parseIndex(\"\"));"},{"lineNumber":176,"author":{"gitId":"wgzesg"},"content":"        assertThrows(NotANumberException.class, () -\u003e ps.parseIndex(null));"},{"lineNumber":177,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":179,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"wgzesg"},"content":"    void parseList_correctFormat_success() {"},{"lineNumber":181,"author":{"gitId":"wgzesg"},"content":"        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"},{"lineNumber":182,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"},{"lineNumber":183,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":184,"author":{"gitId":"wgzesg"},"content":"        LocalDateTime date \u003d LocalDateTime.of(2020,"},{"lineNumber":185,"author":{"gitId":"wgzesg"},"content":"                10,"},{"lineNumber":186,"author":{"gitId":"wgzesg"},"content":"                17,"},{"lineNumber":187,"author":{"gitId":"wgzesg"},"content":"                12,"},{"lineNumber":188,"author":{"gitId":"wgzesg"},"content":"                0);"},{"lineNumber":189,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","},{"lineNumber":190,"author":{"gitId":"wgzesg"},"content":"                date, date, tags);"},{"lineNumber":191,"author":{"gitId":"wgzesg"},"content":"        String in1 \u003d \"/s 20201017\";"},{"lineNumber":192,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected1 \u003d Arrays.asList(true);"},{"lineNumber":193,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults1 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":194,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d null;"},{"lineNumber":195,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":196,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseList(in1);"},{"lineNumber":197,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":198,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":199,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":201,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":202,"author":{"gitId":"wgzesg"},"content":"            testResults1.add(t.test(record));"},{"lineNumber":203,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected1, testResults1);"},{"lineNumber":205,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":206,"author":{"gitId":"wgzesg"},"content":"        String in2 \u003d \"/e 20201019\";"},{"lineNumber":207,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"},{"lineNumber":208,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":209,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":210,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseList(in2);"},{"lineNumber":211,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":212,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":213,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":215,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":216,"author":{"gitId":"wgzesg"},"content":"            testResults2.add(t.test(record));"},{"lineNumber":217,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected2, testResults2);"},{"lineNumber":219,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":220,"author":{"gitId":"wgzesg"},"content":"        String in3 \u003d \"/s 20201017 /e 20201019\";"},{"lineNumber":221,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected3 \u003d Arrays.asList(true, true);"},{"lineNumber":222,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults3 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":223,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":224,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseList(in3);"},{"lineNumber":225,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":226,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":227,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":229,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":230,"author":{"gitId":"wgzesg"},"content":"            testResults3.add(t.test(record));"},{"lineNumber":231,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":232,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected3, testResults3);"},{"lineNumber":233,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":235,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":236,"author":{"gitId":"wgzesg"},"content":"    void parseList_wrongDateFormat_throwInvalidDateFormatException() {"},{"lineNumber":237,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":238,"author":{"gitId":"wgzesg"},"content":"        String in1 \u003d \"/s aabb\";"},{"lineNumber":239,"author":{"gitId":"wgzesg"},"content":"        assertThrows(InvalidDateFormatException.class, () -\u003e ps.parseList(in1));"},{"lineNumber":240,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":242,"author":{"gitId":"wgzesg"},"content":"    @Test"},{"lineNumber":243,"author":{"gitId":"wgzesg"},"content":"    void parseList_wrongDateIdentifier_success() {"},{"lineNumber":244,"author":{"gitId":"wgzesg"},"content":"        List\u003cString\u003e tg \u003d Arrays.asList(\"legs\", \"chest\");"},{"lineNumber":245,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList\u003c\u003e(tg);"},{"lineNumber":246,"author":{"gitId":"wgzesg"},"content":"        LocalDateTime date \u003d LocalDateTime.of(2020,"},{"lineNumber":247,"author":{"gitId":"wgzesg"},"content":"                10,"},{"lineNumber":248,"author":{"gitId":"wgzesg"},"content":"                17,"},{"lineNumber":249,"author":{"gitId":"wgzesg"},"content":"                12,"},{"lineNumber":250,"author":{"gitId":"wgzesg"},"content":"                0);"},{"lineNumber":251,"author":{"gitId":"wgzesg"},"content":"        PastWorkoutSessionRecord record \u003d new PastWorkoutSessionRecord(\"random\","},{"lineNumber":252,"author":{"gitId":"wgzesg"},"content":"                date, date, tags);"},{"lineNumber":253,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cPredicate\u003cPastWorkoutSessionRecord\u003e\u003e tests \u003d null;"},{"lineNumber":254,"author":{"gitId":"wgzesg"},"content":"        String in2 \u003d \"/s 20201017 /e/e\";"},{"lineNumber":255,"author":{"gitId":"wgzesg"},"content":"        List\u003cBoolean\u003e expected2 \u003d Arrays.asList(true);"},{"lineNumber":256,"author":{"gitId":"wgzesg"},"content":"        ArrayList\u003cBoolean\u003e testResults2 \u003d new ArrayList\u003c\u003e();"},{"lineNumber":257,"author":{"gitId":"wgzesg"},"content":"        try {"},{"lineNumber":258,"author":{"gitId":"wgzesg"},"content":"            tests \u003d ps.parseList(in2);"},{"lineNumber":259,"author":{"gitId":"wgzesg"},"content":"        } catch (InvalidDateFormatException e) {"},{"lineNumber":260,"author":{"gitId":"wgzesg"},"content":"            fail();"},{"lineNumber":261,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":263,"author":{"gitId":"wgzesg"},"content":"        for (Predicate\u003cPastWorkoutSessionRecord\u003e t : tests) {"},{"lineNumber":264,"author":{"gitId":"wgzesg"},"content":"            testResults2.add(t.test(record));"},{"lineNumber":265,"author":{"gitId":"wgzesg"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"wgzesg"},"content":"        assertEquals(expected2, testResults2);"},{"lineNumber":267,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":268,"author":{"gitId":"wgzesg"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"wgzesg"},"content":""},{"lineNumber":270,"author":{"gitId":"wgzesg"},"content":"}"}],"authorContributionMap":{"yujinyang1998":1,"wgzesg":269}},{"path":"src/test/java/logic/parser/WorkoutSessionParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package logic.parser;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutsession.AddFormatException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutsession.DeleteFormatException;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import logic.parser.WorkoutSessionParser;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import org.apache.commons.lang3.builder.EqualsBuilder;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertArrayEquals;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionParserTest {"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"    void workoutSessionParser_validInput_success() {"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        String[] actual \u003d WorkoutSessionParser.workoutSessionParser(\"add bench /n 3244 /w 4324\");"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        String[] expected \u003d {\"add\", \"bench\", \"/n\", \"3244\", \"/w\", \"4324\"};"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        assertArrayEquals(expected, actual);"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"    void workoutSessionParser_emptyString() {"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"        String[] actual \u003d WorkoutSessionParser.workoutSessionParser(\"\");"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"        String[] expected \u003d {\"\"};"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"        assertArrayEquals(expected, actual);"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"    void addParser_validInput_success() throws AddFormatException {"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputString \u003d {\"add\", \"\", \"bench\", \"/n\", \"3244\", \"/w\", \"4324\"};"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        Exercise actual \u003d WorkoutSessionParser.addParser(inputString);"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"        Exercise expected \u003d new Exercise(\"bench\", 3244, 4324);"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        assertTrue(EqualsBuilder.reflectionEquals(expected, actual));"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"    void addParser_invalidInput_negativeRepetitions() {"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputString \u003d {\"add\", \"\", \"bench\", \"/n\", \"-3244\", \"/w\", \"4324\"};"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AddFormatException.class, () -\u003e WorkoutSessionParser.addParser(inputString));"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"    void addParser_invalidInput_formatError() {"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputString \u003d {\"add\", \"\", \"bench\", \"/w\", \"4324\"};"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(NumberFormatException.class, () -\u003e WorkoutSessionParser.addParser(inputString));"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"    void deleteParser_validInput_success() throws DeleteFormatException {"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputString \u003d {\"delete\", \"1\"};"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"        int actual \u003d WorkoutSessionParser.deleteParser(inputString);"},{"lineNumber":56,"author":{"gitId":"yujinyang1998"},"content":"        int expected \u003d 1;"},{"lineNumber":57,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, actual);"},{"lineNumber":58,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":60,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"yujinyang1998"},"content":"    void deleteParser_invalidInput_formatError() {"},{"lineNumber":62,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputString \u003d {\"delete\", \"fdsf\"};"},{"lineNumber":63,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(DeleteFormatException.class, () -\u003e WorkoutSessionParser.deleteParser(inputString));"},{"lineNumber":64,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":66,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"yujinyang1998"},"content":"    void searchParser_validInput_success() {"},{"lineNumber":68,"author":{"gitId":"yujinyang1998"},"content":"        String[] inputString \u003d {\"search\", \"test\"};"},{"lineNumber":69,"author":{"gitId":"yujinyang1998"},"content":"        String actual \u003d WorkoutSessionParser.searchParser(inputString);"},{"lineNumber":70,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \"test\";"},{"lineNumber":71,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, actual);"},{"lineNumber":72,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":72,"tienkhoa16":1}},{"path":"src/test/java/models/ExerciseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"class ExerciseTest {"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"    void testToString() {"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"        Exercise exerciseActual \u003d new Exercise(\"benchpress\", 432, 423.34);"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \"benchpress, Repetitions:432, Weight\u003d423.34\";"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, exerciseActual.toString());"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    void getDescription() {"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"        Exercise exerciseActual \u003d new Exercise(\"benchpress\", 432, 423.34);"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \"benchpress\";"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, exerciseActual.getDescription());"},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"    void getRepetitions() {"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"        Exercise exerciseActual \u003d new Exercise(\"benchpress\", 432, 423.34);"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \"432\";"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, exerciseActual.getRepetitions());"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"    void getWeight() {"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"        Exercise exerciseActual \u003d new Exercise(\"benchpress\", 432, 423.34);"},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \"423.34\";"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, exerciseActual.getWeight());"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":36}},{"path":"src/test/java/models/ProfileTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_BMI;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.PROFILE_STRING_REPRESENTATION;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"class ProfileTest {"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_PROFILE \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    private static final String EXAMPLE_PROFILE_STRING \u003d String.format(PROFILE_STRING_REPRESENTATION, EXAMPLE_NAME,"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES, EXAMPLE_BMI);"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"    void testGetBmiClassification_underweightInput_returnUnderweight() {"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 54, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(\"15.3 (Underweight)\", testProfile.getBmiClassification());"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"    void testGetBmiClassification_normalWeightInput_returnNormalWeight() {"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 70, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(\"19.8 (Normal Weight)\", testProfile.getBmiClassification());"},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"    void testGetBmiClassification_overweightInput_returnOverweight() {"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 100, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(\"28.3 (Overweight)\", testProfile.getBmiClassification());"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"    void testGetBmiClassification_obesityClassOneInput_returnObesityClassOne() {"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 113, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(\"32.0 (Obesity Class 1)\", testProfile.getBmiClassification());"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    void testGetBmiClassification_obesityClassTwoInput_returnObesityClassTwo() {"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 127, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(\"35.9 (Obesity Class 2)\", testProfile.getBmiClassification());"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"    void testGetBmiClassification_extremeObesityClassThreeInput_returnExtremeObesityClassThree() {"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"        Profile testProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, 148, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(\"41.9 (Extreme Obesity Class 3)\", testProfile.getBmiClassification());"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputTwoIdenticalProfiles_returnTrue() {"},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"        Profile sampleProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT,"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_CALORIES);"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT,"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_CALORIES);"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(sampleProfile, profileToCompare);"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputDifferentNames_returnFalse() {"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"        Profile profileToCompare \u003d new Profile(\"Duke\", EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(SAMPLE_PROFILE.equals(profileToCompare));"},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputDifferentHeights_returnFalse() {"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT + 1, EXAMPLE_WEIGHT,"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"        assertNotEquals(profileToCompare, SAMPLE_PROFILE);"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputDifferentWeights_returnFalse() {"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT + 1,"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":"        assertNotEquals(profileToCompare, SAMPLE_PROFILE);"},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputDifferentExpectedWeights_returnFalse() {"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT + 1, EXAMPLE_CALORIES);"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"        assertNotEquals(profileToCompare, SAMPLE_PROFILE);"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputDifferentCalories_returnFalse() {"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"        Profile profileToCompare \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES + 1);"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":"        assertNotEquals(profileToCompare, SAMPLE_PROFILE);"},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputSameProfileObject_returnTrue() {"},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(SAMPLE_PROFILE, SAMPLE_PROFILE);"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputObjectOfDifferentClass_returnFalse() {"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"        assertNotEquals(SAMPLE_PROFILE, new StringBuilder());"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"    void testEquals_inputNull_returnFalse() {"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"        assertNotEquals(SAMPLE_PROFILE, null);"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"    void testToString_validProfile_returnValidProfileString() {"},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(EXAMPLE_PROFILE_STRING, SAMPLE_PROFILE.toString());"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"    void testToString_invalidProfile_throwsAssertionError() {"},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"        Profile invalidProfile \u003d new Profile(EMPTY_STRING, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, invalidProfile::toString);"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":131}},{"path":"src/test/java/profile/ProfileSessionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import diet.dietsession.DietSession;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.EndException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InsufficientArgumentException;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InvalidCommandWordException;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.InvalidDateFormatException;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidCommandFormatException;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import org.apache.commons.lang3.StringUtils;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import storage.diet.DietStorage;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import storage.profile.ProfileStorage;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":"import java.io.File;"},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"import java.io.IOException;"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"import java.time.LocalDate;"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.ADD_PROFILE_FORMAT;"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EDIT_PROFILE_FORMAT;"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":33,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_ADD;"},{"lineNumber":34,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_DELETE;"},{"lineNumber":35,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_EDIT;"},{"lineNumber":36,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_END;"},{"lineNumber":37,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.COMMAND_WORD_VIEW;"},{"lineNumber":38,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_PROFILE_FILE;"},{"lineNumber":39,"author":{"gitId":"wgzesg"},"content":"import static seedu.duke.Constants.PATH_TO_PROFILE_FOLDER;"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.EMPTY_STRING;"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":"import static ui.CommonUi.helpFormatter;"},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_CREATE_PROFILE_ACK;"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_DELETE_PROFILE;"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_EDIT_PROFILE_ACK;"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_MORE_CALORIES;"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_SET_EXPECTED_WEIGHT;"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"import static ui.profile.ProfileUi.MESSAGE_VIEW_PROFILE;"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"class ProfileSessionTest {"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"    private static final DateTimeFormatter DTF \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"    private static final String TEST_SAVES_FOLDER_DIET \u003d \"saves/diet/\";"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"    private static final String TEST_SAVE_NAME \u003d DTF.format(LocalDate.now()) + \" breakfast\";"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"    private static final Profile SAMPLE_PROFILE \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"            EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"    private static ProfileSession profileSession \u003d ProfileSession.getInstance(PATH_TO_PROFILE_FOLDER,"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"            PATH_TO_PROFILE_FILE);"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    private static final double EXAMPLE_NORMAL_EXPECTED_WEIGHT \u003d 76.7;"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"    @BeforeAll"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"    static void initData() throws IOException, InvalidDateFormatException {"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        DietStorage dietStorage \u003d new DietStorage();"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"        dietStorage.init(TEST_SAVES_FOLDER_DIET, TEST_SAVE_NAME);"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        DietSession savedInstance \u003d new DietSession(\"breakfast\", DTF.format(LocalDate.now()), true, 1);"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"        savedInstance.saveToFile(TEST_SAVES_FOLDER_DIET, dietStorage, savedInstance);"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"        File file \u003d new File(PATH_TO_PROFILE_FILE.toString());"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"        file.getParentFile().mkdirs();"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"        file.createNewFile();"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputNull_throwsAssertionError() {"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"            profileSession.processCommand(null);"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputEmptyString_throwsAssertionError() {"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(AssertionError.class, () -\u003e {"},{"lineNumber":85,"author":{"gitId":"tienkhoa16"},"content":"            profileSession.processCommand(EMPTY_STRING);"},{"lineNumber":86,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":87,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":89,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputWrongCommand_throwsInvalidCommandWordException() {"},{"lineNumber":91,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"wrong command\";"},{"lineNumber":92,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandWordException.class, () -\u003e {"},{"lineNumber":93,"author":{"gitId":"tienkhoa16"},"content":"            profileSession.processCommand(userInput);"},{"lineNumber":94,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":95,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":97,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputValidAddProfileCommand_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":99,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"add /n Schwarzenegger /h 188 /w 113 /e 100 /c 2500\";"},{"lineNumber":100,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE);"},{"lineNumber":101,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(null);"},{"lineNumber":102,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":103,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_CREATE_PROFILE_ACK, SAMPLE_PROFILE.toString());"},{"lineNumber":104,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, profileSession.processCommand(userInput).getFeedbackMessage());"},{"lineNumber":105,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":107,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputInvalidAddProfileCommand_throwsInsufficientArgumentException()"},{"lineNumber":109,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":110,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"add /n Schwarzenegger\";"},{"lineNumber":111,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE);"},{"lineNumber":112,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(null);"},{"lineNumber":113,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":114,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InsufficientArgumentException.class, () -\u003e {"},{"lineNumber":115,"author":{"gitId":"tienkhoa16"},"content":"            profileSession.processCommand(userInput);"},{"lineNumber":116,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":117,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":119,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputValidDeleteProfileCommand_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":121,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"delete\";"},{"lineNumber":122,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE);"},{"lineNumber":123,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":124,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":125,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(new ByteArrayInputStream(\"YES\".getBytes()));"},{"lineNumber":126,"author":{"gitId":"tienkhoa16"},"content":"        CommandResult result \u003d profileSession.processCommand(userInput);"},{"lineNumber":127,"author":{"gitId":"tienkhoa16"},"content":"        System.setIn(System.in);"},{"lineNumber":128,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":129,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(MESSAGE_DELETE_PROFILE, result.getFeedbackMessage());"},{"lineNumber":130,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":132,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputValidEditProfileCommand_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":134,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"edit /n Arnold\";"},{"lineNumber":135,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE);"},{"lineNumber":136,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":137,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":138,"author":{"gitId":"tienkhoa16"},"content":"        Profile editedProfile \u003d new Profile(\"Arnold\", EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":139,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":140,"author":{"gitId":"tienkhoa16"},"content":"        String successMsg \u003d String.format(MESSAGE_EDIT_PROFILE_ACK, editedProfile.toString());"},{"lineNumber":141,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":142,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(successMsg, profileSession.processCommand(userInput).getFeedbackMessage());"},{"lineNumber":143,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":145,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputInvalidEditProfileCommand_throwsInvalidCommandFormatException()"},{"lineNumber":147,"author":{"gitId":"tienkhoa16"},"content":"            throws SchwarzeneggerException {"},{"lineNumber":148,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"edit\";"},{"lineNumber":149,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE);"},{"lineNumber":150,"author":{"gitId":"tienkhoa16"},"content":"        storage.saveData(SAMPLE_PROFILE);"},{"lineNumber":151,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":152,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidCommandFormatException.class, () -\u003e {"},{"lineNumber":153,"author":{"gitId":"tienkhoa16"},"content":"            profileSession.processCommand(userInput);"},{"lineNumber":154,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":155,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":157,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":158,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputValidEndProfileCommand_throwsEndException() {"},{"lineNumber":159,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"end\";"},{"lineNumber":160,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(EndException.class, () -\u003e {"},{"lineNumber":161,"author":{"gitId":"tienkhoa16"},"content":"            profileSession.processCommand(userInput);"},{"lineNumber":162,"author":{"gitId":"tienkhoa16"},"content":"        });"},{"lineNumber":163,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":165,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputValidHelpProfileCommand_returnHelpMessage() throws SchwarzeneggerException {"},{"lineNumber":167,"author":{"gitId":"tienkhoa16"},"content":"        StringBuilder helpMessage \u003d new StringBuilder();"},{"lineNumber":168,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_ADD), ADD_PROFILE_FORMAT,"},{"lineNumber":169,"author":{"gitId":"tienkhoa16"},"content":"                \"Add your new profile\"));"},{"lineNumber":170,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_VIEW), COMMAND_WORD_VIEW,"},{"lineNumber":171,"author":{"gitId":"tienkhoa16"},"content":"                \"View your profile\"));"},{"lineNumber":172,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_EDIT), EDIT_PROFILE_FORMAT,"},{"lineNumber":173,"author":{"gitId":"tienkhoa16"},"content":"                \"Edit your existing profile. You may edit from 1 field to all fields\"));"},{"lineNumber":174,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_DELETE), COMMAND_WORD_DELETE,"},{"lineNumber":175,"author":{"gitId":"tienkhoa16"},"content":"                \"Delete your existing profile\"));"},{"lineNumber":176,"author":{"gitId":"tienkhoa16"},"content":"        helpMessage.append(helpFormatter(StringUtils.capitalize(COMMAND_WORD_END), COMMAND_WORD_END,"},{"lineNumber":177,"author":{"gitId":"tienkhoa16"},"content":"                \"Go back to Main Menu\"));"},{"lineNumber":178,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"help\";"},{"lineNumber":179,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(helpMessage.toString().trim(), profileSession.processCommand(userInput).getFeedbackMessage());"},{"lineNumber":180,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":182,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":183,"author":{"gitId":"tienkhoa16"},"content":"    void testProcessCommand_inputValidViewProfileCommand_returnSuccess() throws SchwarzeneggerException {"},{"lineNumber":184,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage profileStorage \u003d new ProfileStorage(PATH_TO_PROFILE_FOLDER, PATH_TO_PROFILE_FILE);"},{"lineNumber":185,"author":{"gitId":"tienkhoa16"},"content":"        profileStorage.saveData(SAMPLE_PROFILE);"},{"lineNumber":186,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":187,"author":{"gitId":"tienkhoa16"},"content":"        String sampleCaloriesMsg \u003d String.format(MESSAGE_MORE_CALORIES, EXAMPLE_CALORIES);"},{"lineNumber":188,"author":{"gitId":"tienkhoa16"},"content":"        String weightTip \u003d String.format(MESSAGE_SET_EXPECTED_WEIGHT,"},{"lineNumber":189,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_NORMAL_EXPECTED_WEIGHT, EXAMPLE_NORMAL_EXPECTED_WEIGHT);"},{"lineNumber":190,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":191,"author":{"gitId":"tienkhoa16"},"content":"        String userInput \u003d \"view\";"},{"lineNumber":192,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(String.format(MESSAGE_VIEW_PROFILE, SAMPLE_PROFILE.toString(), sampleCaloriesMsg, weightTip),"},{"lineNumber":193,"author":{"gitId":"tienkhoa16"},"content":"                profileSession.processCommand(userInput).getFeedbackMessage());"},{"lineNumber":194,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":188,"wgzesg":7}},{"path":"src/test/java/profile/UtilsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.HEIGHT_LOWER_BOUND;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.HEIGHT_UPPER_BOUND;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.WEIGHT_LOWER_BOUND;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.WEIGHT_UPPER_BOUND;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Utils.checkValidName;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Utils.checkValidProfile;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"class UtilsTest {"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidProfile_validProfile_returnTrue() {"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"        Profile validProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(checkValidProfile(validProfile));"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidProfile_nullInput_returnFalse() {"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidProfile(null));"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidProfile_heightLessThanLowerBound_returnFalse() {"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, HEIGHT_LOWER_BOUND - 1, EXAMPLE_WEIGHT,"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidProfile(inValidProfile));"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidProfile_heightGreaterThanUpperBound_returnFalse() {"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, HEIGHT_UPPER_BOUND + 1, EXAMPLE_WEIGHT,"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidProfile(inValidProfile));"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":49,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidProfile_weightLessThanLowerBound_returnFalse() {"},{"lineNumber":51,"author":{"gitId":"tienkhoa16"},"content":"        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, WEIGHT_LOWER_BOUND - 1,"},{"lineNumber":52,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":53,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidProfile(inValidProfile));"},{"lineNumber":54,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":56,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidProfile_weightGreaterThanUpperBound_returnFalse() {"},{"lineNumber":58,"author":{"gitId":"tienkhoa16"},"content":"        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, WEIGHT_UPPER_BOUND + 1,"},{"lineNumber":59,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":60,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidProfile(inValidProfile));"},{"lineNumber":61,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":63,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidProfile_negativeCalories_returnFalse() {"},{"lineNumber":65,"author":{"gitId":"tienkhoa16"},"content":"        Profile inValidProfile \u003d new Profile(EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT,"},{"lineNumber":66,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_EXPECTED_WEIGHT, -1);"},{"lineNumber":67,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidProfile(inValidProfile));"},{"lineNumber":68,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":70,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidName_validInput_returnTrue() {"},{"lineNumber":72,"author":{"gitId":"tienkhoa16"},"content":"        assertTrue(checkValidName(\"Schwarzenegger\"));"},{"lineNumber":73,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":75,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidName_emptyInput_returnFalse() {"},{"lineNumber":77,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidName(\"\"));"},{"lineNumber":78,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":80,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"tienkhoa16"},"content":"    void testCheckValidName_nullInput_returnFalse() {"},{"lineNumber":82,"author":{"gitId":"tienkhoa16"},"content":"        assertFalse(checkValidName(null));"},{"lineNumber":83,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":84}},{"path":"src/test/java/storage/profile/ProfileStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tienkhoa16"},"content":"package storage.profile;"},{"lineNumber":2,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":3,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.SchwarzeneggerException;"},{"lineNumber":4,"author":{"gitId":"tienkhoa16"},"content":"import exceptions.profile.InvalidSaveFormatException;"},{"lineNumber":5,"author":{"gitId":"tienkhoa16"},"content":"import models.Profile;"},{"lineNumber":6,"author":{"gitId":"tienkhoa16"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":8,"author":{"gitId":"tienkhoa16"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"tienkhoa16"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":12,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"tienkhoa16"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":14,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_CALORIES;"},{"lineNumber":15,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_EXPECTED_WEIGHT;"},{"lineNumber":16,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_HEIGHT;"},{"lineNumber":17,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_NAME;"},{"lineNumber":18,"author":{"gitId":"tienkhoa16"},"content":"import static profile.Constants.EXAMPLE_WEIGHT;"},{"lineNumber":19,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":20,"author":{"gitId":"tienkhoa16"},"content":"//@@author tienkhoa16"},{"lineNumber":21,"author":{"gitId":"tienkhoa16"},"content":"class ProfileStorageTest {"},{"lineNumber":22,"author":{"gitId":"tienkhoa16"},"content":"    private static final Path TEST_SAVES_FOLDER \u003d Paths.get(\"src\", \"test\", \"java\", \"saves\", \"ProfileStorageTest\");"},{"lineNumber":23,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":24,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"tienkhoa16"},"content":"    void testDecodeProfile_exampleProfileData_returnsExampleProfileString() throws SchwarzeneggerException,"},{"lineNumber":26,"author":{"gitId":"tienkhoa16"},"content":"            FileNotFoundException {"},{"lineNumber":27,"author":{"gitId":"tienkhoa16"},"content":"        Path inputFilePath \u003d Paths.get(TEST_SAVES_FOLDER.toString(), \"exampleProfileData.json\");"},{"lineNumber":28,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(TEST_SAVES_FOLDER, inputFilePath);"},{"lineNumber":29,"author":{"gitId":"tienkhoa16"},"content":"        Profile testProfile \u003d storage.decodeProfile();"},{"lineNumber":30,"author":{"gitId":"tienkhoa16"},"content":"        Profile exampleProfile \u003d new Profile("},{"lineNumber":31,"author":{"gitId":"tienkhoa16"},"content":"                EXAMPLE_NAME, EXAMPLE_HEIGHT, EXAMPLE_WEIGHT, EXAMPLE_EXPECTED_WEIGHT, EXAMPLE_CALORIES);"},{"lineNumber":32,"author":{"gitId":"tienkhoa16"},"content":"        assertEquals(exampleProfile, testProfile);"},{"lineNumber":33,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":35,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"tienkhoa16"},"content":"    void testDecodeProfile_corruptedDataInput_throwsInvalidSaveFormatException() {"},{"lineNumber":37,"author":{"gitId":"tienkhoa16"},"content":"        Path inputFilePath \u003d Paths.get(TEST_SAVES_FOLDER.toString(), \"corruptedProfileData.json\");"},{"lineNumber":38,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(TEST_SAVES_FOLDER, inputFilePath);"},{"lineNumber":39,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidSaveFormatException.class, storage::decodeProfile);"},{"lineNumber":40,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tienkhoa16"},"content":""},{"lineNumber":42,"author":{"gitId":"tienkhoa16"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"tienkhoa16"},"content":"    void testDecodeProfile_invalidDataInput_throwsInvalidSaveFormatException() {"},{"lineNumber":44,"author":{"gitId":"tienkhoa16"},"content":"        Path inputFilePath \u003d Paths.get(TEST_SAVES_FOLDER.toString(), \"invalidProfileData.json\");"},{"lineNumber":45,"author":{"gitId":"tienkhoa16"},"content":"        ProfileStorage storage \u003d new ProfileStorage(TEST_SAVES_FOLDER, inputFilePath);"},{"lineNumber":46,"author":{"gitId":"tienkhoa16"},"content":"        assertThrows(InvalidSaveFormatException.class, storage::decodeProfile);"},{"lineNumber":47,"author":{"gitId":"tienkhoa16"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tienkhoa16"},"content":"}"}],"authorContributionMap":{"tienkhoa16":48}},{"path":"src/test/java/storage/workout/WorkoutSessionStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package storage.workout;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import exceptions.workout.workoutmanager.SchwIoException;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":"import models.ExerciseList;"},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionStorageTest {"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"    void readFileContents() throws SchwIoException, IOException {"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList actualExerciseList \u003d new ExerciseList();"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"        ExerciseList expectedExerciseList \u003d new ExerciseList();"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"        WorkOutManagerStorage workOutManagerStorage \u003d new WorkOutManagerStorage();"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d workOutManagerStorage.createfile();"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"        expectedExerciseList.exerciseList.add(new Exercise(\"ben\", 547, 567));"},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"        workoutSessionStorage.writeToStorage(filePath, expectedExerciseList);"},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"        workoutSessionStorage.readFileContents(filePath, actualExerciseList);"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expectedExerciseList.exerciseList.toString(), actualExerciseList.exerciseList.toString());"},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":"    void writeToStorage_inputNull_assert() {"},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e workoutSessionStorage.readFileContents(null, null));"},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"    void readFileContents_inputNull_assert() {"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        WorkoutSessionStorage workoutSessionStorage \u003d new WorkoutSessionStorage();"},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        assertThrows(AssertionError.class, () -\u003e workoutSessionStorage.writeToStorage(null, null));"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":46}},{"path":"src/test/java/ui/workout/workoutsession/WorkoutSessionUiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yujinyang1998"},"content":"package ui.workout.workoutsession;"},{"lineNumber":2,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":3,"author":{"gitId":"yujinyang1998"},"content":"import models.Exercise;"},{"lineNumber":4,"author":{"gitId":"yujinyang1998"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":6,"author":{"gitId":"yujinyang1998"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"yujinyang1998"},"content":"import static ui.CommonUi.helpFormatter;"},{"lineNumber":8,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":9,"author":{"gitId":"yujinyang1998"},"content":"//@@author yujinyang1998"},{"lineNumber":10,"author":{"gitId":"yujinyang1998"},"content":"class WorkoutSessionUiTest {"},{"lineNumber":11,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":12,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"yujinyang1998"},"content":"    void saveCorruptedError() {"},{"lineNumber":14,"author":{"gitId":"yujinyang1998"},"content":"        String filePath \u003d \"save/workout/\";"},{"lineNumber":15,"author":{"gitId":"yujinyang1998"},"content":"        String actual \u003d WorkoutSessionUi.saveCorruptedError(filePath);"},{"lineNumber":16,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \":( Save format in save/workout/ is invalid.\\n\""},{"lineNumber":17,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t File is cleared.\";"},{"lineNumber":18,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, actual);"},{"lineNumber":19,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":21,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"yujinyang1998"},"content":"    void printHelp() {"},{"lineNumber":23,"author":{"gitId":"yujinyang1998"},"content":"        String actual \u003d WorkoutSessionUi.printHelp();"},{"lineNumber":24,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d (helpFormatter(\"Add\", \"add [NAME_OF_MOVE] /n [NUMBER_OF_REPETITIONS] /w [WEIGHT]\","},{"lineNumber":25,"author":{"gitId":"yujinyang1998"},"content":"                \"Add a new move\")"},{"lineNumber":26,"author":{"gitId":"yujinyang1998"},"content":"                + helpFormatter(\"List\", \"list\","},{"lineNumber":27,"author":{"gitId":"yujinyang1998"},"content":"                \"Show all moves in this current session\")"},{"lineNumber":28,"author":{"gitId":"yujinyang1998"},"content":"                + helpFormatter(\"Delete\", \"delete [INDEX]\","},{"lineNumber":29,"author":{"gitId":"yujinyang1998"},"content":"                \"Delete a move according to the index in the list\")"},{"lineNumber":30,"author":{"gitId":"yujinyang1998"},"content":"                + helpFormatter(\"Search\", \"search [NAME_OF_MOVE]\","},{"lineNumber":31,"author":{"gitId":"yujinyang1998"},"content":"                \"Show a list of moves that match the entered keyword\")"},{"lineNumber":32,"author":{"gitId":"yujinyang1998"},"content":"                + helpFormatter(\"End\", \"end\","},{"lineNumber":33,"author":{"gitId":"yujinyang1998"},"content":"                \"Go back to the Workout Menu\")).trim();"},{"lineNumber":34,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":35,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, actual);"},{"lineNumber":36,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":38,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"yujinyang1998"},"content":"    void addExerciseSuccess() {"},{"lineNumber":40,"author":{"gitId":"yujinyang1998"},"content":"        Exercise exercise \u003d new Exercise(\"benchpress\", 435, 432.432);"},{"lineNumber":41,"author":{"gitId":"yujinyang1998"},"content":"        String actual \u003d WorkoutSessionUi.addExerciseSuccess(exercise);"},{"lineNumber":42,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \"Yay! You have added benchpress to your list.\\n\""},{"lineNumber":43,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t [Repetitions: 435 || Weight: 432.432]\";"},{"lineNumber":44,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, actual);"},{"lineNumber":45,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yujinyang1998"},"content":""},{"lineNumber":47,"author":{"gitId":"yujinyang1998"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"yujinyang1998"},"content":"    void deleteExerciseSuccess() {"},{"lineNumber":49,"author":{"gitId":"yujinyang1998"},"content":"        Exercise exercise \u003d new Exercise(\"benchpress\", 435, 432.432);"},{"lineNumber":50,"author":{"gitId":"yujinyang1998"},"content":"        String actual \u003d WorkoutSessionUi.deleteExerciseSuccess(exercise);"},{"lineNumber":51,"author":{"gitId":"yujinyang1998"},"content":"        String expected \u003d \"You have deleted benchpress from your list!\\n\""},{"lineNumber":52,"author":{"gitId":"yujinyang1998"},"content":"                + \"\\t [Repetitions: 435 || Weight: 432.432]\";"},{"lineNumber":53,"author":{"gitId":"yujinyang1998"},"content":"        assertEquals(expected, actual);"},{"lineNumber":54,"author":{"gitId":"yujinyang1998"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yujinyang1998"},"content":"}"}],"authorContributionMap":{"yujinyang1998":55}}]
