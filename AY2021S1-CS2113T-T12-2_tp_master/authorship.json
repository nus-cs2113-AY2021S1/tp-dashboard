[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    implementation \u0027com.alibaba:fastjson:1.2.74\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Main\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 3,
      "imhm": 3,
      "-": 45
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Liu Jingming | [Jingming517](https://github.com/Jingming517/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Liu Yifeng | [LIU-YiFeng-1](https://github.com/LIU-YiFeng-1/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Lyu Jiawen | [JiawenLyu](https://github.com/JiawenLyu/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ng Hong Ming | [imhm](https://github.com/imhm/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Zhang Yilin | [Zhangyilin0203](https://github.com/Zhangyilin0203/) | [Portfolio](../docs/team/zhangyl.md)"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 4,
      "-": 4,
      "Zhangyilin0203": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "This section provides an introduction to the developer guide for *25HoursADay*."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Introduction to *25HoursADay*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "*25HoursADay* is a scheduling app optimized for users via a convenient yet powerful Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, *25HoursADay* can schedule your tasks and events faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "### Purpose and scope"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "The purpose of this developer guide is to describe the architecture and software design decisions for the task scheduling application *25HoursADay*. This developer guide covers an overview of the program architecture, the logical view of major components, and the mechanism of the functions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "The intended audience of this guide are the developers and software testers of *25HoursADay*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "### Developer guide organization"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "The table below shows the content of the developer guide."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "|Section| Purpose | "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "|[Section 2: Setting up](#setting-up)|To provide instructions on how to download and set up *25HoursADay* on your computer.|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "|[Section 3: Design](#design)|To explain the architecture of *25HoursADay*,  and describe the major components of *25HoursADay*, the roles of major components, as well as their organization and interaction of major components.|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "|[Section 4: Implementation](#implementation)|To explain the mechanism of functions added to *25HoursADay* and the features added to *25HoursADay*.|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "|[Section 5: Documentation](#documentation)|To represent documents describing the system and its parts.|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Setting Up \u0026 Getting started"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "This section provides on setting up the *25HoursADay* application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Setting up"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Before diving into the project development and testing, here are some essential tools required in this project:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. **JAVA 11.0.8**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Launch your terminal and type \"java -version\" to ensure you have the correct version number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * If you have no Java installed or different version number, please proceed to this [website](https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    to download the **Java 11.0.9** installer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. **Intellij IDEA**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * If you are new to IntelliJ, please proceed to this [website](https://www.jetbrains.com/help/idea/installation-guide.html)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    to download and install the IDE."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "After installing the required tools, proceed to [Github Page](https://github.com/AY2021S1-CS2113T-T12-2/tp) and "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "fork the project to your own repository, and clone your fork into your working computer.    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Now, Open Intellij "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. If you are not in the welcome screen, click `File` → `Close Project` to navigate to the starting project dialog)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        1. Click `Configure` → `Project Structure for New Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        1. Click `New...` and set it to the directory of the JDK"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Upon the successful configuration, you should be able to see the following screenshot:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![JDK Config](images/JDK_Config_Screenshot.png)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Lastly, **Import the project as a Gradle Project.**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Intellij IDEA by default has the Gradle plugin installed. If you have disabled it, go to "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    `File` → `Settings` → `Plugins` to re-enable them."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Click Import Project (or Open or Import in newer version of Intellij)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Locate the **build.gradle file** (not the root folder as you would do in a normal importing) and select it. Click `OK`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * If asked, choose to `Open as Project` (not Open as File)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Click `OK` to accept the default settings but do ensure that the selected version of Gradle JVM matches the "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    JDK being used for the project."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Wait for the importing process to finish (may take a few minutes, so get some :coffee: :relaxed:)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. **Verify the set up**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Run the `..main/java/seedu.duke/Duke`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Upon a successful configuration, you should be able to see the welcome screen of the project as shown below:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    ![verify_set_up](images/Verify_setup.PNG)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Run some tests to ensure it is working properly."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Getting started"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "If using IDEA, follow the guide If using IDEA, follow the guide [se-edu/guides IDEA: Configuring the code style](https://se-education.org/guides/tutorials/intellijCodeStyle.html) "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "to set up IDEA’s coding style to match ours."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    :bulb: Tips: Optionally, you can follow the guide  [se-edu/guides Using Checkstyle](https://se-education.org/guides/tutorials/checkstyle.html) "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    to find how to use the CheckStyle within IDEA e.g., to report problems as you write code."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "it will run the CI for your project automatically at each push to the master branch or to any PR. No set up required."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [*25HoursADay*’s architecture](#architecture)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "This section describes the design overview of the *25HoursADay* application."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "The figure below shows the overall design of the application. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/Overall_Architecture.JPG\" alt\u003d\"\" width\u003d\"300\"/\u003e \u003cbr/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": "The sequence diagram below shows how the components interact with each other for the scenario where the user issues the command `todo`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/Archi_SD.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": "An overview of each components is listed below."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Ui"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "imhm"
        },
        "content": "The `Ui` class is responsible for the user interface of the application. It receives the input from the user and prints the results to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Parser"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "imhm"
        },
        "content": "The `Parser` class is responsible for interpreting the user\u0027s input and calling the respective command. "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "imhm"
        },
        "content": "The different `Command` classes are responsible for receiving the user\u0027s input from the `Parser` class and executing the corresponding commands. "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "imhm"
        },
        "content": "The figure belows shows the class diagram of the command class: \u003cbr/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/command.JPG\" alt\u003d\"\" width\u003d\"200\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "imhm"
        },
        "content": "All Command classes inherit from the `Command` class."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Storage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "imhm"
        },
        "content": "The `Storage` class is responsible for reading and writing data to the hard disk."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "imhm"
        },
        "content": "The model is responsible for holding the data of the application in memory. The figure below shows the structure of the Model in this application."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/Model_Class_Diagram.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "imhm"
        },
        "content": " When executing commands,the `CalendarItem` class updates the information or provides the information of different types of items if needed. "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "imhm"
        },
        "content": "It is split into two subclasses: `Task` and `Event` class."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "imhm"
        },
        "content": "The `CalendarList` class holds the array of `CalendarItem` and keeps track of the number of total items, total tasks, and total events."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "imhm"
        },
        "content": "The `Task` and `Event` classes are further explained below."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "#### Task"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "imhm"
        },
        "content": "The `Task` class stores the information of all task items, including description and status, such as isDone and isImportant. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "imhm"
        },
        "content": "It has two subclasses: `Todo` and `Deadline`. `Deadline` items also have the date information and countdown for the deadline date, which are not included in `Todo` tasks. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "#### Event"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "imhm"
        },
        "content": "The `Event` class stores the information of all `Event` items, including date, time, venue, status whether it is overdue, and any other information if added. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "imhm"
        },
        "content": "It has two subclasses: SchoolEvent and Activity. `Activity` items can have other details."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "imhm"
        },
        "content": "All `SchoolEvent` items must have a module code.  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "Furthermore, the `SchoolEvent` class has four subclasses which are `Lecture`, `Tutorial`, `Lab`, and `Exam`. Among them only `Exam` items have a countdown for the exam date. "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "imhm"
        },
        "content": "All `Event` items update the information or provide needed information about `Event` items when executing commands related to events or saving the information to `Storage`."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "imhm"
        },
        "content": "Design consideration: `SchoolEvent` is modelled after NUS modules to cater to our intended users."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "imhm"
        },
        "content": "This section describes the details of how each feature is implemented."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Add a calendar item feature"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "This feature is facilitated by `AddCommand`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works:\u003cbr/\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/add_command_SD.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "imhm"
        },
        "content": "Note: A self-call to a specific method to add the new `CalendarItem` to the `CalendarList` is done based on the `CalendarItem` being added.  "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "imhm"
        },
        "content": "`CalendarItems` with deviations to sequence diagram above: "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "imhm"
        },
        "content": "1. All `CalendarItems` with a date or time attribute calls the `TimeParser` class to interpret the date and time input of the user. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "imhm"
        },
        "content": "2. `Lecture`, `Lab`, `Tutorial`, or `Exam` type does a self-call for an additional check using the function `isValid(command)`. It ensures the module code included in the item is valid."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "imhm"
        },
        "content": "3. `Lecture`, `Lab`, or `Tutorial`can be added as recurring items (multiple addition of the same class).   "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Mark a task as done feature"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "imhm"
        },
        "content": "This feature is facilitated by `DoneCommand`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following sequence diagram show how the `execute()` operation works:\u003cbr/\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/done_command_SD.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "imhm"
        },
        "content": "Note: The command first extracts the task number from the user input prior to `convertTaskNumberToCalendarNumber`. "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "imhm"
        },
        "content": "There will be a check in the function `markTaskAsDone(calendarNumber)` to ensure that the calendar item being marked as done is a task. "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Additional information of an event feature"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Add additional information"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "imhm"
        },
        "content": "This feature is facilitated by `AddInfoCommand`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following sequence diagram show how the `execute()` operation of `AddInfoCommand` works:\u003cbr/\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/addInfoCommand_SD.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### View additional information"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "imhm"
        },
        "content": "This feature is facilitated by `ViewInfoCommand`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following sequence diagram show how the `execute()` operation of `ViewInfoCommand` works:\u003cbr/\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/viewInfoCommand_SD.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Delete additional information"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "imhm"
        },
        "content": "This feature is facilitated by `DeleteInfoCommand`."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following sequence diagram show how the `execute()` operation of `DeleteInfoCommand` works:\u003cbr/\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/deleteInfoCommand_SD.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "imhm"
        },
        "content": "Note: The commands first extracts the event number from the user input prior to `convertEventNumberToCalendarNumber`. "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Delete a calendar item feature"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "imhm"
        },
        "content": "This feature is facilitated by `DeleteCommand`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following sequence diagram show how the `execute()` operation works:\u003cbr/\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/deleteCommand_SD.JPG\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "imhm"
        },
        "content": "Note: The command first extracts the task/event number from the user input prior to `convertTaskNumberToCalendarNumber` and `convertEventNumberToCalendarNumber` respectively. "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Find a calendar item feature"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "imhm"
        },
        "content": "This feature is facilitated by `FindCommand`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following sequence diagram show how the `execute()` operation works when the user searches the entire calendar.:\u003cbr/\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/findCommand_SD.JPG\" alt\u003d\"\" width\u003d\"500\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "imhm"
        },
        "content": "The search for tasks or events feature has a similar sequence diagram with a slight difference to the varying condition. Depending"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "imhm"
        },
        "content": "on whether the user searches for tasks or events, the condition will check for the instance of either the task or event respectively."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Print tasks feature"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This feature is facilitated by `PrintTasksCommand`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works when the user wants to print the list of tasks stored in the program."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![print_tasks_command_sd](images/PrintTasksCommand_SD.png)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Print events feature"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This feature is facilitated by `PrintEventsCommand`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works when the user wants to print the list of events stored in the program."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![print_events_command_sd](images/PrintEventsCommand_SD.png)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "### Print personal calendar feature"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "imhm"
        },
        "content": "This feature is facilitated by `PrintTimelineCommand`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram show how the `execute()` operation works when the user wants to print the personalised calendar.:\u003cbr/\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/PrintTimelineCommand_SD.png\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Prioritize a task feature "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "This feature is facilitated by `PrioritizeCommand`. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works when the user wants to prioritize a task:\u003cbr/\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/PrioritizeCommand_SD.png\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "Note: It first extracts the task number from the user input prior to convertTaskNumberToCalendarNumber. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "There will be a check in the function `markTaskAsImportant(calendarNumber)` to ensure that the calendar item being marked as important is a task."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Print prioritized tasks feature"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "This feature is facilitated by `PrintPriorityCommand`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works when the user wants to print all the prioritized tasks:\u003cbr/\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/PrintPriorityCommand_SD.png\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "Note: It uses the `getIsImportant()` function of task items to identify whether it is a prioritized task."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Print progress feature"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "This feature is facilitated by `PrintProgressCommand`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works when the user wants to see the progress of all tasks:\u003cbr/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/PrintProgressCommand_SD.png\" alt\u003d\"\" width\u003d\"500\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "Note: It uses `calculateNumTotal()` and `calculateNumFinshed()` to calculate the numbers of only tasks and finished tasks in the list, not including events. "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "Then it uses these numbers to calculate the progress. "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "### Print suggestions feature"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "This feature is facilitated by `PrintSuggestionCommand`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works when the user wants to see suggestions about preparing which tasks:\u003cbr/\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "imhm"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/PrintSuggestionCommand_SD.png\" alt\u003d\"\" width\u003d\"500\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "Note: It uses `getEarliestDeadline()` function to get the earliest ordinary deadline in the list, and `getEarImportantDeadline()` function to get the earliest important deadline in the list."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "Similarly, it uses`getFirstTodo()` function to get the first added todo task in the list, and `getFirImportantTodo()` function to get the first added important todo task in the list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "If no corresponding items, the functions will return null."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Print countdown feature"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This feature is facilitated by `CountdownCommand`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "The following sequence diagram shows how the `execute()` operation works when the user decide to see the countdown of exams or deadlines:\u003cbr/\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/countdown_command_SD.jpg\" alt\u003d\"\" width\u003d\"750\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "Note: Before printing the countdown, `countdown()` function will calculate the countdown of exams or deadlines, and the countdowns for"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "exams or deadlines will be sorted in ascending sequence by function `sortDeadlinesAndPrintCountdown()` or `sortExamsAndPrintCountdown()`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "### Saving data feature"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "This feature is facilitated by `Storage` class and saves the data input by the users automatically into file `tasks.txt` in `/data` directory. "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "The file `tasks.txt` is loaded when initializing the program by calling the function `readFromFile()`."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/storage_load_data_SD.jpg\" alt\u003d\"\" width\u003d\"500\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "The local file is updated every time when the user adds or deletes and item, "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "or changes the attributes of the item by calling the function `writeToFile()`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-T12-2/tp/master/images/storage_store_data_SD.jpg\" alt\u003d\"\" width\u003d\"500\"/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "Note: if the local file and directory does not exist at the beginning, `createFile()` will be called to create a new "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "directory, and a new text file."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Check the validity of a module code"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This feature is facilitated by `ModuleChecker` class and `NusModule` class."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The `NusModule` class consists of an empty constructor, a getter and setter to retrieve and set the module code of a `NusModule` object."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The `ModuleChecker` class has a *generateNusModsMap* which generates a HashMap\u003cString, NusModule\u003e. This is achieved by reading"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "the JSON file from the NUS Mod website and parser it into a list of Module objects."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "After which, the isModuleValid function will analyse the module code entered by the user, and returns TRUE if the code is "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "valid, FALSE otherwise."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The following sequence diagram further illustrates the above process. "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![ModuleChecker_SD]()"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "### Documentation guide"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "#### Introduction"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "We use Markdown for writing documentation."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "#### Setting up and maintaining the project website"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "- We use [Jekyll](https://jekyllrb.com/) to manage documentation.  "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "- The docs/ folder is used for documentation.  "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "- To learn how to set it up and maintain the project website, follow the guide [[se-edu/guides] Using Jekyll for project documentation](https://se-education.org/guides/tutorials/jekyll.html)."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "#### Style guidance"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "- Follow the [Google developer documentation style guide](https://developers.google.com/style)."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "- Also relevant is the [[se-edu/guides] Markdown coding standard](https://se-education.org/guides/conventions/markdown.html)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "#### Editing diagrams"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "- We use [diagrams.net](https://www.diagrams.net/) to draw UML diagrams used in this document."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "#### Converting a document to the PDF format"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "- We use Google Chrome for converting documentation to PDF format.  "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "- Here are the steps to convert the project documentation to PDF format:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "  - Go to your generated documentation site on GitHub using Chrome."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "  - Within Chrome, click on the Print option in Chrome’s menu."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "  - Set the destination to Save as PDF, then click Save to save a copy of the file in PDF format."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "- See the guide [[se-edu/guides] Saving web documents as PDF files](https://se-education.org/guides/tutorials/savingPdf.html) for more details.  "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "### Testing guide"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "- Method 1: Using IntelliJ JUnit test runner"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "  - To run all tests, right-click on the src/test/java folder and choose Run \u0027Tests in \u0027tp.test\u0027\u0027"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "  - To run a subset of tests, you can right-click on a test package, test class, or a test and choose Run \u0027DukeTest\u0027"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "- Method 2: Using Gradle"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "  - Open a console and run the command gradlew checkstyleMain (Mac/Linux: ./gradlew checkstyleMain)  "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "### Logging guide"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "- We are using the java.util.logging package for logging."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "- The LogsCenter class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "- The Logger for a class can be obtained using LogsCenter.getLogger(Class) which will log messages according to the specified logging level."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "- Log messages are output through the console and to a .log file."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "- The output logging level can be controlled using the logLevel setting in the configuration file"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "- When choosing a level for a log message, follow the conventions given in [[se-edu/guides] Java: Logging conventions](https://se-education.org/guides/conventions/java/logging.html)."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "  - SEVERE : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "  - WARNING : Can continue, but with caution"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "  - INFO : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "  - FINE : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuration guide"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "### DevOps guide"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### 1. Build automation"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This project uses Gradle for **build automation and dependency management.**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**You are highly recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* `clean`: Deletes the files created during the previous build tasks (e.g. files in the `build` folder)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* `shadowJar`: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, if the current file is outdated."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* `run`: Builds and run the program."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "  `runShadow`: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* `checkstyleMain`: Runs the code style check for the main code base."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "  `checkstyleTest`: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "  "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* `test`: Runs all tests."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * `./gradlew test` - Runs all tests"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * `./gradlew clean test` - Cleans the project and runs tests"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### 2. Continuous integration (CI)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "(in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### 3. Make a release"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Here are the stpes to create a new release after you have implemented new features."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Update the version number in `Main.java`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e. `gradle shadow`)."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Tag the repo with the version number e.g: `V2.0`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. [Create a new release using Github](https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/managing-releases-in-a-repository)."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Upload the JAR file you created."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Appendix A: About the product "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "imhm"
        },
        "content": "This section provides a description of the product."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "imhm"
        },
        "content": "*25HoursADay* is a task scheduling program optimized for use via a Command Line Interface (CLI) while still "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "imhm"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). It serves as a one-stop application for the users to keep track of their"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "imhm"
        },
        "content": "tasks, events and any "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "imhm"
        },
        "content": "It is specially catered to NUS students, offering features relevant to a NUS student. "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "imhm"
        },
        "content": "* NUS student"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* has the need to manage a significant number of day-to-day matters"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* prefer desktop command line apps over other types"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* prefer typing to using mouse interactions"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* comfortable with using command line apps"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* forgetful person who needs reminders"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* a fast typer"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "imhm"
        },
        "content": "By using *25HoursADay*, it provides an all-in-one app for the users to keep track of his/her day-to-day matters. Without the"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "imhm"
        },
        "content": "need to search through different platforms for information. *25HoursADay* can manage one\u0027s day-to-day matters faster than a "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "typical mouse/GUI driven app."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Appendix B: User Stories"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "imhm"
        },
        "content": "This section describes the user stories considered when implementing the features."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|v1.0|user|add different tasks and events|better manage my day-to-day matters|"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "imhm"
        },
        "content": "|v1.0|user|set my tasks as done|track my tasks better|"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "imhm"
        },
        "content": "|v1.0|user|delete my calendar items|remove unwanted items and organise my calendar better |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "imhm"
        },
        "content": "|v1.0|user|print the items added based on their categories|have a clear picture of what I have on hand|"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "|v1.0|user|see my progress of tasks|know the percentage of tasks I have finished and adjust my working pace| "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "|v1.0|user|store all the data locally|load my saved data to the app next time|"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "imhm"
        },
        "content": "|v2.0|user|find an item in my calendar|locate an item without having to go through the entire list|"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "imhm"
        },
        "content": "|v2.0|NUS student|add information about my classes|locate all the information about my class on this app|"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "imhm"
        },
        "content": "|v2.0|NUS student|delete information about my classes|can keep the information about my class relevant at all times |"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "|v2.0|user|mark my tasks as important|distinguish important tasks and the ordinary tasks|"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "|v2.0|user|get some suggestions when I do not know what to do|prepare for important and urgent tasks first|"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|v2.0|NUS student|add my school events recursively|save my time typing out the events one by one|"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "|v2.0|NUS student|see the exam and deadline countdown|be conscious about the coming exams and deadlines and manage my time more wisely|"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Appendix C: Non-Functional Requirements"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. The program should work on any _mainstream_ OS as long as it has **Java 11.0.8** or above installed."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. The program should be able to hold up to 1000 tasks without a noticeable slowness in performance for typical usage."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. A user with an above average typing speed for regular English text (e.g not code, not system admin commands) should "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "find it handy to use command lines rather than using the mouse."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. The program should be able to detect all NUS modules, provided there is proper connection established between the program"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "and the NUS Mods API.   "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "{Give non-functional requirements; More to add}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Appendix D: Glossary"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* *Task* - a todo item or a deadline item."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* *School event* - a lecture, tutorial, lab session or an examination."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "imhm"
        },
        "content": "* *Event* - an activity or a school event."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "imhm"
        },
        "content": "* *Calendar item* - a task or an event.\t"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* *Task list* - a list that stores all the tasks added to the app."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* *Event list* - a list that stores all the events added to the app."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* *Calendar list* - a list that stores all the calendar items added to the app."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Appendix E: Contact the initial developers"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "imhm"
        },
        "content": "The table below shows the information and contact details of developers."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Developer| Contact details | "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "imhm"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Liu Jingming|E0424608@u.nus.edu|"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Liu Yifeng|E0425960@u.nus.edu|"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Lyu Jiawen|E0376928@u.nus.edu|"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Ng Hong Ming|E0426149@u.nus.edu|"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Zhang Yilin|E0377000@u.nus.edu|"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Appendix F: Instructions for manual testing"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "imhm"
        },
        "content": "General steps for manual testing:"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "imhm"
        },
        "content": "1. Execute an \"Add\" action."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "imhm"
        },
        "content": "2. Execute a \"Delete\" / \"Find\" / \"Print\" / \"Set\" / \"View\" action of the same command type."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "imhm"
        },
        "content": "Refer to [Command Summary](#command-summary) to view the list of actions, command types and command format. "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Command summary"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "imhm"
        },
        "content": "The following table contains the list of commands available in the application."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Action| Command Type | Command Format | "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "imhm"
        },
        "content": "|--------|----------|----------|"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add|activity event|`act \u003cactivity_description\u003e @\u003cvenue\u003e / \u003cdate\u003e \u003ctime\u003e`|"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add|additional information for event|`/a \u003cevent_number\u003e - \u003cadditional_information\u003e`|"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add|deadline task|`deadline \u003ctask_description\u003e/ \u003cdue_date\u003e`|"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add| exam event | `exam\u003cmodule_name\u003e @\u003cvenue\u003e / \u003cdate\u003e \u003ctime\u003e` | "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add| lab event  | `lab \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003crecurring_number\u003e / \u003cdate\u003e \u003ctime\u003e` | "
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add| lecture event | `lect \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003crecurring_number\u003e / \u003cdate\u003e \u003ctime\u003e` | "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add| todo task | `todo \u003ctask_description\u003e` | "
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Add| tutorial event | `tut \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003crecurring_number\u003e / \u003cdate\u003e \u003ctime\u003e` | "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Delete| events | `-e \u003cevent_number\u003e` |"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Delete|tasks|`-t \u003ctask_number\u003e`|"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Delete|additional information for event|`/- \u003cevent_number\u003e a \u003cadditional_information_number\u003e`|"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Find|all items|`/f \u003ckeyword\u003e`|"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Find|events|`/fe \u003ckeyword\u003e`|"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Find|tasks|`/ft \u003ckeyword\u003e`|"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print |countdown for all items|`countdown`|"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print |countdown for deadlines|`countdown deadlines`|"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print |countdown for exams|`countdown exams`|"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print |events|`print events`|"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print |important tasks|`print *`|"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print |progress|`print progress`|"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print |tasks|`print tasks`|"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print|timeline (default)|`print timeline`|"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print|timeline before a date|`print timeline date \u003cDATE\u003e`|"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print|timeline for current month|`print timeline month`|"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Print|timeline for current week|`print timeline week`|"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Set|tasks as done|`done \u003ctask number\u003e`|"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Set|tasks as important|`*t \u003ctask_number\u003e`|"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "imhm"
        },
        "content": "|View|additional information|`/v \u003cevent_number\u003e`|"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "imhm"
        },
        "content": "|View|available commands|`help`|"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "imhm"
        },
        "content": "|View|suggestions|`suggestion`|"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "imhm"
        },
        "content": "|Quit|exit the program|`bye`|"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 127,
      "imhm": 190,
      "JiawenLyu": 61,
      "-": 88,
      "Zhangyilin0203": 41
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "# 25HoursADay"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "*25HoursADay* is a scheduling application optimized for users via a convenient yet powerful Command Line Interface (CLI) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, *25HoursADay* can "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "schedule your tasks and events faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Target User Profile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. All NUS Students"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Feature List (for V2.0)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* Personalised Calendar "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * View available commands\t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Add a task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Mark a task as done"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Add an event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Add additional information of an event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Delete a calendar item"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Prioritize tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Find a calendar item"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Print tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Print events"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Print important tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Print progress"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Give suggestion"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Print timeline"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * weekly timeline"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * monthly timeline"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * specific timeline for a day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Print countdown"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* General"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Showing welcome message and exit message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Saving of Calendar items into text file automatically"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * Loading of past Calendar items from text file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Useful links:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [User Guide](https://ay2021s1-cs2113t-t12-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [Developer Guide](https://ay2021s1-cs2113t-t12-2.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [About Us](https://ay2021s1-cs2113t-t12-2.github.io/tp/AboutUs.html)"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 41,
      "imhm": 3,
      "-": 2
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**_25HoursADay_** is a scheduling application optimized for users via a convenient yet powerful Command Line Interface (CLI) "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "while still having the benefits of a Graphical User Interface (GUI). If you can type fast, **_25 hours a day_** can "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "schedule your tasks and events faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Foreword"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "25HoursADay is targeted towards students from National University of Singapore (NUS). This user guide is designed to provide documentation for potential users who will use 25HoursADay on a day-to-day basis. This document will provide a step-by-step guide to show you how to access following features of the program:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1)\tView available commands of the program"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "2)\tAdd tasks and events to the program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "3)\tView your personalized calendar and the items available"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "4)\tSearch an item in the program"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "5)\tPrioritize your tasks and keep track of your progress"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "After familiarizing with all the functionalities, you will definitely be able to better manage your day-to-day matters. Feeling excited? Let’s begin!"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [Important Notes](#important-notes)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [Quick Start](#quick-start)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Viewing available commands](#viewing-available-commands)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Adding a task](#adding-a-task)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Adding a todo task](#adding-a-todo-task)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Adding a deadline task](#adding-a-deadline-task)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Adding an event](#adding-an-event)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Adding an activity event](#adding-an-activity-event)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Adding an examination event](#adding-an-examination-event)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Adding recurring laboratory session event](#adding-recurring-laboratory-session-events)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Adding recurring lecture event](#adding-recurring-lecture-events)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Adding recurring tutorial event](#adding-recurring-tutorial-events)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Adding additional information of an event](#adding-additional-information-to-an-event)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Viewing additional information of an event](#viewing-the-additional-information-of-an-event)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Marking a task as done](#marking-a-task-as-done)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Deleting a calendar item](#deleting-a-calendar-item)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Deleting a task](#deleting-a-task)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Deleting an event](#deleting-an-event)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Finding a calendar item](#finding-a-calendar-item)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Finding any item available](#finding-an-item-from-the-calendar-list)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Finding a task](#finding-an-item-from-the-task-list)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Finding an event](#finding-an-item-from-the-event-list)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Prioritizing task](#prioritizing-a-task)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Printing tasks](#printing-tasks)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Printing events](#printing-events)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Printing progress](#printing-progress)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Giving suggestion](#giving-suggestion)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Printing time line](#printing-timeline)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Printing default calendar](#printing-default-calendar)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Printing calendar for the current week](#printing-calendar-for-the-current-week)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Printing calendar for the current month](#printing-calendar-for-the-current-month)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Printing calendar before a specific date](#printing-calendar-before-a-specific-date)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Printing countdown](#printing-countdown)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [Printing countdown of both deadline and exam events](#printing-countdown-of-both-deadline-and-exam-events)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [printing countdown for deadline tasks only](#printing-countdown-for-deadline-tasks-only)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        * [printing countdown for exam events only](#printing-countdown-for-exam-events-only)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Saving the data](#saving-the-data)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * [Exiting the program](#exiting-the-program)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [Frequently Asked Questions (FAQ)](#faq)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "* [Command summary](#command-summary)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Important Notes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Before we jump into the main content, kindly read this section before proceeding to the feature section for a better understanding of it. This section consists of the legends and common terminology used in the feature section."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The following table shows the list of legends used in this document:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![table_of_legeng](images/Table1_legeng.PNG)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The following table displays the list of terminologies used in this document:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Term| Meaning | "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Task|A to-do item or a deadline item|"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Event|An activity or a school event|"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|School event|Lectures, tutorials, laboratory sessions or examinations.|"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Task list|List of tasks*|"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Event list|List of events*|"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Task number|Refers to the index of the task in the task list|"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Event number|Refers to the index of the event in the event list|"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "*You may view your task list and event list using the `print tasks` and `print events` feature respectively."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Ensure you have Java 11.0.8 or above installed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Download the latest version of the project file **_25HoursADay.jar_** and the JSON data file **_NUS_Mod_info.json_** from [here](https://github.com/AY2021S1-CS2113T-T12-2/tp/releases/tag/V1.0)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Copy the JAR file and the JSON data file to the same folder that you want to use as the _home folder_ for the project file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. In the _Command Prompt_, navigate to the working directory of the _home folder_."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. type the command \"java -jar\" and drag the downloaded **_25HoursADay.jar_** onto the command box and press _Enter_ to strat the programme."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. The _Command Prompt_ should display similar output as shown in the figure below:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    ![Screen_Shot_of_welcome_message](images/Verify_setup.PNG)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Type the command in the _Command Prompt_ and press _Enter_ to execute it. "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    * E.g. typing `help` and pressing _Enter_ will display the help information."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This section provides the features **_25 hours a day_** has to offer. It entails a brief description of what it does and how to use it."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Viewing available commands:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "As a first-time user you can always type help in the terminal to view the list of available commands. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![Screen_Shot_of_help_command](images/Help_Command.PNG)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![wanring_message_for_help](images/warning_help_command.PNG)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Adding a task:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Are you sometimes overwhelmed by different tasks and not sure how to document them properly? Why not just use our task adding features? This feature allows you to add 2 types of tasks:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "•\tTodo task which has no specific due date and just serves as a reminder for your day to day matters."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "•\tDeadline tasks which has a specific due date and the program has a count down feature to monitor them."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The following 2 sub-sections will provide you with the guide on how to add a task to the calendar list.  "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding a todo task:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This function allows you to add a todo task, such as exercise plans or small reminders for your day to day matters "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "which can be a great help if you are a forgetful person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `todo \u003ctask_description\u003e`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`todo exercise for 10 minutes` adds a todo task of exercising for 10 minutes to the calendar list as demonstrated in the figure below."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![todo_command](images/todo_command.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tips_todo](images/tip_for_todo.PNG)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding a deadline task:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This function allows you to add a deadline task, such as project submission or assignment submission and the program "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "will keep track of the due date which will definitely make your study life more manageable!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `deadline \u003ctask_description\u003e / \u003cdue_date\u003e`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`deadline project submission /301020` adds a deadline task of project submission which is due on 30 October 2020 "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "as illustrated by the figure below."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![deadline_command](images/deadline_command.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tips_deadline](images/tips_deadline.PNG)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_dadline](images/warning_deadline.PNG)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Adding an event:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "When you have new events, you can add them to the calendar list in different types, including school events, "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "such as`lecture`, `tutorial`, `exam`, and `lab` events, and other events in `activitie` type."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "You can add `lecture`, `tutorial`, and `lab` events as recurring events, but the `exam` and `activitie` events cannot be recurring. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "When you add events to the list, you can use `lect`, `lab`, `tut`, `exam` or `act` command in following formats:  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tip_event](images/tip_event.PNG)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_event](images/warning_event.PNG)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding an activity event:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This function allows you to add school activities, such as interview workshops or Co-Curriculum Activities (CCAs). "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "This is definitely the best way to keep track of your commitments and will surely make your student life more colourful and gain the most out of it! "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `act \u003cactivity_description\u003e @\u003cvenue\u003e / \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`act CCA @NUS UTOWN / 200920 1600` - adds a CCA event held at NUS UTOWN on 20th September 2020, 4pm as shown in the figure below."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![act_command](images/act_command.png)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_act](images/warning_act.PNG)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding an examination event:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can add an examination event to the calendar list by using the following format."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: Only valid modules provided by NUS are allowed to be added! "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `exam \u003cmodule_name\u003e @\u003cvenue\u003e / \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`exam CS1010 @com1-b1-12 / 121020 1700` - adds CS1010 exam at 2020-10-20 5p.m. to the event list. The venue is com1-b1-12."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`exam CS2113T @MPSH2 / 221120 1100` - adds CS2113T exam at 2020-11-22 11a.m. to the event list. The venue is MPSH2."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding recurring laboratory session events:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "When you have new recurring laboratory events and want to add them to the calendar list, you can use `lab` command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: Only valid modules provided by NUS are allowed to be added! "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The value for `\u003cnumber of lab session\u003e` is in the range of 1 to 13 only!"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `lab \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003cnumber of lab session\u003e / \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`lab CS1010 @com1-b1-14 -r 9 / 200920 1600` - adds CS1010 lab at 2020-09-20 4p.m.  to the event list, the venue is com1-b1-14 and the lab will happen for the next 9 weeks."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`lab CG2028 @com2-2112 -r 9 / 220920 1300` - adds CG2028 lab at 2020-09-22 1p.m. to the event list, the venue is com2-2112 and the lab will happen for the next 9 weeks."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding recurring lecture events:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "When you have new recurring lecture events and want to add them to the calendar list, you can use `lect` command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: Only valid modules provided by NUS are allowed to be added! "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The value for `\u003cnumber of lecutre\u003e` is in the range of 1 to 13 only!"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `lect \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003cnumber of lecutre\u003e / \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`lect CS2113 @lt12 -r 10 / 020220 1600` - adds CS2113 lecture at 2020-02-02 4p.m. to the event list, the venue is lt12 and the lecture will happen for the next 10 weeks."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`lect CS2100 @lt11 -r 5 / 101020 1300` - adds CS2100 lecture at 2020-10-10 1p.m. to the event list, the venue is lt11 and the lecture will happen for the next 5 weeks."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding recurring tutorial events:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "When you have new recurring tutorial events and want to add them to the calendar list, you can use `tut` command."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: Only valid modules provided by NUS are allowed to be added! "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The value for `\u003cnumber of tutorial\u003e` is in the range of 1 to 13 only!"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `tut \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003cnumber of tutorial\u003e / \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`tut CS1010 @com1-b1-12 -r 5 / 121020 1700` - adds CS1010 lab at 2020-10-20 5p.m. to the event list, the venue is com1-b1-12 and the tutorial will happen for the next 5 weeks."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`tut CS2100 @com1-1111 -r 5 / 151020 1400` - adds CS2100 lab at 2020-10-15 2p.m. to the event list, the venue is com1-1111 and the tutorial will happen for the next 5 weeks."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_event_date](images/warning_event_format.PNG)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Additional information of an event"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Adding additional information to an event:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can add additional information pertaining to an event in your calendar list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `/a \u003cevent_number\u003e - \u003cadditional information\u003e`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`/a 1 - This is the additional information for event number 1`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tip_addtional_info](images/tip_additional_info.PNG)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Viewing the additional information of an event:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can view the additional information pertaining to an event in your calendar list."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `/v \u003cevent_number\u003e`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`/v 1` - This lists the additional information that you have added for event number 1."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Marking a task as done:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "To help manage your tasks better, you can mark a task on your calendar list as completed by using the `done` command. "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "If the task is done, you will be able to see a small tick [/] beside the task. Else, you will see a cross [X] beside the task"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `done \u003ctask_number\u003e`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`done 1` - By using this command, you will mark the first task on your task list as done! "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![done_command](images/done_command.PNG)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "differ if you have a different task stored in the task index number 1."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_done](images/warning_done.PNG)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Deleting the additional information of an event:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "imhm"
        },
        "content": "You can view the additional information pertaining to an event in your calendar list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "imhm"
        },
        "content": "Format: `/- \u003cevent_number\u003e a \u003cadditional_information_number\u003e`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "imhm"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "imhm"
        },
        "content": "`/- 1 a 2` - When you view the additional information for event number 1, you will not be able to see that additional information that you have just deleted."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Deleting a calendar item:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You may delete any calendar item that you deem unnecessary by using the following command:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Deleting a task:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can delete a task from your calendar list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `-t \u003ctask_number\u003e`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " `-t 1` - This removes task number 1 from your calendar."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Deleting an event:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can delete an event from your calendar list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `-e \u003cevent_number\u003e`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " `-e 1` - This removes event number 1 from your calendar."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Finding a calendar item:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can find a calendar item based on a specific keyword. Additionally, you may filter the search based on whether it is a task or an event. "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Finding an item from the calendar list:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can search the entire calendar based on a keyword."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `/f \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`/f Tuition` - the lists of items (both tasks and events) containing the keyword “Tuition” will appear."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tip_find](images/tip_find.PNG)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Finding an item from the task list: "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can search the task list based on a keyword."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `/ft \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`/ft Tuition` - the lists of tasks containing the keyword “Tuition” will appear."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Finding an item from the event list: "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "You can search the event list based on a keyword."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `/fe \u003ckeyword\u003e`"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`/fe Tuition` - the lists of events containing the keyword “Tuition” will appear."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tip_find_event](images/tip_find_event.PNG)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Prioritizing a task:                                                                                                "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "When you have important tasks, you can prioritize them in the task list to distinguish from ordinary tasks."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "If you want to prioritize an important task, you can use *t \u003ctask_number\u003e to mark the task as important. "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `*t \u003ctask_number\u003e`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    "
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "`*t 1` - marks the first task in the task list as important."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_prioritizing](images/warning_prioritizing.PNG)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Printing tasks:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "If you want to prioritize or delete some of the tasks on hand but cannot recall the task number as there are simply "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "too many tasks, you can always ask the program to print out all tasks saved in the program. "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "In this way, you can have a better picture of the tasks on hand! "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print tasks`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![printTasks](images/printTasks_command.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "differ if you have different items stored in the calendar list."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tips_printtask](images/tip_printTasks.PNG)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Printing events:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "If you want to delete past events or to add additional information to a certain event, you can always ask the program "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "imhm"
        },
        "content": "to display all events saved in the program. This feature will definitely save your brain space wasted on memorising them."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print events`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![printEvents](images/printEvents_command.png)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "differ if you have different items stored in the calendar list."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tips_printevents](images/tip_printEvents.PNG)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Printing important tasks:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    "
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "If you just want to view all the important tasks instead of all the tasks in the calendar list now, "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "you can type `print *` command to view the list of important tasks together with their information.                           "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                                                    "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print *`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![print*](images/printImportant_command..PNG)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "differ if you have different items stored in the calendar list."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Printing progress: "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "If you have a lot of tasks and want to trace the progress of how many of the tasks have been finished, "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "you can type  `print progress` command to see the fraction and percentage proportion of the finished tasks among all the tasks."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print progress`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![print_progress](images/printProgress_command.PNG)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "differ if you have different items stored in the calendar list."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Giving suggestion: "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "When you have a lot of tasks and do not know preparing for which several tasks first, you can get some simple suggestions from the 25HoursADay. "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "This application can select several important and urgent tasks in the task list for you. If you want to view the suggestions, "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "you can type the `suggestion` command to see the recommended tasks together with their information.  "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `suggestion`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![suggestion_command](images/suggestion_command.PNG)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "differ if you have different items stored in the calendar list."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Printing timeline"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to see your calendar items in a timeline format, you can always use the personalised calendar feature. "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "There are four kinds of personalised calendar that you can print: default calendar, weekly calendar, monthly calendar, "
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "and calendar before a specific date you choose."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Printing default calendar: "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Print the personal calendar including all calendar items, with todo items (which do not have a specific date) printed as a list at the bottom of the timeline."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print timeline`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![print_timeline](images/printTimeline_command.PNG)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "differ if you have different items stored in the calendar list."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Printing calendar for the current week: "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Print the personal calendar for the current week."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print timeline week`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Printing calendar for the current month: "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Print the personal calendar for the current month."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print timeline month`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![tip_timeline_month](images/warning_timeline_month.PNG)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Printing calendar before a specific date:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Print the calendar before a specific date."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `print timeline date \u003cDATE\u003e`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_timeline_date](images/warning_timeline_date.PNG)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Printing countdown:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "      "
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "If you want to see the countdown of all the upcoming exams and know how much time you still have to review, or you want to "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "double check how many days you still have before the deadline, you can type the `countdown`, `countdown exams`, or `countdown deadlines` command."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Printing countdown of both deadline and exam events: "
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "If you type `countdown`, you can see the countdown of all the unfinished deadlines tasks and all the upcoming exam events."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "The remaining date is printed in ascending order."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "All the unfinished deadlines will be printed before all the upcoming exams."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `countdown`"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " ![countdown](images/countdown_command.PNG)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " Note: The above figure is for illustration purpose only. The desired output will"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " differ if you have different items stored in the calendar list."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Printing countdown for exam events only: "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "If you type `countdown exams`, you can see the countdown of all upcoming exams."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "The remaining date for the exams is printed in ascending order."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `countdown exams`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![warning_countdown](images/warning_countdown.PNG)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Printing countdown for deadline tasks only: "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "If you type `countdown deadlines`, you can see the countdown of all unfinished deadlines."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "The remaining dates for the deadlines are printed in ascending order."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `countdown deadlines`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "When you close the program or you make some changes to the program such as adding an event, the data for the tasks and events "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "are automatically saved locally. So, there is no need for users to save manually."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Next time when you open the program, all the data will automatically be loaded from the local file to the program."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Exiting the program: "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "If you want to exit the program, you can always type `bye` in the terminal to quit and all the data entered will be saved "
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "automatically for your future use. "
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "![bye_command](images/bye_command.png)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "Want to find out more about 25HoursADay? "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "How to transfer our data to another device? Or how to store our data? "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "Here are the most common questions that NUS students would ask about our app. "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "The questions and the answers to them can be found below."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**A**: Download the program in the other computer and overwrite the empty data file it creates with the data from your "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "previous **_25HoursADay.jar_**."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**Q**: Can I use **_25 hours a day_** on different operating systems like Linux, Windows, or macOS?  "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**A**: Yes, **_25 hours a day_** is compatible with Linux, Windows and macOS."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**Q**: Will the data be saved if I accidentally close my program without typing the command bye?  "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**A**: Yes, the data will automatically be saved locally even when you close your program halfway."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**Q**: If I wrongly deleted my task, can I undo it?"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "**A**: No, currently **_25 hours a day_** doesn\u0027t have an undo feature, therefore you need to manually add your task back "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "using `add` command."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Term| Meaning | Command Format|"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|--------|----------------|--------|"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|activity event|`act \u003cactivity_description\u003e @\u003cvenue\u003e / \u003cdate\u003e \u003ctime\u003e`|"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|additional information for event|`/a \u003cevent_number\u003e - \u003cadditional_information\u003e`|"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|deadline task|`deadline \u003ctask_description\u003e/ \u003cdue_date\u003e`|"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|exam event|`exam\u003cmodule_name\u003e @\u003cvenue\u003e / \u003cdate\u003e \u003ctime\u003e`|"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|lab event|`lab \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003crecurring_number\u003e / \u003cdate\u003e \u003ctime\u003e`|"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|lecture event|`lect \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003crecurring_number\u003e / \u003cdate\u003e \u003ctime\u003e`|"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|todo task|`todo \u003ctask_description\u003e`|"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Add|tutorial event|`tut \u003cmodule_name\u003e @\u003cvenue\u003e -r \u003crecurring_number\u003e / \u003cdate\u003e \u003ctime\u003e`|"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Delete|events|`-e \u003cevent_number\u003e`|"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Delete|tasks|`-t \u003ctask_number\u003e`|"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Find|all items|`/f \u003ckeyword\u003e`|"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Find|events|`/fe \u003ckeyword\u003e`|"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Find|tasks|`/ft \u003ckeyword\u003e`|"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|countdown for all items|`countdown`|"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|countdown for deadlines|`countdown deadlines`|"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|countdown for exams|`countdown exams`|"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|events|`print events`|"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|important tasks|`print *`|"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|progress|`print progress`|"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|tasks|`print tasks`|"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|timeline (default)|`print timeline`|"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|timeline before a date|`print timeline date \u003cDATE\u003e`|"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|timeline for current month|`print timeline month`|"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Print|timeline for current week|`print timeline week`|"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "|Quit|exit the program|`bye`|"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 507,
      "imhm": 10,
      "JiawenLyu": 16,
      "-": 33,
      "Zhangyilin0203": 15
    }
  },
  {
    "path": "docs/team/LIU-YiFeng-1.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "# LIU YIFENG - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Our product, **_25HoursADay_** is a scheduling application catered for NUS students. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "It is optimised for use via the Command Line Interface (CLI) and it serves as an efficient one stop application for our users to manage their time. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Code contributed:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Enhancements implemented:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "A summary of the enhancements you implemented."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Contributions to documentation:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Which sections did you contribute to the UG?"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Contributions to the DG:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Which sections did you contribute to the DG? Which UML diagrams did you add/updated?"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Review/mentoring contributions: Links to PRs reviewed, instances of helping team members in other ways"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Contributions beyond the project team:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Evidence of helping others e.g. responses you posted in our forum, bugs you reported in other team\u0027s products,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Evidence of technical leadership e.g. sharing useful information in the forum"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "Keep in mind that evaluators will use the PPP to estimate your project effort. We recommend that you mention things that will earn you a fair score e.g., explain how deep the enhancement is, why it is complete, how hard it was to implement etc.."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Contributions to the User Guide (Extracts):"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " Reproduce the parts in the User Guide that you wrote. This can include features you implemented as well as features you propose to implement."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "The purpose of allowing you to include proposed features is to provide you more flexibility to show your documentation skills. e.g. you can bring in a proposed feature just to give you an opportunity to use a UML diagram type not used by the actual features."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "#### Contributions to the Developer Guide (Extracts):"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " Reproduce the parts in the Developer Guide that you wrote. Ensure there is enough content to evaluate your technical documentation skills and UML modelling skills. You can include descriptions of your design/implementations, possible alternatives, pros and cons of alternatives, etc."
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 28
    }
  },
  {
    "path": "docs/team/imhm.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "# Ng Hong Ming - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "Our product, **_25HoursADay_** is a scheduling application catered for NUS students. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "It is optimised for use via the Command Line Interface (CLI) and it serves as an efficient one stop application for our users to manage their time. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Code contributed:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dimhm"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Enhancements implemented:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "A summary of the enhancements you implemented."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Contributions to documentation:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "Which sections did you contribute to the UG?"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Contributions to the DG:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "Which sections did you contribute to the DG? Which UML diagrams did you add/updated?"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "Review/mentoring contributions: Links to PRs reviewed, instances of helping team members in other ways"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Contributions beyond the project team:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "Evidence of helping others e.g. responses you posted in our forum, bugs you reported in other team\u0027s products,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "Evidence of technical leadership e.g. sharing useful information in the forum"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "Keep in mind that evaluators will use the PPP to estimate your project effort. We recommend that you mention things that will earn you a fair score e.g., explain how deep the enhancement is, why it is complete, how hard it was to implement etc.."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Contributions to the User Guide (Extracts):"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": " Reproduce the parts in the User Guide that you wrote. This can include features you implemented as well as features you propose to implement."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "The purpose of allowing you to include proposed features is to provide you more flexibility to show your documentation skills. e.g. you can bring in a proposed feature just to give you an opportunity to use a UML diagram type not used by the actual features."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "#### Contributions to the Developer Guide (Extracts):"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": " Reproduce the parts in the Developer Guide that you wrote. Ensure there is enough content to evaluate your technical documentation skills and UML modelling skills. You can include descriptions of your design/implementations, possible alternatives, pros and cons of alternatives, etc."
      }
    ],
    "authorContributionMap": {
      "imhm": 27
    }
  },
  {
    "path": "docs/team/zhangyl.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "# Zhang Yilin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* [Overview](#overview)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* [Summary of Contributions](#summary-of-contributions)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * [Code contributed](#code-contributed)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * [Enhancements implemented](#enhancements-implemented)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    * [Enhancements to new features](#enhancements-to-new-features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    * [Enhancement to existing features](#enhancement-to-existing-features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * [Contributions to team based tasks](#contributions-to-team-based-tasks)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * [Contributions to documentation](#contributions-to-documentation)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    * [Contributions to the developer guide](#contributions-to-the-developer-guide)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    * [Contributions to the user guide](#contributions-to-the-user-guide)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * [Contributions beyond the project team](#contributions-beyond-the-project-team)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "Our product, **_25HoursADay_** is a scheduling application catered for NUS students. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "It is optimised for use via the Command Line Interface (CLI) and it serves as an efficient one stop application for our users to manage their time. \u003cbr/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "Given below are my contributions to the project. \u003cbr/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "### Code contributed:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dzhangyilin0203"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "### Enhancements implemented:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "#### Enhancements to New features:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added ability to save and load data to local file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": " ([\\#17](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/17),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  [\\#31](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/31),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  [\\#58](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/58),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  [\\#90](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/90))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * What it does: Add the ability to store the changed data to a local file"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                   and load the data to the application when the application opens."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * Justification: The feature improve the application significantly as it can let users store the data they have "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                   already written to the program, which increase the efficiency of the application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  * Highlights: This feature is able to store the changed data locally even if user accidentally close the application."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added ability to print the countdown for exams and deadlines."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#77](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/77),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   [\\#168](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/168))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   * What it does: Add the ability to print the countdown for deadline tasks and exam events."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   * Justification: This feature allows user to view how much time is left for their deadline and exams so that they can"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    better prepare for them."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   * Highlights: This feature is able to print the countdowns in the ascending order, so that the most urgent task "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                 or event is at the top."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "#### Enhancement to existing features:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added more JavaDoc comments for some public methods."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#73](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/73))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Improved code quality of code by deleting unused methods, avoiding too long methods, magic string and unused exceptions."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#60](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/60))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Wrote Junit tests to increase coverage."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#87](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/87))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "### Contributions to team-based tasks:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Reviewed team members\u0027 PR, and gave them some suggestions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#86](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/86),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   [\\#30](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/30))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Fixed the code regularly to make sure it passes CI on GitHub."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "### Contributions to documentation:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "#### Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added an introduction to the Developer Guide."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#118](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/118))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added implementation for the feature `save data`, `load data`, `print countdown`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#129](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/129),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   [\\#186](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/186),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   [\\#187](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/187),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   [\\#200](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/200),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   )"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added sequence diagram for feature `save data`, `load data`, `print countdown`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#128](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/128),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   [\\#183](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/183),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "   [\\#190](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/190))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added the glossary for Developer Guide."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#119](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/119))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Added part of the user stories."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#171](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/171))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "#### Contributions to the User Guide:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Documented features `saving the data`, and `printing countdown`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#169](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/169))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Documented the FAQ part of user guide."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "  ([\\#169](https://github.com/AY2021S1-CS2113T-T12-2/tp/pull/169))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "#### Contributions beyond the project team:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "* Reported bugs in other team\u0027s project during PE."
      }
    ],
    "authorContributionMap": {
      "Zhangyilin0203": 81
    }
  },
  {
    "path": "src/main/java/seedu/duke/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Signals an error caused by an invalid command input by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private String exception;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "        exception \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String getException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Extracts dates input by the user. Returns a LocalDate."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Default date format is ddMMyy for fastest date input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "public abstract class DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    //@@author Jingming517 - reused with minor modification."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     * Converts date of a user input from a String to LocalDate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     * @param date string of date to process."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     * @return date in LocalDate format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    public static LocalDate inputDateProcessor(String date) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"ddMMyy\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        LocalDate ld \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        String valid \u003d ld.format(formatter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        if (!valid.equals(date)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        return ld;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    //@@author Jingming517 */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    public static LocalTime inputTimeProcessor(String time) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        if (time.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        LocalTime lt \u003d LocalTime.parse(time, formatter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        String valid \u003d lt.format(formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        if (!valid.equals(time)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "            throw new Exception();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        return lt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 11,
      "Jingming517": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Entry point of the Main application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Initializes the application and starts the interaction with the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private CalendarList calendarList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Initializes the application and imports the data stored locally to the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param filePath Filepath of the storage data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Main(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        storage.readFromFile(calendarList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Reads the user command and executes it, until the user issues the exit command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Greets the user upon start up and exit."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "                Command c \u003d Parser.handleUserInput(fullCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "                Ui.printBorder(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "                c.execute(calendarList, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "                Ui.printExceptionMessage(e, calendarList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "                Ui.printBorder(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "        new Main(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 46,
      "-": 7,
      "Zhangyilin0203": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.AddInfoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.CountdownCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.DeleteInfoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "import seedu.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.command.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.command.PrintEventsCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.PrintPriorityCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.PrintProgressCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.PrintSuggestionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.command.PrintTasksCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "import seedu.duke.command.PrintTimelineCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.command.PrioritizeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.command.ViewInfoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Determines the type of command input by the user and calls for the respective command function."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_DELETE \u003d \"-\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public static final String COMMAND_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_FIND \u003d \"/f\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public static final String COMMAND_PRINT_EVENTS \u003d \"print events\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public static final String COMMAND_PRINT_TASKS \u003d \"print tasks\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    public static final String COMMAND_PRINT_TIMELINE \u003d \"print timeline\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String COMMAND_SHOW_PROGRESS \u003d \"print progress\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static final String COMMAND_SHOW_COUNTDOWN \u003d \"countdown\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_ADD_INFO \u003d \"/a\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_VIEW_INFO \u003d \"/v\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_DELETE_INFO \u003d \"/-\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String COMMAND_PRIORITIZE \u003d \"*\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String COMMAND_PRINT_PRIORITY \u003d \"print *\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String COMMAND_PRINT_SUGGESTION \u003d \"suggestion\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static Command handleUserInput(String userInput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (userInput.equals(COMMAND_EXIT)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new ExitCommand(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.equals(COMMAND_HELP)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new HelpCommand(userInput);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } else if (userInput.equals(COMMAND_PRINT_TASKS)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            return new PrintTasksCommand(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } else if (userInput.equals(COMMAND_PRINT_EVENTS)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            return new PrintEventsCommand(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_PRINT_TIMELINE)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "            return new PrintTimelineCommand(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_DONE)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_FIND)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new FindCommand(userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_ADD_INFO)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new AddInfoCommand(userInput);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_VIEW_INFO)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new ViewInfoCommand(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_DELETE_INFO)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new DeleteInfoCommand(userInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else if (userInput.equals(COMMAND_SHOW_PROGRESS)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return new PrintProgressCommand(userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_SHOW_COUNTDOWN)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            return new CountdownCommand(userInput);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else if (userInput.startsWith((COMMAND_PRIORITIZE))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return new PrioritizeCommand(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else if (userInput.equals(COMMAND_PRINT_PRIORITY)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return new PrintPriorityCommand(userInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else if (userInput.equals(COMMAND_PRINT_SUGGESTION)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return new PrintSuggestionCommand(userInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "            /** An invalid command is catered for in AddCommand */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 8,
      "imhm": 51,
      "JiawenLyu": 15,
      "Jingming517": 5,
      "-": 1,
      "Zhangyilin0203": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Exam;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Lab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.event.Lecture;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.event.Tutorial;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Todo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents the local file used to store the task list data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int TYPE \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int TASK_IS_DONE \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int TASK_DESCRIPTION \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int TASK_IMPORTANT \u003d 3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int TASK_DATE \u003d 4;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int EVENT_MODULE_CODE \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int DETAILS \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int EVENT_IS_OVER \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int EVENT_DATE \u003d 3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int EVENT_TIME \u003d 4;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int EVENT_VENUE \u003d 5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final int EVENT_ADDITION_INFO \u003d 6;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private static ArrayList\u003cCalendarItem\u003e taskArrayList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static int countFileTasks \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Constructor of the Storage class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Initialize file f and file path, if f does not exists, creat a new file f."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param filePath the path that is the destination of the file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Creates a new storage file if the file does not exists."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param output Storage file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static void createFile(File output) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (output.exists()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (!output.getParentFile().exists()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                output.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            output.createNewFile();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            Ui.printFileCreateErrorMessage(e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Write the data from taskList into file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list that the data is stored during running the program."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void writeToFile(CalendarList calendarList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            assert filePath !\u003d null : \"filePath should not be null\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            File output \u003d new File(filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            createFile(output);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            FileWriter fw \u003d new FileWriter(output);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "            taskArrayList \u003d calendarList.getCalendarList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "imhm"
        },
        "content": "            for (CalendarItem item : taskArrayList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": "                fw.write(item.printIntoFile() + \"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "imhm"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            Ui.printSaveDataErrorMessage(e);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Read data from file and store the data into the taskList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList A taskList that store the data read from file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void readFromFile(CalendarList calendarList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        File input \u003d new File(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        createFile(input);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            Ui.printFileNotFoundMessage();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            CalendarItem item \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            String[] taskInFile \u003d sc.nextLine().split(\"\\\\|\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            int num \u003d taskInFile.length;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            assert taskInFile[TYPE] !\u003d null : \"the type of the task should not be null\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            switch (taskInFile[TYPE]) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (num \u003d\u003d 4) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    item \u003d new Todo(taskInFile[TASK_DESCRIPTION]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (num \u003d\u003d 5) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    date \u003d LocalDate.parse(taskInFile[TASK_DATE].trim());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    item \u003d new Deadline(taskInFile[TASK_DESCRIPTION], date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            case \"ACT\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (num \u003e\u003d 7) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    if (taskInFile[EVENT_DATE].equals(\"\") || taskInFile[EVENT_TIME].equals(\"\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    date \u003d LocalDate.parse(taskInFile[EVENT_DATE].trim());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    time \u003d LocalTime.parse(taskInFile[EVENT_TIME].trim());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    item \u003d new Activity(taskInFile[DETAILS], date, time, taskInFile[EVENT_VENUE]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            case \"LEC\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (num \u003e\u003d 7) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    if (taskInFile[EVENT_DATE].equals(\"\") || taskInFile[EVENT_TIME].equals(\"\")) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    date \u003d LocalDate.parse(taskInFile[EVENT_DATE].trim());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    time \u003d LocalTime.parse(taskInFile[EVENT_TIME].trim());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    item \u003d new Lecture(taskInFile[EVENT_MODULE_CODE], date, time, taskInFile[EVENT_VENUE]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            case \"TUT\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (num \u003e\u003d 7) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    if (taskInFile[EVENT_DATE].equals(\"\") || taskInFile[EVENT_TIME].equals(\"\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    date \u003d LocalDate.parse(taskInFile[EVENT_DATE].trim());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    time \u003d LocalTime.parse(taskInFile[EVENT_TIME].trim());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    item \u003d new Tutorial(taskInFile[EVENT_MODULE_CODE], date, time, taskInFile[EVENT_VENUE]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            case \"LAB\":"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (num \u003e\u003d 7) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    if (taskInFile[EVENT_DATE].equals(\"\") || taskInFile[EVENT_TIME].equals(\"\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    date \u003d LocalDate.parse(taskInFile[EVENT_DATE].trim());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    time \u003d LocalTime.parse(taskInFile[EVENT_TIME].trim());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    item \u003d new Lab(taskInFile[EVENT_MODULE_CODE], date, time, taskInFile[EVENT_VENUE]);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            case \"EXAM\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (num \u003e\u003d 7) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    if (taskInFile[EVENT_DATE].equals(\"\") || taskInFile[EVENT_TIME].equals(\"\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    date \u003d LocalDate.parse(taskInFile[EVENT_DATE].trim());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    time \u003d LocalTime.parse(taskInFile[EVENT_TIME].trim());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    item \u003d new Exam(taskInFile[EVENT_MODULE_CODE], date, time, taskInFile[EVENT_VENUE]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                Ui.printWrongStorageInput();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            countFileTasks++;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            markTaskAsDone(item, taskInFile);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            markEventAsOver(item, taskInFile);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            markTaskAsImportant(item, taskInFile);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            addItemToCalendarList(calendarList, item);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            loadAdditionInformation(item, taskInFile, num);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Adds an item into the calendar list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list we want to add our item to."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param item the item we want to add to the calendar list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static void addItemToCalendarList(CalendarList calendarList, CalendarItem item) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (item instanceof Task) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            calendarList.addTask((Task) item);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else if (item instanceof Event) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            calendarList.addEvent((Event) item);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Marks a task as important."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param item the task we need to mark as important."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param taskInFile the data stored in the local file."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static void markTaskAsImportant(CalendarItem item, String[] taskInFile) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (item instanceof Task) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (taskInFile[TASK_IMPORTANT].equals(\"true\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                ((Task) item).markAsImportant();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Marks an event as over."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param item the event we need to mark as over."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param taskInFile the data stored in the local file."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static void markEventAsOver(CalendarItem item, String[] taskInFile) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (item instanceof Event) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (taskInFile[EVENT_IS_OVER].equals(\"true\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                ((Event) item).markAsOver();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param item the task that we need to mark as done."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param taskInFile the data stored in local file."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static void markTaskAsDone(CalendarItem item, String[] taskInFile) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (item instanceof Task) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (taskInFile[TASK_IS_DONE].equals(\"true\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                ((Task) item).markAsDone();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Loads the additional information stored in the local file."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param item the event we need to add the additional information."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param taskInFile the data in the local file."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param num the total splitting number."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static void loadAdditionInformation(CalendarItem item, String[] taskInFile, int num) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (item instanceof Event) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (!taskInFile[EVENT_ADDITION_INFO].equals(\"0\")) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                int i;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                for (i \u003d 1; i \u003c\u003d num - EVENT_ADDITION_INFO - 1; i++) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    ((Event) item).setAdditionalInformation(taskInFile[i + EVENT_ADDITION_INFO]);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 49,
      "Zhangyilin0203": 220
    }
  },
  {
    "path": "src/main/java/seedu/duke/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.calendar.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Exam;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.calendar.event.Lab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.calendar.event.Lecture;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Tutorial;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.task.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Text UI of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_FIND_EVENT \u003d \"/fe\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_FIND_TASK \u003d \"/ft\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_FIND_EVENT_OR_TASK \u003d \"/f\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private Scanner in;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Lists all available commands to the user with the format of the command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printHelpCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"List of available commands:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"1. todo \u003ctask description\u003e\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"2. deadline \u003ctask description\u003e /ddMMyy\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"3. act \u003cactivity description\u003e @\u003cvenue\u003e /ddMMyy HHmm\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"4. exam \u003cmodule code\u003e @\u003cvenue\u003e /ddMMyy HHmm\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"5. lect \u003cmodule code\u003e @\u003cvenue\u003e -r \u003cnumber of lecture\u003e /ddMMyy HHmm\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"6. tut \u003cmodule code\u003e @\u003cvenue\u003e -r \u003cnumber of tutorial\u003e /ddMMyy HHmm\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"7. lab \u003cmodule code\u003e @\u003cvenue\u003e -r \u003cnumber of lab session\u003e /ddMMyy HHmm\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"8. done \u003ctask number\u003e\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"9. -t \u003ctask number\u003e\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"10. -e \u003cevent number\u003e\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"11. *t \u003ctask number\u003e\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"12. /f \u003ckeyword of task/event\u003e\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"13. /ft \u003ckeyword of task\u003e\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"14. /fe \u003ckeyword of event\u003e\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"15. print tasks\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"16. print events\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"17. print timeline \u003cweek/month/\u003e\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"18. print progress\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"19. print *\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"20. countdown exams\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"21. countdown deadlines\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"22. /a \u003cevent number\u003e - information\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                + \"23. /v \u003cevent number\u003e\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"24. /- \u003cevent_number\u003e a \u003cadditional_information_number\u003e\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \"25. suggestion\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "imhm"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the number of tasks in the calendar list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList containing the tasks."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printTotalTaskNumber(CalendarList calendarList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Your total task(s): \" + calendarList.getTotalTasks());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Prints the file not found message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void printFileNotFoundMessage() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        System.out.println(\"The file cannot be found: You should follow the UG\u0027s quick \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + \"start to normally access the file\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns the input of the user."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @return user\u0027s input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printWelcomeMessage() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        String hi \u003d \" #####  #######   #     # ####### #     # ######   #####       #      ######     #   #     #\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"#     # #         #     # #     # #     # #     # #     #     # #     #     #   # #   #   #\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"      # #         #     # #     # #     # #     # #          #   #    #     #  #   #   # #\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \" #####  ######    ####### #     # #     # ######   #####    #     #   #     # #     #   #\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"#             #   #     # #     # #     # #   #         #   #######   #     # #######   #\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"#       #     #   #     # #     # #     # #    #  #     #   #     #   #     # #     #   #\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"#######  #####    #     # #######  #####  #     #  #####    #     #   ######  #     #   #\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        System.out.println(hi);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"Welcome to 25 Hours A Day Task Manager!\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"What can I do for you?\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"Enter \u0027help\u0027 for the list of commands.\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the exit message."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printExitMessage() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the border of the chat box."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param top set to true to print the top border. Else, set to false to print the bottom border"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printBorder(boolean top) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (top) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"................................. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    + \"25HoursADay Chat Box ^^ ...............................\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"....................................................\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \".....................................\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Prints when user changes the content of the file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void printWrongStorageInput() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        System.out.println(\"The content of the file is changed by user, cannot load\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Shows the task deleted and the number of tasks left in the list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param numberDelete task number of the task to be deleted."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList task list of the task to be deleted."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printDeleteMessage(int numberDelete, CalendarList calendarList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarList !\u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Deleted:\\n\" + calendarList.getCalendarList().get(numberDelete));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the last additional information of a particular event."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param event event containing the additional information."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printLastAdditionalInformation(Event event) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert event !\u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Event: \" + event);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int lastIndexOfAdditionalInformation \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "imhm"
        },
        "content": "                event.getAdditionalInformationCount() - 1; // -1 to cater for array list starting from 0"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Additional info added: \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + event.getAdditionalInformationElement(lastIndexOfAdditionalInformation));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the additional information based on the index."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param event     containing the additional information."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param indexInfo index of the additional information in the array list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printAdditionalInformation(Event event, int indexInfo) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Event: \" + event);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Additional info deleted: \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + event.getAdditionalInformationElement(indexInfo));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the list of additional information of a particular event."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param additionalInformation array list of the additional information."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param event                 event that contains the additional information."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printAllAdditionalInformation(ArrayList\u003cString\u003e additionalInformation, Event event) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert event !\u003d null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Event:\" + event);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "imhm"
        },
        "content": "        for (String s : additionalInformation) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "imhm"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(i + \". \" + s);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Shows the user the list of items in the calendar list,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * formatted as an indexed list starting from 1."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList tasks retrieved from this task list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printTaskListView(CalendarList calendarList) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        assert calendarList !\u003d null;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        int taskCounts \u003d 0;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"This is your list of task(s):\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (calendarList.getCalendarList().get(i) instanceof Task) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                taskCounts++;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                System.out.printf(\"%d.\" + calendarList.getCalendarList().get(i) + \"\\n\", taskCounts);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        if (taskCounts \u003d\u003d 0) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Oops, there are no tasks stored in your list!\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Shows the user all the events in the calendar list,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * such as lecture, lab, tutorial and events."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList tasks retrieved from this task list."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printEventsListView(CalendarList calendarList) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        assert calendarList !\u003d null;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        int eventCounts \u003d 0;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        System.out.println(\"This is your list of event(s):\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (calendarList.getCalendarList().get(i) instanceof Event) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                eventCounts++;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "imhm"
        },
        "content": "                System.out.printf(\"%d.\" + calendarList.getCalendarList().get(i) + \"\\n\", eventCounts);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        if (eventCounts \u003d\u003d 0) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Oops, there are no events stored in your list!\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Shows the user the task (that was indicated by the user) that was marked as done ."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarNumberCompleted calendar number of the task set as done."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList            calendar list that has the task marked as done."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printCompleteTaskMessage(int calendarNumberCompleted, CalendarList calendarList) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarList !\u003d null;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "imhm"
        },
        "content": "                \"Good work! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        + calendarList.getCalendarList().get(calendarNumberCompleted));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Shows the user the task/event that was added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list that the task was added to."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printAddMessage(CalendarList calendarList, boolean isTask) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        assert calendarList !\u003d null;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "imhm"
        },
        "content": "        String calendarItem;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (isTask) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "imhm"
        },
        "content": "            calendarItem \u003d \"task\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "imhm"
        },
        "content": "            calendarItem \u003d \"event\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this \" + calendarItem + \":\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "imhm"
        },
        "content": "        /* - 1 is catered for array list\u0027s index starting from 0. */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int lastCalendarItemIndex \u003d calendarList.getCalendarList().size() - 1;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        /* condition checker; only Lecture, Lab and Tutorial will print the recurring description*/"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        if (calendarList.getCalendarList().get(lastCalendarItemIndex) instanceof Lecture) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(calendarList.getCalendarList().get(lastCalendarItemIndex).getRecurringDescription());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } else if (calendarList.getCalendarList().get(lastCalendarItemIndex) instanceof Tutorial) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(calendarList.getCalendarList().get(lastCalendarItemIndex).getRecurringDescription());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } else if (calendarList.getCalendarList().get(lastCalendarItemIndex) instanceof Lab) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(calendarList.getCalendarList().get(lastCalendarItemIndex).getRecurringDescription());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(calendarList.getCalendarList().get(lastCalendarItemIndex));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Prints each item\u0027s countdown."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param days how many days left."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param item the item to print the countdown."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void printCountDownItem(int days, CalendarItem item) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        assert item !\u003d null;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (days \u003c 0) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            System.out.println(item.getDescription() + \" You have already missed it!\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else if (days \u003d\u003d 0) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (item instanceof Exam) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                System.out.println(item.getDescription() + \" is in a day. Try your best!\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                System.out.println(item.getDescription() + \" is in a day. It\u0027s time to speed up!\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            System.out.println(item.getDescription() + \" has \" + days + \" days left.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Print the countdown for every item in the calendar list."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list we want to print the countdown for."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param type         0 is for exam events, 1 is for deadline tasks."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void printCountDownMessage(CalendarList calendarList, int type) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            System.out.println(\"Here is your exams countdown:\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                CalendarItem temp \u003d calendarList.getItem(i);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                Ui.printCountDownItem(((Exam) temp).getCountdown(), temp);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            System.out.println(\"Here is your deadlines countdown:\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                CalendarItem temp \u003d calendarList.getItem(i);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                Ui.printCountDownItem(((Deadline) temp).getCountdown(), temp);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the calendar task/event/item for FindCommand."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param command        command type."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList   the calendar list to search from."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param isFound        true if the first item has been found and printed."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param itemIndex      item index in the calendar list."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param printNumbering item index printed to the user."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printFindTaskMessage(String command, CalendarList calendarList, boolean isFound,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "imhm"
        },
        "content": "                                            int itemIndex, int printNumbering) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (!isFound) { // first instance when keyword is found"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "imhm"
        },
        "content": "            String itemType \u003d \"\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "imhm"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "imhm"
        },
        "content": "            case COMMAND_FIND_EVENT:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "imhm"
        },
        "content": "                itemType \u003d \"event(s)\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "imhm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "imhm"
        },
        "content": "            case COMMAND_FIND_TASK:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "imhm"
        },
        "content": "                itemType \u003d \"task(s)\";"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "imhm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "imhm"
        },
        "content": "            case COMMAND_FIND_EVENT_OR_TASK:"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "imhm"
        },
        "content": "                itemType \u003d \"item(s)\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "imhm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "imhm"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "imhm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Here are the matching \" + itemType + \" in your calendar:\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.printf(\"%d.\" + calendarList.getCalendarList().get(itemIndex) + \"\\n\", printNumbering);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Shows the user\u0027s progress on deadlines and todos."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param numTotal    integer of number of total user tasks."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param numFinished integer of number of finished tasks."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static void printProgress(int numTotal, int numFinished) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (numTotal \u003d\u003d 0) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            System.out.println(\"You have no deadlines or todos now!\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            float progress \u003d (float) numFinished / numTotal * 100;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            System.out.println(\"You have finished \" + numFinished + \"/\" + numTotal"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                    + \" (\" + String.format(\"%.2f\", progress) + \"%) deadlines and todos.\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Print the message after marking a task as important."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList  the list of user\u0027s tasks and events."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarIndex the index of the task in the list."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static void printPrioritizeMessage(CalendarList calendarList, int calendarIndex) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        assert calendarList !\u003d null;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        assert calendarIndex \u003e\u003d 0;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                \"I\u0027ve marked this task as important:\\n\""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                        + calendarList.getCalendarList().get(calendarIndex));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Print all important tasks in the list."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of user\u0027s tasks and events."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static void printImportantTasks(CalendarList calendarList) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int taskCount \u003d 0;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (!(item instanceof Task)) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (((Task) item).getIsImportant()) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                taskCount++;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                System.out.println(taskCount + \". \" + item.toString());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (taskCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            System.out.println(\"You have no important tasks now!\");"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            System.out.println(\"There are in total \" + taskCount + \" important tasks in your list.\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Show the earliest important deadline task if exists,"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * and the earliest ordinary deadline task if it exists and is before the important earliest."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Show the fist important todo task in the list if exists,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * otherwise show the first ordinary todo task in the list if exists."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param earliestDeadline     the deadline task with earliest due date."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param earImportantDeadline the important deadline task with earliest due date."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param firstTodo            the first todo task in the list."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param firImportantTodo     the first important todo task in the list."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static void printSuggestion(Task earliestDeadline, Task earImportantDeadline,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                                       Task firstTodo, Task firImportantTodo) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (earImportantDeadline \u003d\u003d null \u0026\u0026 earliestDeadline \u003d\u003d null"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                \u0026\u0026 firImportantTodo \u003d\u003d null \u0026\u0026 firstTodo \u003d\u003d null) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            System.out.println(\"You have no unfinished tasks now!\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            System.out.println(\"Maybe you can prepare for the following tasks now:\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (earImportantDeadline !\u003d null) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                System.out.println(\"The earliest unfinished important deadline: \""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                        + earImportantDeadline.toString());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                if (earliestDeadline !\u003d null"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                        \u0026\u0026 earliestDeadline.getDate().isBefore(earImportantDeadline.getDate())) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                    System.out.println(\"The earliest unfinished ordinary deadline: \""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                            + earliestDeadline.toString());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            } else if (earliestDeadline !\u003d null) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                System.out.println(\"The earliest unfinished ordinary deadline: \""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                        + earliestDeadline.toString());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (firImportantTodo !\u003d null) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                System.out.println(\"The first unfinished important todo task: \""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                        + firImportantTodo.toString());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            } else if (firstTodo !\u003d null) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                System.out.println(\"The first unfinished ordinary todo task: \""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                        + firstTodo.toString());"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the error message based on the invalid command input by the user."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param e            type of error."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the working calendar list."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printExceptionMessage(CommandException e, CalendarList calendarList) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "imhm"
        },
        "content": "        switch (e.getException()) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Error: The description of todo cannot be empty.\");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Error: Please key in the deadline in this format: deadline \u003ctask description\u003e /ddMMyy\");"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"activity\":"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Error: Please follow this format: act \u003cactivity description\u003e @\u003cvenue\u003e /ddMMyy HHmm\");"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        case \"lecture\":"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Error: Please key in the lecture in this format: \\n\""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"lect \u003cmodule code\u003e @\u003cvenue\u003e -r \u003cnumber of lecture\u003e /ddMMyy HHmm\");"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        case \"tutorial\":"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Error: Please key in the tutorial in this format: \\n\""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"tut \u003cmodule code\u003e @\u003cvenue\u003e -r \u003cnumber of tutorial\u003e /ddMMyy HHmm\");"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        case \"lab\":"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Error: Please key in the lab in this format: \\n\""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"lab \u003cmodule code\u003e @\u003cvenue\u003e -r \u003cnumber of lab session\u003e /ddMMyy HHmm\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"exam\":"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Error: Please key in the exam in this format: \\n\""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"exam \u003cmodule code\u003e @\u003cexam venue\u003e /ddMMyy HHmm\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid command\":"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    + \"Type \\\"help\\\" to learn the different commands.\");"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case \"invalid countdown\":"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            System.out.println(\"Error: invalid countdown. Countdown is only for exams and deadlines.\");"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid task action\":"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Error: Total task(s): \" + calendarList.getTotalTasks());"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid event action\":"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Error: Total event(s): \" + calendarList.getTotalEvents());"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Error: Please key in the command in this format: done \u003ctask number\u003e\");"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Error: Please key in the command in this format: -t \u003ctask number\u003e \""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    + \"OR -e \u003cevent number\u003e\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        case \"prioritize\":"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            System.out.println(\"Error: Please key in the command in this format: *t \u003ctask number\u003e \");"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"keyword not found\":"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"There are no tasks matching this keyword. Check that you have spelt it correctly.\");"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case \"file not found\":"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"The file can not be found.\");"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid done number\":"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"You can only mark a task as done. An event cannot be marked as done.\");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid add info\":"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println("
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    \"Error: Please key in the additional information in this format: /a \u003cevent number\u003e - information\");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid view info\":"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println("
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    \"Error: To view the additional information of the event: /v \u003cevent number\u003e\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid delete info\":"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println("
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    \"Error: To delete an additional information of an event: /- \u003cevent number\u003e a \u003cinformation number\u003e\");"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"invalid info action\":"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Please enter a valid additional information index number.\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        case \"invalid module code\":"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println("
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    \"Error: invalid module code. The module code cannot be found in NUS module list.\\n\""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                            + \"Please be reminded to key in the exam in this format: \\n\""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                            + \"exam \u003cmodule code\u003e @\u003cexam venue\u003e /ddMMyy HHmm\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case \"storage\":"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            System.out.println(\"Content in the file is altered, could not read in the file normally\");"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case \"command not found\":"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Command not found. Please input a valid command.\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        case \"invalid recurring number\":"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"The recurring number is in the range of 0 - 13 only.\");"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "imhm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Unknown Error.\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Shows the user the exception that occurred when creating a storage file."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param e exception message."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static void printFileCreateErrorMessage(IOException e) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "imhm"
        },
        "content": "        System.out.println(\"Cannot create file; reason: \" + e.getMessage());"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows the user the exception that occurred when saving data to storage file."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param e exception message."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void printSaveDataErrorMessage(IOException e) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        System.out.println(\"Unable to save data. Error: \" + e.getMessage());"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows the user the exception that occurred when finding the storage file."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void printFileNotFoundErrorMessage() {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        System.out.println(\"File not found.\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows the user the exception that occurred when when there is an invalid command message."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static void printInvalidFileCommandMessage() {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        System.out.println(\"Invalid file command input\");"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 84,
      "imhm": 294,
      "JiawenLyu": 113,
      "-": 1,
      "Zhangyilin0203": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/CalendarItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "public abstract class CalendarItem {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public abstract String printIntoFile();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract LocalTime getTime();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract LocalDate getDate();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String getDescription();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public abstract String getRecurringDescription();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 2,
      "imhm": 5,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/CalendarList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.calendar.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents a calendar list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class CalendarList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private ArrayList\u003cCalendarItem\u003e calendarList; // contains all events and tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private int totalItems \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private int totalTasks \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private int totalEvents \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public CalendarList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Adds a task to the calendar list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param task to be added."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        totalTasks++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "        totalItems++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Adds an event to the calendar list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param event to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList.add(event);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        totalEvents++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        totalItems++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addItem(CalendarItem item) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        calendarList.add(item);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        totalItems++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Deletes the task from the calendar list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarNumber of the task to be deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void deleteTask(int calendarNumber) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList.remove(calendarNumber);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "imhm"
        },
        "content": "        totalTasks--;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "imhm"
        },
        "content": "        totalItems--;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Deletes the event from the event list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarNumber of the event to be deleted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void deleteEvent(int calendarNumber) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList.remove(calendarNumber);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "imhm"
        },
        "content": "        totalEvents--;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "imhm"
        },
        "content": "        totalItems--;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Converts the task index to the calendar index."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param taskNumber   task index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList calendar list of the task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @return calendar index of the task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static int convertTaskNumberToCalendarNumber(int taskNumber, CalendarList calendarList)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (taskNumber \u003e calendarList.getTotalTasks() || taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid task action\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int taskCount \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int itemCount \u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "imhm"
        },
        "content": "        for (CalendarItem s : calendarList.getCalendarList()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "imhm"
        },
        "content": "            if (s instanceof Task) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "imhm"
        },
        "content": "                taskCount++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "imhm"
        },
        "content": "            if (taskNumber \u003d\u003d taskCount) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "imhm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "imhm"
        },
        "content": "            itemCount++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return itemCount;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Converts the event index to the calendar index."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param eventNumber  event index"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList calendar list of the task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @return calendar index of the event"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static int convertEventNumberToCalendarNumber(int eventNumber, CalendarList calendarList)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (eventNumber \u003e calendarList.getTotalEvents() || eventNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid event action\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int eventCount \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int itemCount \u003d 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "imhm"
        },
        "content": "        for (CalendarItem s : calendarList.getCalendarList()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "imhm"
        },
        "content": "            if (s instanceof Event) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "imhm"
        },
        "content": "                eventCount++;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "imhm"
        },
        "content": "            if (eventNumber \u003d\u003d eventCount) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "imhm"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "imhm"
        },
        "content": "            itemCount++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return itemCount;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Sets the task as done."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarNumberCompleted of the task that is completed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void markTaskAsDone(int calendarNumberCompleted) throws CommandException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (calendarList.get(calendarNumberCompleted) instanceof Task) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "imhm"
        },
        "content": "            ((Task) calendarList.get(calendarNumberCompleted)).markAsDone();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid done number\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Mark the task as important."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarNumber the index of the task in the calendar list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void markTaskAsImportant(int calendarNumber) throws CommandException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (calendarList.get(calendarNumber) instanceof Task) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            ((Task) calendarList.get(calendarNumber)).markAsImportant();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"prioritize\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Swaps two tasks with index i and index j."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param i the index of the first task to be swapped."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param j the index of the second task to be swapped."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void swapTasks(int i, int j) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (calendarList.get(i) !\u003d null \u0026\u0026 calendarList.get(j) !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "imhm"
        },
        "content": "            Collections.swap(calendarList, i, j);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the total number of items in calendarList."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public int getTotalItems() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return totalItems;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the total number of tasks in calendarList."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public int getTotalTasks() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return totalTasks;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the total number of events in the calendarList."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public int getTotalEvents() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return totalEvents;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the whole calendarList."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public ArrayList\u003cCalendarItem\u003e getCalendarList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return calendarList;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the specific item with index i."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param i the index of the item wanted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return the item with index i."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public CalendarItem getItem(int i) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return calendarList.get(i);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 169,
      "JiawenLyu": 11,
      "-": 8,
      "Zhangyilin0203": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/event/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents an event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Activity extends Event {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    protected String eventType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String EVENT_FILE_SYMBOL \u003d \"ACT\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"X\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * A constructor of an activity object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param details the description of the activity."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param date    date of the activity."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param time    time of the activity."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param venue   venue of the activity."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Activity(String details, LocalDate date, LocalTime time, String venue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(date, time, venue);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        eventType \u003d \"ACT\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.isOver \u003d getIsOver();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Checks whether the activity is over."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the activity is over"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public boolean getIsOver() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else if (date.isEqual(LocalDate.now()) \u0026\u0026 time.isBefore(LocalTime.now())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows whether the activity is over."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the activity is over"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return (getIsOver() ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns a [A] icon to indicate task as a event task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return \"[A][\" + getIcon() + \"] \" + details + \" \" + super.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the activity description."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[A][\" + getIcon() + \"] \" + details + \" \" + super.getDescription();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns the respective event type."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves the activity into files."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return string contains the information about the activity event."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String writeToFile \u003d EVENT_FILE_SYMBOL + SEPARATOR + isOver + SEPARATOR + details"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + this.date + SEPARATOR + this.time + SEPARATOR + venue"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + getAdditionalInformationCount();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (getAdditionalInformationCount() !\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (i \u003d 0; i \u003c getAdditionalInformationCount(); i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                writeToFile \u003d writeToFile + SEPARATOR + getAdditionalInformationElement(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return writeToFile;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the activity time."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the activity date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 2,
      "imhm": 31,
      "JiawenLyu": 31,
      "-": 10,
      "Jingming517": 3,
      "Zhangyilin0203": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents an event in the event list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "public abstract class Event extends CalendarItem {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected String venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected boolean isOver;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected ArrayList\u003cString\u003e additionalInformation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected int additionalInformationCount \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * A constructor for events."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param date  date of the event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param time  time of the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param venue venue of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Event(LocalDate date, LocalTime time, String venue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        additionalInformation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Describe the event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return a string containing the information about the event"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "        String additionalInformationIndicator \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (additionalInformationCount !\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "            additionalInformationIndicator \u003d \" #info\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd-MMM-yyyy E\")) + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + time.format(DateTimeFormatter.ofPattern(\"h:mma\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "                + \" (\" + venue + \")\" + additionalInformationIndicator;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Description for adding an recurring event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return a string containing the information about the recurring event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return \"every \" + date.getDayOfWeek() + \" \" + time.format(DateTimeFormatter.ofPattern(\"h:mma\"))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                + \" (\" + venue + \")\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return \" (\" + venue + \")\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void setAdditionalInformation(String additionalInformation) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.additionalInformation.add(additionalInformation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "imhm"
        },
        "content": "        additionalInformationCount++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public ArrayList\u003cString\u003e getAdditionalInformation() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return additionalInformation;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns the additional information of at particular index."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param informationNumber index of the additional information."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String getAdditionalInformationElement(int informationNumber) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return additionalInformation.get(informationNumber);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public int getAdditionalInformationCount() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return additionalInformationCount;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void markAsOver() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        isOver \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public boolean isOver() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return isOver;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Removes the additional information from the array list based on the index."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param indexInfo the additional information\u0027s index number."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void deleteAdditionalInformation(int indexInfo) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "imhm"
        },
        "content": "        additionalInformation.remove(indexInfo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "imhm"
        },
        "content": "        additionalInformationCount--;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 12,
      "imhm": 85,
      "JiawenLyu": 15,
      "-": 6,
      "Zhangyilin0203": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/event/Exam.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke.calendar.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents an Exam event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Exam extends SchoolEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    protected String eventType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    protected int countdown;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String EXAM_FILE_SYMBOL \u003d \"EXAM\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"X\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Exam(String moduleCode, LocalDate date, LocalTime time, String venue) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(moduleCode, date, time, venue);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.isOver \u003d getIsOver();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Checks whether the exam is over."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the exam is over"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public boolean getIsOver() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else if (date.isEqual(LocalDate.now()) \u0026\u0026 time.isBefore(LocalTime.now())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows whether the exam is over."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the exam is over"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return (getIsOver() ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns a [Exam] icon to indicate task as a Exam task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return \"[Exam][\" + getIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the type of the event."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[Exam][\" + getIcon() + \"] \" + super.getDescription();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves exam into files."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return string contains the information about the exam."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String writeToFile;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        writeToFile \u003d EXAM_FILE_SYMBOL + SEPARATOR + isOver + SEPARATOR"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + moduleCode + SEPARATOR + date + SEPARATOR + time + SEPARATOR + venue"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + getAdditionalInformationCount();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (getAdditionalInformationCount() !\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (i \u003d 0; i \u003c getAdditionalInformationCount(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                writeToFile \u003d writeToFile + SEPARATOR + getAdditionalInformationElement(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return writeToFile;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the exam date."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the exam time."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public int getCountdown() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return countdown;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void setCountdown(int countdown) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.countdown \u003d countdown;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 29,
      "JiawenLyu": 27,
      "-": 15,
      "Zhangyilin0203": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/event/Lab.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "package seedu.duke.calendar.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " * Represents a lab event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "public class Lab extends SchoolEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    protected String eventType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    private static final String LAB_FILE_SYMBOL \u003d \"LAB\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"X\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * A Constructor of a lab object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param moduleCode module code of the lab"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param date       date of the lab"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param time       time of the lab"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param venue      venue of the lab"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public Lab(String moduleCode, LocalDate date, LocalTime time, String venue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        super(moduleCode, date, time, venue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        eventType \u003d \"LAB\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.isOver \u003d getIsOver();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Checks whether the lab is over."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the lab is over"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public boolean getIsOver() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        LocalDateTime dateAndTime \u003d LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        ZonedDateTime due \u003d ZonedDateTime.of(dateAndTime, ZoneId.of(\"+08:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        ZonedDateTime now \u003d ZonedDateTime.now(ZoneId.of(\"+08:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (due.isBefore(now)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows whether the lab is over."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the lab is over"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return (getIsOver() ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Describes the lab event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return a string containing the information about the lab event"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return \"[LAB]\" + \"[\" + getIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Returns the description of the lab."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[LAB]\" + \"[\" + getIcon() + \"] \" + super.getDescription();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Returns the description of the recurring lab."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return \"[LAB]\" + \"[R] \" + super.getRecurringDescription();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves the lab event into files."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return string contains the information about the lab event."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String writeToFile;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        writeToFile \u003d LAB_FILE_SYMBOL + SEPARATOR + isOver + SEPARATOR + moduleCode"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + this.date + SEPARATOR + this.time + SEPARATOR + venue"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + getAdditionalInformationCount();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (getAdditionalInformationCount() !\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (i \u003d 0; i \u003c getAdditionalInformationCount(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                writeToFile \u003d writeToFile + SEPARATOR + getAdditionalInformationElement(i);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return writeToFile;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Returns the respective object type."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Get the date of the lab."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return date of the lab"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Get the time of the lab."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return time of the lab"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 11,
      "imhm": 2,
      "JiawenLyu": 99,
      "-": 5,
      "Zhangyilin0203": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/event/Lecture.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " * Represents a lecture event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Lecture extends SchoolEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    protected String eventType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String LECTURE_FILE_SYMBOL \u003d \"LEC\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"X\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * A Constructor of a lecture object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param moduleCode module code of the lecture"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param date       date of the lecture"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param time       time of the lecture"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param venue      venue of the lecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Lecture(String moduleCode, LocalDate date, LocalTime time, String venue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(moduleCode, date, time, venue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        eventType \u003d \"LEC\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.isOver \u003d getIsOver();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Checks whether the lecture is over."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the tutorial is over"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public boolean getIsOver() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        LocalDateTime dateAndTime \u003d LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        ZonedDateTime due \u003d ZonedDateTime.of(dateAndTime, ZoneId.of(\"+08:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        ZonedDateTime now \u003d ZonedDateTime.now(ZoneId.of(\"+08:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (due.isBefore(now)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows whether the lab is over."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the lab is over"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return (getIsOver() ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Describes the lecture event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @Return a string to describe the lecture event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return \"[LEC]\" + \"[\" + getIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the description of the lecture."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[LEC]\" + \"[\" + getIcon() + \"] \" + super.getDescription();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Returns the description of the recurring lecture."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return \"[LEC]\" + \"[R] \" + super.getRecurringDescription();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves the lecture event into files."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return string contains the information about the lecture event."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String writeToFile;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        writeToFile \u003d LECTURE_FILE_SYMBOL + SEPARATOR + isOver + SEPARATOR + moduleCode"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + this.date + SEPARATOR + this.time + SEPARATOR + venue"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + getAdditionalInformationCount();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (getAdditionalInformationCount() !\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (i \u003d 0; i \u003c getAdditionalInformationCount(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                writeToFile \u003d writeToFile + (SEPARATOR + getAdditionalInformationElement(i));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return writeToFile;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Gets the date of the lecture."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return date of the lecture"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the time of the lecture."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Returns the respective object type."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 8,
      "imhm": 11,
      "JiawenLyu": 78,
      "-": 6,
      "Zhangyilin0203": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/event/SchoolEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents a school based event."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "public abstract class SchoolEvent extends Event {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected String moduleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public SchoolEvent(String moduleCode, LocalDate date, LocalTime time, String venue) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(date, time, venue);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns the status of the task and the description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return moduleCode + \" \" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return moduleCode + \" \" + super.getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return moduleCode + \" \" + super.getRecurringDescription();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public abstract String printIntoFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 5,
      "imhm": 31,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/event/Tutorial.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "package seedu.duke.calendar.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " * Represents a tutorial event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "public class Tutorial extends SchoolEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    protected String eventType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    private static final String TUTORIAL_FILE_SYMBOL \u003d \"TUT\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"X\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * A Constructor of a tutorial object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param moduleCode module code of the tutorial"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param date       date of the tutorial"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param time       time of the tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param venue      venue of the tutorial"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public Tutorial(String moduleCode, LocalDate date, LocalTime time, String venue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        super(moduleCode, date, time, venue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        eventType \u003d \"TUT\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.isOver \u003d getIsOver();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Checks whether the tutorial is over."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the tutorial is over"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public boolean getIsOver() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        LocalDateTime dateAndTime \u003d LocalDateTime.of(date, time);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        ZonedDateTime due \u003d ZonedDateTime.of(dateAndTime, ZoneId.of(\"+08:00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        ZonedDateTime now \u003d ZonedDateTime.now(ZoneId.of(\"+08:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (due.isBefore(now)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Shows whether the tutorial is over."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the tutorial is over"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return (getIsOver() ? TICK_SYMBOL : CROSS_SYMBOL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Describes the tutorial event."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @Return a string to describe the tutorial event."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return \"[TUT]\" + \"[\" + getIcon() + \"] \" + super.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Gets the description of the tutorial."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return the description of the tutorial."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[TUT]\" + \"[\" + getIcon() + \"] \" + super.getDescription();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Returns the description of the recurring tutorial."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return \"[TUT]\" + \"[R] \" + super.getRecurringDescription();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves the tutorial event into files."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return string contains the information about the tutorial event."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String writeToFile;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        writeToFile \u003d TUTORIAL_FILE_SYMBOL + SEPARATOR + isOver + SEPARATOR + moduleCode"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + this.date + SEPARATOR + this.time + SEPARATOR + venue"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + getAdditionalInformationCount();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (getAdditionalInformationCount() !\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            int i;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (i \u003d 0; i \u003c getAdditionalInformationCount(); i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                writeToFile \u003d writeToFile + SEPARATOR + getAdditionalInformationElement(i);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return writeToFile;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Returns the respective type."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return eventType;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Gets the date of the tutorial."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return date of the tutorial."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Gets the time of the tutorial."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return time of the tutorial"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 8,
      "imhm": 2,
      "JiawenLyu": 96,
      "-": 6,
      "Zhangyilin0203": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/task/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents a deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected LocalDate by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    protected int countdown;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String DEADLINE_FILE_SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Deadline(String description, LocalDate by) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        this.taskType \u003d \"D\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        this.isImportant \u003d getIsImportant();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        if (by.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"WARNING! The deadline has already passed! \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"May be you want to double confirm? Good Luck!\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns a [D] icon to indicate task as a deadline task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return \"[D]\" + super.toString() + \" by: \" + by.format(DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /** Returns the respective task type. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves the deadline task into files."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return string contains the information about the deadline task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return DEADLINE_FILE_SYMBOL + SEPARATOR + isDone + SEPARATOR + description + SEPARATOR + this.isImportant"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + SEPARATOR + this.by;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the date of the deadline."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the time of the deadline."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public int getCountdown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return countdown;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void setCountdown(int countdown) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        this.countdown \u003d countdown;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 18,
      "imhm": 23,
      "JiawenLyu": 1,
      "-": 12,
      "Jingming517": 3,
      "Zhangyilin0203": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents a Task in the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "public abstract class Task extends CalendarItem {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String TICK_SYMBOL \u003d \"/\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String CROSS_SYMBOL \u003d \"X\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    protected boolean isImportant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String TASK_FILE_SYMBOL \u003d \"Task\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        this.isImportant \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns the status of the task and the description of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        String priorityMessage \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (isImportant) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            priorityMessage \u003d \"(important!) \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + priorityMessage + this.description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String priorityMessage \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isImportant) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            priorityMessage \u003d \"(important!) \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + priorityMessage + this.description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns a tick if the task is done. Returns a cross if the task is not done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return (isDone ? TICK_SYMBOL : CROSS_SYMBOL); //return tick or X symbols"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Returns empty string, will be overridden in different task types by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * the corresponding task type."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return default task type is empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Sets the task as done."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Prioritize the task as important."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public void markAsImportant() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        this.isImportant \u003d true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Get whether the task is marked as important."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return whether the task is important"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public boolean getIsImportant() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return isImportant;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves the task into files."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return string contains the information about the activity event."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return TASK_FILE_SYMBOL + SEPARATOR + isDone + SEPARATOR + description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Gets the state of the task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return the state of the task"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the date of the task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the time of the task."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 10,
      "imhm": 44,
      "JiawenLyu": 30,
      "Jingming517": 4,
      "-": 16,
      "Zhangyilin0203": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/calendar/task/Todo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.calendar.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents a todo task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String TODO_FILE_SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static final String SEPARATOR \u003d \"|\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        this.taskType \u003d \"T\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        this.isImportant \u003d getIsImportant();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns a [T] icon to indicate task as a todo task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.getDescription();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getRecurringDescription() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns the respective task type."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Saves the todo task into files."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return string contains the information about the todo task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public String printIntoFile() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return TODO_FILE_SYMBOL + SEPARATOR + isDone + SEPARATOR + description + SEPARATOR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                + this.isImportant;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the todo task date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Returns the todo task time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 12,
      "imhm": 23,
      "JiawenLyu": 1,
      "-": 18,
      "Zhangyilin0203": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Exam;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Lab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Lecture;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Tutorial;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.resources.ModuleChecker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Adds a task to the task list, depending on what kind of task (event, deadline, todo) it is."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String TODO \u003d \"todo\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public static final String ACTIVITY \u003d \"act\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public static final String LECTURE \u003d \"lect\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public static final String TUTORIAL \u003d \"tut\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public static final String LAB \u003d \"lab\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String EXAM \u003d \"exam\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static final int COMMAND_TYPE \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public static final int DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private String[] dateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private static int recurringCount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public AddCommand(String userInput) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Creates a task in the task list after determining what type of task (event, deadline, todo)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Saves the updated calendar list in the storage after the new task is added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list to add the new task to."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      the storage to be saved to."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the add command input is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": "        String[] command;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "imhm"
        },
        "content": "        boolean isTask \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "imhm"
        },
        "content": "        command \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String commandType \u003d command[COMMAND_TYPE];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                isTask \u003d addTodoTask(calendarList, command[DESCRIPTION]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"todo\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "imhm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                isTask \u003d addDeadlineTask(calendarList, command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"deadline\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case ACTIVITY:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                addActivityEvent(calendarList, command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"activity\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case EXAM:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (isValid(command)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    addExamEvent(calendarList, command);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    throw new CommandException(\"exam\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"invalid module code\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case LECTURE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (isValid(command)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    addLectureEvent(calendarList, command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    throw new CommandException(\"lecture\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"invalid module code\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case TUTORIAL:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (isValid(command)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    addTutorialEvent(calendarList, command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    throw new CommandException(\"tutorial\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"invalid module code\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        case LAB:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (isValid(command)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    addLabEvent(calendarList, command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    throw new CommandException(\"lab\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"invalid module code\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid command\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printAddMessage(calendarList, isTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (isTask) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            Ui.printTotalTaskNumber(calendarList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        storage.writeToFile(calendarList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * User input for Lab event example: lab CS1010 com1-b1-14 /at 100820 1400."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to add the lab event to."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param command      the attributes of the lab event."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @throws Exception if the module code is empty."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private void addLabEvent(CalendarList calendarList, String[] command) throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        command \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "imhm"
        },
        "content": "        moduleCode \u003d command[0];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        command \u003d command[1].split(\"-r\", 2);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        String[] temp \u003d command[0].split(\"@\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        command \u003d command[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        recurringCount \u003d Integer.parseInt(command[0].trim());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        venue \u003d temp[1].trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "imhm"
        },
        "content": "        dateTime \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "imhm"
        },
        "content": "        date \u003d DateTimeParser.inputDateProcessor(dateTime[0].trim());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "imhm"
        },
        "content": "        time \u003d DateTimeParser.inputTimeProcessor(dateTime[1].trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"lab\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }  else if (recurringCount \u003c 1 || recurringCount \u003e 13) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Warning! The value for \u003cnumber of lab session\u003e can only be \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"in the range of 1 to 13. \\n\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            throw new CommandException(\"lab\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            for (int i \u003d 0; i \u003c recurringCount; i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                calendarList.addEvent(new Lab(moduleCode, date, time, venue));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                date \u003d date.plusWeeks(1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * User input for Tutorial event example: tutorial CS1010 lt12 /at 090820 1000."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to add the tutorial event to."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param command      the attributes of the tutorial event."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @throws Exception if the module code is empty."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    //new tutorial command input: tut cs1010 @nus -r 10 /101020 1330"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private void addTutorialEvent(CalendarList calendarList, String[] command) throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        command \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        //command[0] \u003d cs1010 and command[1] \u003d @nus -r 10 /101020 1230"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "imhm"
        },
        "content": "        moduleCode \u003d command[0];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        command \u003d command[1].split(\"-r\", 2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        //command[0] \u003d @nus and command[1] \u003d 10 /101020 1230"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        String[] temp \u003d command[0].split(\"@\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        //temp[0] \u003d \"\" and temp[1] \u003d nus"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        command \u003d command[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        //command[0] \u003d 10; command[1] \u003d 101020 1230"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        //int recurringCount \u003d Integer.parseInt(command[0].trim());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        recurringCount \u003d Integer.parseInt(command[0].trim());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        venue \u003d temp[1].trim();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "imhm"
        },
        "content": "        dateTime \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "imhm"
        },
        "content": "        date \u003d DateTimeParser.inputDateProcessor(dateTime[0].trim());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "imhm"
        },
        "content": "        time \u003d DateTimeParser.inputTimeProcessor(dateTime[1].trim());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"tutorial\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } else if (recurringCount \u003c 1 || recurringCount \u003e 13) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Warning! The value for \u003cnumber of tutorial\u003e can only be in the range of 1 to 13. \\n\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            throw new CommandException(\"tutorial\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            for (int i \u003d 0; i \u003c recurringCount; i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                calendarList.addEvent(new Tutorial(moduleCode, date, time, venue));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                date \u003d date.plusWeeks(1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * User input for Lecture task example: lecture CS2113 LT2 /at 020202 1200."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to add the lecture event to."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param command      the attributes of the lecture event."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @throws Exception if the module code is empty."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private void addLectureEvent(CalendarList calendarList, String[] command) throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        command \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        moduleCode \u003d command[0];"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        command \u003d command[1].split(\"-r\", 2);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        String[] temp \u003d command[0].split(\"@\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        command \u003d command[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        recurringCount \u003d Integer.parseInt(command[0].trim());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        venue \u003d temp[1].trim();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        dateTime \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        date \u003d DateTimeParser.inputDateProcessor(dateTime[0].trim());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        time \u003d DateTimeParser.inputTimeProcessor(dateTime[1].trim());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"lecture\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }  else if (recurringCount \u003c 1 || recurringCount \u003e 13) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"Warning! The value for \u003cnumber of lecture\u003e can only be in the range of 1 to 13. \\n\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            throw new CommandException(\"lecture\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            for (int i \u003d 0; i \u003c recurringCount; i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                calendarList.addEvent(new Lecture(moduleCode, date, time, venue));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                date \u003d date.plusWeeks(1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * User input for Exam task example: exam CS2113 BLK:EA LT2 /at 020202 1200."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to add the exam to."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param command      the attributes of the exam."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @throws Exception if the module code is empty."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private void addExamEvent(CalendarList calendarList, String[] command) throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        command \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        moduleCode \u003d command[0];"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        command \u003d command[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        String[] temp \u003d command[0].split(\"@\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        venue \u003d temp[1].trim();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        dateTime \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        date \u003d DateTimeParser.inputDateProcessor(dateTime[0].trim());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        time \u003d DateTimeParser.inputTimeProcessor(dateTime[1].trim());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        ModuleChecker moduleChecker \u003d new ModuleChecker();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (moduleCode.isEmpty()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"exam\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            calendarList.addEvent(new Exam(moduleCode, date, time, venue));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * User input for Activity event example: activity run training @sentosa / 020202 1200."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to add the activity to."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param command      the attributes of the activity."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @throws Exception if the description is empty."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private void addActivityEvent(CalendarList calendarList, String[] command) throws Exception {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String eventDescription;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        command \u003d command[1].trim().split(\"@\", 2);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        eventDescription \u003d command[0].trim();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        command \u003d command[1].trim().split(\"/\", 2);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        venue \u003d command[0].trim();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        dateTime \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        date \u003d DateTimeParser.inputDateProcessor(dateTime[0].trim());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        time \u003d DateTimeParser.inputTimeProcessor(dateTime[1].trim());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (eventDescription.isEmpty()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"activity\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            calendarList.addEvent(new Activity(eventDescription, date, time, venue));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * User input for Deadline task example: deadline project / 101020."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to add the deadline task to."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param command      the attributes of deadline task."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return isTask      true if it is a task."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @throws Exception if the description is empty."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private boolean addDeadlineTask(CalendarList calendarList, String[] command) throws Exception {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        boolean isTask;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        command \u003d command[1].split(\"/\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        taskDescription \u003d command[0].trim();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        date \u003d DateTimeParser.inputDateProcessor(command[1].trim());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"deadline\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            calendarList.addTask(new Deadline(taskDescription, date));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            isTask \u003d true;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return isTask;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * User input for todo task example: todo project."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to add the todo task to."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return to show that is is a task."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @throws Exception if the description is empty."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private boolean addTodoTask(CalendarList calendarList, String s) throws Exception {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String taskDescription;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        boolean isTask;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        taskDescription \u003d s.trim();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (taskDescription.isEmpty()) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"todo\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            calendarList.addTask(new Todo(taskDescription));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            isTask \u003d true;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return isTask;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Checks if the module code in the command is valid."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @param command user input command."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return isValid true is the module code is valid, false otherwise."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private boolean isValid(String[] command) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        ModuleChecker moduleChecker \u003d new ModuleChecker();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        command \u003d command[1].trim().split(\" \", 2);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        moduleCode \u003d command[0];"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return moduleChecker.isModuleValid(moduleCode);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 68,
      "imhm": 107,
      "JiawenLyu": 38,
      "Zhangyilin0203": 135
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class AddInfoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public AddInfoCommand(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Adds additional information to an event. Multiple additional information can be added to an event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Saves the updated calendar list in the storage after the additional information is added."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list containing the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      the storage to be saved to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the additional info command is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        String[] command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int eventNumber \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int calendarNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "        String additionalInformation \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "            command \u003d userInput.split(\"-\", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "            additionalInformation \u003d command[1].trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "            eventNumber \u003d Integer.parseInt(command[0].replace(\"/a\", \"\").trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid add info\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarNumber \u003d CalendarList.convertEventNumberToCalendarNumber(eventNumber, calendarList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarNumber \u003e\u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Event event \u003d (Event) calendarList.getItem(calendarNumber);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert event !\u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "        event.setAdditionalInformation(additionalInformation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printLastAdditionalInformation(event);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "        storage.writeToFile(calendarList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Represents an executable command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    protected String userInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public Command(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Executes the command and throws a CommandException when the command is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public abstract void execute(CalendarList calendarList, Storage storage) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Returns true if the command is exit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CountdownCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.event.Exam;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": " * A countdown for exams and deadlines."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "public class CountdownCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    private static SimpleDateFormat format \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public CountdownCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Calculates the countdown for every unfinished deadline tasks and future exams."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendarList to calculate the countdown for."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param storage      the storage to store data to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException when there is an invalid command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        if (userInput.equals(\"countdown\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            countdownExamsDeadlines(calendarList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else if (userInput.equals(\"countdown deadlines\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            countdownDeadlines(calendarList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else if (userInput.equals(\"countdown exams\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            countdownExams(calendarList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid countdown\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Calculates the countdown for both exams event and deadline tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendarList to calculate the countdown for."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void countdownExamsDeadlines(CalendarList calendarList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        countdownDeadlines(calendarList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printBorder(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        countdownExams(calendarList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Calculates the countdown for deadline tasks."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendarList to calculate the countdown for."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void countdownDeadlines(CalendarList calendarList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (item instanceof Deadline) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                ((Deadline) item).setCountdown(countdown(item));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        sortDeadlinesAndPrintCountdown(calendarList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Calculates the countdown for exams events."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendarList to calculate the countdown for."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void countdownExams(CalendarList calendarList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (item instanceof Exam) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (item.getTime().isBefore(LocalTime.now())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    ((Exam) item).setCountdown(countdown(item) - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    ((Exam) item).setCountdown(countdown(item));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        sortExamsAndPrintCountdown(calendarList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Calculates the countdown days."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param item the calendar item we want to calculate the countdown."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @return the countdown."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public int countdown(CalendarItem item) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Date now \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String itemDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        String nowDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        itemDate \u003d item.getDate().toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        nowDate \u003d LocalDate.now().toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            date \u003d format.parse(itemDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            now \u003d format.parse(nowDate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            System.out.println(\"The input date is in the wrong format\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        int days \u003d (int) ((date.getTime() - now.getTime()) / (1000 * 3600 * 24));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        return days;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Sort the exam events according to their countdowns in ascending manner."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendarList to calculate the countdown for."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void sortExamsAndPrintCountdown(CalendarList calendarList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        CalendarList examList \u003d new CalendarList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        CalendarList deadlineList \u003d new CalendarList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            CalendarItem temp \u003d calendarList.getItem(i);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (temp instanceof Exam) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (!((Exam) temp).getIsOver()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    examList.addItem(temp);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c examList.getTotalItems() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (int j \u003d 0; j \u003c examList.getTotalItems() - i - 1; j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                CalendarItem item1 \u003d examList.getCalendarList().get(j);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                CalendarItem item2 \u003d examList.getCalendarList().get(j + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (((Exam) item1).getCountdown() \u003e ((Exam) item2).getCountdown()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    examList.swapTasks(j, j + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c examList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            CalendarItem temp \u003d examList.getItem(i);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Ui.printCountDownMessage(examList, 0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Sort the deadline events according to their countdowns in ascending manner."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendarList to calculate the countdown for."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void sortDeadlinesAndPrintCountdown(CalendarList calendarList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        CalendarList deadlineList \u003d new CalendarList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            CalendarItem temp \u003d calendarList.getItem(i);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            if (temp instanceof Deadline) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (!((Deadline) temp).getIsDone()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    deadlineList.addItem(temp);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlineList.getTotalItems() - 1; i++) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            for (int j \u003d 0; j \u003c deadlineList.getTotalItems() - i - 1; j++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                CalendarItem item1 \u003d deadlineList.getCalendarList().get(j);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                CalendarItem item2 \u003d deadlineList.getCalendarList().get(j + 1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                if (((Deadline) item1).getCountdown() \u003e ((Deadline) item2).getCountdown()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                    deadlineList.swapTasks(j, j + 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        for (int i \u003d 0; i \u003c deadlineList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            CalendarItem temp \u003d deadlineList.getItem(i);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Ui.printCountDownMessage(deadlineList, 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 7,
      "Zhangyilin0203": 173
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Deletes the task of task number specified by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Deletes the task/event of task/event number specified by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Saves the updated calendar list in the storage after the task is deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list to delete the task/event from."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      the storage to be saved to."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the delete command input is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int numberDelete \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        boolean isTask \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            if (userInput.startsWith(\"-t\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "                numberDelete \u003d Integer.parseInt(userInput.replace(\"-t\", \"\").trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "                isTask \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "            } else if (userInput.startsWith(\"-e\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "                numberDelete \u003d Integer.parseInt(userInput.replace(\"-e\", \"\").trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new Exception(\"e\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"delete\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (isTask) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            deleteTask(calendarList, numberDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            deleteEvent(calendarList, numberDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        storage.writeToFile(calendarList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Deletes the event of event number specified by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to delete the event from."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param numberDelete the delete event number specified by the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the delete command input is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private void deleteEvent(CalendarList calendarList, int numberDelete) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        int calendarNumber;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarNumber \u003d CalendarList.convertEventNumberToCalendarNumber(numberDelete, calendarList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarNumber \u003e\u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printDeleteMessage(calendarNumber, calendarList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList.deleteEvent(calendarNumber);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Deletes the task of task number specified by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to delete the task from."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param numberDelete the delete task number specified by the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the delete command input is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private void deleteTask(CalendarList calendarList, int numberDelete) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        int calendarNumber;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        calendarNumber \u003d CalendarList.convertTaskNumberToCalendarNumber(numberDelete, calendarList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarNumber \u003e\u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Ui.printDeleteMessage(calendarNumber, calendarList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        calendarList.deleteTask(calendarNumber);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Ui.printTotalTaskNumber(calendarList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 60,
      "Zhangyilin0203": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class DeleteInfoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public DeleteInfoCommand(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Deletes an additional information from an event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Saves the updated calendar list in the storage after the additional information is deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list containing the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      the storage to be saved to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the add command input is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        String[] command;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int eventNumber \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int infoNumber \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "            command \u003d userInput.split(\"a\", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            eventNumber \u003d Integer.parseInt(command[0].replace(\"/-\", \"\").trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "            infoNumber \u003d Integer.parseInt(command[1].trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid delete info\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int calendarNumber \u003d CalendarList.convertEventNumberToCalendarNumber(eventNumber, calendarList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarNumber \u003e\u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Event event \u003d (Event) calendarList.getItem(calendarNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        checkInfoNumberValidity(infoNumber, event);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int indexInfo \u003d infoNumber - 1; // to account for arraylist index starting from 0."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printAdditionalInformation(event, indexInfo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "        event.deleteAdditionalInformation(indexInfo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "        storage.writeToFile(calendarList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private void checkInfoNumberValidity(int infoNumber, Event event) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (infoNumber \u003e event.getAdditionalInformationCount() || infoNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid info action\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Sets the task of task number specified by the user as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Sets the task of task number specified by the user as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Saves the updated calendar list in the storage after the task is marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list that contains the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      the storage to be saved to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the done command is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int taskNumberCompleted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            taskNumberCompleted \u003d Integer.parseInt(userInput.replace(\"done\", \"\").trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"done\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (taskNumberCompleted \u003e calendarList.getTotalTasks() || taskNumberCompleted \u003c\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid task action\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int calendarNumberCompleted \u003d CalendarList.convertTaskNumberToCalendarNumber(taskNumberCompleted, calendarList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarNumberCompleted \u003e\u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarList.markTaskAsDone(calendarNumberCompleted);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printCompleteTaskMessage(calendarNumberCompleted, calendarList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        storage.writeToFile(calendarList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Saves the current calendar list locally before terminating the programme."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public ExitCommand(String userInput) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Saves the current calendar list locally."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list to be saved."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      the storage to be saved to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "        storage.writeToFile(calendarList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printExitMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Sets the isExit flag to true."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 35
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": " * Searches the task list for tasks that contains the keyword specified by the user and prints them."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_FIND_EVENT \u003d \"/fe\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_FIND_TASK \u003d \"/ft\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public static final String COMMAND_FIND_EVENT_OR_TASK \u003d \"/f\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Searches the calendar list for tasks that contains the keyword specified by the user and prints them."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list to search from."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      not required."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the keyword is not found."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert userInput.startsWith(COMMAND_FIND_EVENT_OR_TASK) : \"Find command invalid but passes\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (userInput.startsWith(COMMAND_FIND_EVENT)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "            find(COMMAND_FIND_EVENT, calendarList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_FIND_TASK)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "            find(COMMAND_FIND_TASK, calendarList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } else if (userInput.startsWith(COMMAND_FIND_EVENT_OR_TASK)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "            find(COMMAND_FIND_EVENT_OR_TASK, calendarList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "    private void find(String command, CalendarList calendarList) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "        keyword \u003d userInput.replace(command, \"\").trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"keyword not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int itemCount \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case COMMAND_FIND_EVENT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "imhm"
        },
        "content": "            for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": "                CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "imhm"
        },
        "content": "                if (item instanceof Event) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    if (item.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        itemCount++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        Ui.printFindTaskMessage(command, calendarList, isFound, i, itemCount);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        isFound \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case COMMAND_FIND_TASK:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "imhm"
        },
        "content": "            for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "imhm"
        },
        "content": "                CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "imhm"
        },
        "content": "                if (item instanceof Task) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    if (item.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        itemCount++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        Ui.printFindTaskMessage(command, calendarList, isFound, i, itemCount);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        isFound \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": "        case COMMAND_FIND_EVENT_OR_TASK:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "            for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "                CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "imhm"
        },
        "content": "                if (item.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    itemCount++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    Ui.printFindTaskMessage(command, calendarList, isFound, i, itemCount);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    isFound \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "imhm"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "imhm"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "imhm"
        },
        "content": "        if (!isFound) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"keyword not found\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 104
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Lists all available commands to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList not required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      not required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printHelpCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 22,
      "Zhangyilin0203": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PrintEventsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * Lists all event type of tasks (such as lecture, lab, tutorial and events)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " * in the calendar list to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "public class PrintEventsCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public PrintEventsCommand(String userInput) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Lists all event (such as lecture, lab, tutorial, exam and activities)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * in the calendar list to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list to list from."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @param storage      not required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        Ui.printEventsListView(calendarList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 23,
      "imhm": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PrintPriorityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "public class PrintPriorityCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public PrintPriorityCommand(String userInput) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Show all important tasks in the user\u0027s calendar list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the calendar list of all tasks and events"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param storage      not required"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Ui.printImportantTasks(calendarList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiawenLyu": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PrintProgressCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " * Show the progress of todos and deadlines to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "public class PrintProgressCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public PrintProgressCommand(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Show the progress of todos and deadlines to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the calendar list of all tasks and events"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param storage      not required"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int numTotal \u003d calculateNumTotal(calendarList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int numFinished \u003d calculateNumFinished(calendarList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Ui.printProgress(numTotal, numFinished);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Find the number of finished tasks in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of all calendar items."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return integer of number of finished tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public int calculateNumFinished(CalendarList calendarList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int numFinished \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (!(item instanceof Task)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (((Task) item).getIsDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                numFinished++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return numFinished;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Find the number of total tasks in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of all calendar items."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return integer of number of total tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public int calculateNumTotal(CalendarList calendarList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int numTotal \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (!(item instanceof Task)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            numTotal++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return numTotal;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 2,
      "JiawenLyu": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PrintSuggestionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "public class PrintSuggestionCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public PrintSuggestionCommand(String userInput) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Give user suggestions about preparing which tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the calendar list of all tasks and events"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param storage      not required"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task earliestDeadline \u003d (Deadline) getEarliestDeadline(calendarList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task earImportantDeadline \u003d (Deadline) getEarImportantDeadline(calendarList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task firstTodo \u003d (Todo) getFirstTodo(calendarList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task firImportantTodo \u003d (Todo) getFirImportantTodo(calendarList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Ui.printSuggestion(earliestDeadline, earImportantDeadline, firstTodo, firImportantTodo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Get the ordinary deadline task with earliest due date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of all tasks and events"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return ordinary deadline task with earliest due date, null if no ordinary deadline task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public Task getEarliestDeadline(CalendarList calendarList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int deadlineCount \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task earliestDeadline \u003d new Deadline(null, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (!(item instanceof Task)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (item instanceof Deadline \u0026\u0026 !((Task) item).getIsImportant() \u0026\u0026 !((Deadline) item).getIsDone()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                deadlineCount++;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                if (deadlineCount \u003d\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                    earliestDeadline \u003d (Deadline) item;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                } else if (item.getDate().isBefore(earliestDeadline.getDate())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                    earliestDeadline \u003d (Deadline) item;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (deadlineCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return earliestDeadline;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Get the important deadline task with earliest due date."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of all tasks and events"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return important deadline task with earliest due date, null if no important deadline task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public Task getEarImportantDeadline(CalendarList calendarList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task earImportantDeadline \u003d new Deadline(null, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (!(item instanceof Task)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (item instanceof Deadline \u0026\u0026 ((Deadline) item).getIsImportant() \u0026\u0026 !((Deadline) item).getIsDone()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                    earImportantDeadline \u003d (Deadline) item;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                } else if (item.getDate().isBefore(earImportantDeadline.getDate())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                    earImportantDeadline \u003d (Deadline) item;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return earImportantDeadline;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Get the first ordinary todo task in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of all tasks and events"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return first ordinary todo task, null if no ordinary task."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public Task getFirstTodo(CalendarList calendarList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task firstTodo \u003d new Todo(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (!(item instanceof Task)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (item instanceof Todo \u0026\u0026 !((Todo) item).getIsImportant() \u0026\u0026 !((Todo) item).getIsDone()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                firstTodo \u003d (Todo) item;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return firstTodo;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Get the first important todo task in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of all tasks and events"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @return first important todo task, null if no important task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public Task getFirImportantTodo(CalendarList calendarList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Task firstTodo \u003d new Todo(null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            CalendarItem item \u003d calendarList.getCalendarList().get(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (!(item instanceof Task)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (item instanceof Todo \u0026\u0026 ((Todo) item).getIsImportant() \u0026\u0026 !((Todo) item).getIsDone()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                firstTodo \u003d (Todo) item;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        return firstTodo;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiawenLyu": 149
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PrintTasksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * Lists all tasks in the calendar list to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "public class PrintTasksCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public PrintTasksCommand(String userInput) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Lists all tasks in the calendar list to the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list to list from."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      not required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printTaskListView(calendarList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 4,
      "imhm": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PrintTimelineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.calendar.CalendarItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.duke.calendar.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "public class PrintTimelineCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    public PrintTimelineCommand(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jingming517"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * Prints out timeline of all items in calendarList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param calendarList the calendar list to print the timeline from."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     * @param storage      the storage to input the data from."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarList timelineList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList todoList \u003d new CalendarList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate endDate \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            endDate \u003d detectEndDate(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (calendarList.getTotalItems() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Your calendar list is empty!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (endDate !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                endDate \u003d startDate.plusDays(7);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ((calendarList.getItem(i).getDate() \u003d\u003d null)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                            || ((calendarList.getItem(i).getDate().isAfter(startDate))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u0026\u0026 (calendarList.getItem(i).getDate().isBefore(endDate)))) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        CalendarItem temp \u003d calendarList.getItem(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (temp instanceof Todo) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                            todoList.addItem(temp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                            timelineList.addItem(temp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    CalendarItem temp \u003d calendarList.getItem(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (temp instanceof Todo) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        todoList.addItem(temp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                        timelineList.addItem(temp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            CalendarList sortedList \u003d sortByDateTime(timelineList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Here is your timeline:\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "            System.out.println(\"Timeline\\n|\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sortedList.getTotalItems() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"|__ \" + sortedList.getItem(0).getDate()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \" \" + sortedList.getItem(0).getDate().getDayOfWeek());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                if (sortedList.getItem(0).getTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"|            |_____ \" + \"23:59\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"|            |_____ \" + sortedList.getItem(0).getTime());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"|                     |_____ \" + sortedList.getItem(0).getDescription());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 1; i \u003c sortedList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalTime thisTime \u003d (sortedList.getItem(i).getTime() \u003d\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                            ? LocalTime.of(23, 59) : sortedList.getItem(i).getTime());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalTime prevTime \u003d (sortedList.getItem(i - 1).getTime() \u003d\u003d null"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                            ? LocalTime.of(23, 59) : sortedList.getItem(i - 1).getTime());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!(sortedList.getItem(i - 1).getDate().isEqual(sortedList.getItem(i).getDate()))) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                        System.out.println(\"|__ \" + sortedList.getItem(i).getDate()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                + \" \" + sortedList.getItem(i).getDate().getDayOfWeek());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!thisTime.equals(prevTime)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                        System.out.println(\"|            |_____ \" + thisTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"|                     |_____ \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                            + sortedList.getItem(i).getDescription());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "imhm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"|__ Todo items\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (todoList.getTotalItems() !\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c todoList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(index + \". \" + todoList.getItem(i).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "imhm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     * Sort the items in a CalendarList in time sequence."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     * @param calendarList list to be sorted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     * @return sorted CalendarList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CalendarList sortByDateTime(CalendarList calendarList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList sortingList \u003d calendarList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (calendarList.getTotalItems() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return calendarList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "imhm"
        },
        "content": "            for (int i \u003d 0; i \u003c calendarList.getTotalItems(); i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "imhm"
        },
        "content": "                for (int j \u003d i + 1; j \u003c calendarList.getTotalItems(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (calendarList.getItem(i).getDate() !\u003d null \u0026\u0026 calendarList.getItem(j).getDate() !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (calendarList.getItem(j).getDate().isBefore(calendarList.getItem(i).getDate())) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                            sortingList.swapTasks(i, j);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                        } else if (calendarList.getItem(j).getDate().isEqual(calendarList.getItem(i).getDate())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                            LocalTime timeOfi \u003d (calendarList.getItem(i).getTime() \u003d\u003d null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                    ? LocalTime.of(23, 59) : calendarList.getItem(i).getTime());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                            LocalTime timeOfj \u003d (calendarList.getItem(j).getTime() \u003d\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                    ? LocalTime.of(23, 59) : calendarList.getItem(j).getTime());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                            if (timeOfj.isBefore(timeOfi)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "imhm"
        },
        "content": "                                sortingList.swapTasks(i, j);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "imhm"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "imhm"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "imhm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "imhm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "            return sortingList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDate detectEndDate(String userInput) throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate startDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDate endDate;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (userInput.contains(\"week\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            endDate \u003d startDate.plusDays(7);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInput.contains((\"month\"))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            endDate \u003d startDate.plusDays(31);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (userInput.contains(\"date\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] userInputSplit \u003d userInput.split(\"date\", 2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            endDate \u003d DateTimeParser.inputDateProcessor(userInputSplit[1].trim());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            endDate \u003d null;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jingming517"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 18,
      "Jingming517": 19,
      "-": 109,
      "Zhangyilin0203": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/PrioritizeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " * Prioritize the task as important."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "public class PrioritizeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    public PrioritizeCommand(String userInput) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Mark the task as important."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of user events and tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param storage      the storage to be saved to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the command is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            if (userInput.startsWith(\"*t\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "                index \u003d Integer.parseInt(userInput.replace(\"*t\", \"\").trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "                throw new CommandException(\"prioritize\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"prioritize\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        markAsImportant(calendarList, index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        storage.writeToFile(calendarList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * Mark the task with index as important."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param calendarList the list of user events and tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     * @param indexOfTask  the index of the task in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the index is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void markAsImportant(CalendarList calendarList, int indexOfTask) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        if (indexOfTask \u003e calendarList.getTotalTasks() || indexOfTask \u003c 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid task action\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        int calendarNumber \u003d CalendarList.convertTaskNumberToCalendarNumber(indexOfTask, calendarList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        assert calendarNumber \u003e\u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        calendarList.markTaskAsImportant(calendarNumber);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Ui.printPrioritizeMessage(calendarList, calendarNumber);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 8,
      "JiawenLyu": 49
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ViewInfoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "public class ViewInfoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public ViewInfoCommand(String command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * Prints the list of additional information of a particular event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param calendarList the calendar list containing the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @param storage      not required."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": "     * @throws CommandException if the view info command is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "    public void execute(CalendarList calendarList, Storage storage) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int eventNumber \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        int calendarNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            eventNumber \u003d Integer.parseInt(userInput.replace(\"/v\", \"\").trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            throw new CommandException(\"invalid view info\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "        calendarNumber \u003d CalendarList.convertEventNumberToCalendarNumber(eventNumber, calendarList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "        assert calendarNumber \u003e\u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Event event \u003d (Event) calendarList.getItem(calendarNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        ArrayList\u003cString\u003e additionalInformation \u003d event.getAdditionalInformation();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Ui.printAllAdditionalInformation(additionalInformation, event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/resources/ModuleChecker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "package seedu.duke.resources;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import com.alibaba.fastjson.JSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.net.NoRouteToHostException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.net.UnknownHostException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * A module checker class to check if the module code entered by the user is valid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "public class ModuleChecker {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public static final String LINK \u003d \"https://api.nusmods.com/v2/2018-2019/moduleList.json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private boolean isValid;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private boolean isOnWifi;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public ModuleChecker() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        this.isValid \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        this.isOnWifi \u003d isConnectedToWifi();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Check if a given module code is valid with reference to the module list provided by NUSMod API."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @param moduleCode the module code provided by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return isValid   true if it is valid, false otherwise."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public boolean isModuleValid(String moduleCode) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        HashMap\u003cString, NusModule\u003e modListMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        modListMap \u003d generateNusModsMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        isValid \u003d modListMap.containsKey(moduleCode.toUpperCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Generate the NUS module HashMap using 2 different methods."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * If there is internet connection, NUS module HashMap is generated from the NUSMod API directly."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * If there is no internet, NUS module HashMap is generated from the local data file."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return NUS module HashMap."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private HashMap\u003cString, NusModule\u003e generateNusModsMap() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        if (isOnWifi) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            return generateNusModsMapFromOnlineApi();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            return generateNusModsMapUsingLocalData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Checks if the user\u0027s computer is connected to wifi and make sure the HTTP request to NUSMod API is successful."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return TRUE if there is internet connect, FALSE otherwise."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private boolean isConnectedToWifi() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        int httpEcho;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            URL url \u003d new URL(LINK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            URLConnection myConnection \u003d url.openConnection();// try to connect and echo back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            HttpURLConnection httpUrlConnection \u003d (HttpURLConnection) myConnection;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            httpEcho \u003d httpUrlConnection.getResponseCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (httpEcho !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                System.out.println(\"Cannot connect website!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                isOnWifi \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (UnknownHostException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"No internet connection! Verifying module code using local data....\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            isOnWifi \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (NoRouteToHostException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"No internet connection! Verifying module code using local data....\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            isOnWifi \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            isOnWifi \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return isOnWifi;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Generate a hashmap which maps the module code to a NusModule object/class."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return generatedNusModsList  a hash map containing the module code information only."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private HashMap\u003cString, NusModule\u003e generateNusModsMapFromOnlineApi() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        HashMap\u003cString, NusModule\u003e mappedNusModuleList \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        int httpEcho;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        String generatedNusModsList;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            URL url \u003d new URL(LINK);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            URLConnection myConnection \u003d url.openConnection();// try to connect and echo back"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            HttpURLConnection httpUrlConnection \u003d (HttpURLConnection) myConnection;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            httpEcho \u003d httpUrlConnection.getResponseCode();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            if (httpEcho !\u003d HttpURLConnection.HTTP_OK) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                System.out.println(\"Cannot connect website!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                InputStreamReader inputStreamReader \u003d new InputStreamReader(myConnection.getInputStream());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                StringBuffer stringBuffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                generatedNusModsList \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                while (generatedNusModsList !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    stringBuffer.append(generatedNusModsList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    stringBuffer.append(LINE_SEPARATOR);//must add new line or else it will be read as an entire string"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    generatedNusModsList \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                generatedNusModsList \u003d stringBuffer.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                List\u003cNusModule\u003e moduleList \u003d JSON.parseArray(generatedNusModsList, NusModule.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                for (NusModule a : moduleList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    mappedNusModuleList.put(a.getModuleCode(), a);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            isOnWifi \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return mappedNusModuleList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Generate a hashmap which maps the module code to a NusModule object/class."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return generatedNusModsList  a hash map containing the module code information only."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private HashMap\u003cString, NusModule\u003e generateNusModsMapUsingLocalData() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        HashMap\u003cString, NusModule\u003e mappedNusModuleListWithLocalData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            FileReader fileReader \u003d new FileReader(\"NUS_Mod_info.json\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            StringBuffer buffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            line \u003d reader.readLine();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                buffer.append(line);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                buffer.append(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            content \u003d buffer.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            List\u003cNusModule\u003e modulesList \u003d JSON.parseArray(content, NusModule.class);// extractModules(jsonStr);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            for (NusModule a : modulesList) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                mappedNusModuleListWithLocalData.put(a.getModuleCode(), a);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            System.out.println(\"The Json data file does not exist! Please make sure you read the User Guide\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \" and download\\nthe Json data file from our Github page!\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"The Json data file and the JAR file must be placed in the same folder!\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "                    + \"Please omit the error message below and carry out the above mentioned steps!\\n\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return mappedNusModuleListWithLocalData;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 171
    }
  },
  {
    "path": "src/main/java/seedu/duke/resources/NusModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "package seedu.duke.resources;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * This class is created to be used in ModuleChecker class only."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * Here is a sample JSON data from NUSMod API:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * \"moduleCode\": \"ACC1002\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * \"title\": \"Financial Accounting\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * \"semesters\": ["
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * 1,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * We are only interested in the moduleCode and nothing else."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * If need to retrieve more information from NUSMod API,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " * Amend the class methods accordingly."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "public class NusModule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Default constructor is needed for ModuleChecker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Fastjson is used in ModuleChecker, and the parser method in the fastjson library requires this."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public NusModule() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Method needed to set the module code as required by the fastjson library."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @param moduleCode sets the moduleCode to the intended module code."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public void setModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * Method getter to return the module code to be used in the subsequent mapping."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * After parsing the json file from NUSMod API, the module code and the relevant information"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * will be stored in a HashMap."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     * @return moduleCode a string representing the module code."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 49
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddInfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "class AddInfoCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void addInfoCommand_wrongCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(\"/a1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "            addInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid add info\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void addInfoCommand_eventNumberIsNotANumber_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(\"/are - hello\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            addInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid add info\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void addInfoCommand_eventNumberMoreThanEvents_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        AddInfoCommand addInfoCommand \u003d new AddInfoCommand(\"/a1 - hello\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "            addInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid event action\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 46
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CountdownCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "class CountdownCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    void execute_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        CountdownCommand countdownCommand \u003d new CountdownCommand(\"countdown abs\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            countdownCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "            assertEquals(\"invalid countdown\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhangyilin0203"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhangyilin0203": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-lalala\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"delete\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_taskNumberIsNotANumber_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-tesjk2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"delete\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_eventNumberIsNotANumber_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-e12jkm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"delete\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_taskNumberMoreThanTasks_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-t1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_negativeTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-t-2\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_taskNumberEqualsZero_exceptionThrown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-t0\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_eventNumberMoreThanEvents_exceptionThrown() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-e1\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid event action\", e.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_negativeEventNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-e-2\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid event action\", e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteCommand_eventNumberEqualsZero_exceptionThrown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"-e0\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid event action\", e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 118
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeleteInfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "class DeleteInfoCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteInfoCommand_missingCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteInfoCommand deleteInfoCommand \u003d new DeleteInfoCommand(\"/-\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid delete info\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteInfoCommand_eventNumberIsNotANumber_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteInfoCommand deleteInfoCommand \u003d new DeleteInfoCommand(\"/-a2\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid delete info\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void deleteInfoCommand_eventNumberIsNotValid_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DeleteInfoCommand deleteInfoCommand \u003d new DeleteInfoCommand(\"/-999a2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "            deleteInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid event action\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 47
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void doneCommand_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(\"done4   urehjsd\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "            doneCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"done\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void doneCommand_taskNumberMoreThanTasks_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(\"done 544\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            doneCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void doneCommand_negativeTaskNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(\"done-544\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "            doneCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void doneCommand_taskNumberEqualsZero_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "imhm"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(\"done0\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "imhm"
        },
        "content": "            doneCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 59
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void findCommand_emptyKeyword_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"/f\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "            findCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"keyword not found\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void findCommand_noSuchKeyword_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(\"/feruidfmkj\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            findCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"keyword not found\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 34
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PrintEventsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "class PrintEventsCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    void printEventsCommand_wrongCommandWithoutS_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        PrintEventsCommand printEventsCommand \u003d new PrintEventsCommand(\"print event\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            printEventsCommand.execute(calendarList, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            assertEquals(\"invalid command\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    void printEventsCommand_wrongCommandWithExtraNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        PrintEventsCommand printEventsCommand \u003d new PrintEventsCommand(\"print events 5\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            printEventsCommand.execute(calendarList, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            assertEquals(\"invalid command\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PrintTasksCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "class PrintTasksCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    void printTasksCommand_wrongCommandWithoutS_exceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        PrintTasksCommand printTasksCommand \u003d new PrintTasksCommand(\"print task\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            printTasksCommand.execute(calendarList, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            assertEquals(\"invalid command\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    void printTasksCommand_wrongCommandWithExtraNumber_exceptionThrown() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        PrintTasksCommand printTasksCommand \u003d new PrintTasksCommand(\"print tasks 5\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            printTasksCommand.execute(calendarList, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "            assertEquals(\"invalid command\", e.getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/PrioritizeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "public class PrioritizeCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    void prioritizeCommand_messageIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(\"*t kdjah\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            prioritizeCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            assertEquals(\"prioritize\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    void prioritizeCommand_negativeIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(\"*t -1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            prioritizeCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    void prioritizeCommand_outOfBoundIndex_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        PrioritizeCommand prioritizeCommand \u003d new PrioritizeCommand(\"*t 1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            prioritizeCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "            assertEquals(\"invalid task action\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JiawenLyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JiawenLyu": 46
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ViewInfoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "imhm"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "imhm"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "imhm"
        },
        "content": "import seedu.duke.calendar.CalendarList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "imhm"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "imhm"
        },
        "content": "class ViewInfoCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void viewInfoCommand_wrongCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "imhm"
        },
        "content": "        ViewInfoCommand viewInfoCommand \u003d new ViewInfoCommand(\"/v\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "imhm"
        },
        "content": "            viewInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid view info\", e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void viewInfoCommand_eventNumberIsNotANumber_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "imhm"
        },
        "content": "        ViewInfoCommand viewInfoCommand \u003d new ViewInfoCommand(\"/v4redf4\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "imhm"
        },
        "content": "            viewInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid view info\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "imhm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "imhm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "imhm"
        },
        "content": "    void viewInfoCommand_eventNumberMoreThanEvents_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "imhm"
        },
        "content": "        ViewInfoCommand viewInfoCommand \u003d new ViewInfoCommand(\"/v1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "imhm"
        },
        "content": "        CalendarList calendarList \u003d new CalendarList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "imhm"
        },
        "content": "        Storage storage \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "imhm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "imhm"
        },
        "content": "            viewInfoCommand.execute(calendarList, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "imhm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "imhm"
        },
        "content": "            assertEquals(\"invalid event action\", e.getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "imhm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "imhm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "imhm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "imhm": 46
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 1
    }
  },
  {
    "path": "text-ui-test/input_reference.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "todo hi"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "deadline project /101020"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "tut cs1010 @nus -r 4 /101020 1230"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "lect cs1010 @nus -r 3 /131020 1340"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "lab cs1010 @nus -r2 /141020 1440"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "/a3 - hello"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "/a3 - zoom link"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "/v3"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "print events"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "print tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "print timeline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "print timeline week"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "*t1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "*t 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "suggestion"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "lab cs1010 @nus -r 1 /211020 1440"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "print events"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LIU-YiFeng-1"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "LIU-YiFeng-1": 19
    }
  }
]
