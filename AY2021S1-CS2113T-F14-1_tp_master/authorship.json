[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ye Yutong | [Github](https://github.com/yeyutong811) | [Portfolio](team/yeyutong811.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Ng | [Github](https://github.com/JohnNub) | [Portfolio](team/johnnub.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Varsha MS | [Github](https://github.com/Varsha3006) | [Portfolio](team/varsha3006.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wang Zixin | [Github](https://github.com/WangZixin67) | [Portfolio](team/WangZixin67.md)"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 1,
      "Varsha3006": 1,
      "WangZixin67": 1,
      "JohnNub": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](CCAManager_logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "# Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [2. Setting up](#2-setting-up)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [3. Design and Implementation](#3-design-and-implementation)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * [3.1. Input Parsing](#31-input-parsing)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * [3.2. Commands](#32-commands)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * [3.3. Finance](#33-finance)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * [3.4. Event](#34-event)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * [3.5. HR](#35-hr)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "  * [3.6. Storage](#36-storage)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [4. Product Scope](#4-product-scope)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * [4.1. Target user profile](#41-target-user-profile)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * [4.2. Value proposition](#42-value-proposition)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [5. User Stories](#5-user-stories)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [6. Non-Functional Requirements](#6-non-functional-requirements)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [7. Glossary](#7-glossary)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [8. Instructions for manual testing](#8-instructions-for-manual-testing)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "CCA Manager is a revolutionary all-in-one management tool that changes the way you can manage interest groups with unrivaled efficiency and simplicity. Its lightweight Command Line Interface (CLI) allows administrators to breeze through tasks quickly and easily while offering powerful features to advanced users."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This developer guide is written to document the implementation of CCA Manager. This document is intended for people who"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "are interested in learning more about the technical details of the various features and the organization of the application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "You can also find CCA Manager\u0027s user guide [here](https://ay2021s1-cs2113t-f14-1.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 2. Setting up"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "For running the software release, refer to the guide [here](https://github.com/AY2021S1-CS2113T-F14-1/tp/blob/master/README.md)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "To set up the project for development. Follow the following steps:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Ensure that Java 11 or higher is installed on the development machine."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Download the source code from the CCA Manager repository [here](https://github.com/AY2021S1-CS2113T-F14-1/tp)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* You may choose to set up an IDE to facilitate easy development of the project. The team uses [Intellij IDEA](https://www.jetbrains.com/idea/) for developing the project. Other IDEs may be used, but have not been verified to work."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Import the project folder into your IDE."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "## 3. Design and Implementation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "This section seeks to explain the high-level design of the application. Given below is a quick overview of each component and the explanation of the design architecture in greater detail. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Diagrams found in our documentation were generated using PlantUML, in compliance to the UML standards defined in the module requirements."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### 3.1. Input Parsing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![Parser](BackendDiagram/ParserFlow.png)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Input parsing describes the process of converting the user\u0027s input into an executable command. The diagram above shows the execution flow required to run a single command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The `Parser` is responsible for the input conversion to a `UserInput` object. Subsequently, we use `validate()` in a loop to identify the command to execute, then we execute the command action with `execute()`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**3.1.1 Current Implementation**  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The `Parser` class in `seedu.duke.backend` handles most of the input parsing. The `Parser` is a standalone class. Its purpose is to handle the conversion of read Strings from the `Ui` to UserInput objects"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "safely for the rest of the program to handle. It implements the following operations:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Parser#parse()` - Converts the supplied input `String` to a `UserInput` object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Parser#checkCategory()` - Convert the supplied `String` to a `String` category. This function implements Shorthand category detection.  "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Commands is a feature which aims to reduce the amount of typing required to execute commands to improve efficiency. In this case, the key word for a category such as `events` can be shortened to `e`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Parser#sanitize()` - Check for unsupported, illegal or potentially malicious input and remove it from the `String`.  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "For example the EICAR Test String `X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*` can cause data loss by tricking antivirus software into quarantining data files."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Given below is an explanation on the logical flow of the `parse()` function."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "1. The supplied `String` is sent to `sanitize()` to remove any potentially unwanted input that may cause undefined application behavior."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "2. `sanitize()` will analyze the `String` and run a set list of checks to verify that the input is safe for the rest of the routine to handle."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "3. `parse()` will split the `String` to a `String[]` to identify the number of arguments."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "4. `checkCategory()` is invoked to identify if the command belongs to a specific category."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "5. A `HashMap\u003cString,String\u003e` is created to store all the arguments supplied by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "6. A new `UserInput` object is created with the arguments in the HashMap, the category of the command and the command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "7. The function returns the `UserInput` to the `Ui` for further execution."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**3.1.2 Design Considerations**  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: Statefulness of Parser object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): Parser does not preserve state between parses."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Easy to implement. Easy to test. Promotes use of single commands over multi-step commands."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Unable to implement intelligent functionality where previous input influences the behavior of the next."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Reason for choice: Our focus for this application is simplicity and efficiency. Having stateful commands runs counter to this design philosophy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "      "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: Parser preserves stateful information"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Able to implement multi-step commands. Can easily implement confirmation step for commands that manipulate large volume of data."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: More complicated to implement. Harder to ensure the behaviour of the parser is consistent. Harder to debug."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: Design of parser"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): Dedicated parser class creates an object to be passed into all other Command objects"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Allows other classes to check for the required arguments without having to do low level string handling. Enforces consistent parsing across all commands. Enables `/` arguments to be added and read in any order."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Incurs additional overhead from adding an extra step between the input operation and the command invocation."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "   "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: Each Command handles its own input independently"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Command classes are free to simplify the parsing step depending on the required complexity of the command. No intermediate step and overhead."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: More difficult to enforce parsing standards across Commands. String manipulation becomes required in every command."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### 3.2. Commands"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**3.2.1 Current Implementation**  "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The abstract `Command` class in `seedu.duke` defines how the rest of the commands interact with the `UI` and `UserInput` objects."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Its purpose is to ensure that all commands conform to the same design and coding standards to be compatible with the `UI` layer while also being"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "sufficiently flexible to allow for complex commands to be created. It specifies the following *abstract* methods:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Command#help()` - Allows commands to specify a default help `String` to be displayed if the argument supplied is incorrect."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Command#validate()` - Checks if the supplied `UserInput` was intended for this command and validates if the supplied arguments are correct. This is akin to knocking the doors of houses on a street to look for an individual."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Command#execute()` - Performs the command action. This is only run if `validate()` returns `ACCEPT`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Given below is the logical flow of the `Command` input to execution flow:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "1. The `Ui` reads the user input."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "2. The `Ui` calls the `Parser` to parse the input"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "3. The `Parser` returns the `UserInput` to the `Ui`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "4. The `Ui` checks through the list of available commands and runs `validate()` on each of them until one command returns either `ARGUMENT_ERR` or `ACCEPT`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * If the `Ui` receives an `ARGUMENT_ERR`, it calls the `help()` function of that command and prints the `String` to the `Ui`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * If the `Ui` receives an `ACCEPT`, it proceeds with the execution flow from 5."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * If the `Ui` receives no `ACCEPT`s or `ARGUMENT_ERR` after going through all commands, the `Ui` prints a list of available commands."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "5. The `Ui` calls the `execute()` method of the command that `ACCEPT` the `UserInput`."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "6. The `Ui` prints the output String returned from the `execute()` method."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**3.2.2 Design Considerations**    "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: The need to instantiate a `Command`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): Classes that inherit `Command` are instantiated on `UI` initialization."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Easy to implement. Less overhead from executing commands. Locality of the code allows for minimal merge conflicts when developing collaboratively."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Requires more memory at load to hold all the objects."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Reason for choice: Since we do not have a stateful parser, this option was chosen as the simplest implementation that gets the job done."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: `Command`s only contain static methods"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Conceptually more sensible than having exactly one instance of each command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: More complicated to implement, java has no elegant simple way to exploit inheritance and static functions in a list of classes making this option unpractical without implementing a bunch of hacks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: Design of `Command` criteria checking"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): Each class is free to specify its own matching patterns and criterion."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Allows for more complex criteria evaluation without having a dedicated class for resolving commands. Makes good use of abstraction and inheritance and puts all the `Command` related functions in the same class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Searching of the command list is `O(n)` but the individual validation functions may not be `O(1)`, resulting in higher potential overhead if validation functions are not optimized."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Reason for choice: We wanted development of command related functions to all be housed in the same class. This design achieves that goal while giving us a great deal of flexibility."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: Dedicated class for command resolution and validation"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Further separates the job of command resolution from the `Ui` and `Command`. Simplifies `Command` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Would be a class which features a very un-elegant large `if-else` block or `switch` block. Requires every new command to update this class with a substantial amount of new lines. Harder to develop collaboratively, increases chances of merge conflicts."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**3.2.3 Creating a Command**  "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This subsection demonstrates how simple it is to create a new command in the application."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "1. Create a new command class. The class should extend the `Command` class in `seedu.duke.`  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](BackendDiagram/command1.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "2. Override 3 functions, `execute()`, `validate(UserInput)` and `help()`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "3. In `validate()`, write code to check if the `UserInput` object is intended for your command.  "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](BackendDiagram/command2.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    1. Check if the category is for your command’s category (Red box in image above)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    2. Check if the command matches the name of your command (Blue box in image above)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    3. Optionally you can check the number of arguments if your command accepts arguments.  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    The figure below shows how to check for the minimum number of arguments  "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    ![](BackendDiagram/command3.png)  "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    The figure below shows how to check if an argument exists and is supplied by the user  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    ![](BackendDiagram/command4.png)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    4. Validate should return `ACCEPT`, `NO_MATCH` or `ARGUMENT_ERR`. Refer to the function javadoc for the meaning of each value, shown below.  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    ![](BackendDiagram/command5.png)  "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    5. You may want to save additional information like the `UserInput` object to a local variable as it is not supplied directly to the `execute()` function.  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "4. Set `help()` to return some useful information when the user enters the command syntax incorrectly.  "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](BackendDiagram/command6.png)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "5. Write the command working code in `execute()`. It should return a message to be displayed to the user.  "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](BackendDiagram/command7.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "6. Add your command to the `initializeCommands()` section of `seedu.duke.backend.Ui`  "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](BackendDiagram/command8.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "7. If all steps were completed correctly, you should be able to use your new command after compiling and running the program."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### 3.3. Finance  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The diagram below shows the architecture of Finance feature:  "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Architecture of Finance](financeDiagramPic/Architecture.png)  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.3.1. Add/delete finance log entry feature**  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.3.1.1. Current Implementation**  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `CommandFinanceAdd` class in `seedu.duke.finance` handles adding finance log entry. It adds a new `FinanceLog` instance according to `userInput` into `FinanceList`.  "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `CommandFinanceDel` in the same package handles deleting finance log entry. It deletes a certain `FinanceLog` instance according to the index provided by `userInput` from `FinanceList`.  "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "They implement the following operations:  "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* `CommandFinanceAdd#execute()` - Adds a new finance log entry into the `FinanceList` according to `userInput`.  "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* `CommandFinanceDel#execute()` - Deletes a certain finance log entry from `FinanceList` according to the index provided by `userInput`.  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Given below is an example usage scenario and how the add/delete finance log entry behaves at each step.  "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 1. The user launches the application for the first time. The `FinanceList` will be initialized with no `FinanceLog` in it.  "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](financeDiagramPic/1-1S1.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 2. The user executes `finance addLog iphone12 1299` command to add a finance log entry with content \"iphone12\" and value \"1299\" into finance list. The `finance addLog` command"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "calls `CommandFinanceAdd#execute()`, then `FinanceList` will be added a `FinanceLog` with its `finLog` as `iphone12` and its value as `1299`.  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](financeDiagramPic/1-1S2.png)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 3. The user executes `finance delLog 1` command to delete the 1st finance log entry in the finance list. The `finance delLog`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "command calls `CommandFinanceDel#execute()`, causing the `FinanceLog` of index 1 removed from `FinanceList`.  "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](financeDiagramPic/1-1S3.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The sequence diagram for adding a finance log entry is shown below:  "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](financeDiagramPic/CommandFinanceAdd.png)  "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The sequence diagram for deleting a finance log entry is shown below:  "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](financeDiagramPic/CommandFinanceDel.png)  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.3.1.2. Design Considerations**  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Aspect: User input format for adding a finance log entry  "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1(Current Choice): The user inputs command in format `finance addLog ITEM_NAME ITEM_VALUE`.  "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: It is more convenient for the user to type commands and easier to memorize the command format.  "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: It takes longer time to execute the command for the program has to identify which part is `ITEM_NAME` and which part is"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    `ITEM_VALUE`. If the user inputs a separate number for `ITEM_NAME` but forgets to type `ITEM_VALUE`, then the program will mistake "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    the separate number in `ITEM_NAME` for its `ITEM_VALUE`. For example, if the user just input `finance summary iphone 12` but forgot to"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    type the price, then the finance log entry will become `iphone $12`.    "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: The user inputs command in format `finance addLog /n ITEM_VALUE /v ITEM_VALUE`.  "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The program can easily detect if the input command is valid.  "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: It is harder for the user to memorize the command format. It also costs more time when executing.  "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.3.2. List the summary of finance log entries**  "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.3.2.1. Current Implementation**  "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `CommandFinanceSummary` class in `seedu.duke.finance` handles listing all the finance log entries in `FinanceList` and "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "showing the total budget of all the `FinanceLog`.  "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* `CommandFinanceSummary#execute()` - Lists all `FinanceLog` in `FinanceList` and shows the total budget of them.  "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Given below is an example usage scenario and how the program list the summary of finance log entries.  "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 1. After some `finance addLog` commands, the user created a `FinanceList` with two `FinanceLog`. The first `FinanceLog` is "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "\"iphone12 $1299\" and the second `FinanceLog` is \"chicken rice $3.5\".  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](financeDiagramPic/1-2S1.png)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 2. The user executes `finance summary` command to list the summary of `FinanceList`. The `finance summary` command calls "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`CommandFinanceSummary#execute()`, then every `FinanceLog` in `FinanceList` will be output and the total budget will be printed out at the bottom. Nothing will be changed in `FinanceList`.  "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](financeDiagramPic/1-2S2.png)  "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The sequence diagram of listing summary of finance log entries is shown below:  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](financeDiagramPic/CommandFinanceSummary.png)  "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.3.2.2. Design Considerations**  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Aspect: Repeated items  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 1(Current Choice): The summary will output all the repeated items.  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: It can display all the indexes of the repeated items so that when user wants to delete any one of them, "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    he can just refer to this summary.  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: It cannot display the total budget for these repeated items. The user has to find a way to calculate it "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    by himself.  "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 2: The summary will combine all the repeated items then output them.  "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The user do not have to calculate the total budget for repeated items by himself.  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: The summary cannot show each index of the repeated items that it is confusing when user wants to delete "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    any one of them.  "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.3.3. Change the information of a finance log entry**  "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.3.3.1. Current Implementation**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `CommandFinanceChange` class in `seedu.duke.finance` handles changing a particular `FinanceLog`\u0027s `finLog` and "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finLogVal` in `FinanceList` whose index is provided by the user.  "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* `CommandFinanceChange#execute()` - Change the `FinanceLog`\u0027s `finLog` and `finLogVal` whose index is provided by the user.  "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Given below is an example usage scenario and how the program change the information of a `FinanceLog`.  "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 1. After some `finance addLog` commands, the user created a `FinanceList` with two `FinanceLog`. The first is "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "\"iphone12 $1299\", the second is \"rent room $40\".  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](financeDiagramPic/1-3S1.png)  "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 2. The user executes `finance changeLog /i 2 /n rent field 50` to change the second `FinanceLog`\u0027s information. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `finance changeLog` command calls `CommandFinanceChnage#execute()`, then the second `FinanceLog`\u0027s `finLog` is changed "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "to \"rent field\" and its `finLogVal` is changed to \"$50\".  "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](financeDiagramPic/1-3S2.png)  "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.3.3.2. Design Considerations**  "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Aspect: User input format  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 1(Current Choice): It changes both `finLog` and `finLogVal` together at the same time.  "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The user does not need to remember two different command formats and the current format can increase the "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    efficiency of the program.  "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Every time the user has to type in both `ITEM_NAME` and `ITEM_VALUE`, it may waste some time for the user.  "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 2: Split the command into changeName and changeNum.  "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The user can choose whether just change only `finLog` or `finLogVal` and it is easier to debug.  "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: If the user want to change both `finLog` and `finLogVal`, it will waste more time on typing commands. Also, "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    it takes longer time to execute the commands, including others.  "
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The sequence diagram of changing information of a finance log entry is shown below:  "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](financeDiagramPic/CommandFinanceChange.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### 3.4. Event"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)\u003cbr/\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The diagram below shows the overall architecture for `Event` feature. "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/eventArchi.png)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "There are a total of 9 commands under `Event` feature."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `CommandEventAdd`, `CommandEventDel`, `CommandEventList`  ,`CommandEventStatus`, `CommandSearchEvent` , `CommandEventCountdown` , `CommandAddEventAttendance`,`CommandDelEventAttendance`, `CommandViewEventAttendence`. "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JohnNub"
        },
        "content": " The implementation for each `Event` command is described in detail below."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                                                             "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.1. Add/delete events feature** `CommandEventAdd` , `CommandEventDel` "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)\u003cbr/\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.1.1. Current Implementation** \u003cbr/\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The `CommandEventAdd` class in `seedu.duke.event` handles the adding of events. According to the `userInput`, it adds a new event to the `EventList`. "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The `CommandEventDel` class in the same package handles deleting of a event. It deletes an `Event` instance according to the index provided by `userInput` from the `EventList`.  "
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "They implement the following operations:  "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `CommandEventAdd#execute()` - Adds a new `Event` into the `EventList` according to `userInput`.  "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `CommandEventDel#execute()` - Deletes an `Event` from `EventList` or deletes all the events in the list. "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Note: To delete a particular event, enter the index of the event. For example, `event delEvent 2` \u003cbr/\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Note: To delete all the events in the list, enter `all` instead of the index of the event. For example, `event delEvent all` \u003cbr/\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Note: When a new event is added, if the event name and date matches to an existing event in the list, it is considered a duplicate event. It will not be added"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "      to the event list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Given below is an example usage scenario and how add/delete event function behaves at each step.  "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Step 1. The user launches the application for the first time.   "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/Step1.png)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Step 2. The user executes `event addEvent /n arduino course /d 2020-12-30 /t 18-00` command to add a new event with the name \"arduino course\", "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "the date of the event \"2020-12-30\" and the time \"18-00\" into event list. "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The `event addEvent` command calls `CommandEventAdd#execute()`, then `EventList` will add a new `Event` with event name as `arduino course`, date as `2020-12-30` and time as `18-00`.  "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/Step2.png)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Step 3. The user executes `event delEvent 1` command to delete the 1st event in the event list. The `event delEvent`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "command calls `CommandEventDel#execute()`, causing the `Event` at index 1 to be removed from `EventList`.  "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/Step3.png)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The sequence diagram for adding an event is as shown below:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![CommandEventAdd](EventDiagram/SequenceDiagram/CommandEventAdd.png)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The sequence diagram for deleting **a particular event** or **all events** is as shown below:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![CommandEventDelete](EventDiagram/SequenceDiagram/CommandEventDelete.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.1.2. Design Considerations** \u003cbr/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Aspect : User input format for adding an event \u003cbr/\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Alternative 1 (current choice) : The user will input the command in the format `event addEvent /n EVENT_NAME /d EVENT_DATE /t EVENT_TIME`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Pros: Easy to detect if user input is valid for each parameter, `/n`,`/d`and`/t`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons : It may be hard for the user to memorise the command format at the beginning. \u003cbr/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Alternative 2 : User input with the format `event addevent EVENT_NAME EVENT_DATE EVENT_TIME` \u003cbr/\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Pros: It is more convenient for the user to type commands and easier to memorise the command format. \u003cbr/\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons : It takes longer to execute the command as the program will take time to identify the respective parameters within the command entered. \u003cbr/\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.4.2. Listing Events** `CommandEventList`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)\u003cbr/\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.2.1 Current implementation**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The `CommandEventList` class in `seedu.duke.event` handles listing all the events in `EventList`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* `CommandEventList#execute()` - Lists all `Event` in `EventList`.  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Given below is an example usage scenario and how the program list the events.  "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Step 1. Assume there are 2 `Event` in the `EventList`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The first `Event` has the name arduino course on 30 December 2020 at 18-00 and the second `Event` has the name Autodesk course on 25 May 2021 from 12-00."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/2Step1.png)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Step 2.The user executes `event listEvent` command to list the `EventList`. The `event listEvent` command calls "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`CommandEventList#execute()`, then every `Event` in `EventList` will be printed out. Nothing will be changed in `EventList`.  "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/2Step2.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.2.2. Design Considerations** \u003cbr/\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Aspect: Repeated items  \u003cbr/\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Alternative 1 (Current Choice): `event listEvent` command will only list unique events present in the list. It will not show repeated events."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "When a new event is added, if the event name and date matches to an existing event in the list, it is considered a duplicate event. It will not be added"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "to the event list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Pros : The resulting event list does not contain duplicates. The number of events in the list will be valid. \u003cbr/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons :  Requires more methods to be written."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Alternative 2 : Program accepts duplicated events and filters the duplicates for the user. \u003cbr/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Pros: It can display all the indexes of the repeated items which user can refer to delete the duplicates. \u003cbr/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons : The duplicate list is redundant to the user. \u003cbr/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The sequence diagram for listing events is as shown below:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/SequenceDiagram/CommandEventList.png)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.3. Searching for an event via name or date** `CommandSearchEvent`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)\u003cbr/\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Current Implementation**"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The `CommandSearchEvent` class in `seedu.duke.event` handles searching of an event via its name or its date."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* `CommandSearchEvent#execute()` - Search all `Event` in `EventList` for the name or date entered by user."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " The sequence diagram for searching for an event is as shown below:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " ![](EventDiagram/SequenceDiagram/CommandSearchEvent.png)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.5.4.2. Design Considerations**  "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Aspect: Search conditions  \u003cbr/\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1(Current choice): It will search for `Event` by the name or date entered.  "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Its faster. If the name or date of the first `Event` in the does not match it skips to the next `Event` instead of checking other conditions."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons: If the user input contains some common strings like \"and\" or \"the\", there will be too many results shown to the user."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "          "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: It will search for `Event` whose information matches all the conditions provided by user input.  "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Pros: There will not be too many results when the user input includes common strings like \"The\" or \"and\"."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons: Since it\u0027s a linear search, therefore, the bigger the data size, the longer the search, especially with more conditions to check."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.4.4. Displaying countdown to upcoming events** `CommandEventCountdown`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)\u003cbr/\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Current Implementation**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The `CommandEventCountdown` class in `seedu.duke.event` handles displaying of countdown as an additional feature in the `EventList`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "It implements the following operation: \u003cbr/\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* `CommandEventCountdown#execute()` -  displays countdown feature for all upcoming `Event` in the `EventList`. It shows the number of days remaining to the respective event and sorts them such that the "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "earliest upcoming events is first on the list. (Earliest Deadline First,EDF)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The sequence diagram for displaying countdown is as shown below:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/SequenceDiagram/CommandEventCountdown.png)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.5.4.2. Design Considerations**  "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " Aspect: Format of countdown feature \u003cbr/\u003e "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "JohnNub"
        },
        "content": " * Alternative 1(Current choice): `event countdown` events are sorted such that the most upcoming events is displayed ahead of others. \u003cbr/\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Pros: Users can view the most urgent event easily. It lists out all the events with the countdown feature. \u003cbr/\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons: The more events added, the longer it will take to list the events. \u003cbr/\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " * Alternative 2: `event countdown EVENT_INDEX` Will only display the countdown for the event in the index given. \u003cbr/\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Pros: Faster, can easily retrieve the event from the list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Cons: Less useful to user as compared to alternative 1, where the EDF algorithm is used to sort the list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " [Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.4.5. Mark an event as completed** `CommandEventStatus`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)\u003cbr/\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Current Implementation**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The `CommandEventStatus` class in `seedu.duke.event` handles marking of an event. It can manually mark an event as done."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "It implements the following operation: \u003cbr/\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* `CommandEventStatus#execute()` -  Marks an `Event` in the `EventList` as done."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The sequence diagram for marking an event as done is as shown below:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![CommandEventStatus](EventDiagram/SequenceDiagram/CommandEventStatus.png)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.4.6. Add/delete event participants feature** `CommandAddEventAttendance` , `CommandDelEventAttendance` "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By: Ye Yutong)\u003cbr/\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.6.1. Current Implementation**  "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `CommandAddEventAttendance` class in `seedu.duke.event` handles the adding of event participants. According to the `userInput`, it adds a new participant to the specified event in the `EventList`. "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `CommandDelEventAttendance` class in the same package handles deleting of an event participant. It deletes a `Member` instance from the event participants list of the specified `Event`.  "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "They implement the following operations:  "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* `CommandAddEventAttendance#execute()` - Adds a new participant into the event participant list of the `Event`, according to `userInput`.  "
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* `CommandDelEventAttendance#execute()` - Deletes a participant from the event participant list of the `Event`, according to `userInput`."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Given below is an example usage scenario and how add/delete event participants function behaves at each step.  "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 1. After a `event addEvent` command, the user has created a `EventList` with some `Event`. Assuming there is an `Event` in the list, "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "with the name arduino course on 30 December 2020 at 18-00 and the second `Event` has the name Autodesk course on 25 May 2021 at 12-00."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        "
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/6Step1.png)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 2. After a `hr addMember` command, the user created a `MemberList` with some `Member`. Assuming there is 1 `Member` in the list, "
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "with the name \"Harry Potter\", phone number \"88888888\", email \"qaz@gmail.com\", role \"president\". \u003cbr/\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        "
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/6Step2.png)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 3. The user executes `event addAttendance /n arduino course /m harry potter` command to add a new participant with the name \"Harry Potter\" to the event with the name \"arduino course\", "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "into eventParticipants list. "
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `event addAttendance` command calls `CommandAddEventAttendance#execute()`, then `EventList` will add a `Member` with the member name `Harry Potter` in the `MemberList`, to the `Event` with event name `arduino course` in the `EventList`.  "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/6Step3.png)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 4. The user executes `event delAttendance /n arduino course /m harry potter` command to delete `Member` with the member name `Harry Potter` from the event participants list. "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `event delAttendance` command calls `CommandDelEventAttendance#execute()`, causing the specified `Member` to be removed from the event participants list of the specified `Event`.  "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/6Step4.png)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The sequence diagram for adding a participant into a particular event is as shown below:"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![CommandAddEventAttendance](EventDiagram/SequenceDiagram/CommandAddEventAttendance.png)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The sequence diagram for deleting a participant from a particular event is as shown below:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![CommandDelEventAttendance](EventDiagram/SequenceDiagram/CommandDelEventAttendance.png)"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.4.6.2. Design Considerations** \u003cbr/\u003e  "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Aspect: Delete participant attendance from an event  \u003cbr/\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* Alternative 1 (Current Choice): `event delAttendance` command will only delete member from each event by the member name. \u003cbr/\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    * Pros : The user can delete quickly if he is familiar with the name of the targeted participant. \u003cbr/\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    * Cons : The user needs to type in the full name of the participant in order to delete the person, might be less convenient if the user is not familiar with the names."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    "
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* Alternative 2 : `event delAttendance` command will only delete member from each event by the member\u0027s index in the participant list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    * Pros : It is easier to implement.  "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    * Cons : The user needs to view the participant list of the event first to view the index, hence requires more typing and less convenient. \u003cbr/\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.4.7. Listing event participants** `CommandViewEventAttendance`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By: Ye Yutong)\u003cbr/\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**3.4.7.1 Current implementation**  "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `CommandViewEventAttendance` class in `seedu.duke.event` handles listing all the participants of the given event in the event participants list."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* `CommandViewEventAttendance#execute()` - Lists all `Member` of the given `Event` the event participants list.  "
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Given below is an example usage scenario and how the program list the participants.  "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 1. After a `event addEvent` commands, the user has created a `EventList` with a `Event`. "
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        The`Event` has the name arduino course on 30 December 2020 at 18-00."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/7Step1.png)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 2. After some `hr addMember` commands, the user created a `MemberList` with some `Member`. Assuming there are 2 members in the list."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        The first `Member` has the name \"John Sterling\" with phone number \"12345678\", email \"123@gmail.com\", role \"member\"."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        The second `Member` has the name \"Harry Potter\", phone number \"88888888\", email \"qaz@gmail.com\", role \"president\". \u003cbr/\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/7Step2.png)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 3. After some `event addAttendance` commands, the user created a `MemberList` with some `Member`. Assuming the 2 participants in the event participants list are the 2 members in the `MemberList`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        "
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](EventDiagram/EventSteps/7Step3.png)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 4.The user executes `event listAttendance` command to list the event participants list. The `event listAttendance` command calls "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`CommandViewEventAttendance#execute()`, then every `Member` in event participants list of the `Event` will be printed out. Nothing will be changed in the event participants list.  "
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![](EventDiagram/EventSteps/7Step4.png) "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The sequence diagram for listing participants in an event is as shown below:"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![](EventDiagram/SequenceDiagram/CommandViewEventAttendance.png)"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### 3.5. HR"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The diagram below shows the overall architecture for HR feature.\u003cbr/\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![](hrDiagramPic/HrArchi.png)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "There are a total of 7 commands under HR feature:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `CommandAddMember`, `CommandDelMember`, `CommandViewMember`  ,`CommandListConnection`, `CommandSearchMember` , `CommandListProfAdmin` and `CommandChangeMemberInfo`. "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The implementation for each command is described in detail below."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.5.1. Add/delete member feature**  "
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By: Ye Yutong)\u003cbr/\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.5.1.1. Current Implementation**  "
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The add/delete member mechanism is facilitated by `CommandAddMember` and `CommandDelMember` classes. The "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`CommandAddMember` class in `seedu.duke.hr` handles adding members. It adds a new `Member` instance according to "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`userInput` into `MemberList`.  "
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `CommandDelMember` class in the same package handles deleting members. It deletes a certain `Member` instance "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "according to the index provided by `userInput` from `MemberList`.  "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "These two classes implement the following operations:  "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* `CommandAddMember#execute()` - Adds a new member into the `MemberList` according to `userInput`.  "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* `CommandDelMember#execute()` - Deletes a certain member from `MemberList` according to the index provided by "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`userInput`.  "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Given below is an example usage scenario and how the add/delete member behaves at each step.  "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 1. The user launches the application for the first time. The `MemberList` will be initialized with no `Member` in "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "it.  "
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](hrDiagramPic/2-1S1.png)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 2. The user executes `hr addMember /n john sterling /p 12345678 /e 123@gmail.com /r member` command to add a member"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " with name \"John Sterling\", phone number \"12345678\", email \"123@gmail.com\" and role \"member\" into member list. The "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr addMember` command calls `CommandAddMember#execute()`, which then calls `MemberList#findByName()`, "
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `MemberList#standardizeMemberName()` and `MemberList#addToList()`. `MemberList#findByName()` finds the `Member` in the "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " list by the given member name. `MemberList#standardizeMemberName()` standardize the member name input by the user by "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " capitalizing the first letter in each word in the name. Then, `MemberList#addToList()` adds a `Member` with its "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `memberName` as `John Sterling`, `memberPhone` as `12345678`, `memberEmail` as `123@gmail.com`, and `memberRole` as "
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `member` into `MemberList`. "
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The following shortcut commands can achieve the same result: \u003cbr/\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr add /n john sterling /p 12345678 /e 123@gmail.com /r member`\u003cbr/\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr a /n john sterling /p 12345678 /e 123@gmail.com /r member`\u003cbr/\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](hrDiagramPic/2-1S2.png)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 3. The user executes `hr delMember 1` command to delete the member in the member list. The `hr delMember`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "command calls `CommandDelMember#execute()`, causing the `Member` of index 1 removed from `MemberList`, and the same "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`Member` removed from the list of event participants of each `Event` in the `EventList`. "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " The following shortcut commands can achieve the same result: \u003cbr/\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr delete 1`\u003cbr/\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr d 1`\u003cbr/\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](hrDiagramPic/2-1S3.png)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The sequence diagram for adding a member is as shown below:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![CommandAddMember](hrDiagramPic/CommandAddMember.png)"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The sequence diagram for deleting a member is as shown below:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![CommandDelMember](hrDiagramPic/CommandDelMember.png)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The method `MemberList#updateAttendanceRate()` referenced in the above diagrams is as shown below:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![CommandDelMember](hrDiagramPic/UpdateAttendanceRate.png)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The method `MemberList#deleteFromEvents()` referenced in the above diagram is as shown below:"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![CommandDelMember](hrDiagramPic/DeleteFromEvents.png)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Refer to section 3.4.6.1 for the sequence diagram of the method `EventList#deletAttendance()` referenced in the above diagram. "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.5.2. List the members**  "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By: Ye Yutong)\u003cbr/\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.5.2.1. Current Implementation**  "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `CommandViewMember` class in `seedu.duke.hr` handles listing all the members in `MemberList` and "
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "showing the contacts and role information of all the `Member`.  "
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* `CommandViewMember#execute()` - Lists all `Member` in `MemberList` and shows their contacts and roles.  "
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Given below is an example usage scenario and how the program list the information of members.  "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 1. After some `hr addMember` commands, the user created a `MemberList` with two `Member`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The first `Member` is \"John Sterling\" with phone number \"12345678\", email \"123@gmail.com\", role \"member\". \u003cbr/\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The second `Member` is \"Harry Potter\", phone number \"88888888\", email \"qaz@gmail.com\", role \"president\". \u003cbr/\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](hrDiagramPic/2-2S1.png)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 2. The user executes `hr listMember` command to list the summary of `MemberList`. The `hr listMember` command calls "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`CommandViewMember#execute()`, then every `Member` in `MemberList` and the contacts and roles will be printed out within"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " the same line, separated by \"|\". Nothing will be changed in `MemberList`.  "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " The following shortcut commands can achieve the same result: \u003cbr/\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr list`\u003cbr/\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr l`\u003cbr/\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " The sequence diagram for listing the members is as shown below:"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " ![CommandViewMember](hrDiagramPic/CommandViewMember.png)"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " [Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.5.3. Change member information**  "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By: Ye Yutong)\u003cbr/\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.5.3.1. Current Implementation**  "
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The `CommandChangeInfo` class in `seedu.duke.hr` handles changing contacts and roles information of the members in "
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`MemberList` and showing the contacts and roles of the changed `Member`.  "
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "* `CommandChangeInfo#execute()` - Changes any of the their contacts and roles `Member` in `MemberList` and shows the "
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "modified member information.  "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Given below is an example usage scenario and how the program list the information of members.  "
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 1. After some `hr addMember` commands, the user created a `MemberList` with two `Member`. \u003cbr/\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The first `Member` is \"John Sterling\" with phone number \"12345678\", email \"123@gmail.com\", role \"member\". \u003cbr/\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The second `Member` is \"Harry Potter\", phone number \"88888888\", email \"qaz@gmail.com\", role \"president\". \u003cbr/\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Step 2. The user executes `hr changeInfo /n john sterling /p 11111111 /r publicity director` command to change the phone"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " number and role of the member with name \"John Sterling\" in the list. The `hr changeInfo` command calls "
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`CommandChangeInfo#execute()`, then `Member` with the `memberName` `John Sterling` in the `MemberList` will have its "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`memberPhone` changed to `11111111`, and `memberRole` changed to `publicity director`. The `memberName` is not case "
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "sensitive. "
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The following shortcut commands can achieve the same result: \u003cbr/\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr c /n john Sterling /p 11111111 /r publicity director`\u003cbr/\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The sequence diagram for changing contacts and role information of a member is as shown below:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![CommandChangeMemberInfo](hrDiagramPic/CommandChangeMemberInfo.png)"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**3.5.3.2. Design Considerations** "
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Aspect: Changing member information \u003cbr/\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1(Current Choice): `Member` information is to be modified based on the member\u0027s full name.  "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Easy to implement. Also, if the user knows the name of the target `Member`, which is a likely case in actual "
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    practice, he can change the member\u0027s information quickly."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Member name cannot be easily modified. If the user wants to change the name of the `Member`, the user has to delete "
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    the target `Member`, and add the `Member` back using the new name."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: `Member` Information is to be modified based on the member\u0027s index in the list.  "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: `Member` name can be easily modified. "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: This feature is very dependent on the list `Member` feature. The user will always need to call the `hr listMember` "
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    command to find out the index of the target `Member`, before he can change the member\u0027s information.  "
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.4. Search for members**  "
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.4.1 Current Implementation**  "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `CommandSearchMember` class in `seedu.duke.hr` handles searching for any `Member` in `MemberList` whose information matches "
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "any one of the conditions provided by the user input and then prints all the results.  "
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* `CommandSearchMember#execute()` - Search for any `Member` whose information matches any conditions "
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "provided by the user input then print all the results.  "
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Given below is an example usage scenario and how the program search particular members.  "
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 1. After some `hr addMember` commands, the user created two `Member`s in `MemberList`. The first `Member` is "
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "\"John Sterling\" with phone number \"12345678\", email \"123@gmail.com\", role \"member\". The second `Member` is "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "\"Harry Potter\", phone number \"88888888\", email \"qaz@gmail.com\", role \"president\".  "
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/3-5S1.png)  "
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 2. The user executes `hr search President` command to search for any `Member` whose information includes \"President\". "
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The program first check if the first `Member` matches the condition. This `Member` does not match the search condition.  "
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/3-5S2.png)  "
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 3. Then the program check if the second `Member` matches the condition. This `Member` now matches the search condition. "
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Because there is no more `Member`s, program will print out information of the second `Member`.  "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/3-5S3.png)  "
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The sequence diagram for searching is given below:  "
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/CommandSearchMember.png)  "
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.4.2. Design Considerations**  "
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Aspect: Search condition  "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 1(Current choice): It will search for `Members` whose inforamtion matches any conditions provided by user input.  "
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: It can maximize the number of results that are provided to user just like what google search is doing now. It can "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    also decrease the running time in some degree because it can jump to the next `Member` if the previous `Member`\u0027s name or phone "
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    number or email matches the search condition.  "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    *Cons: If the user input contains some common strings like \".com\" or \"a\", there will be too many results shown to the user.  "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 2: It will search for `Members` whose information matches all the conditions provided by user input.  "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: There will not be too many results when the user input includes common strings with other conditions.  "
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: It will increase the running time a lot because it has to check all the information of `Member`s, especially "
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    when there are many members.  "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)  "
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.5. List Professors and Administrators**  "
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.5.1 Current Implementation**  "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `CommandListProfAdmin` class in `seedu.duke.hr` handles listing all the `Member`s in `MemberList` whose roles are professor "
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "or administartor.  "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* `CommandListProfAdmin#execute()` - List all the `Member`s who are professors or administrators  "
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Given below is an example usage scenario and how the program list all the professors or administrators.  "
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 1: After some `hr addMember` commands, the user has created three `Member` in `MemberList`. The first `Member` is "
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "\"John Sterling\" with phone number \"12345678\", email \"123@gmail.com\", role \"member\". The second `Member` is "
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "\"Harry Potter\", phone number \"88888888\", email \"qaz@gmail.com\", role \"professor\". The third `Member` is "
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "\"Tony Parker\", phone number \"114514\", email \"tp9@gmail.com\", role \"Administrator\".  "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/35S1.png)  "
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 2. Then the user executes `hr list prof\u0026admin`. After sifting, the remaining `Member`\u0027s information will be "
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "printed.  "
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/35S2.png)  "
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The sequence diagram for listing professors and administrators is shown below:  "
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/CommandListProfAdmin.png)  "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.5.2. Design Considerations**  "
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Aspect: Just use `hr search` or use `hr list prof\u0026admin`  "
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 1(Current choice): Use `hr list prof\u0026admin`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The user can just type one command, instead of typing `hr search prof` and `hr search admin`.  "
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: It increases the time of searching all the `Command`s in command list and this command looks similar "
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    to `hr list` that may confuse the user.  "
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 2: Use `hr search`  "
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The time of searching all `Command`s in command list will not be influenced."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: The user has to type `hr search` twice to list professors and administrators and the lists are separated.  "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)  "
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.6. List Connection**  "
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.6.1 Current Implementation**  "
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The `CommandListConnection` class in `seedu.duke.hr` handles listing all the `Member`s in `MemberList` whose roles are speakers "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "or alumni.  "
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "It implements the following operation:  "
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* `CommandListConnection#execute()` - List all the `Member`s who are speakers or alumni  "
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Given below is an example usage scenario and how the program list all the `Member` in connection.  "
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 1. After some `hr addMember` commands, the user has created three `Member` in `MemberList`. The first `Member` is "
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        \"John Sterling\" with phone number \"12345678\", email \"123@gmail.com\", role \"member\". The second `Member` is "
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        \"Harry Potter\", phone number \"88888888\", email \"qaz@gmail.com\", role \"speaker\". The third `Member` is "
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        \"Tony Parker\", phone number \"114514\", email \"tp9@gmail.com\", role \"Alumni\".  "
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/3-6S1.png)  "
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " "
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Step 2. Then the user executes `hr list connections`. After sifting, the remaining `Member`\u0027s information will be "
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        printed.  "
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "      "
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/3-6S2.png)    "
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "  "
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "The sequence diagram for listing connection is shown below:  "
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](hrDiagramPic/CommandListConnection.png)  "
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**3.5.5.2. Design Considerations**  "
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Aspect: Just use `hr search` or use `hr list connections`  "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 1(Current choice): Use `hr list connections`"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The user can just type one command, instead of typing `hr search speaker` and `hr search alumni`.  "
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: It increases the time of searching all the `Command`s in command list and this command looks similar "
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    to `hr list` that may confuse the user.  "
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* Alternative 2: Use `hr search`  "
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Pros: The time of searching all `Command`s in command list will not be influenced."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Cons: The user has to type `hr search` twice to list speakers and alumni and the lists are separated.  "
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)  "
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### 3.6. Storage"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](BackendDiagram/StorageFlow.png)"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The storage component is responsible for storing persistent data to disk. This involves objects from all 3 categories of the application."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The above sequence diagram shows the program flow involving only the `FileManager` component, other aspects like the callers `Duke`, execution of `Ui` etc are ommitted for simplicity."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The main process of the program in Duke invokes the `readAll()` function on start-up. This reads all the data saved on disk to memory."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "During the program loop, the main process invokes `saveAll()` after every command run. This saves the current state of the application to file automatically."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Current Implementation**"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The `FileManager` class in `seedu.duke.backend` manages all the file related operations. Its purpose is to provide an abstraction layer for saving and reading the current state of the application to and from disk."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "It is also used by the `import` command to perform importing of other CSV files."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#getPath()` - Retrieves the working directory of the `FileManager`."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#setPath()` - Changes the working directory of the `FileManager`."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#saveAll()` - Saves the current state of the program. This function invokes `saveEvent()`, `saveFinance()` and `saveMembers()` in sequence."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#readAll()` - Reads the saved data in the working direction to program memory. This functions invokes `readEvent()`, `readFinance()` and `readMembers()` in sequence."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#saveEvent()` - Saves the event data to disk."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#saveFinance()` - Saves the finance data to disk."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#saveMembers()` - Saves the HR data to disk."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#saveFile()` - Saves a `String` to the specified filename."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#readFile()` - Reads a CSV file from disk and returns a `HashMap\u003cString, ArrayList\u003cString\u003e\u003e` containing the header of each table mapped to an `ArrayList` of all rows in that column. This function is also used by the `import` command."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#readFinance()` - Reads the finance data from disk."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#readEvents()` - Reads the event data from disk."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `FileManager#readMembers()` - Reads the hr data from the disk."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Design Considerations**    "
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: When is the file saved"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): Saving is performed automatically on every command completion."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Convenient for users. No requirement to save all 3 categories independently."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Requires more IO overhead to write the data to disk. Potentially wastes IO cycles writing unchanged data."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Reason for choice: Our design philosophy is to make the program as convenient and easy to use as possible. This alternative allows us to align with that goal."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: Dedicated saving command"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Only saves to the disk when required. Can revert accidental changes easily."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: The user may forget to save their data, resulting in data loss."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 3: Each command calls the relevant saving function."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Minimizes wasted IO cycles. Convenient for users."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Need to ensure that all commands that change the state of the program actually save the data. Harder to check for bugs."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: The format of the file"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): CSV File"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Commonly used file format, easy to edit. Compatible with other programs."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: None"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Reason for choice: This the best choice as it is an already established file format compatible with other programs."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: Use `serializable` Java interface"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Extremely easy to write and read from file. Very good retention of data and it\u0027s relationships. Easy to implement."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Filetype is not user editable as it is written by the java serializer."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 3: Use a proprietary file format designed specifically for CCA Manager"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Able to tailor the design of the file format to suit the requirements of the program."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: May not be editable by the user with a text editor. Does not offer compatibility with any existing programs."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    "
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 4. Product Scope"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### 4.1. Target user profile"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Our product targets people who manage interest groups and CCAs. "
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "However, our software solution allows us to easily expand the target audience to target schools and corporate enterprise clients in the future."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### 4.2. Value proposition"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Management software is expensive and complex, training employees to use it is time-consuming. CCA Manager aims to solve these"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "problems by offering an all-in-one solution focused on simplicity and efficiency. "
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Our use of industry standard csv format ensures compatibility with leading industry tools. "
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Commands and Relative Time allow advanced users to enter up to 70% more commands per minute. The import command allows users to migrate existing data quickly and get started in no time."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "## 5. User Stories"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v1.0|user|add/delete members to the list |keep track of the members in the CCA|"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v1.0|user|view a summary of members |view information of people in the various roles|"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v1.0|user|add/delete events to the list|so that i can manage the schedule|"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v1.0|user|view a summary of events |keep track of future and completed events|"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v1.0|user|add/delete entries|keep track of financial records in the CCA|"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v1.0|user|view financial summary |keep track of cash flow information at a glance|"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v2.0|user|view the number of days remaining for the events|remind myself of upcoming events |"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v2.0|user|perform a search on member/events|find the details of the member/event quickly|"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v2.0|user|view the list of contacts of the prof/admin|so that i know how to contact them for admin matters|"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "|v2.0|user|reassign member roles |so that I can update their roles and responsibilities|"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "|v2.0|user|change member phone numbers and emails |so that I can update their contacts|"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "|v2.0|user|take attendance | so that I can keep track of members participation in the club|"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v2.0|user|view members absence rate | so that I can identify members with low participation rate|"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "|v2.0|user|view the list of contacts of the connections (alumni, speakers) | So that I can source for collaborators or speakers for our events easily|"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "|v2.0|user| import other csv files | So that I can transfer my existing data into the program easily|"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "## 6. Non-Functional Requirements"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "2. Should be able to hold hundreds of thousands of data entries without losing the data."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "3. A user with average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "4. The program should support writing to a universally supported and easy to edit non-proprietary file format such as RFC 4180 .csv files."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "## 7. Glossary"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**CCA** - Co-curricular Activity \u003cbr/\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**CLI** - Command Line interface \u003cbr/\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**UML** - Unified Modelling Language \u003cbr/\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**CSV** - Comma-seperated values. This typically refers to the file type with extension .csv \u003cbr/\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**EDF** - Earliest Deadline First \u003cbr/\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**OS** - Operating Systems  \u003cbr/\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**RFC** - Request for Comments, an internet standard specifying various applications of technology or methodology.  "
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**IDE** - Integrated Development Environment. A software application that provides facilities for software development, such as IntelliJ.  "
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**EICAR** - European Institute for Computer Antivirus Research   "
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Cash flow** - Real or virtual movement of money.  "
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**IO** - Input/Output. Also known as the process of communicating within various parts of the operating system. The most common IO task is file related operations such as opening a file."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Proprietary format** - A non-standard File format designed by a particular company, organization or individual. Could be designed with the details of the implementation kept secret."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**HR** - Human Resource"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "## 8. Instructions for manual testing"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This section contains information on how to test CCA Manager to ensure that the basic functionalities are working."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "1. Start the application from a terminal window by using `java -jar CCAManager.jar`"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "2. Add some entries with commands"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `hr addMember /n Harry Potter /p 12345678 /e H_P@gmail.com /r member` to add a new member "
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `finance addLog iPhone 12 Pro 1800` to add a new finance entry"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `event addEvent /n Autodesk course /d 2020-12-20 /t 8-10.30pm` to add a new event"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "3. Check that the items have been added with the respective list commands"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `hr listmember` to show all the HR entries "
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `event listEvent` to list all the events"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `finance summary` to show a summary of all finance entries"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "4. Type `bye` to exit the program"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "5. Launch the application again."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "6. Repeat step 3 to verify that all the information entered has been saved "
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "7. Type `event search /s course` to search for the event that you have entered"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "8. Type `event countdown` to see a list of events sorted by days in increasing order"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "9. Type `hr search /r member` to search for all members with the role of member"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "10. Type `finance changeLog /i 1 /n buy cake 5.5` to modify the finance entry that you have entered"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "11. Type `hr changeInfo /n Harry Potter /p 12345678 /e 123@gmail.com /r admin` to modify the member entry entered earlier"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "12. Type `event done 1` to set the status of the event to completed"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "13. Type `hr list prof\u0026admin` to show a list of members with the role prof or admin"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "14. Type `event addAttendance /n Autodesk course /m Harry Potter` to add the member to the list of attendees"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "15. Repeat step 3 to verify that all the information has been modified successfully"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "16. Type `event listAttendance /n Autodesk course` to view the event attendance"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "17. Type `event delAttendance /n Autodesk course /m Harry Potter` to delete the attendance record"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "17. Clean up the entries by deleting them"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Use `event delEvent 1` to remove an event"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    * Use `event delEvent all` to remove all events"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `finance dellog 1` to remove the finance log"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Use `hr delMember 1` to remove the member"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "18. Type `bye` to exit the program"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "19. Launch the application again and repeat step 3 to verify that all the entries have been deleted."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to top](#CCA-manager-developer-guide)"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 229,
      "Varsha3006": 256,
      "WangZixin67": 237,
      "JohnNub": 254,
      "-": 27
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](CCAManager_logo.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "CCA Manager is a revolutionary all-in-one management tool that changes the way you can manage interest groups with unrivaled efficiency and simplicity. Its lightweight Command Line Interface (CLI) allows administrators to breeze through tasks quickly and easily while offering powerful features to advanced users."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 3,
      "-": 7
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](CCAManager_logo.png) "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "# Table of contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [1. Introduction](#1-introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [2. About this User Guide](#2-about-this-user-guide)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [3. Quick Start](#3-quick-start)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [4. Features](#4features)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  - [4.1 Help `help`](#41-help-help)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  - [4.2 Exit the program: `bye`](#42-exit-the-program-bye)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  - [4.3 HR features `HR`](#43-hr-features-hr)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Add members: `addMember`](#add-members-addmember)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Delete members: `delMember`](#delete-members-delmember)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [List members: `listMember`](#list-members-listmember)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Change member information: `changeInfo`](#change-member-information-changeinfo)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Search members: `search`](#search-members-search)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [View contacts of prof/admin: `list prof\u0026admin`](#view-contacts-of-profadmin-list-profadmin)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [View contacts of connections: `list connections`](#view-contacts-of-connections-list-connections)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  - [4.4 Event features`event`](#44-event-featuresevent)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Add an event: `addEvent`](#add-an-event-addevent)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Delete an event: `delEvent`](#delete-an-event-delevent)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Clear all events: `delEvent all`](#clear-all-events-delevent-all)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [List events: `listEvent`](#list-events-listevent)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Countdown events `countdown`](#countdown-events-countdown)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Mark an event as completed `done`](#mark-an-event-as-completed-done)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [Search for an Event `search`](#search-for-an-event-search)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    - [Add a participant to an event: `addAttendance`](#add-a-participant-to-an-event-addattendance)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    - [Delete a participant from an event: `delAttendance`](#delete-a-participant-from-an-event-delattendance)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [List participants in an event: `listAttendance`](#list-participants-in-an-event-listattendance)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  - [4.5 Finance features `finance`](#45-finance-features-finance)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [4.5.1 Add finance log entry: `addLog`](#451-add-finance-log-entry-addlog)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [4.5.2 Delete finance log entry: `delLog`](#452-delete-finance-log-entry-dellog)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [4.5.3 View financial summary: `summary`](#453-view-financial-summary-summary)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    - [4.5.4 Change finance log entry information: `changeLog`](#454-change-finance-log-entry-information-changelog)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  - [4.6 Import](#46-import)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  - [4.7 Saving the data](#47-saving-the-data)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [5. FAQ](#5-faq)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [6. Command Summary](#6-command-summary)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "- [7. Glossary](#7-glossary)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Welcome to **CCA Manager!**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "CCA Manager is a revolutionary tool that changes the way you can manage interest groups with unrivaled efficiency and simplicity. Its lightweight Command Line Interface (CLI) allows administrators to breeze through tasks quickly and easily while offering powerful features to advanced users."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Feature Overview**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Allows you to manage a HR list of members and contacts"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Allows you to create events and record member attendance for events"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Allows you to track the financial spending and budgeting of your interest group"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* You can import data from other programs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Shorthand Commands allows you to quickly enter commands by reducing the amount of typing required"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Relative Time allows you to quickly specify the day of the event without having to type in the full date format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 2. About this User Guide "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This user guide provides a quick start guide for you to easily setup install CCA Manager, "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "documentation of all the features that CCA Manager offers, frequently asked questions and a summary of the available commands."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "To navigate between the different sections, you could use the table of contents above."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Additionally, throughout this user guide, there will be various icons used as described in the legend below to provide you useful information on using the app:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :bulb: This symbol denotes a tip which you might find useful when using the application."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: This symbol denotes some information that you will need to take note of when using the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :`code` : Text that appears on the CLI / in code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e : [Hyperlinked]() : Leads you to the appropriate section"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 3. Quick Start"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The following steps will guide you through the process of running CCA Manager.  \u003cbr/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " :one: Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  \u003e :bulb: To check the version of Java on your computer, follow the instructions [here](https://www.wikihow.com/Check-Your-Java-Version-in-the-Windows-Command-Line). \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  \u003e :bulb: To download the latest version of Java on your computer, visit [here](https://www.oracle.com/java/technologies/javase-downloads.html). \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " :two: Download the latest version of CCA manager from  [here](https://github.com/AY2021S1-CS2113T-F14-1/tp/releases) \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " :three: Navigate to the folder where you downloaded CCA Manager. Run the program by entering `java -jar CCAManager.jar` in a terminal. As seen in the figure below, the red arrow points to where you have to type in commands."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": " \u003e :information_source: To launch a terminal on Windows, open the start menu, type \"Command Prompt\" to search for the terminal and run it.   "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "\u003e On MacOS, you can find the Terminal in the `/Applications/Utilities` folder. Double click Terminal to launch it.  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "\u003e On linux operating systems, the most common shortcut to opening the Terminal is CTRL+ALT+T.  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "\u003e To navigate to the folder with CCA Manager, use the command `cd \u003cFOLDER NAME/PATH\u003e` to go in to the folder. You can use `cd ..` to go back one level if you made a mistake."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": " "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " ![](userGuidePic/terminal.PNG)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "You will see this welcome message if you have done the above steps correctly. \u003cbr/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![Welcome Message](userGuidePic/welcomeMessage.PNG)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 4. Features "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "This section will show the features of our program in detail."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "You can follow along as we go through each of the features if you are starting out, or skip ahead to the Command Summary"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "to see the commands of all features at a glance."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Command Format "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Words in UPPER CASE are the parameters to be supplied by user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: Our program also supports shorthand commands.  You can use shorthand command format for faster access. Instead of typing the word in its entirety, you can use the shorthand replacement instead."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "For example, as shown in the picture below, instead of typing `event`, you can type just the letter `e`. Both serve the same functionality."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](userGuidePic/shorthandexample.PNG)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 4.1 Help `help`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shows a list of available commands.\u003cbr/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This command allows you to view a summary of all the available commands and how to use them.  "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome: "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![helpCommand](userGuidePic/helpCommand.PNG)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 4.2 Exit the program: `bye` "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "With this command you can exit the program directly from the terminal without closing it. \u003cbr/\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 4.3 HR features `HR` "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Add members: `addMember`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By:Ye Yutong)  "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to add a member to the list of members.\u003cbr/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `hr addMember /n NAME /p PHONE_NUMBER /e EMAIL /r ROLE`\u003cbr/\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`hr` -\u003e `h`  "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`addMember` -\u003e `a`/`add`  "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr addMember /n John Sterling /p 88888888 /e js@gmail.com /r president`\u003cbr/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr add /n Harry Potter /p 12345678 /e H_P@gmail.com /r member`\u003cbr/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr a /n sakata Gintoki /p 999999999 /e Ginsan@gmail.com /r member`\u003cbr/\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Expected Outcome:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " ![HrAddMemberCommand](userGuidePic/hrAddMemberCommand.PNG)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " [Return to the top](#user-guide)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Delete members: `delMember`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By:Ye Yutong)  "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to delete a member from the list of members. \u003cbr/\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `hr delMember MEMBER_INDEX` \u003cbr/\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Deletes the member at the specified MEMBER_INDEX.\u003cbr/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The MEMBER_INDEX refers to the index number shown in the list of members.\u003cbr/\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "The MEMBER_INDEX must be an integer greater than 0. \u003cbr/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`hr` -\u003e `h`  "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`delMember` -\u003e `d`/`delete`  "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr delMember 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr delete 19` \u003cbr/\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr d 5` \u003cbr/\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Expected Outcome:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " ![HrDelMemberCommand](userGuidePic/hrDelMemberCommand.PNG)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " [Return to the top](#user-guide)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### List members: `listMember`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By:Ye Yutong)  "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use this command to view the list of members, based on the order in which they are added into the list. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `hr listMember` \u003cbr/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`hr` -\u003e `h`  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`listMember` -\u003e `l` / `list`  "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr listMember`\u003cbr/\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr list`\u003cbr/\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr l`\u003cbr/\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Expected Outcome:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " ![HrListMemberCommand](userGuidePic/hrListMemberCommand.PNG)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " [Return to the top](#user-guide)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Change member information: `changeInfo`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By:Ye Yutong)  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use this command to change contact information and role of member in the list, based on the given member name. "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `hr changeInfo /n MEMBER_NAME (/p PHONE_NUMBER) (/e EMAIL) (/r MEMBER_ROLE)` \u003cbr/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "MEMBER_NAME and at least one of PHONE_NUMBER, EMAIL and MEMBER_ROLE must be provided. "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`hr` -\u003e `h`  "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`changeInfo` -\u003e `c`  "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr changeInfo /n john sterling /p 12345678` \u003cbr/\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr c /n Harry Potter /p 12345678 /e 123@gmail.com /r President` \u003cbr/\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Expected Outcome:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " ![HrChangeInfoCommand](userGuidePic/hrChangeInfoCommand.PNG)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " [Return to the top](#user-guide)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Search members: `search`  "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use this command to search for a particular member.  "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The search command will return the member that matches the criteria you specify.  "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ":bulb: If a member\u0027s information matches any of the conditions that the user inputs, "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "it will return this member.  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `hr search ITEM /n ITEM /p ITEM /e ITEM /r ITEM`  "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ":bulb: User can choose any parts of conditions above to search.  "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ":bulb: The ITEM without any symbol in front means searching the key from any parts of `Member`\u0027s information.  "
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`hr` -\u003e `h`  "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`search` -\u003e `s`  "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`hr search peter`  "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`hr search /n peter /r president`   "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Expected outcomes:  "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage 1](userGuidePic/hrsearchoutcome1.png)  "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage 2](userGuidePic/hrsearchoutcome2.png)  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to the top](#user-guide)  "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### View contacts of prof/admin: `list prof\u0026admin`  "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use this command as a shortcut to view the contacts of the professors and administrators.  "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ":bulb: Professor/prof and administrator/admin are roles of members.  "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `hr list prof\u0026admin`  "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`hr` -\u003e `h`  "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`list` -\u003e `l`  "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`prof\u0026admin` -\u003e `pa`  "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`hr list prof\u0026admin`  "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage](userGuidePic/hrprofadminoutcome.png)  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to the top](#user-guide)  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### View contacts of connections: `list connections`  "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use this command as a shortcut to list the contacts of connections(alumni, speakers).  "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ":bulb: Alumni and speaker are roles of members.  "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `hr list connections`  "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`hr` -\u003e `h`  "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`list` -\u003e `l`  "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`connections` -\u003e `c`  "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`hr list connections`  "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Expected outcome:  "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage](userGuidePic/hrlistc.png)  "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to the top](#user-guide)  "
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 4.4 Event features`event` "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Add an event: `addEvent`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Allows you to add an event to the list of events.\u003cbr/\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `event addEvent /n EVENT_NAME /d EVENT_DATE /t EVENT_TIME`\u003cbr/\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_INDEX refers to the index number shown in the list of events.\u003cbr/\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_INDEX must be an integer greater than 0. \u003cbr/\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_DATE entered should be in the format YYYY-MM-DD. \u003cbr/\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_TIME entered should be in the 24-hour clock format (HH-mm). \u003cbr/\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "\u003e :bulb: You can use Relative Time by specifying date of week for convenience. For example `/d next friday` will schedule the event on the next friday from current day."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`addEvent` -\u003e `add`/`a` \u003cbr/\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `event addEvent /n arduino course /d 2020-12-30 /t 08-00`\u003cbr/\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `event add /n arduino course /d 2020-12-30 /t 23-59`\u003cbr/\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `event a /n arduino course /d 2020-12-30 /t 08-00`\u003cbr/\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `e a /n arduino course /d 2020-12-30 /t 23-59`\u003cbr/\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `e a /n arduino course /d next friday /t 00-00`\u003cbr/\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![EventAddCommand](userGuidePic/eventAddCommand.PNG)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Delete an event: `delEvent`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JohnNub"
        },
        "content": " Allows you to delete an event from the list of events.  \u003cbr/\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " Format: `event delEvent EVENT_INDEX` \u003cbr/\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " It Deletes the event at the specified EVENT_INDEX.\u003cbr/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_INDEX refers to the index number shown in the list of events.\u003cbr/\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_INDEX must be an integer greater than 0. \u003cbr/\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`addEvent` -\u003e `del`/`d` \u003cbr/\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:     "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event delEvent 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event del 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event d 19` \u003cbr/\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`e d 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " Expected Outcome: "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " ![EventDeleteAtIndex](userGuidePic/eventDelEvent.PNG)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " [Return to the top](#user-guide)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Clear all events: `delEvent all`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to clear all events from the list of events. \u003cbr/\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `event delEvent all`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`delEvent` -\u003e `del`/`d` \u003cbr/\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event delEvent all` \u003cbr/\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: A confirmation message will be prompted. To clear, type `Y` in terminal."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome:  "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![EventDeleteAll](userGuidePic/eventDeleteAll.PNG)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### List events: `listEvent`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use this command to view the list of events, based on the order in which they are added into the list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `event listEvent` \u003cbr/\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`listEvent` -\u003e `l` \u003cbr/\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event listEvent` \u003cbr/\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event l` \u003cbr/\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`e l` \u003cbr/\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![EventListEvent](userGuidePic/eventListEvent.PNG)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Countdown events `countdown`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use this command to show the number of days remaining until an event. It also sorts them so that the event due first will be displayed first.\u003cbr/\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `event countdown` \u003cbr/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`countdown` -\u003e `c` \u003cbr/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event countdown` \u003cbr/\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`e countdown` \u003cbr/\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`e c` \u003cbr/\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![eventCountdown](userGuidePic/eventCountdown.PNG)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Mark an event as completed `done`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Allows you to mark an event as done. \u003cbr/\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `event done EVENT_INDEX` \u003cbr/\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_INDEX refers to the index number of the event that is to be marked as completed.\u003cbr/\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: The EVENT_INDEX must be an integer greater than 0. \u003cbr/\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event done 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`e done 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example scenario: \u003cbr/\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Let\u0027s say you have added one event and the event is over. You can mark it as complete by entering `event done 1`. The status will change "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "from `Up-coming` to `Done` as shown below."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome: \u003cbr/\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](userGuidePic/eventMarkAsDone.PNG)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Search for an Event `search`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Allows you to search for a particular event by name or date. \u003cbr/\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: \u0027event search /s KEYWORD\u0027 \u003cbr/\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`search` -\u003e `s` \u003cbr/\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event search /s arduino course` \u003cbr/\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event search /s 2000-12-16` \u003cbr/\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`e search /s 2000-12-16` \u003cbr/\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`e s /s 2000-12-16` \u003cbr/\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The output when you search by name is as follows: \u003cbr/\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![EventSearchByName](userGuidePic/eventSearch1.PNG) "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The output when you search by date is as follows:  \u003cbr/\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![EventSearchByDate](userGuidePic/eventSearchBydate.PNG)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "#### Add a participant to an event: `addAttendance`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By:Ye Yutong)  "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to add a participant to an event in the list of events.\u003cbr/\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `event addAttendance /n EVENT_NAME /m MEMBER_NAME`\u003cbr/\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003e :information_source: Both the `EVENT_NAME` and the `MEMBER_NAME` need to be added into the list of events and members prior to using this feature. \u003cbr/\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`addAttendance` -\u003e `aa`/`addAttend` \u003cbr/\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `event addAttendance /n arduino course /m peter`\u003cbr/\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `event addAttend /n Autodesk course /m John`\u003cbr/\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `event aa /n Machine Learning course /m John`\u003cbr/\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![EventAddAttendanceCommand](userGuidePic/eventAddAttendanceCommand.PNG)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "#### Delete a participant from an event: `delAttendance`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By:Ye Yutong)  "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to delete a participant from an event in the list of events. \u003cbr/\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Format: `event delAttendance /n EVENT_NAME /m MEMBER_NAME` \u003cbr/\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`delAttendance` -\u003e `da`/`delAttend` \u003cbr/\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Example of usage:    "
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `event delAttendance /n arduino course /m peter`\u003cbr/\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `event delAttend /n Autodesk course /m John`\u003cbr/\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `event da /n Machine Learning course /m John`\u003cbr/\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Expected Outcome: "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " ![EventDeleteAttendanceCommand](userGuidePic/eventDeleteAttendanceCommand.PNG)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " [Return to the top](#user-guide)"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "#### List participants in an event: `listAttendance`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "(By:Ye Yutong)  "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to view the list of participants in an event, based on the order in which they are added into the list.   "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `event listAttendance /n EVENT_NAME` \u003cbr/\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Format: \u003cbr/\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`event` -\u003e `e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`listAttendance` -\u003e `la`/`listAttend` \u003cbr/\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage:   "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`event listAttendance /n arduino course`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`event listAttend /n Autodesk course`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`event la /n Machine Learning course`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Expected Outcome:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![EventListAttendanceCommand](userGuidePic/eventListAttendanceCommand.PNG)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 4.5 Finance features `finance`  "
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "(by: Wang Zixin)  "
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "#### 4.5.1 Add finance log entry: `addLog`  "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to add an entry into the finance log.  "
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `finance addLog ITEM_NAME ITEM_VALUE`  "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance` -\u003e `f`  "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`addLog` -\u003e `add`/`a`  "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance addLog have lunch 4.5`  "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`f addlog buy flight ticket 750`  "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Expected outcomes:  "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage 1](userGuidePic/addlog%20outcome1.png)  "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage 2](userGuidePic/addlog%20outcome2.png)  "
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to the top](#user-guide)  "
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "#### 4.5.2 Delete finance log entry: `delLog`  "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to remove an entry from finance log.  "
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `finance delLog ITEM_INDEX`  "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance` -\u003e `f`  "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`delLog` -\u003e `del`/`d`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance dellog 3`  "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`f del 1`  "
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Expected outcomes:  "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage 1](userGuidePic/dellog%20outcome1.png)  "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage 2](userGuidePic/dellog%20outcome2.png)  "
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to the top](#user-guide)  "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "#### 4.5.3 View financial summary: `summary`  "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This command allows you to view a summary of the financial log and shows the total amount of money expended.  "
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `finance summary`  "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance` -\u003e `f`  "
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "`summary` -\u003e `s`/`l`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance summary`  "
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome:  "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage](userGuidePic/summary%20outcome.png)  "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to the top](#user-guide)  "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "#### 4.5.4 Change finance log entry information: `changeLog`  "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Allows you to change the finance log entry\u0027s name and budget amount.  "
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `finance changeLog /i INDEX /n ITEM_NAME ITEM_VALUE`  "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shorthand Format:  "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance` -\u003e `f`  "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`changeLog` -\u003e `c`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage:  "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance changeLog /i 1 /n buy cake 5.5`  "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Expected Outcome:  "
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![Example of usage](userGuidePic/FinanceChangeLog%20Outcome.png)  "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### 4.6 Import"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can import data from other existing CSVs quickly with the import command.  "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Format: `import FILENAME /c finance /name HEADER_NAME /value HEADER_NAME`  "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "OR `import FILENAME /c hr /name HEADER_NAME /phone HEADER_NAME /email HEADER_NAME /role HEADER_NAME`  "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "OR `import FILENAME /c event /name HEADER_NAME /date HEADER_NAME /time HEADER_NAME`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This command allows you to specify which columns of your CSV file you would like to copy over to the program.  "
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Example: Let\u0027s say you have a CSV file like shown below, and you would like to import it.    "
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![CSV File](userGuidePic/import1.png)  "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "In our example, the CSV file we are importing is in the same directory as CCA Manager.  "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![Location of File](userGuidePic/import2.png)  "
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can use the command `import sample.csv /c hr /name Member /phone Contact /email Email /role Role` to import the document.  "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The expected outcome is as follows:  "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![Outcome](userGuidePic/import3.png)  "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "If you would like to try out importing a file with a sample, we provide a sample file similar to the one shown in the above example.  "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can download the sample [here](https://raw.githubusercontent.com/AY2021S1-CS2113T-F14-1/tp/master/docs/sample.csv)."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 4.7 Saving the data"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "(By: Varsha)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "CCA Manager saves all your data after every command. There is no need to save manually."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 5. FAQ"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "This section details the frequently asked questions (FAQ) regarding the use of the application."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Q** How do I transfer my data to another computer? \u003cbr/\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**A** Install CCA Manager in the other computer and overwrite the empty data files it creates with the file that contains the data from your previous computer. \u003cbr/\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "You can find the data files in the \"data\" folder inside the folder that CCA Manager is running in.  "
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Q** Is CCA Manager optimized for all Operating Systems(OS)? \u003cbr/\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**A** CCA Manager is available for download on all major Operating Systems such as Windows, Mac and Linux."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Q** Where can I find the release?  "
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**A** You can find it here [Download V2.1](https://github.com/AY2021S1-CS2113T-F14-1/tp/releases/tag/v2.1)."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 6. Command Summary"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "The following table provides a summary of all features and command formats."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Command | Format | Example"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "------- | ---------- | ------------"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "addAttendance  | `event addAttendance /n EVENT_NAME /m MEMBER_NAME` | `event addAttendance /n arduino course /m Peter`\u003cbr/\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "addMember  | `hr addMember /n NAME /p PHONE_NUMBER /e EMAIL /r ROLE` | `hr addMember /n Harry /p 12345678 /e HP@gmail.com /r member`\u003cbr/\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "addEvent | `event addEvent /n EVENT_NAME /d EVENT_DATE /t EVENT_TIME` | `event addEvent /n arduino course /d 2020-09-16 /t 8pm`\u003cbr/\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "addLog | `finance addLog ITEM_NAME ITEM_VALUE` | `finance addLog have lunch 4.5`"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "bye | `bye` | -"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "changeInfo | `hr changeInfo /n MEMBER_NAME (/p PHONE_NUMBER) (/e EMAIL) (/r MEMBER_ROLE)` | `hr changeInfo /n Jack /p 12345678 /r president` \u003cbr/\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "changeLog | `finance changeLog /i INDEX /n ITEM_NAME ITEM_VALUE` | `finance changeLog /i 1 /n buy cake 5.5`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "delAttendance  | `event delAttendance /n EVENT_NAME /p MEMBER_NAME` | `event delAttendance /n arduino course /m Peter`\u003cbr/\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "delMember  | `hr delMember MEMBER_INDEX` | `hr delMember 1`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "delEvent | `event delEvent EVENT_INDEX`  | `event delEvent 1`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "delEvent all | `event delEvent all` | -"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "delLog | `finance delLog ITEM_INDEX` | `finance delLog 3`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "event done   | `event done EVENT_INDEX`| `event done 2`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "event search | `event search /s \u003cKEYWORD\u003e` | `event search /s arduino` "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "event countdown | `event countdown` | -"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "help | `help` | -"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "hr search | `hr search ITEM (/n ITEM) (/p ITEM) (/e ITEM) (/r ITEM)` | `hr search /n Peter /r president`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import  | `import FILENAME /c CATEGORY (...)` | `import sample.csv /c hr /name Member /phone Contact /email Email /role Role`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "listAttendance | `event listAttendance /n EVENT_NAME` | `event listAttendance /n arduino course`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "listMember  | `hr listMember` | -"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "listEvent | `event listEvent` | -"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "list prof\u0026admin | `hr list prof\u0026admin` | -"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "list connections | `hr list connections` | -"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "summary | `finance summary` |   -"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Return to the top](#user-guide)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## 7. Glossary"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "This section explains certain technical terms used in the guide which may require more detail."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**CCA** - Co-curricular Activity \u003cbr/\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**CSV - Comma-separated values. This typically refers to the file type with extension .csv  \u003cbr/\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Command Line Interface(CLI)** - Processes commands to a computer program in the form of lines of text. \u003cbr/\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Terminal/Command Prompt** - An interface where you can type and execute text based commands. It is a basic feature of most Operating Systems.  "
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Directory** - Folder. A directory is a more technical name for referring to folders. "
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Command** - A command is an instruction that will cause a program to perform a series of actions based on what was supplied to it.  "
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Index** - An index (of a list) refers to which position the item is in the list. In the list (apple,pear,banana) the index of \"pear\" is 2 because it\u0027s the 2nd element.  "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**HR** - Human Resource \u003cbr/\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**OS** - Operating Systems \u003cbr/\u003e"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 120,
      "Varsha3006": 293,
      "WangZixin67": 120,
      "JohnNub": 138,
      "-": 31
    }
  },
  {
    "path": "docs/team/WangZixin67.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "# Wang Zixin - Project Portfolio Page "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "I am part of a team of 4 software engineering students who are designing and implementing a "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Command Line Interface (CLI) program which is called CCA manager.  "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "**Project: CCA Manager**  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "CCA Manager is a revolutionary tool that changes the way you can manage interest groups with unrivaled efficiency and simplicity. "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Its lightweight Command Line Interface (CLI) allows administrators to breeze through tasks quickly and easily while offering powerful features to advanced users."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* **New features:**  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * **Finance**  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        * `addLog`: Add a new finance log entry to the `FinanceList`  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        * `delLog`: Delete a finance log entry from the `FinanceList`  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        * `summary`: List all the finance log entries in `FinanceList` and output the total budget  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        * `changeLog`: Change the information of a finance log entry in `FinanceList`  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * **Hr**  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        * `search`: Search for the members in `MemberList` whose information matches the condition provided by the user  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        * `list prof\u0026admin`: List all the members who are professors or administrators  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        * `list connections`: List all the members who are speakers or alumni  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* **Code contributed:**  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "[RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dwangzixin67\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* **Enhancements implemented:**  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Detect whether an email address is valid  "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Detect whether the input budget number is valid  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Improve the search function to be able to search without limitation of capital letters  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "  "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* **Contributions to documentation:**  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Added documentation for features `search`, `list prof\u0026admin` and `list connections` in `hr`  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Added documentation for features `addLog`, `delLog`, `summary` and `changeLog` in `finance`  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* **Contributions to the DG:**  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Added sequential diagrams, state diagrams and architecture diagram for `finance` feature and "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    `search`, `list prof\u0026admin`, `list connection` in `hr` part   "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Added feature description and design considerations for `finance` feature and `search`, `list prof\u0026admin`, "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    `list connection` in `hr` part    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* **Review/mentoring contributions:**  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    Increased the code simplicity.  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "* **Contributions beyond the project team:**  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Reported bugs and gave suggestions for fixing them.  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    * Helped find problems with unexecutable codes.  "
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 53
    }
  },
  {
    "path": "docs/team/johnnub.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "# John - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This document covers my contribution to CCA Manager. CCA Manager is a revolutionary all in one tool conceptualized to deliver an efficient management system that integrates many different categories and aspects of management into one single easy to use program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Instead of having dozens of text fields and hard to navigate menus, we made a focus on simplicity and efficiency to allow people to quickly get things done with CCA Manager rather than to have to figure out how to find a specific feature or spend hours managing the inputs in spreadsheet apps."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "As one of the more experienced coders on the team, I had the responsibility of overseeing the development and structure of the high level aspects of the project, to ensure that the backend design and fundamentals of project base was built on a firm foundation that would allow for easy and quick development with minimal conflicting files."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Additionally, as the only member on the team doing Information Security, I was responsible for ensuring the architecture of the program was secure and not vulnerable to user exploits by minimizing the attack surface of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "User-Facing features developed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Bye command to terminate program"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Help command to display help information"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* import command to import data from other csv files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Relative Time feature for Events so that event dates can be defined by human friendly shortcuts like \"next fri\" or \"next monday\" instead of having to type the full date format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Backend features developed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* File Manager to load and save to CSV files without any third party library dependencies"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Parser to be able to read user input of any accepted format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Sanitization whitelist to prevent potentially malicious input from causing undefined behavior in the program"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Ui framework for reading and printing user input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Backend logic design from program boot to the command reading cycle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Command framework to enable commands to be added by only creating one file and adding one line to register and activate it"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Additional contributions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Fuzzing inputs with common attack vectors to ensure consistent program behavior"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Application hardening to prevent unexpected crashes from user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Setting up of the team organization and repo"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Creation of deliverable builds (.jar files)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Design and art for product logo"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Code Contributed**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "[RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dJohnNub\u0026tabRepo\u003dAY2021S1-CS2113T-F14-1%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Contributions to Development Guide**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Introduction"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Feature Overview"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Instructions on how to run a terminal and navigate using the terminal"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Help Command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Bye Command"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Import Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Glossary"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Contributions to Development Guide**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Introduction"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Setting Up"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Input Parsing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Storage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Target User Profile"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Value Proposition"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Non-Functional Requirements"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Glossary"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Instructions for Manual Testing"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 62
    }
  },
  {
    "path": "docs/team/varsha3006.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "# Varsha - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "I am part of a team of 4 software engineering students and we were tasked to design and implement a Command Line Interface (CLI) desktop application for our team project. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Our application is called **CCA Manager**. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### About the project"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "CCA Manager is a revolutionary all-in-one management tool that changes the way "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "you can manage interest groups with unrivaled efficiency and simplicity. It has 3 features "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "in total, HR, Finance and Events. I was tasked with the Event Feature for our program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "This section shows a brief summary of my contributions to the team project, including coding, documenting and other helpful contributions throughout the development of CCA Manager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Code Contributed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "[Reposense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dvarsha3006) to access the code and documentation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "that I have contributed in this project."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Features Added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " **New features:** \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "I added to the event feature in this project. Specifically  `CommandEventAdd`, `CommandEventDel`, `CommandEventList`  ,`CommandEventStatus`, `CommandSearchEvent` and `CommandEventCountdown`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* The user will be able to use `event addEvent` to add a new event to the list.   \u003cbr/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* The user may also use `event delEvent \u003cindex\u003e` or `event delEvent all` command to delete an existing event or all events in the list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* To mark an event as completed, user can use `event done \u003cindex\u003e` \u003cbr/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* The user can use `event listEvent` to list all the events in the list. \u003cbr/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* The user can use `event search` to find events. They have the option to:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Search by Event date \u003cbr/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Search by Event name \u003cbr/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " * The user can use   `event countdown` to see number of days left to the upcoming event. \u003cbr/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Enhancements Added:**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* User will not be able add an event that matches in name and date with an existing event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* User can delete all events in the list with a confirmation message so that user doesn\u0027t accidentally delete all events data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* User will be able to search by both date and name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* User will be able to see a countdown to upcoming events sorted by the earliest deadline first."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Contributions to User Guide**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Created the first draft of the User Guide and provided a template for the rest to follow. "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Section Added:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* About this User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Quick  Start"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Glossary"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Contributed to Event features in Command Summary"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Event Features in UG:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Add an event"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Delete an event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Clear all events"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * List events"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Countdown events"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Mark an event as completed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  * Search for an Event"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "  "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "**Contributions to Developer Guide:**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* All event features and descriptions under Section 3.4.1 to 3.4.5 (including all sequential diagrams, state diagrams and architecture diagram)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* User Stories"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Setting up"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "* Glossary "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 62
    }
  },
  {
    "path": "docs/team/yeyutong811.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "# Ye Yutong - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "I am part of a team of four students enrolled in the module CS2113T. We are tasked to design and implement a Command Line Interface (CLI) program, and our program is called CCA Manager.  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### About the project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "**Project: CCA Manager**  "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "CCA Manager is a revolutionary all-in-one management tool that changes the way "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "you can manage interest groups with unrivaled efficiency and simplicity. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "There are 3 large features in this program: HR, Event, and Finance. "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Given below are my contributions to the project, which includes coding, documenting and other helpful contributions in the process of developing CCA Manager.  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "#### Code Contributed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "This is the link to view the code and documentations that I have contributed to this project: [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dyeyutong811)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "#### Features Added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "  **New features:**   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "  * **HR**  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      * `addMember`: Add Member to the list of members.  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      * `delMember`: Delete member from the list of members.  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      * `listMember`: Print the list of members.   "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      * `changeInfo`: Change contacts and role of member in the list.  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "  * **Event** "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      * `addAttendance`: Add a participant to an event in the list of events.  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      * `delAttendance`: Delete a participant from an event in the list of events.  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      * `listAttendance`: Prints the list of participants of an event in the list of events.    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " **Enhancement Added:** "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Detect whether a phone number is valid.  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * User cannot add a member with the member name that already exists in the member list.    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Input member name will be converted into title case to be stored."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Update attendance rate when member is printed. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " **Contributions to User Guide**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Added documentation for features `addMember`, `delMember`, `listMember` and `changeInfo` in `hr`  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Added documentation for features `addAttendance`, `delAttendance` and `listAttendance` in `event`  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " **Contributions to Developer Guide:**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Added sequential diagrams, state diagrams and architecture diagram for `hr` feature and "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     `addAttendance`, `delAttendance`, `listAttendance` in `event` part   "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Added feature description and design considerations for `hr` feature and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "  `addAttendance`, `delAttendance`, `listAttendance` in `event` part   "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " **Contributions beyond the project team:**  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Reported bugs in the program for other teams. Examples: [1](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues/186), [2](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues/185), [3](https://github.com/AY2021S1-CS2113T-W12-3/tp/issues/183)  "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Gave feedback to documentations of other teams.   "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static final int NO_MATCH \u003d -1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static final int ARGUMENT_ERR \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static final int ACCEPT \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private UserInput savedInput; // Variable for saving the given user input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Checks if the supplied userInput is valid for the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * UserInput can contain any information so it\u0027s the command\u0027s job to ensure it is correct before acceptance"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Once accepted, the command should store a copy of the UserInput for execution"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param input The UserInput to Validate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return NO_MATCH if the command and category is incorrect, ARGUMENT_ERR if the argument supplied is incorrect."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     *          ACCEPT if the userInput is intended and correct for invoking this command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Runs the actual command processing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Throws generic exception is used in case the other subclasses choose to throw any exceptions during execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return String message to be printed to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public abstract String execute() throws Exception;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Provides information about command usage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return The string to be printed to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public abstract String help();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.FileManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileManager fm \u003d new FileManager(\"data/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            int rv \u003d fm.readAll();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (rv !\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.printError(\"Oops I was unable to find your saved data!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.printError(\"I\u0027ve loaded your saved data successfully!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeFileFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.printError(\"Oops it appears your saved data was corrupted!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeFileHeaderException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.printError(\"Oops it appears your saved data was corrupted!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.printError(\"Oops I was unable to find your saved data!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ui.printError(\"Welcome to CCA Manager Integrated! Enter any command to begin!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        while (!Ui.shouldShutdown()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.run();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                fm.saveAll();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.printError(\"Oops! Unable to save data!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 3,
      "JohnNub": 31,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeArgumentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeArgumentException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeFileFormatException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeFileHeaderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeFileHeaderException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeFinanceAddDescriptionLostException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class DukeFinanceAddDescriptionLostException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeMemberListEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class DukeMemberListEmptyException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public DukeMemberListEmptyException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        printMessage();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void printMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        System.out.println(\"OOPS!!! The member list is empty!\\n\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeMemberNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class DukeMemberNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public DukeMemberNotFoundException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        printMessage();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void printMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        System.out.println(\"OOPS!!! The member does not exist.\\n\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeNoMatchException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeNoMatchException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeNotNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class DukeNotNumberException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/FileManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeFileFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeFileHeaderException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.finance.FinanceList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.finance.FinanceLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.hr.Member;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.hr.MemberList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class FileManager {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    // Todo support RFC 4180 CSV standard and handle rogue characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String HEADERS_MEMBERS \u003d \"Name,Phone,Email,Role\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String HEADERS_FINANCE \u003d \"Name,Value\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String HEADERS_EVENT \u003d \"Name,Date,Time,Done,Participant\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"FileLog\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private String path; // if not the working directory, path should end with a slash"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public FileManager(String path) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Files.createDirectories(Paths.get(path));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            //e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.log(Level.INFO, \"Error initializing. No write permissions?\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setPath(String path) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves data from all the different lists to disk."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException Any one of the files encounters a write error"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveAll() throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Begin Saving All\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveEvent(path + \"events.csv\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFinance(path + \"finance.csv\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveMembers(path + \"members.csv\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Finished Saving All\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int readAll() throws DukeFileFormatException, DukeFileHeaderException, IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Begin Loading All\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int ret \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            readFinance(path + \"finance.csv\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ret++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.log(Level.INFO, \"Failed to load finance\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            readMembers(path + \"members.csv\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ret++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.log(Level.INFO, \"Failed to load members\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            readEvents(path + \"events.csv\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            ret++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            logger.log(Level.INFO, \"Failed to load events\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Finished loading all\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves all the events currently in memory to a csv file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveEvent(String fileName) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String writeOutput \u003d HEADERS_EVENT + \"\\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (Event e : EventList.events) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d e.getEventName() + \",\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d e.getEventDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \",\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            writeOutput +\u003d e.getEventTime() + \",\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d e.getDone() ? \"1,\" : \"0,\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            writeOutput +\u003d e.getStringParticipants() + \"\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFile(fileName, writeOutput);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves all the finance logs currently in memory to a csv file."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveFinance(String fileName) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String writeOutput \u003d HEADERS_FINANCE + \"\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (FinanceLog f : FinanceList.financeLogs) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d f.getLog() + \",\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d f.getLogVal() + \"\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFile(fileName, writeOutput);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves all the members currently in memory to a csv file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveMembers(String fileName) throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String writeOutput \u003d HEADERS_MEMBERS + \"\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (Member m : MemberList.members) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberName() + \",\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberPhone() + \",\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberEmail() + \",\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberRole() + \"\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFile(fileName, writeOutput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Generic method for saving string to a specified file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param data String to write to the file"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void saveFile(String fileName, String data) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        fw.write(data);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        fw.flush();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Opens a file and interprets the content as if it\u0027s a csv file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param filename The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param headers if not null, verifies a matching header to the parameter, otherwise aborts"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return A HashMap containing the header and all column entries under the header as an ArrayList"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException If the file cannot be found or a read error is encountered"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static HashMap\u003cString, ArrayList\u003cString\u003e\u003e readFile(String filename, String headers)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        BufferedReader csvReader \u003d new BufferedReader(new FileReader(filename));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String row;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        boolean header \u003d true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //int rowCount \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] headerOrder \u003d null;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        while ((row \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String[] data \u003d row.split(\",\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (header) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                // Process file header"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (headers !\u003d null \u0026\u0026 !row.equalsIgnoreCase(headers)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    throw new DukeFileHeaderException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (String s : data) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    map.put(s, new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                headerOrder \u003d data;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                header \u003d false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            for (String s : data) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.get(headerOrder[i]).add(s);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (i !\u003d headerOrder.length) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                // Column mismatch!"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                throw new DukeFileFormatException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        csvReader.close();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static HashMap\u003cString, ArrayList\u003cString\u003e\u003e readFile(String filename)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return readFile(filename, null);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void readFinance(String filename)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e data \u003d readFile(filename);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Validate size of any column"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rows \u003d data.get(\"Name\").size();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                FinanceLog tmp \u003d new FinanceLog(data.get(\"Name\").get(i), Double.parseDouble(data.get(\"Value\").get(i)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                FinanceList.financeLogs.add(tmp);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                logger.log(Level.INFO, \"Save data corrupted. Parse error\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void readEvents(String filename)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e data \u003d readFile(filename);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Validate size of any column"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rows \u003d data.get(\"Name\").size();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Event tmp \u003d null;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                tmp \u003d new Event(data.get(\"Name\").get(i), data.get(\"Date\").get(i), data.get(\"Time\").get(i));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (RuntimeException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                logger.log(Level.INFO, \"Date parse failed when reading events\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                tmp.setDone(data.get(\"Done\").get(i).equals(\"1\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                logger.log(Level.INFO, \"Failed to load done status\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            EventList.events.add(tmp);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                String participantList \u003d data.get(\"Participant\").get(i);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                String trimmedParticipants \u003d participantList.substring(1, (participantList.length() - 1));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                String[] participants \u003d trimmedParticipants.split(\" \u0026 \");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                for (int j \u003d 0; j \u003c participants.length; j++) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    tmp.setEventParticipants(MemberList.findMemberByName(participants[j]));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                logger.log(Level.INFO, \"Failed to load participant data\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void readMembers(String filename)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e data \u003d readFile(filename);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Validate size of any column"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rows \u003d data.get(\"Name\").size();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                Member tmp \u003d new Member(data.get(\"Name\").get(i),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        Long.parseLong(data.get(\"Phone\").get(i)),"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        data.get(\"Email\").get(i),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        data.get(\"Role\").get(i));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                MemberList.members.add(tmp);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                logger.log(Level.INFO, \"Parse failed when reading members\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 15,
      "JohnNub": 252
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Given a string input, returns a sanitized and pre-processed UserInput object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param input The string to be processed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return UserInput object containing the command, category and all arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public UserInput parse(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        userInput \u003d sanitize(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Regex looks silly, you  have to escape the / so you type double \\ to escape the \\ used to escape the /"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] output \u003d userInput.split(\" \\\\/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String category \u003d checkCategory(output);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (!category.equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Trim is still required as indexOf \u0027 \u0027 may hit a blank space before the category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // This removes the category from the command if it exists"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String tmp \u003d output[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            output[0] \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (output.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // There are no arguments supplied"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Check if the input has any other arguments"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String tmp \u003d output[0].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String cmd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (tmp.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String arg \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cmd \u003d tmp.substring(0, tmp.indexOf(\u0027 \u0027)).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(\"\", arg);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cmd \u003d tmp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui \u003d new UserInput(cmd, map);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String base \u003d output[0].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (base.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String arg \u003d base.substring(base.indexOf(\u0027 \u0027) + 1).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                base \u003d base.substring(0, base.indexOf(\u0027 \u0027)).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(\"\", arg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Convert the / arguments into a map"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            for (int i \u003d 1; i \u003c output.length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String tmp \u003d output[i].trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String key;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String val;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (tmp.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    val \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    key \u003d tmp.substring(0, tmp.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    val \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    key \u003d tmp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(key.trim().toLowerCase(), val.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui \u003d new UserInput(base, map);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ui.setCategory(category);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Given any split output, finds if the output contains a string that indicates the category."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Shorthand categories are supported."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param output The split string output"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return The category of the command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String checkCategory(String[] output) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String tmp \u003d output[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (tmp.startsWith(\"hr \") || tmp.startsWith(\"h \")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"hr\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (tmp.startsWith(\"finance \") || tmp.startsWith(\"f \")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"finance\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (tmp.startsWith(\"event \") || tmp.startsWith(\"e \")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"event\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Cleans up the string to ensure that anything else is safe for the rest of the program to handle."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param s String to be sanitized"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return Sanitized string S"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String sanitize(String s) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Check for illegal characters"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // This whitelist can be relaxed with more testing, but for now only basic alphanumeric is permitted"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        s \u003d s.replaceAll(\"[^a-zA-Z0-9 .\\\\-@\u0026/]\", \"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 4,
      "JohnNub": 102
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeArgumentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeFinanceAddDescriptionLostException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNoMatchException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNotNumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.event.CommandAddEventAttendance;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.event.CommandDelEventAttendance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.event.CommandEventAdd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.event.CommandEventCountdown;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.event.CommandEventDel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.event.CommandEventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.event.CommandEventStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.event.CommandSearchEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.event.CommandViewEventAttendance;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.finance.CommandFinanceAdd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.finance.CommandFinanceChange;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.finance.CommandFinanceDel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.finance.CommandFinanceSummary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.CommandAddMember;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.CommandChangeMemberInfo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.CommandDelMember;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.hr.CommandListConnection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.hr.CommandListProfAdmin;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.hr.CommandSearchMember;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.CommandViewMember;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.others.CommandBye;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.others.CommandHelp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.others.CommandImportCsv;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static ArrayList\u003cCommand\u003e commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private static final String UNDERSCORES \u003d \"_\".repeat(100);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        initializeCommands();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String inStr \u003d sc.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput userInput \u003d parser.parse(inStr);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        System.out.println(\"Category: \"+userInput.getCategory());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(\"Command: \"+userInput.getCommand());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(\"Num Args: \"+userInput.getNumArgs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        System.out.println(\"Args: \"+userInput.getArgs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Command cmd \u003d findCommand(userInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(cmd.execute());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeArgumentException ae) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Placeholder if additional routine is required when user enters incorrect parameters"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeNoMatchException ne) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"No such command. Try \u0027help\u0027 for a list of commands.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (DukeFinanceAddDescriptionLostException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            printOutput(\"Please enter the complete command. Format is:\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    + \"finance addLog ITEM_NAME ITEM_VALUE\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (DukeNotNumberException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            printOutput(\"The format requires a number in the end.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Command execution failed with an unhandled error!\", true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Command findCommand(UserInput ui) throws DukeArgumentException, DukeNoMatchException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (Command c : commandList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            int result \u003d c.validate(ui);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (result \u003d\u003d Command.ARGUMENT_ERR) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                printError(c.help());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                throw new DukeArgumentException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (result \u003d\u003d Command.ACCEPT) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        throw new DukeNoMatchException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Returns if the loop should exit."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return true if the program should terminate"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static boolean shouldShutdown() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return shutdown;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void setShutdown(boolean shut) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        shutdown \u003d shut;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Utility function for printing errors triggered by other classes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param text The string to be printed"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void printError(String text) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(text, true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(text, false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Prints the output with the divider lines and the supplied text."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Option to make the text non instant for extra effect"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param text string to be printed"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param isInstant whether the string is printed instantly"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text, boolean isInstant) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (text \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Split text according to the lines to format."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] lines \u003d text.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (String s : lines) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (isInstant) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.println(\"  \" + s);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(\"  \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                // charAt is constant time lookup so we do that instead of splitting strings."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    char c \u003d s.charAt(i);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    System.out.print(c);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        Thread.sleep(1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(System.lineSeparator());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Creates a list of commands for the program to check through."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void initializeCommands() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        commandList.add(new CommandHelp());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        commandList.add(new CommandBye());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandFinanceSummary());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandFinanceAdd());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandFinanceDel());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventAdd());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventDel());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandAddMember());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandViewMember());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandDelMember());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandSearchMember());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandListProfAdmin());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandListConnection());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandChangeMemberInfo());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventStatus());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventCountdown());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandSearchEvent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        commandList.add(new CommandImportCsv());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandFinanceChange());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandAddEventAttendance());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandViewEventAttendance());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandDelEventAttendance());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 19,
      "Varsha3006": 13,
      "WangZixin67": 31,
      "JohnNub": 113
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/UserInput.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class UserInput {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Map\u003cString, String\u003e args;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public UserInput(String c, Map\u003cString, String\u003e a) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        command \u003d c;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        args \u003d a;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Map\u003cString, String\u003e getArgs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setArgs(Map\u003cString, String\u003e args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getArg(String s) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args.get(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int getNumArgs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setCategory(String s) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        category \u003d s;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandAddEventAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents add attendance command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandAddEventAttendance extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d EventList.addAttendance(savedInput.getArg(\"n\"), savedInput.getArg(\"m\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        savedInput \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"event\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"addAttendance\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"addAttend\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"aa\"))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (input.getNumArgs() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if (input.getArg(\"n\") \u003d\u003d null || input.getArg(\"m\") \u003d\u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        || input.getArg(\"n\").equals(\"\") || input.getArg(\"m\").equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                return ACCEPT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: event addAttendance /n \u003cEvent Name\u003e /m \u003cParticipant Name\u003e\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandDelEventAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents delete attendance command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandDelEventAttendance extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d EventList.deleteAttendance(savedInput.getArg(\"n\"), savedInput.getArg(\"m\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        savedInput \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"event\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"delAttendance\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"delAttend\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"da\"))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (input.getNumArgs() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if (input.getArg(\"n\") \u003d\u003d null || input.getArg(\"m\") \u003d\u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        || input.getArg(\"n\").equals(\"\") || input.getArg(\"m\").equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                return ACCEPT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: event delAttendance /n \u003cEvent Name\u003e /m \u003cParticipant Name\u003e\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventAdd extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Event cachedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private static final String PATTERN \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            \"([01]?[0-9]|2[0-3])-([0-5][0-9])\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String WRONG_TIME_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            \"Please enter time in HH-mm format. Note that it is 24 hour clock format.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String DUPLICATE_EVENT \u003d \"This event already exists!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute()  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (cachedEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"Unable to create event! Please check your inputs again!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String eventName \u003d userInput.getArg(\"n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String eventDate \u003d userInput.getArg(\"d\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String eventTime \u003d userInput.getArg(\"t\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(PATTERN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(eventTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        boolean matchFound \u003d matcher.matches();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (!(matchFound)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            output \u003d WRONG_TIME_FORMAT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else if ((EventList.checkEventNameMatch(eventName)) \u0026\u0026 (EventList.checkEventDateMatch(eventDate))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            output \u003d DUPLICATE_EVENT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            output \u003d EventList.addEvent(cachedEvent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        userInput \u003d ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getCategory().equals(\"event\") \u0026\u0026 (userInput.getCommand().equalsIgnoreCase(\"addEvent\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || userInput.getCommand().equalsIgnoreCase(\"add\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || userInput.getCommand().equalsIgnoreCase(\"a\"))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getNumArgs() \u003e\u003d 3) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if ((ui.getArg(\"n\") \u003d\u003d null) || (ui.getArg(\"d\") \u003d\u003d null) || (ui.getArg(\"t\") \u003d\u003d null)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if ((ui.getArg(\"n\").equals(\"\")) || (ui.getArg(\"d\").equals(\"\")) || (ui.getArg(\"t\").equals(\"\"))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cachedEvent \u003d new Event(userInput.getArg(\"n\"), userInput.getArg(\"d\"), userInput.getArg(\"t\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (cachedEvent.date !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    return ACCEPT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Syntax: event addEvent /n EVENT_NAME /d EVENT_DATE \u003cYYYY-MM-dd\u003e /t EVENT_TIME \u003cHH-mm\u003e\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 56,
      "JohnNub": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventCountdown.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventCountdown extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute()  {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput \u003d EventList.countdownView();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.userInput \u003d ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (ui.getCategory().equals(\"event\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"countdown\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            || ui.getCommand().equalsIgnoreCase(\"c\"))) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Syntax: event countdown\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventDel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.DukeNoMatchException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventDel extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute() throws DukeNoMatchException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        boolean isInteger \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            index \u003d Integer.parseInt(userInput.getArg(\"\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            isInteger \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (isInteger) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            output \u003d output.concat(EventList.deleteEvent(index - 1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (userInput.getArg(\"\").toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output.concat(EventList.clearEvents());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                throw new DukeNoMatchException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Syntax: event delEvent EVENT_INDEX\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        userInput \u003d ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"event\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"delEvent\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"delete\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"del\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"d\"))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (ui.getNumArgs() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                if ((ui.getArg(\"\") !\u003d null)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    return ACCEPT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 54,
      "JohnNub": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventList extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d EventList.printEventList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.userInput \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (input.getCategory().equals(\"event\") \u0026\u0026 input.getArg(\"\") \u003d\u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"listEvent\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            || input.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            || input.getCommand().equalsIgnoreCase(\"l\"))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Syntax: event listEvent\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 31,
      "JohnNub": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventStatus extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        index \u003d Integer.parseInt(userInput.getArg(\"\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d EventList.isCompleted(index - 1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        userInput \u003d ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (ui.getCategory().equals(\"event\") \u0026\u0026 ui.getCommand().equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (ui.getNumArgs() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                if ((ui.getArg(\"\") !\u003d null)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    return ACCEPT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Syntax: event done EVENT_INDEX\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 39
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandSearchEvent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandSearchEvent extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute()  {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String input \u003d userInput.getArg(\"s\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d EventList.searchEvents(input);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Syntax: event search /s KEYWORD\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        userInput \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (ui.getCategory().equals(\"event\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"search\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            || ui.getCommand().equalsIgnoreCase(\"s\"))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 32
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandViewEventAttendance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents view attendance command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandViewEventAttendance extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"event\") \u0026\u0026 input.getArg(\"\") \u003d\u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"listAttendance\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"listAttend\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"la\"))) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (input.getNumArgs() \u003e\u003d 1) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if (input.getArg(\"n\") \u003d\u003d null || input.getArg(\"n\").equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                return ACCEPT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d EventList.listAttendance(savedInput.getArg(\"n\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: event listAttendance /n \u003cEvent Name\u003e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 41
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeArgumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected String eventTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    protected String symbol;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public ArrayList\u003cMember\u003e eventParticipants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public Event(String name, String date, String time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.eventName \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.eventTime \u003d time;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.symbol \u003d \"[E]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        setDateTime(date, time);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public void setEventDate(LocalDate date) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setEventName(String eventName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getEventTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setEventTime(String eventTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDate getEventDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Returns a tick or cross depending on whether a event is marked done."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return done or upcoming command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return isDone ? \"[Done]\" : \"[Up-coming]\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDone(boolean d) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        isDone \u003d d;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Returns the string format of the event."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return String format of event."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String printEvent() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return symbol + this.getStatusIcon() + \"\\nEvent Name: \" + this.eventName + \"\\nDate: \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \"\\nTime: \" + this.eventTime;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public long numberOfDaysLeft() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return ChronoUnit.DAYS.between(LocalDate.now(), this.getEventDate());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Attempts to read the date time. If it fails, uses relative timing to try again."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param dateStr The Date to be processed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param timeStr The time to be processed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDateTime(String dateStr, String timeStr) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        eventTime \u003d timeStr;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            date \u003d LocalDate.parse(dateStr);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Ignore"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime start \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"next\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"next\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"end\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"end\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (start !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d start.withHour(23).withMinute(59).withSecond(59).withNano(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                eventTime \u003d \"23-59\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (start !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            date \u003d start.toLocalDate();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new RuntimeException();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void setEventParticipants(Member m) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (m !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            this.eventParticipants.add(m);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public ArrayList\u003cMember\u003e getEventParticipants() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return eventParticipants;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String getStringParticipants() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"[\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (eventParticipants.size() !\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            for (int i \u003d 0; i \u003c eventParticipants.size(); i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                output \u003d output.concat(eventParticipants.get(i).getMemberName());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if (i \u003c (eventParticipants.size() - 1)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    output \u003d output.concat(\" \u0026 \");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d output.concat(\"]\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Used to identify if the string contains the keyword specified in its description."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param keyword The keyword to be matched with the description."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return true if list contains the keyword"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public boolean containsNameKeyword(String keyword) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        boolean containsKeyword \u003d eventName.toLowerCase().contains(keyword.toLowerCase());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public boolean containsDateKeyword(LocalDate localDate) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        boolean containsKeyword \u003d date.equals(localDate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return containsKeyword;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String printEventParticipant() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"The following \" + ((this.getEventParticipants().size() \u003e 1) ? \"members have\" : \"member has\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \" participated in this event:\\n\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c this.getEventParticipants().size(); i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            int index \u003d i + 1;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(index + \". \" + this.getEventParticipants().get(i).getMemberName() + \"\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 37,
      "Varsha3006": 72,
      "JohnNub": 97
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.MemberList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static Logger logger \u003d Logger.getGlobal();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_EVENT_NOT_EXIST \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            \"OOPS!!! The event does not exist.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String ARE_YOU_SURE_THAT_YOU_WANT_TO_CLEAR_THE_LIST \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            \"Are you sure you want to clear the list? Y/N\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_EVENT_LIST_CLEAR_SUCCESSFUL \u003d \"The list has been cleared!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_EVENT_LIST_CLEAR_UNSUCCESSFUL \u003d \"The list will not be cleared!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_EVENT_LIST_EMPTY \u003d \"Oops! The event list is empty!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_ADD_EVENT_SUCCESSFUL \u003d \"Got it. I\u0027ve added this Event:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_DELETE_EVENT_SUCCESSFUL \u003d \"Got it! I\u0027ll remove this Event:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_MARK_EVENT_AS_COMPLETE_SUCCESSFUL \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_KEYWORD_NOT_FOUND \u003d \"No matching events found!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static final String COMMAND_NOT_VALID_DATE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            \"Oops! Seems like you have entered a past date. Please enter a valid date.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static Event getEvent(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return events.get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Adds member to the arraylist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param event event to be added in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String addEvent(Event event) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Adding event to list\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        //User does not accidentally add an event with a past date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        LocalDate date \u003d event.getEventDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (date.isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return COMMAND_NOT_VALID_DATE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d COMMAND_ADD_EVENT_SUCCESSFUL + event.printEvent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    + \"\\nNow you have \" + events.size() + \" event in the list.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            logger.info(\"Added event to list\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * To delete an event based on the given index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param index index to be deleted from list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String deleteEvent(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Deleting event\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                logger.warning(\"Empty event list.\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d COMMAND_EVENT_LIST_EMPTY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d COMMAND_DELETE_EVENT_SUCCESSFUL;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d userOutput.concat(events.get(index).printEvent() + \"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                events.remove(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d userOutput.concat(\"Now you have \" + events.size() + \" event in the list.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                logger.info(\"Deleted test from list\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d COMMAND_EVENT_NOT_EXIST;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Deletes all the events in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return output String informing if list is emptied"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String clearEvents() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Clearing event\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            logger.warning(\"Empty event list.\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            output \u003d COMMAND_EVENT_LIST_EMPTY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            System.out.println(ARE_YOU_SURE_THAT_YOU_WANT_TO_CLEAR_THE_LIST);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            String userInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (userInput.toLowerCase().equals(\"y\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                events.clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output.concat(COMMAND_EVENT_LIST_CLEAR_SUCCESSFUL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output.concat(COMMAND_EVENT_LIST_CLEAR_UNSUCCESSFUL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Marks a event as done."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param index item to be marked as completed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return userOutput to be printed out"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String isCompleted(int index) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            int numToBeMarked \u003d index + 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            Event event \u003d events.get(index);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            event.isDone \u003d true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d userOutput.concat(COMMAND_MARK_EVENT_AS_COMPLETE_SUCCESSFUL"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    + numToBeMarked + \".\" + events.get(index).printEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d COMMAND_EVENT_NOT_EXIST;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Prints a list of events."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return list of events"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String printEventList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Initialising event list\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            logger.warning(\"Empty event list.\\n\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d (COMMAND_EVENT_LIST_EMPTY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d \"Here are the current events in your list:\\n\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d userOutput.concat(events.indexOf(event) + 1 + \".\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d userOutput.concat(event.printEvent()) + \"\\n\" + \"*\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            logger.info(\"Event List ready\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Shows number of left to events."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return number of days left to event."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String countdownView() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput \u003d \"\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        int eventNumber \u003d 1;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsSortedByDate \u003d events;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        eventsSortedByDate.sort(Comparator.comparing(Event::getEventDate));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (events.size() !\u003d 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            for (Event event : eventsSortedByDate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                if (!event.getEventDate().isBefore(LocalDate.now())) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    userOutput \u003d userOutput + eventNumber + \".\" + event.printEvent();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    userOutput \u003d userOutput.concat(\"\\nNumber of day(s) left: \" + event.numberOfDaysLeft())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                            + \"\\n\" + \"*\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    eventNumber++;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d COMMAND_EVENT_LIST_EMPTY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Displays the list of tasks containing the keyword."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param keyword The keyword to be searched for."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String searchEvents(String keyword) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (checkEventNameMatch(keyword)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output.concat(printFilteredEventsByName(keyword));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            } else if (checkEventDateMatch(keyword)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output.concat(printFilteredEventsByDate(keyword));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output.concat(COMMAND_KEYWORD_NOT_FOUND);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            output \u003d output.concat(COMMAND_KEYWORD_NOT_FOUND);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Used to check if there is at least one task containing the keyword in it\u0027s description."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return returns true if at least one event contains the event name."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static boolean checkEventNameMatch(String keyword) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        boolean hasMatchedTask \u003d false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (event.containsNameKeyword(keyword)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                hasMatchedTask \u003d true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return hasMatchedTask;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Used to check if there is at least one task containing the keyword in it\u0027s description."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return returns true if at least one event contains the event date"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static boolean checkEventDateMatch(String keyword) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(keyword);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        boolean hasMatchedTask \u003d false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (event.containsDateKeyword(date)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                hasMatchedTask \u003d true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return hasMatchedTask;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Displays the list of tasks containing the keyword."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private static String printFilteredEventsByName(String keyword) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if ((event.containsNameKeyword(keyword))) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output + taskNumber + \".\" + event.printEvent() + \"\\n\" + \"*\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                taskNumber++;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Displays the list of tasks containing the keyword."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param keyword The word used for search."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private static String printFilteredEventsByDate(String keyword) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        int taskNumber \u003d 1;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if ((event.containsDateKeyword(LocalDate.parse(keyword)))) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                output \u003d output + taskNumber + \".\" + event.printEvent() + \"\\n\" + \"*\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                taskNumber++;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Used to find Event with the given event name."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param eventName The event name used for search."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return returns Event if it exists in the event list, else return null."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static Event findEventByName(String eventName) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (event.getEventName().equalsIgnoreCase(eventName)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                return event;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Check if Event with the given member name exists."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param eventName The event name used for search."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return returns true if it exists in the event list, else return false."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static boolean checkEventExistence(String eventName) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean hasExist \u003d false;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (events.get(i).getEventName().equalsIgnoreCase(eventName)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                hasExist \u003d true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return hasExist;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Adds Member with the given member name into participant list of event with the given event name."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param eventName The event name."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName The member name."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return returns user output."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String addAttendance(String eventName, String memberName) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (!checkEventExistence(eventName)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(COMMAND_EVENT_NOT_EXIST);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (!MemberList.checkMemberExistence(MemberList.members, memberName)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(\"Member does not exist!\\n\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Event e \u003d findEventByName(eventName);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (MemberList.checkMemberExistence(e.getEventParticipants(), memberName)) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(\"Member attendance had already been taken!\\n\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member m \u003d MemberList.findMemberByName(memberName);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        e.setEventParticipants(m);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d \"Noted. I have added this participant to this event:\\n\";"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d output.concat(m.getMemberName() + \"\\n\");"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d output.concat(\"Now you have \" + e.eventParticipants.size() + \" member\""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + ((e.eventParticipants.size() \u003d\u003d 1) ? \"\" : \"s\") + \" participated in \""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + e.eventName + \".\\n\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Displays participant list of event with the given event name."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param eventName The event name."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return returns user output."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String listAttendance(String eventName) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean isEventExists \u003d checkEventExistence(eventName);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (isEventExists) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            Event e \u003d findEventByName(eventName);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(e.printEventParticipant());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(\"Now you have \" + e.eventParticipants.size() + \" member\""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    + ((e.eventParticipants.size() \u003d\u003d 1) ? \"\" : \"s\") + \" attended \""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    + e.eventName + \".\\n\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d COMMAND_EVENT_NOT_EXIST;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Deletes Member with the given member name from participant list of event with the given event name."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param eventName The event name."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName The member name."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return returns user output."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String deleteAttendance(String eventName, String memberName) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (!checkEventExistence(eventName)) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d COMMAND_EVENT_NOT_EXIST;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Event event \u003d findEventByName(eventName);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (!MemberList.checkMemberExistence(event.getEventParticipants(), memberName)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"Member attendance for this event has not been taken!\\n\";"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        int index \u003d MemberList.findMemberIndex(event.getEventParticipants(), memberName);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"Got it! I\u0027ll remove this member from the event attendance:\\n\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(event.getEventParticipants().get(index).getMemberName() + \"\\n\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            event.getEventParticipants().remove(index);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(\"Now you have \" + event.eventParticipants.size() + \" member\""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    + ((event.eventParticipants.size() \u003d\u003d 1) ? \"\" : \"s\") + \" attended \""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    + event.eventName + \".\\n\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d COMMAND_EVENT_NOT_EXIST;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 118,
      "Varsha3006": 292
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/CommandFinanceAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeFinanceAddDescriptionLostException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNotNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " * Represents add finance log entry command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandFinanceAdd extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userinput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private Logger logger \u003d Logger.getGlobal();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() throws DukeFinanceAddDescriptionLostException, DukeNotNumberException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.info(\"Start adding finance log...\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String input \u003d userinput.getArg(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (input \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.warning(\"The input format is wrong.\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            throw new DukeFinanceAddDescriptionLostException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String[] contents \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        int length \u003d contents.length;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Syntax: finance addLog ITEM ITEM_VALUE\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String item \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0; i \u003c length - 1; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (i \u003d\u003d length - 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                item \u003d item + contents[i];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                item \u003d item + contents[i] + \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            for (int i \u003d 0; i \u003c contents[length - 1].length(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                if (!Character.isDigit(contents[length - 1].charAt(i)) \u0026\u0026 contents[length - 1].charAt(i) !\u003d \u0027.\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    \u0026\u0026 contents[length - 1].charAt(i) !\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    logger.warning(\"The number in the end is missing...\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    throw new DukeNotNumberException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            double budget \u003d Double.parseDouble(contents[length - 1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (budget \u003c\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                return \"Please input a valid number for budget amount.\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            FinanceLog fl \u003d new FinanceLog(item,budget);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output \u003d FinanceList.addLog(fl);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.info(\"End adding...\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.warning(\"The input format is wrong.\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeFinanceAddDescriptionLostException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"Syntax: finance addLog ITEM_NAME ITEM_VALUE\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"finance\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"addlog\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"add\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"a\"))) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userinput \u003d ui;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 66,
      "JohnNub": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/CommandFinanceChange.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNotNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " * Represents change information of a finance log entry."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandFinanceChange extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    UserInput userinput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() throws DukeNotNumberException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String input \u003d userinput.getArg(\"n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String[] contents \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            int length \u003d contents.length;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String item \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return \"Syntax: finance changeLog /i INDEX /n ITEM_NAME ITEM_VALUE\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            for (int i \u003d 0; i \u003c length - 1; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                if (i \u003d\u003d length - 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    item \u003d item + contents[i];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    item \u003d item + contents[i] + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            for (int i \u003d 0; i \u003c contents[length - 1].length(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                if (!Character.isDigit(contents[length - 1].charAt(i)) \u0026\u0026 contents[length - 1].charAt(i) !\u003d \u0027.\u0027) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    throw new DukeNotNumberException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            double budget \u003d Double.parseDouble(contents[length - 1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (budget \u003c\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                return \"Please input a valid number for budget amount.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            int index \u003d Integer.parseInt(userinput.getArg(\"i\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output \u003d FinanceList.changeFinanceLog(index, item, budget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            throw new DukeNotNumberException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"Syntax: finance changeLog /i INDEX /n ITEM_NAME ITEM_VALUE\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (ui.getCategory().equals(\"finance\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"changelog\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"c\"))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"i\") !\u003d null \u0026\u0026 ui.getArg(\"n\") !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                userinput \u003d ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                return ACCEPT;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 56,
      "JohnNub": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/CommandFinanceDel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNotNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " * Represents delete a finance log entry from FinanceList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandFinanceDel extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userinput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() throws DukeNotNumberException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String input \u003d userinput.getArg(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (!Character.isDigit(input.charAt(i))) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                throw new DukeNotNumberException();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        int index \u003d Integer.parseInt(input.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d FinanceList.dellog(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"Syntax: finance delLog INDEX\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (ui.getCategory().equals(\"finance\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"dellog\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"del\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"d\"))) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                Integer.parseInt(ui.getArg(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userinput \u003d ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 37,
      "Varsha3006": 2,
      "JohnNub": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/CommandFinanceSummary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " * Represents list the finance summary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandFinanceSummary extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userinput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d FinanceList.summary();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"Syntax: finance summary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"finance\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"summary\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"s\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"l\"))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userinput \u003d ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 29,
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/FinanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class FinanceList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static ArrayList\u003cFinanceLog\u003e  financeLogs \u003d new ArrayList\u003cFinanceLog\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static Logger logger \u003d Logger.getGlobal();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Add one log into the finance list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param fl the new finance log user wants to add"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the output when it successfully add one log"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String addLog(FinanceLog fl) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        financeLogs.add(fl);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d \"Got it! I\u0027ve added this to the list.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output1 \u003d fl.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (fl.getSize() \u003e 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output2 \u003d \"There are \" + fl.getSize() + \" log entries in the list now.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output2 \u003d \"There is \" + fl.getSize() + \" log entry in the list now.\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        output \u003d output + output1 + output2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Delete one particular log from the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of the log which user wants to delete"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the output when successfully delete a log"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String dellog(int index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.info(\"Start deleting...\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            FinanceLog.sum -\u003d financeLogs.get(index - 1).getLogVal();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            financeLogs.remove(index - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            FinanceLog.finSize--;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (FinanceLog.finSize \u003e 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output2 \u003d \"There are \" + FinanceLog.finSize + \" log entries in the list now.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output2 \u003d \"There is \" + FinanceLog.finSize + \" log entry in the list now.\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output1 \u003d \"Got it! I\u0027ve removed this from list.\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output \u003d output1 + output2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.info(\"End deleting...\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.warning(\"The index is out of bound.\\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Your index input does not exist in the list\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Show the all the logs in the list and shows the total budget amount."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the finance list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String summary() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.setLevel(Level.OFF);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.info(\"Start listing summary...\\n\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (FinanceLog.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.warning(\"The list is empty.\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Sorry, your finance list is empty.\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d \"Here is the list:\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0;i \u003c FinanceLog.getSize();i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d output.concat(\"\\t\" + (i + 1) + \".\" + financeLogs.get(i).getLog() + \" $\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    + financeLogs.get(i).getLogVal() + \"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        output \u003d output.concat(\"Total budget: $\" + String.format(\"%.2f\",FinanceLog.getSum()) + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.info(\"End processing...\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Change the financeLog\u0027s finLog and finLogVal of index provided by the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of financeLog"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param newLog new finLog for the financeLog"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param newVal new finLogVal for the financeLog"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the information of change financeLog"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String changeFinanceLog(int index, String newLog, double newVal) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output \u003d \"Got it! I will change:\\n\" + index + \".\" + financeLogs.get(index - 1).getLog()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    + \" $\" + financeLogs.get(index - 1).getLogVal() + \"\\n\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            FinanceLog fl \u003d financeLogs.get(index - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            fl.setFinLog(newLog);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            fl.setFinLogVal(newVal);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d output + \"Now the new finance log entry is:\\n\" + index + \".\" + financeLogs.get(index - 1).getLog()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    + \" $\" + financeLogs.get(index - 1).getLogVal() + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Your input index does not exist in the list.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 100
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/FinanceLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class FinanceLog {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private String finLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private double finLogVal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static int finSize \u003d 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static double sum \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Create a new finance log."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param log the content of a finance log"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param val the value of its budget"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public FinanceLog(String log, double val) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finLog \u003d log;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finLogVal \u003d val;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finSize++;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        sum \u003d sum + val;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Gets the log\u0027s content."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return log\u0027s content"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String getLog() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return finLog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Get the log\u0027s budget amount."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return log\u0027s budget amount"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public double getLogVal() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return finLogVal;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Gets the size of finance log list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the size of finance log list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return finSize;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Gets the sum of total budget."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the sum of total budget"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static double getSum() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Change the finLog of this FinanceLog."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param input the new finLog for this FinanceLog"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public void setFinLog(String input) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finLog \u003d input;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Change the finLogVal of this FinanceLog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param input the new finLogVal for this FinanceLog"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public void setFinLogVal(double input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        sum \u003d sum - finLogVal + input;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finLogVal \u003d input;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Form a formatted string for a finance log."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the string of a formatted finance log"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"\\t\" + finSize + \".\" + finLog + \" $\" + finLogVal + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 77
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandAddMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static seedu.duke.hr.MemberList.isNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static seedu.duke.hr.MemberList.findMemberByName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static seedu.duke.hr.MemberList.standardizeMemberName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents add member command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandAddMember extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"addMember\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || (input.getCommand().equalsIgnoreCase(\"add\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"a\")))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (input.getNumArgs() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if ((input.getArg(\"n\") \u003d\u003d null) || (input.getArg(\"p\") \u003d\u003d null) || (input.getArg(\"e\") \u003d\u003d null)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        || (input.getArg(\"r\") \u003d\u003d null)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"n\").equals(\"\")) || (input.getArg(\"p\").equals(\"\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        || (input.getArg(\"e\").equals(\"\")) || (input.getArg(\"r\").equals(\"\"))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return ACCEPT;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (!isNumber(savedInput.getArg(\"p\"))) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! The format of the phone number given is incorrect.\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(\"The phone number should be a whole number not more than 18 digits.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        long phone \u003d Long.parseLong(savedInput.getArg(\"p\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (phone \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! The phone number should be a positive number.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String standardName \u003d standardizeMemberName(savedInput.getArg(\"n\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member test \u003d findMemberByName(standardName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String [] email \u003d savedInput.getArg(\"e\").split(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (email.length \u003e 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Your email address must be a whole string.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (test \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            Member m \u003d new Member(standardName, phone, savedInput.getArg(\"e\"), savedInput.getArg(\"r\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d MemberList.addToList(m);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! This member already exists. You may want to modify the member\u0027s information instead.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: hr add /n NAME /p PHONE_NUMBER (INTEGER) /e EMAIL /r ROLE\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 63,
      "WangZixin67": 4,
      "JohnNub": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandChangeMemberInfo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static seedu.duke.hr.MemberList.changeMemberInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents change member information command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandChangeMemberInfo extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"changeInfo\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"c\"))) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (input.getNumArgs() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"n\") \u003d\u003d null) || (input.getArg(\"n\").equals(\"\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        || ((input.getArg(\"p\") \u003d\u003d null) \u0026\u0026 (input.getArg(\"e\") \u003d\u003d null)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        \u0026\u0026 (input.getArg(\"r\") \u003d\u003d null))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"p\") !\u003d null) \u0026\u0026 (input.getArg(\"p\").equals(\"\"))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"e\") !\u003d null) \u0026\u0026 (input.getArg(\"e\").equals(\"\"))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"r\") !\u003d null) \u0026\u0026 (input.getArg(\"r\").equals(\"\"))) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                return ACCEPT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member m \u003d MemberList.findMemberByName(savedInput.getArg(\"n\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (m \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return \"OOPS!!! The member does not exist. You can add this member into the list instead. \\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d changeMemberInfo(m, savedInput.getArg(\"p\"), savedInput.getArg(\"e\"), savedInput.getArg(\"r\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: hr changeInfo /n NAME (/p ITEM) (/e ITEM) (/r ITEM)\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"One or more information in the brackets need to be present.\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandDelMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static seedu.duke.hr.MemberList.isNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents delete member command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandDelMember extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"delMember\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"delete\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"d\"))) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (input.getNumArgs() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"\") !\u003d null) \u0026\u0026 isNumber(input.getArg(\"\"))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ACCEPT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        index \u003d Integer.parseInt(savedInput.getArg(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d MemberList.deleteFromList(index - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: hr delete MEMBER_INDEX (INTEGER)\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandListConnection.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandListConnection extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d MemberList.searchConnection();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: hr list connections\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            || input.getCommand().equalsIgnoreCase(\"l\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                \u0026\u0026 (input.getArg(\"\").equalsIgnoreCase(\"connections\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                || input.getArg(\"\").equalsIgnoreCase(\"c\"))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userInput \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 1,
      "WangZixin67": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandListProfAdmin.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandListProfAdmin extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d MemberList.searchProfAdmin();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"Syntax: hr list prof\u0026admin\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            || input.getCommand().equalsIgnoreCase(\"l\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            \u0026\u0026 (input.getArg(\"\").equals(\"prof\u0026admin\") || input.getArg(\"\").equalsIgnoreCase(\"pa\"))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userInput \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandSearchMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandSearchMember extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Determine which part of member information to search for the target content."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the search result"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        boolean name \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        boolean email \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        boolean phone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        boolean role \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        boolean any \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String anyS \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String nameS \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String emailS \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String phoneS \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String roleS \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (userInput.getArg(\"\") !\u003d null \u0026\u0026 !userInput.getArg(\"\").equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            any \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            anyS \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (userInput.getArg(\"n\") !\u003d null \u0026\u0026 !userInput.getArg(\"n\").equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            name \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            nameS \u003d userInput.getArg(\"n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (userInput.getArg(\"e\") !\u003d null \u0026\u0026 !userInput.getArg(\"e\").equals(\"\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            email \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            emailS \u003d userInput.getArg(\"e\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (userInput.getArg(\"p\") !\u003d null \u0026\u0026 !userInput.getArg(\"p\").equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            phone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            phoneS \u003d userInput.getArg(\"p\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (userInput.getArg(\"r\") !\u003d null \u0026\u0026 !userInput.getArg(\"r\").equals(\"\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            role \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            roleS \u003d userInput.getArg(\"r\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d MemberList.search(any, name, phone, email, role, anyS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                nameS, phoneS, emailS, roleS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Provide the help information when user has trouble typing the correct command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the syntax for search command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"Syntax: hr search ITEM /n ITEM /p ITEM /e ITEM /r ITEM\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Determine whether the user is calling this command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param input The UserInput to Validate"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return it is the command the user is calling or not"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"search\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            || input.getCommand().equalsIgnoreCase(\"s\"))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userInput \u003d input;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 72,
      "Varsha3006": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandViewMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents view member command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandViewMember extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 input.getArg(\"\") \u003d\u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"listMember\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"l\"))) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d MemberList.listMembers();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"Syntax: hr list\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 34,
      "WangZixin67": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/Member.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class Member {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static int numOfMembers \u003d 0;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected String memberName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected long memberPhone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected String memberEmail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected String memberRole;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected String attendanceRate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public Member(String name, long phone, String email, String role) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberName \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberPhone \u003d phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberEmail \u003d email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberRole \u003d role;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        numOfMembers +\u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public long getMemberPhone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.memberPhone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String getMemberEmail() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.memberEmail;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String getMemberRole() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.memberRole;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String getMemberName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.memberName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void setMemberRole(String newRole) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberRole \u003d newRole;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void setMemberPhone(long newPhone) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberPhone \u003d newPhone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void setMemberEmail(String newEmail) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberEmail \u003d newEmail;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void setAttendanceRate(String attendanceRate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.attendanceRate \u003d attendanceRate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String getAttendanceRate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.attendanceRate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Prints task data in the desired form to be printed for user interaction."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.updateAttendanceRate(memberName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"name: \" + this.memberName + \" |phone: \" + this.getMemberPhone() + \" |email: \" + this.getMemberEmail()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \" |role: \" + this.getMemberRole() + \" |attendance rate: \" + this.getAttendanceRate() + \"%\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 68,
      "JohnNub": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/MemberList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class MemberList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static ArrayList\u003cMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Adds member to the arraylist."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param m member to be added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String addToList(Member m) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        members.add(m);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this member:\\n\" + m.toString() + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have \" + Member.numOfMembers + \" member\" + ((Member.numOfMembers \u003d\u003d 1) ? \"\" : \"s\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \" in the list.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Returns the list of members."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return output error message or member list"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String listMembers() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (Member.numOfMembers \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! The member list is empty!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"Here is the list of members in your CCA:\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            for (int i \u003d 0; i \u003c Member.numOfMembers; i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                output \u003d output.concat(index + \".\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                output \u003d output.concat(members.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Deletes the member from the arraylist."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param index index of member to be deleted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return output error message or info of deleted member."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String deleteFromList(int index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"Noted. I\u0027ll remove this member:\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(members.get(index).toString() + \"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            deleteFromEvents(members.get(index).getMemberName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            members.remove(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            Member.numOfMembers--;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(\"Now you have \" + Member.numOfMembers + \" member\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(((Member.numOfMembers \u003e 1) ? \"s\" : \"\") + \" in the list.\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! The member does not exist.\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Deletes member from all events."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName memberName to be deleted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static void deleteFromEvents(String memberName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c EventList.events.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            String eventName \u003d EventList.events.get(i).getEventName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            EventList.deleteAttendance(eventName, memberName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Checks whether input can be parsed into an integer."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param s input to be checked"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return true if input can be parsed as an integer, false if input cannot be parsed as an integer."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static boolean isNumber(String s) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            long index \u003d Long.parseLong(s);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Standardizes the member name by capitalizing the first character of each word."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName name of the member."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return name standardized member name."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String standardizeMemberName(String memberName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        char[] charArray \u003d memberName.toCharArray();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean isSpace \u003d true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c charArray.length; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (Character.isLetter(charArray[i])) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if (isSpace) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    charArray[i] \u003d Character.toUpperCase(charArray[i]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    isSpace \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    charArray[i] \u003d Character.toLowerCase(charArray[i]);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                isSpace \u003d true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String name \u003d String.valueOf(charArray);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * find the member in the arraylist."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName name of the member to be found."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return if member exists, returns the member, else returns null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static Member findMemberByName(String memberName) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c Member.numOfMembers; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (members.get(i).getMemberName().equalsIgnoreCase(memberName)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                return members.get(i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Finds the index of member with given member name in the arraylist."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param list array list of members."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName name of the member to be found."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return if member exists, returns its index, else returns -1."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static int findMemberIndex(ArrayList\u003cMember\u003e list, String memberName) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (list.get(i).getMemberName().equalsIgnoreCase(memberName)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Checks if member with given member name exists in the arraylist."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param list array list of members."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName name of the member to be found."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return if member exists, returns true, else returns false."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static boolean checkMemberExistence(ArrayList\u003cMember\u003e list, String memberName) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean hasExist \u003d false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (list.get(i).getMemberName().equalsIgnoreCase(memberName)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                hasExist \u003d true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return hasExist;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Changes the contact information and role of the member in the arraylist."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param m member whose information is to be modified."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param newPhone new phone number to replace the original phone number."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param newEmail new email to replace the original email."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param newRole new role to replace the original role."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return output message for the user."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String changeMemberInfo(Member m, String newPhone, String newEmail, String newRole) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (newPhone !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                Long phone \u003d Long.parseLong(newPhone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if (phone \u003c 0) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    output \u003d \"OOPS!!! The phone number should be a positive number.\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return output;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                m.setMemberPhone(phone);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! The format of the phone number given is incorrect.\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    + \"The phone number should be a whole number not more than 18 digits.\\n\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (newEmail !\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            m.setMemberEmail(newEmail);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (newRole !\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            m.setMemberRole(newRole);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d \"I have changed the information of this member:\\n\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        output \u003d output.concat(m.toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Search for the members that include the any information the user want."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param any whether there is any content the user want to search in any part of member information"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param name whether there is any content the user want to search in name part of member information"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param phone whether there is any content the user want to search in phone part of member information"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param email whether there is any content the user want to search in email part of member information"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param role whether there is any content the user want to search in role part of member information"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param anyS the string the user want to search for in any part of member information"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param nameS the string the user want to search for in name part of member information"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param phoneS the string the user want to search for in phone part of member information"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param emailS the string the user want to search for in email part of member information"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param roleS the string the user want to search for in role part of member information"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return all the members\u0027 information that match the content the user wants to search for"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String search(boolean any, boolean name, boolean phone, boolean email,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                                boolean role, String anyS, String nameS, String phoneS,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                                String emailS, String roleS) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (!any \u0026\u0026 !name \u0026\u0026 !phone \u0026\u0026 !email \u0026\u0026 !role) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Please enter the content you want to search for.\\n\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (phone \u0026\u0026 Long.parseLong(phoneS) \u003c 0) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Please enter a valid phone number.\\n\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0; i \u003c Member.numOfMembers; i++) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (any \u003d\u003d true \u0026\u0026 searchAny(i, anyS)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (name \u0026\u0026 searchName(i, nameS)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (phone \u0026\u0026 searchPhone(i, phoneS)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (email \u0026\u0026 searchEmail(i, emailS)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (role \u0026\u0026 searchRole(i, roleS)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d \"Sorry, there is no suitable result in the member list.\\n\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d \"I have found \" + count + \" result for you:\\n\" + output;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Determine if any part of the member information with the particular index includes the target content."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of member"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param target the information the user wants to search for"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return whether the member\u0027s information matches the target content"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static boolean searchAny(int index, String target) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (searchName(index, target) || searchEmail(index, target)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            || searchPhone(index, target) || searchRole(index, target)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Determine if any part of the member\u0027s name with the particular index includes the target content."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of member"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param target the information the user wants to search for"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return whether the member\u0027s name matches the target content"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static boolean searchName(int index, String target) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (members.get(index).getMemberName().toLowerCase().contains(target.toLowerCase())) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Determine if any part of the member\u0027s email with the particular index includes the target content."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of member"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param target the information the user wants to search for"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return whether the member\u0027s email matches the target content"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static boolean searchEmail(int index, String target) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (members.get(index).getMemberEmail().toLowerCase().contains(target.toLowerCase())) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Determine if any part of the member\u0027s phone with the particular index includes the target content."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of member"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param target the information the user wants to search for"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return whether the member\u0027s phone matches the target content"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static boolean searchPhone(int index, String target) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String phone \u003d Long.toString(members.get(index).getMemberPhone());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (phone.contains(target)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Determine if any part of the member\u0027s role with the particular index includes the target content."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of member"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param target the information the user wants to search for"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return whether the member\u0027s role matches the target content"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static boolean searchRole(int index, String target) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (members.get(index).getMemberRole().toLowerCase().contains(target.toLowerCase())) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Output all the members with role of professor or admin."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the result of searching"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String searchProfAdmin() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0; i \u003c Member.numOfMembers; i++) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (searchRole(i, \"prof\") || searchRole(i, \"professor\")) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (searchRole(i, \"admin\") || searchRole(i,\"administrators\")) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d \"Sorry, there is no suitable result in the member list.\\n\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d \"I have found \" + count + \" result for you:\\n\" + output;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Output all the members with role of alumni or speakers."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the result of searching"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String searchConnection() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0; i \u003c Member.numOfMembers; i++) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (searchRole(i, \"alumni\") || searchRole(i, \"speaker\")) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output \u003d output + (i + 1) + \".\" + members.get(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d \"Sorry, there is no suitable result in the member list.\\n\";"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d \"I have found \" + count + \" result for you:\\n\" + output;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Update attendance rate of member."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param memberName member name."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static void updateAttendanceRate(String memberName) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        int attended \u003d 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        for (int i \u003d 0; i \u003c EventList.events.size(); i++) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (checkMemberExistence(EventList.events.get(i).getEventParticipants(), memberName)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                attended++;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String attendanceRate \u003d calculateAttendanceRate(attended, EventList.events.size());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member m \u003d findMemberByName(memberName);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        m.setAttendanceRate(attendanceRate);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Calculate attendance rate of member."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param attended number of events attended."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param shouldAttend total number of events that exists."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return attendance rate which is formatted into 2 decimal places."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String calculateAttendanceRate(double attended, double shouldAttend) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (shouldAttend \u003d\u003d 0) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        double attendanceRate \u003d (attended / shouldAttend) * 100;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        DecimalFormat df \u003d new DecimalFormat(\"###.##\");"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String formattedAttendanceRate \u003d df.format(attendanceRate);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return formattedAttendanceRate;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 228,
      "WangZixin67": 175
    }
  },
  {
    "path": "src/main/java/seedu/duke/others/CommandBye.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.others;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class CommandBye extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Ui.setShutdown(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"See you next time!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int validate(UserInput userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getCategory().equals(\"\") \u0026\u0026 userInput.getCommand().equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/others/CommandHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.others;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class CommandHelp extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Hello! Here is a list of commands you can try:\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t1. Add members:  hr add /n NAME /p PHONE_NUMBER /e EMAIL /r ROLE\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t2. Delete member: hr delMember MEMBER_INDEX\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t3. View hr list: hr listMember\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"\\t4. Change member info: hr changeInfo /n NAME (/p ITEM) (/e ITEM) (/r ITEM)\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"\\t5. Search for members: hr search ITEM /n ITEM /p ITEM /e ITEM /r ITEM\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t6. view contacts of prof/admin: hr list prof\u0026admin\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t7. view contacts of connections: hr list connections\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t8. Add events: event addEvent /n EVENT_NAME /d EVENT_DATE \u003cYYYY-MM-dd\u003e /t EVENT_TIME \u003cHH-mm\u003e\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t9. Delete event: event delEvent EVENT_INDEX\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t10. View event list: event listEvent\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t11. View countdown to events: event countdown\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t12. Search for an event by NAME or DATE\u003cYYYY-MM-DD\u003e: event search /s KEYWORD\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t13. Mark an event as done: event done EVENT_INDEX\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t14. Add a participant to an event: event addAttendance /n EVENT_NAME /m MEMBER_NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t15. Delete a participant from an event: event delAttendance /n EVENT_NAME /m MEMBER_NAME\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t16. List participants in an event: event listAttendance /n EVENT_NAME\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t17. Add financial log: finance addLog ITEM_NAME ITEM_VALUE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t18. Delete financial log:  finance delLog ITEM_INDEX\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t19. Change finance log entry information: finance changeLog /i INDEX /n ITEM_NAME ITEM_VALUE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t20. View financial summary: finance summary\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t21. Import data: import FILENAME /c finance /name HEADER_NAME /value HEADER_NAME\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t22. Exit the program: bye\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \" To access our User Guide: https://ay2021s1-cs2113t-f14-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (input.getCategory().equals(\"\") \u0026\u0026 input.getCommand().equalsIgnoreCase(\"help\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 1,
      "Varsha3006": 25,
      "WangZixin67": 1,
      "JohnNub": 22
    }
  },
  {
    "path": "src/main/java/seedu/duke/others/CommandImportCsv.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.others;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeFileFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeFileHeaderException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.FileManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.finance.FinanceList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.finance.FinanceLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.hr.Member;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.hr.MemberList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class CommandImportCsv extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String filename \u003d userInput.getArg(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String category \u003d userInput.getArg(\"c\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rowsBefore \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rowsAfter \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String failed \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            HashMap\u003cString, ArrayList\u003cString\u003e\u003e map \u003d FileManager.readFile(filename);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (category.equalsIgnoreCase(\"finance\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                int rows \u003d map.get(userInput.getArg(\"name\")).size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                rowsBefore \u003d FinanceList.financeLogs.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        FinanceLog tmp \u003d new FinanceLog(map.get(userInput.getArg(\"name\")).get(i),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                                Double.parseDouble(map.get(userInput.getArg(\"value\")).get(i)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        FinanceList.financeLogs.add(tmp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        failed +\u003d (failed.equals(\"\")) ? \"\" + i : \",\" + i;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                rowsAfter \u003d FinanceList.financeLogs.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (category.equalsIgnoreCase(\"hr\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                int rows \u003d map.get(userInput.getArg(\"name\")).size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                rowsBefore \u003d MemberList.members.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        Member tmp \u003d new Member(map.get(userInput.getArg(\"name\")).get(i),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                                Long.parseLong(map.get(userInput.getArg(\"phone\")).get(i)),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                                map.get(userInput.getArg(\"email\")).get(i),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                                map.get(userInput.getArg(\"role\")).get(i));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        MemberList.members.add(tmp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        failed +\u003d (failed.equals(\"\")) ? \"\" + i : \",\" + i;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                rowsAfter \u003d MemberList.members.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (category.equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                int rows \u003d map.get(userInput.getArg(\"name\")).size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                rowsBefore \u003d EventList.events.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        Event tmp \u003d new Event(map.get(userInput.getArg(\"name\")).get(i),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                                map.get(userInput.getArg(\"date\")).get(i),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                                map.get(userInput.getArg(\"time\")).get(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        EventList.events.add(tmp);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        failed +\u003d (failed.equals(\"\")) ? \"\" + i : \",\" + i;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                rowsAfter \u003d EventList.events.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return \"Please specify a valid category.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            assert (rowsAfter \u003c rowsBefore) : \"Less rows than before after importing!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"Unable to read file! Please check your path/filename!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeFileHeaderException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // This shouldn\u0027t happen because we do not enforce header check when invoking the function"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            assert false : \"Header checking shouldn\u0027t be enabled!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"Header mismatch!\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeFileFormatException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"Unable to read CSV file! Please check that the specified file is properly formatted!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"Unable to find column header name in your file! Please check the spelling and capitalization.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        final String s \u003d \"Successfully imported \" + (rowsAfter - rowsBefore) + \" entries.\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                + ((failed.equals(\"\")) ? \"\" : \"\\nFailed to import index: \" + failed);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"Syntax: import FILENAME /c finance /name HEADER_NAME /value HEADER_NAME \\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "               + \"OR: import FILENAME /c hr /name HEADER_NAME /phone HEADER_NAME /email HEADER_NAME /role HEADER_NAME\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "               + \"OR: import FILENAME /c event /name HEADER_NAME /date HEADER_NAME /time HEADER_NAME\\n\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "               + \"Opens the given CSV file and imports the data in the columns specified by the HEADER_NAME. \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "               + \"The mapping specifies that the HEADER_NAME will be assigned to a particular argument. \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "               + \"HEADER_NAME is case sensitive\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        userInput \u003d ui;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"import\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"i\"))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"\") \u003d\u003d null || ui.getArg(\"\").equals(\"\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"c\") \u003d\u003d null || ui.getArg(\"c\").equals(\"\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Shorthand category support"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"c\").equalsIgnoreCase(\"h\")) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"c\", \"hr\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (ui.getArg(\"c\").equalsIgnoreCase(\"f\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"c\", \"finance\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (ui.getArg(\"c\").equalsIgnoreCase(\"e\")) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"c\", \"event\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (!ui.getArg(\"c\").equalsIgnoreCase(\"hr\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        \u0026\u0026 ui.getArg(\"c\").equalsIgnoreCase(\"finance\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        \u0026\u0026 ui.getArg(\"c\").equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Shorthand argument support"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"n\") !\u003d null \u0026\u0026 !ui.getArg(\"n\").equals(\"\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"name\", ui.getArg(\"n\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"v\") !\u003d null \u0026\u0026 !ui.getArg(\"v\").equals(\"\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"value\", ui.getArg(\"v\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"p\") !\u003d null \u0026\u0026 !ui.getArg(\"p\").equals(\"\")) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"phone\", ui.getArg(\"p\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"e\") !\u003d null \u0026\u0026 !ui.getArg(\"e\").equals(\"\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"email\", ui.getArg(\"e\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"r\") !\u003d null \u0026\u0026 !ui.getArg(\"r\").equals(\"\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"role\", ui.getArg(\"r\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"d\") !\u003d null \u0026\u0026 !ui.getArg(\"d\").equals(\"\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"date\", ui.getArg(\"d\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"t\") !\u003d null \u0026\u0026 !ui.getArg(\"t\").equals(\"\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.getArgs().put(\"time\", ui.getArg(\"t\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // check for the correct arguments depending on the category"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getArg(\"c\").equalsIgnoreCase(\"hr\")) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"name\") \u003d\u003d null || ui.getArg(\"name\").equals(\"\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"phone\") \u003d\u003d null || ui.getArg(\"phone\").equals(\"\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"email\") \u003d\u003d null || ui.getArg(\"email\").equals(\"\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"role\") \u003d\u003d null || ui.getArg(\"role\").equals(\"\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (ui.getArg(\"c\").equalsIgnoreCase(\"finance\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"name\") \u003d\u003d null || ui.getArg(\"name\").equals(\"\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"value\") \u003d\u003d null || ui.getArg(\"value\").equals(\"\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (ui.getArg(\"c\").equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"name\") \u003d\u003d null || ui.getArg(\"name\").equals(\"\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"date\") \u003d\u003d null || ui.getArg(\"date\").equals(\"\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (ui.getArg(\"time\") \u003d\u003d null || ui.getArg(\"time\").equals(\"\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 187
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 1,
      "JohnNub": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/FileManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.FileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.FileVisitResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.SimpleFileVisitor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.attribute.BasicFileAttributes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class FileManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void fileManagerBasicTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Set up test folder"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String path \u003d (int) (Math.random() * 1000000) + \"/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileManager fm \u003d new FileManager(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 1, basic write"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            FileManager.saveFile(path + \"Test1.txt\", \"Sample 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 01: Saving to file failed!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 2, Read fail"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            assertEquals(3, fm.readAll());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 02: Reading non-existent data failed!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 3, Empty write"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fm.saveAll();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 03: Empty write failed!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 4, Empty read"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            assertEquals(0, fm.readAll());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 04: Reading file with no data failed!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Clean up. If this raises an exception, it means we forgot to close either the writer or reader"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        deleteDir(path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    void deleteDir(String file) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Path directory \u003d Paths.get(file);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Files.walkFileTree(directory, new SimpleFileVisitor\u003cPath\u003e() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    Files.delete(file);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return FileVisitResult.CONTINUE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    Files.delete(dir);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return FileVisitResult.CONTINUE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 82
    }
  },
  {
    "path": "src/test/java/seedu/duke/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void testParser() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Base Case"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg1 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg1.put(\"\", \"2\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected1 \u003d new UserInput(\"foo\", arg1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected1.setCategory(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test1 \u003d \"foo 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test1).getArgs(), expected1.getArgs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test1).getCategory(), expected1.getCategory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test1).getCommand(), expected1.getCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Space \u0026 Repetition test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg2 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg2.put(\"\", \"2 2 2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected2 \u003d new UserInput(\"fOo\", arg2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected2.setCategory(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test2 \u003d \"fOo 2 2 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test2).getArgs(), expected2.getArgs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test2).getCategory(), expected2.getCategory());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test2).getCommand(), expected2.getCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Category and extra argument test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg3 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg3.put(\"\", \"something\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg3.put(\"a1\", \"2 3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected3 \u003d new UserInput(\"do\", arg3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected3.setCategory(\"hr\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test3 \u003d \"hr do something /a1 2 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test3).getArgs(), expected3.getArgs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test3).getCategory(), expected3.getCategory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test3).getCommand(), expected3.getCommand());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Capitalization \u0026 trimming test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg4 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"\", \"mYeVenT     9000\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"arg\", \"some  arg\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"a2\", \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"a3\", \"another\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected4 \u003d new UserInput(\"AdD\", arg4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected4.setCategory(\"event\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test4 \u003d \"  eVeNt AdD     mYeVenT     9000  /  arg  some  arg /a2 /a3 another\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test4).getArgs(), expected4.getArgs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test4).getCategory(), expected4.getCategory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test4).getCommand(), expected4.getCommand());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Shorthand category, Accented Character and Argument Precedence test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg5 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg5.put(\"arg\", \"precedence test\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected5 \u003d new UserInput(\"testCase\", arg5);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected5.setCategory(\"finance\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test5 \u003d \"  f testCase\\350  \\350 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                + \"/  arg  some  arg / arg /arg                                     precedence test\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test5).getArgs(), expected5.getArgs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test5).getCategory(), expected5.getCategory());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test5).getCommand(), expected5.getCommand());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 73
    }
  },
  {
    "path": "src/test/java/seedu/duke/event/EventListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.Member;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.MemberList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "class EventListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    Event event \u003d new Event(\"PR meeting\", \"2030-06-30\", \"08-00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    Event event2 \u003d new Event(\"Autodesk course\",\"2030-10-20\",\"08-00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    Event event1 \u003d new Event(\"PR meeting\", \"2010-06-30\", \"08-00\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    Member member1 \u003d new Member(\"James Gosling\", 11111111,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            \"111111@gmail.com\", \"member\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    void testPrintEvent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(\"[E][Up-coming]\" + \"\\nEvent Name: \" + \"PR meeting\" + \"\\nDate: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Jun 30 2030\" + \"\\nTime: \" + \"08-00\", event.printEvent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    void test_EventList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected \u003d \"Oops! Seems like you have entered a past date. Please enter a valid date.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected,EventList.addEvent(event1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected1 \u003d \"Got it. I\u0027ve added this Event:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"[E][Up-coming]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Event Name: PR meeting\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nDate: Jun 30 2030\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nTime: 08-00\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nNow you have 1 event in the list.\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected1, EventList.addEvent(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(\"PR meeting\", event.getEventName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(LocalDate.parse(\"2030-06-30\"),event.getEventDate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(\"08-00\", event.getEventTime());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(event,EventList.getEvent(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected2 \u003d \"Here are the current events in your list:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"1.[E][Up-coming]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Event Name: PR meeting\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nDate: Jun 30 2030\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nTime: 08-00\" + \"\\n\" + \"*\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected2, EventList.printEventList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected3 \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"1.[E][Done]\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Event Name: PR meeting\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Date: Jun 30 2030\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Time: 08-00\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected3, EventList.isCompleted(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected4 \u003d \"Got it! I\u0027ll remove this Event:\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"[E][Done]\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Event Name: PR meeting\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nDate: Jun 30 2030\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nTime: 08-00\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Now you have 0 event in the list.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected4, EventList.deleteEvent(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected5 \u003d \"Oops! The event list is empty!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected5,EventList.deleteEvent(3));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        EventList.addEvent(event2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected6 \u003d \"1.[E][Up-coming]\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Event Name: Autodesk course\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Date: Oct 20 2030\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Time: 08-00\" + \"\\n\" + \"*\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected6,EventList.searchEvents(\"autodesk\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected6,EventList.searchEvents(\"2030-10-20\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(\"No matching events found!\",EventList.searchEvents(\"arduino\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        EventList.deleteEvent(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected7 \u003d \"Oops! The event list is empty!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected7,EventList.clearEvents());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected8 \u003d \"Oops! The event list is empty!\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected8,EventList.printEventList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(\"Oops! The event list is empty!\",EventList.countdownView());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        EventList.addEvent(event);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected9 \u003d \"OOPS!!! The event does not exist.\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected9,EventList.isCompleted(3));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    void test_EventAttendance_executesNormally() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        EventList.addEvent(event2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.addToList(member1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected1 \u003d \"Noted. I have added this participant to this event:\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"James Gosling\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 1 member participated in Autodesk course.\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, EventList.addAttendance(event2.getEventName(), member1.getMemberName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected2 \u003d \"The following member has participated in this event:\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"1. James Gosling\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 1 member attended Autodesk course.\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, EventList.listAttendance(event2.getEventName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected3 \u003d \"Got it! I\u0027ll remove this member from the event attendance:\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"James Gosling\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 0 members attended Autodesk course.\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected3, EventList.deleteAttendance(event2.getEventName(), member1.getMemberName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        EventList.deleteEvent(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    void test_EventAttendance_executeUnsuccessfully() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        EventList.addEvent(event2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.addToList(member1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //member does not exist"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected1 \u003d \"Member does not exist!\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, EventList.addAttendance(event2.getEventName(),\"Draco Malfoy\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //event does not exist"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected2 \u003d \"OOPS!!! The event does not exist.\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, EventList.addAttendance(\"Arduino course\", member1.getMemberName()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        EventList.addAttendance(event2.getEventName(), member1.getMemberName());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //member attendance already taken"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected3 \u003d \"Member attendance had already been taken!\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected3, EventList.addAttendance(event2.getEventName(),member1.getMemberName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //event does not exist"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected4 \u003d \"OOPS!!! The event does not exist.\\n\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected4, EventList.listAttendance(\"Arduino course\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //event does not exist"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected5 \u003d \"OOPS!!! The event does not exist.\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected5, EventList.deleteAttendance(\"Arduino course\", member1.getMemberName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        EventList.deleteAttendance(event2.getEventName(), member1.getMemberName());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //member attendance does not exist"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected6 \u003d \"Member attendance for this event has not been taken!\\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected6, EventList.deleteAttendance(event2.getEventName(), \"Draco Malfoy\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        EventList.deleteEvent(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 57,
      "Varsha3006": 98
    }
  },
  {
    "path": "src/test/java/seedu/duke/finance/FinanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "class FinanceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    void testver1Finance() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected1 \u003d \"Got it! I\u0027ve added this to the list.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"\\t1.write $12.5\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"There is 1 log entry in the list now.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual1 \u003d FinanceList.addLog(new FinanceLog(\"write\", 12.5));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected2 \u003d \"Here is the list:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"\\t1.write $12.5\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"Total budget: $12.50\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual2 \u003d FinanceList.summary();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected3 \u003d \"Got it! I\u0027ve removed this from list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"There is 0 log entry in the list now.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual3 \u003d FinanceList.dellog(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected3, actual3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected4 \u003d \"Your index input does not exist in the list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual4 \u003d FinanceList.dellog(5);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String non \u003d FinanceList.dellog(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected4,actual4);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected5 \u003d \"Sorry, your finance list is empty.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual5 \u003d FinanceList.summary();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected5,actual5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    void testChange() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected1 \u003d \"Got it! I\u0027ve added this to the list.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"\\t1.write $12.5\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"There is 1 log entry in the list now.\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual1 \u003d FinanceList.addLog(new FinanceLog(\"write\", 12.5));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected2 \u003d \"Got it! I will change:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"1.write $12.5\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"Now the new finance log entry is:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"1.buy iphone12 $1299.0\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual2 \u003d FinanceList.changeFinanceLog(1,\"buy iphone12\",1299.0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected2,actual2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected3 \u003d \"Your input index does not exist in the list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual3 \u003d FinanceList.changeFinanceLog(2,\"have McD\",10);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String non \u003d FinanceList.dellog(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected3,actual3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 52
    }
  },
  {
    "path": "src/test/java/seedu/duke/hr/HrTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class HrTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    //Member member1 \u003d new Member(\"James Gosling\", 11111111,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    //        \"111111@gmail.com\", \"member\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    //Member member2 \u003d new Member(\"Harry Potter\", 1234567890, \"harry_potter@gmail.com\", \"president\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void addListDelChangeMember_executesNormally() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member.numOfMembers \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.members.clear();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test addToList: entry in title case"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected1 \u003d \"Got it. I\u0027ve added this member:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: James Gosling |phone: 11111111 |email: 111111@gmail.com |role: member |attendance rate: 0%\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 1 member in the list.\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual1 \u003d MemberList.addToList(new Member(\"James Gosling\", 11111111,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                \"111111@gmail.com\", \"member\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test listMember"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected2 \u003d \"Here is the list of members in your CCA:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"1.name: James Gosling |phone: 11111111 |email: 111111@gmail.com |role: member \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual2 \u003d MemberList.listMembers();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test deleteFromList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected3 \u003d \"Noted. I\u0027ll remove this member:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: James Gosling |phone: 11111111 |email: 111111@gmail.com |role: member |attendance rate: 0%\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 0 member in the list.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual3 \u003d MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected3, actual3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //add more members to test further: entry in lower case"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected4 \u003d \"Got it. I\u0027ve added this member:\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 1234567890 |email: harry_potter@gmail.com |role: president \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 1 member in the list.\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual4 \u003d MemberList.addToList(new Member(\"Harry Potter\", 1234567890,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                \"harry_potter@gmail.com\", \"president\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected4, actual4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test changeMemberInfo, only change phone number"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected5 \u003d \"I have changed the information of this member:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 88888888 |email: harry_potter@gmail.com |role: president \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member m \u003d MemberList.findMemberByName(\"harry potter\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual5 \u003d MemberList.changeMemberInfo(m, \"88888888\", null, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected5, actual5);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test changeMemberInfo, only change email"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected6 \u003d \"I have changed the information of this member:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 88888888 |email: magic@gmail.com |role: president \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual6 \u003d MemberList.changeMemberInfo(m, null, \"magic@gmail.com\", null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected6, actual6);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test changeMemberInfo, only change role"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected7 \u003d \"I have changed the information of this member:\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 88888888 |email: magic@gmail.com |role: member \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual7 \u003d MemberList.changeMemberInfo(m, null, null, \"member\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected7, actual7);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test changeMemberInfo, change phone number and role simultaneously"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected8 \u003d \"I have changed the information of this member:\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 1234567890 |email: magic@gmail.com |role: president \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual8 \u003d MemberList.changeMemberInfo(m, \"1234567890\", null, \"president\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected8, actual8);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test changeMemberInfo, change phone number and email simultaneously"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected9 \u003d \"I have changed the information of this member:\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 88888888 |email: harry_potter@gmail.com |role: president \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual9 \u003d MemberList.changeMemberInfo(m, \"88888888\", \"harry_potter@gmail.com\", null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected9, actual9);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test changeMemberInfo, change email and role simultaneously"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected10 \u003d \"I have changed the information of this member:\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 88888888 |email: snape@gmail.com |role: professor \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual10 \u003d MemberList.changeMemberInfo(m, null, \"snape@gmail.com\", \"professor\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected10, actual10);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //test changeMemberInfo, change phone number, email and role simultaneously"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected11 \u003d \"I have changed the information of this member:\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: Harry Potter |phone: 1234567890 |email: harry_potter@gmail.com |role: president \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"|attendance rate: 0%\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual11 \u003d MemberList.changeMemberInfo(m, \"1234567890\", \"harry_potter@gmail.com\", \"president\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected11, actual11);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String non \u003d MemberList.addToList(new Member(\"Suzuhara ruru\",24342434,\"2434@gmail.com\",\"member\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        non \u003d MemberList.addToList(new Member(\"Niji Sanji\",114514,\"hololiveshutdown@gmail.com\",\"president\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        non \u003d MemberList.addToList(new Member(\"Lize\",1141919810,\"lize@yagoo.com\",\"speaker\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        non \u003d MemberList.addToList(new Member(\"Tony Parker\",22711019,\"tp9@outlook.com\",\"Admin\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        non \u003d MemberList.addToList(new Member(\"Tim Duncan\",10152113,\"TD21@gmail.com\",\"Alumni\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected12 \u003d \"I have found 2 result for you:\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"2.name: Niji Sanji |phone: 114514 |email: hololiveshutdown@gmail.com \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"|role: president |attendance rate: 0%\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"3.name: Lize |phone: 1141919810 |email: lize@yagoo.com |role: speaker |attendance rate: 0%\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual12 \u003d MemberList.search(true,false,false,false,false,\"114\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                null,null,null,null);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected13 \u003d \"I have found 1 result for you:\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"4.name: Tony Parker |phone: 22711019 |email: tp9@outlook.com |role: Admin |attendance rate: 0%\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual13 \u003d MemberList.searchProfAdmin();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected14 \u003d \"I have found 2 result for you:\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"3.name: Lize |phone: 1141919810 |email: lize@yagoo.com |role: speaker |attendance rate: 0%\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"5.name: Tim Duncan |phone: 10152113 |email: TD21@gmail.com |role: Alumni |attendance rate: 0%\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual14 \u003d MemberList.searchConnection();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected12,actual12);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected13,actual13);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected14,actual14);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void changeMemberInfo_PhoneNumberWrongFormat() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.addToList(new Member(\"Harry Potter\", 1234567890, \"harry_potter@gmail.com\", \"president\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected1 \u003d \"OOPS!!! The format of the phone number given is incorrect.\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"The phone number should be a whole number not more than 18 digits.\\n\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member m \u003d MemberList.findMemberByName(\"harry potter\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual1 \u003d MemberList.changeMemberInfo(m, \"9999999999999999999\", null, null);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected2 \u003d \"OOPS!!! The format of the phone number given is incorrect.\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"The phone number should be a whole number not more than 18 digits.\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual2 \u003d MemberList.changeMemberInfo(m, \"string\", null, null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected3 \u003d \"OOPS!!! The phone number should be a positive number.\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual3 \u003d MemberList.changeMemberInfo(m, \"-111111\", null, null);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected3, actual3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void removeMember_MemberNotExists() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected \u003d \"OOPS!!! The member does not exist.\\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual \u003d MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void listMember_MemberListEmpty() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member.numOfMembers \u003d 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected \u003d \"OOPS!!! The member list is empty!\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual \u003d MemberList.listMembers();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void checkMemberExistence_executesNormally() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.addToList(new Member(\"Harry Potter\", 1234567890, \"harry_potter@gmail.com\", \"president\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean hasExist1 \u003d MemberList.checkMemberExistence(MemberList.members, \"Harry Potter\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual1 \u003d String.valueOf(hasExist1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected1 \u003d \"true\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean hasExist2 \u003d MemberList.checkMemberExistence(MemberList.members, \"Draco Malfoy\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual2 \u003d String.valueOf(hasExist2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected2 \u003d \"false\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void standardizeMemberName_executesNormally() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual1 \u003d MemberList.standardizeMemberName(\"HArrY POTTER\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected1 \u003d \"Harry Potter\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual2 \u003d MemberList.standardizeMemberName(\"draco malfoy\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected2 \u003d \"Draco Malfoy\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual3 \u003d MemberList.standardizeMemberName(\"Hermione Granger\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected3 \u003d \"Hermione Granger\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected3, actual3);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void isNumber_executesNormally() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //positive number"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean actual1 \u003d MemberList.isNumber(\"9999999999\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean expected1 \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //not a number"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean actual2 \u003d MemberList.isNumber(\"HArrY POTTER\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean expected2 \u003d false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //negative number"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean actual3 \u003d MemberList.isNumber(\"-10000000000000000\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean expected3 \u003d true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected3, actual3);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        //exceed length of long"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean actual4 \u003d MemberList.isNumber(\"9999999999999999999\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        boolean expected4 \u003d false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected4, actual4);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void findMemberIndex_executesNormally() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.addToList(new Member(\"Harry Potter\", 1234567890, \"harry_potter@gmail.com\", \"president\"));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        int actual1 \u003d MemberList.findMemberIndex(MemberList.members, \"Harry Potter\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        int expected1 \u003d 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        int actual2 \u003d MemberList.findMemberIndex(MemberList.members, \"Draco Malfoy\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        int expected2 \u003d -1;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 201,
      "WangZixin67": 27
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "hr add /n James Gosling /p 11111111 /e 111111@gmail.com /r member"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "hr list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "hr delete 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 3,
      "JohnNub": 1,
      "-": 1
    }
  }
]
