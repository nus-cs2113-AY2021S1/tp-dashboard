[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ye Yutong | [Github](https://github.com/yeyutong811) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Ng | [Github](https://github.com/JohnNub) | [Portfolio](docs/team/johnng.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Varsha MS | [Github](https://github.com/Varsha3006) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wang Zixin | [Github](https://github.com/WangZixin67) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 1,
      "Varsha3006": 1,
      "WangZixin67": 1,
      "JohnNub": 1,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "# CCA Manager Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* auto-gen TOC:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "CCA Manager is a revolutionary all-in-one management tool that changes the way you can manage interest groups with unrivaled efficiency and simplicity. Its lightweight Command Line Interface (CLI) allows administrators to breeze through tasks quickly and easily while offering powerful features to advanced users."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "This developer guide is written to document the implementation of CCA Manager. This document is intended for people who"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "are interested in learning more about the technical details of the various features and the organization of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "### Input Parsing"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Current Implementation**  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "The `Parser` class in `seedu.duke.backend` handles most of the input parsing. The `Parser` is a standalone class. Its purpose is to handle the conversion of read Strings from the `Ui` to UserInput objects"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "safely for the rest of the program to handle. It implements the following operations:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Parser#parse()` - Converts the supplied input `String` to a `UserInput` object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Parser#checkCategory()` - Convert the supplied `String` to a `String` category. This function implements Shorthand category detection."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* `Parser#sanitize()` - Check for unsupported, illegal or potentially malicious input and remove it from the `String`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Given below is an explanation on the logical flow of the `parse()` function."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "1. The supplied `String` is sent to `sanitize()` to remove any potentially unwanted input that may cause undefined application behavior."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "2. `sanitize()` will analyze the `String` and run a set list of checks to verify that the input is safe for the rest of the routine to handle."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "3. `parse()` will split the `String` to a `String[]` to identify the number of arguments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "4. `checkCategory()` is invoked to identify if the command belongs to a specific category."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "5. A `HashMap\u003cString,String\u003e` is created to store all the arguments supplied by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "6. A new `UserInput` object is created with the arguments in the HashMap, the category of the command and the command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "7. The function returns the `UserInput` to the `Ui` for further execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "**Design Considerations**  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: Statefulness of Parser object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): Parser does not preserve state between parses."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Easy to implement. Easy to test. Promotes use of single commands over multi-step commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Unable to implement intelligent functionality where previous input influences the behavior of the next."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Reason for choice: Our focus for this application is simplicity and efficiency. Having stateful commands runs counter to this design philosophy."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: Parser preserves stateful information"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Able to implement multi-step commands. Can easily implement confirmation step for commands that manipulate large volume of data."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: More complicated to implement. Harder to ensure the behaviour of the parser is consistent. Harder to debug."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Aspect: Design of parser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 1 (Current Choice): Dedicated parser class creates an object to be passed into all other Command objects"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Allows other classes to check for the required arguments without having to do low level string handling. Enforces consistent parsing across all commands. Enables `/` arguments to be added and read in any order."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: Incurs additional overhead from adding an extra step between the input operation and the command invocation."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "* Alternative 2: Each Command handles its own input independently"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Pros: Command classes are free to simplify the parsing step depending on the required complexity of the command. No intermediate step and overhead."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    * Cons: More difficult to enforce parsing standards across Commands. String manipulation becomes required in every command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Our product targets people who manage interest groups and CCAs. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "However, our software solution allows us to easily expand the target audience to target schools and corporate enterprise clients in the future."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Management software is expensive and complex, training employees to use it is time-consuming. CCA Manager aims to solve these"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "problems by offering an all-in-one solution focused on simplicity and efficiency. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Our use of industry standard csv format ensures compatibility with leading industry tools. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "Shorthand Commands and Relative Time allow advanced users to enter up to 70% more commands per minute. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "2. Should be able to hold hundreds of thousands of data entries without losing the data."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "3. A user with average typing speed should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "4. The program should support writing to a universally supported and easy to edit non-proprietary file format such as RFC 4180 .csv files."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 57,
      "-": 30
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "1. Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "2. Quick Start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "3. Features \u003cbr/\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "   3.1 Help `help` \u003cbr/\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "   3.2 Exit the program: `exit` \u003cbr/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "   3.3 HR `HR` \u003cbr/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "      *  Add Members: `addMember`\u003cbr/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "      *  Delete Members: `delMember`\u003cbr/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "      *  View summary of members: `listMember`\u003cbr/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "   3.4 Events `event` \u003cbr/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Add events: `addEvent`\u003cbr/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Delete events: `delEvent`\u003cbr/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * View Summary of events: `viewEvent`\u003cbr/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "   3.5 Finance `finance` \u003cbr/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Add finance log : `addLog`\u003cbr/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Delete finance log: `delLog`\u003cbr/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * View financial summary: `summary`\u003cbr/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "4. FAQ"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "5. Command Summary"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "6. Glossary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "CCA Manager is a revolutionary tool that changes the way you can manage interest groups with unrivaled efficiency and simplicity. Its lightweight Command Line Interface (CLI) allows administrators to breeze through tasks quickly and easily while offering powerful features to advanced users."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that you have Java 11 or above installed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "2. Download the latest version of CCA manager from here"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "3. Run the program by entering java -jar cca.java in a terminal."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 3.1 Help `help`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Shows a list of available commands\u003cbr/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: help"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 3.2 Exit the program: `bye` "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 3.3 HR features `HR` \u003cbr/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "#### Add members: `addMember`\u003cbr/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Adds a member to the list of members.\u003cbr/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `hr add /n NAME /p PHONE_NUMBER /e EMAIL /r ROLE`\u003cbr/\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr addMember /n John Sterling /p 88888888 /e js@gmail.com /r president`\u003cbr/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr addMember /n Harry Potter /p 12345678 /e H_P@gmail.com /r member`\u003cbr/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " #### Delete members: `delMember`\u003cbr/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Deletes a member from the list of members. \u003cbr/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Format: `hr delMember MEMBER_INDEX` \u003cbr/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Deletes the member at the specified MEMBER_INDEX.\u003cbr/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " The MEMBER_INDEX refers to the index number shown in the list of members.\u003cbr/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " The MEMBER_INDEX must be an integer greater than 0. \u003cbr/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr delMember 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " `hr delMember 19` \u003cbr/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "#### list members: `listMember`\u003cbr/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Prints the list of members, based on the order in which they are added into the list. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Format: `hr listMember` \u003cbr/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "`hr listMember`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 3.4 Event features`event` \u003cbr/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### Add events: `addEvent`\u003cbr/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Adds an event to the list of events.\u003cbr/\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `event addEvent /n EVENT_NAME /d EVENT_DATE /t EVENT_TIME`\u003cbr/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `event addEvent /n arduino course /d 2020-09-16 /t 8pm`\u003cbr/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `event addEvent /n Autodesk course/d 2020-12-20 /t 8-10.30pm`\u003cbr/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " #### Delete events: `delEvent`\u003cbr/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " Deletes an event from the list of events. \u003cbr/\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " Format: `event delEvent EVENT_INDEX` \u003cbr/\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " Deletes the event at the specified EVENT_INDEX.\u003cbr/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " The EVENT_INDEX refers to the index number shown in the list of events.\u003cbr/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " The EVENT_INDEX must be an integer greater than 0. \u003cbr/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " Example of usage: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `event delEvent 1` \u003cbr/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": " `event delEvent 19` \u003cbr/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "#### list events: `listEvent`\u003cbr/\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Prints the list of events, based on the order in which they are added into the list. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Format: `event listEvent` \u003cbr/\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "`event listEvent`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "### 3.5 Finance features `finance` \u003cbr/\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "#### Add finance log entry: `addLog` \u003cbr/\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Adds an entry into the finance log. \u003cbr/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `finance addLog ITEM_NAME ITEM_VALUE` \u003cbr/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance addLog have lunch 5.2` \u003cbr/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`f addlog buy flight ticket 700` \u003cbr/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "#### Delete finance log entry: `delLog` \u003cbr/\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Removes an entry from finance log. \u003cbr/\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `finance delLog ITEM_INDEX` \u003cbr/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Example of usage: \u003cbr/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`finance dellog 3` \u003cbr/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "`f delLog 10` \u003cbr/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "#### View financial summary: `summary` \u003cbr/\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Brings up a summary of the financial log and shows the total amount of money expended. \u003cbr/\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "Format: `finance summary` \u003cbr/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "##FAQ"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "##Command Summary"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "Command | Format | Example"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "------- | ---------- | ------------"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "help | `help` | -"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "bye | `bye` | -"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "addMember  | `hr addMember /n NAME /p PHONE_NUMBER /e EMAIL /r ROLE` | `hr addMember /n Harry /p 12345678 /e HP@gmail.com /r member`\u003cbr/\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "delMember  | `hr delMember MEMBER_INDEX` | `hr delMember 1`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "listMember  | `hr listMember` | -"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "addEvent | `event addEvent /n EVENT_NAME /d EVENT_DATE /t EVENT_TIME` | `event addEvent /n arduino course /d 2020-09-16 /t 8pm`\u003cbr/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "delEvent | `event delEvent EVENT_INDEX`  | `event delEvent 1`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "listEvent | `event listEvent` | -"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "addLog | `finance addLog ITEM_NAME ITEM_VALUE` | `finance addLog have lunch 5.2`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "delLog | `finance delLog ITEM_INDEX` | `finance delLog 2`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "summary | `finance summary` | -"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "##Glossary"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 31,
      "Varsha3006": 65,
      "WangZixin67": 18,
      "-": 31
    }
  },
  {
    "path": "docs/team/yeyutong.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "# Ye Yutong - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 6
    }
  },
  {
    "path": "src/main/java/seedu/duke/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static final int NO_MATCH \u003d -1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static final int ARGUMENT_ERR \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static final int ACCEPT \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private UserInput savedInput; // Variable for saving the given user input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Checks if the supplied userInput is valid for the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * UserInput can contain any information so it\u0027s the command\u0027s job to ensure it is correct before acceptance"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Once accepted, the command should store a copy of the UserInput for execution"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param input The UserInput to Validate"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return NO_MATCH if the command and category is incorrect, ARGUMENT_ERR if the argument supplied is incorrect."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     *          ACCEPT if the userInput is intended and correct for invoking this command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Runs the actual command processing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return String message to be printed to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public abstract String execute() throws DukeFinanceAddDescriptionLostException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            DukeNotNumberException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Provides information about command usage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return The string to be printed to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public abstract String help();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 2,
      "JohnNub": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.FileManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileManager fm \u003d new FileManager(\"data/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            int rv \u003d fm.readAll();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (rv !\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.printError(\"Oops I was unable to find your saved data!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.printError(\"I\u0027ve loaded your saved data successfully!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeFileFormatException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.printError(\"Oops it appears your saved data was corrupted!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeFileHeaderException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.printError(\"Oops it appears your saved data was corrupted!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.printError(\"Oops I was unable to find your saved data!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ui.printError(\"Welcome to CCA Manager Integrated! Enter any command to begin!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        while (!Ui.shouldShutdown()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui.run();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                fm.saveAll();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                ui.printError(\"Oops! Unable to save data!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 1,
      "JohnNub": 31,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeArgumentException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeArgumentException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeFileFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeFileFormatException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeFileHeaderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeFileHeaderException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeFinanceAddDescriptionLostException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class DukeFinanceAddDescriptionLostException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeMemberListEmptyException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class DukeMemberListEmptyException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public DukeMemberListEmptyException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        printMessage();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void printMessage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        System.out.println(\"OOPS!!! The member list is empty!\\n\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeMemberNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class DukeMemberNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public DukeMemberNotFoundException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        printMessage();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void printMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        System.out.println(\"OOPS!!! The member does not exist.\\n\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeNoMatchException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class DukeNoMatchException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeNotNumberException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class DukeNotNumberException extends DukeException{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/FileManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeFileFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.DukeFileHeaderException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.finance.FinanceList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.finance.FinanceLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.hr.Member;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.hr.MemberList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class FileManager {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    // Todo support RFC 4180 CSV standard and handle rogue characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String HEADERS_MEMBERS \u003d \"Name,Phone,Email,Role\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String HEADERS_FINANCE \u003d \"Name,Value\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String HEADERS_EVENT \u003d \"Name,Date,Time\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"FileLog\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private String path; // if not the working directory, path should end with a slash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public FileManager(String path) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Files.createDirectories(Paths.get(path));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setPath(String path) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves data from all the different lists to disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException Any one of the files encounters a write error"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveAll() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Begin Saving All\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveEvent(path + \"events.csv\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFinance(path + \"finance.csv\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveMembers(path + \"members.csv\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Finished Saving All\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int readAll() throws DukeFileFormatException, DukeFileHeaderException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Begin Loading All\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int ret \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            readEvents(path + \"events.csv\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ret++;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.log(Level.INFO, \"Failed to load events\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            readFinance(path + \"finance.csv\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ret++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.log(Level.INFO, \"Failed to load finance\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            readMembers(path + \"members.csv\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (FileNotFoundException fe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ret++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.log(Level.INFO, \"Failed to load members\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        logger.log(Level.INFO, \"Finished loading all\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves all the events currently in memory to a csv file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveEvent(String fileName) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String writeOutput \u003d HEADERS_EVENT + \"\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (Event e : EventList.events) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d e.getEventName() + \",\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d e.getEventDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \",\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d e.getEventTime() + \"\\n\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFile(fileName, writeOutput);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves all the finance logs currently in memory to a csv file."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveFinance(String fileName) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String writeOutput \u003d HEADERS_FINANCE + \"\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (FinanceLog f : FinanceList.financeLogs) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d f.getLog() + \",\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d f.getLogVal() + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFile(fileName, writeOutput);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Saves all the members currently in memory to a csv file."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void saveMembers(String fileName) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String writeOutput \u003d HEADERS_MEMBERS + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (Member m : MemberList.members) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberName() + \",\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberPhone() + \",\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberEmail() + \",\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            writeOutput +\u003d m.getMemberRole() + \"\\n\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        saveFile(fileName, writeOutput);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Generic method for saving string to a specified file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param fileName The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param data String to write to the file"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException The file cannot be written to"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void saveFile(String fileName, String data) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        fw.write(data);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        fw.flush();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Opens a file and interprets the content as if it\u0027s a csv file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param filename The name of the file, including the path if necessary"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param headers if not null, verifies a matching header to the parameter, otherwise aborts"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return A HashMap containing the header and all column entries under the header as an ArrayList"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @throws IOException If the file cannot be found or a read error is encountered"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static HashMap\u003cString, ArrayList\u003cString\u003e\u003e readFile(String filename, String headers)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        BufferedReader csvReader \u003d new BufferedReader(new FileReader(filename));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String row;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        boolean header \u003d true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        //int rowCount \u003d 0;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] headerOrder \u003d null;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        while ((row \u003d csvReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String[] data \u003d row.split(\",\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (header) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                // Process file header"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (headers !\u003d null \u0026\u0026 !row.equalsIgnoreCase(headers)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    throw new DukeFileHeaderException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (String s : data) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    map.put(s, new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                headerOrder \u003d data;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                header \u003d false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            for (String s : data) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.get(headerOrder[i]).add(s);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (i !\u003d headerOrder.length) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                // Column mismatch!"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                throw new DukeFileFormatException();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        csvReader.close();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static HashMap\u003cString, ArrayList\u003cString\u003e\u003e readFile(String filename)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return readFile(filename, null);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void readFinance(String filename)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e data \u003d readFile(filename);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Validate size of any column"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rows \u003d data.get(\"Name\").size();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            FinanceLog tmp \u003d new FinanceLog(data.get(\"Name\").get(i), Double.parseDouble(data.get(\"Value\").get(i)));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            FinanceList.financeLogs.add(tmp);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void readEvents(String filename)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e data \u003d readFile(filename);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Validate size of any column"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rows \u003d data.get(\"Name\").size();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Event tmp \u003d new Event(data.get(\"Name\").get(i), data.get(\"Date\").get(i), data.get(\"Time\").get(i));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            EventList.events.add(tmp);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void readMembers(String filename)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throws IOException, DukeFileHeaderException, DukeFileFormatException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, ArrayList\u003cString\u003e\u003e data \u003d readFile(filename);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Validate size of any column"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        int rows \u003d data.get(\"Name\").size();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (int i \u003d 0; i \u003c rows; i++) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Member tmp \u003d new Member(data.get(\"Name\").get(i),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    Integer.parseInt(data.get(\"Phone\").get(i)),"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    data.get(\"Email\").get(i),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    data.get(\"Role\").get(i));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            MemberList.members.add(tmp);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 231
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Given a string input, returns a sanitized and pre-processed UserInput object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param input The string to be processed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return UserInput object containing the command, category and all arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public UserInput parse(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        userInput \u003d sanitize(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Regex looks silly, you  have to escape the / so you type double \\ to escape the \\ used to escape the /"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] output \u003d userInput.split(\"\\\\/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String category \u003d checkCategory(output);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (!category.equals(\"\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Trim is still required as indexOf \u0027 \u0027 may hit a blank space before the category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // This removes the category from the command if it exists"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String tmp \u003d output[0].trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            output[0] \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (output.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // There are no arguments supplied"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Check if the input has any other arguments"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String tmp \u003d output[0].trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String cmd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (tmp.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String arg \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1).trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cmd \u003d tmp.substring(0, tmp.indexOf(\u0027 \u0027)).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(\"\", arg);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cmd \u003d tmp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui \u003d new UserInput(cmd, map);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            String base \u003d output[0].trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (base.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String arg \u003d base.substring(base.indexOf(\u0027 \u0027) + 1).trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                base \u003d base.substring(0, base.indexOf(\u0027 \u0027)).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(\"\", arg);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Convert the / arguments into a map"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            for (int i \u003d 1; i \u003c output.length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String tmp \u003d output[i].trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String key;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                String val;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (tmp.indexOf(\u0027 \u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    val \u003d tmp.substring(tmp.indexOf(\u0027 \u0027) + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    key \u003d tmp.substring(0, tmp.indexOf(\u0027 \u0027));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    val \u003d \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    key \u003d tmp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                map.put(key.trim().toLowerCase(), val.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            ui \u003d new UserInput(base, map);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        ui.setCategory(category);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return ui;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Given any split output, finds if the output contains a string that indicates the category."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Shorthand categories are supported."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param output The split string output"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return The category of the command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String checkCategory(String[] output) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String tmp \u003d output[0].trim().toLowerCase();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (tmp.startsWith(\"hr \") || tmp.startsWith(\"h \")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"hr\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (tmp.startsWith(\"finance \") || tmp.startsWith(\"f \")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"finance\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else if (tmp.startsWith(\"event \") || tmp.startsWith(\"e \")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"event\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * TODO implement string sanitization."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Cleans up the string to ensure that anything else is safe for the rest of the program to handle."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param s String to be sanitized"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return Sanitized string S"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String sanitize(String s) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return s;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 4,
      "JohnNub": 101
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeArgumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeFinanceAddDescriptionLostException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNoMatchException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNotNumberException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.event.CommandEventAdd;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.event.CommandEventDel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.event.CommandEventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.finance.CommandFinanceAdd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.finance.CommandFinanceDel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.finance.CommandFinanceSummary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.CommandAddMember;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.CommandDelMember;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.CommandViewMember;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.others.CommandBye;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.others.CommandHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static ArrayList\u003cCommand\u003e commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static boolean shutdown \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static final String UNDERSCORES \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        initializeCommands();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String inStr \u003d sc.nextLine();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput userInput \u003d parser.parse(inStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        /*System.out.println(\"Category: \"+userInput.getCategory());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(\"Command: \"+userInput.getCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(\"Num Args: \"+userInput.getNumArgs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(\"Args: \"+userInput.getArgs());*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Command cmd \u003d findCommand(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(cmd.execute());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeArgumentException ae) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Placeholder if additional routine is required when user enters incorrect parameters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DukeNoMatchException ne) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"No such command. Try \u0027help\u0027 for a list of commands.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (DukeFinanceAddDescriptionLostException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            printOutput(\"Please enter the complete command. Format is:\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    + \"finance addLog ITEM_NAME ITEM_VALUE\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (DukeNotNumberException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            printOutput(\"The format requires a number in the end.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            printOutput(\"Command execution failed with an unhandled error!\", true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Command findCommand(UserInput ui) throws DukeArgumentException, DukeNoMatchException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (Command c : commandList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            int result \u003d c.validate(ui);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (result \u003d\u003d Command.ARGUMENT_ERR) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                printError(c.help());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                throw new DukeArgumentException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (result \u003d\u003d Command.ACCEPT) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return c;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        throw new DukeNoMatchException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Returns if the loop should exit."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @return true if the program should terminate"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static boolean shouldShutdown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return shutdown;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public static void setShutdown(boolean shut) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        shutdown \u003d shut;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Utility function for printing errors triggered by other classes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param text The string to be printed"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void printError(String text) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(text, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        printOutput(text, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Prints the output with the divider lines and the supplied text."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Option to make the text non instant for extra effect"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param text string to be printed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param isInstant whether the string is printed instantly"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void printOutput(String text, boolean isInstant) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (text \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Split text according to the lines to format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String[] lines \u003d text.split(\"\\\\r?\\\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        for (String s : lines) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (isInstant) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.println(\"  \" + s);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(\"  \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                // charAt is constant time lookup so we do that instead of splitting strings."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    char c \u003d s.charAt(i);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    System.out.print(c);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        Thread.sleep(5);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                System.out.print(System.lineSeparator());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        System.out.println(UNDERSCORES);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Creates a list of commands for the program to check through."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private static void initializeCommands() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        commandList.add(new CommandHelp());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        commandList.add(new CommandBye());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandFinanceSummary());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandFinanceAdd());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        commandList.add(new CommandFinanceDel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventAdd());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventDel());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        commandList.add(new CommandEventList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandAddMember());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandViewMember());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        commandList.add(new CommandDelMember());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 6,
      "WangZixin67": 21,
      "Varsha3006": 7,
      "JohnNub": 114
    }
  },
  {
    "path": "src/main/java/seedu/duke/backend/UserInput.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.backend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class UserInput {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Map\u003cString, String\u003e args;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public UserInput(String c, Map\u003cString, String\u003e a) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        command \u003d c;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        args \u003d a;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public Map\u003cString, String\u003e getArgs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setArgs(Map\u003cString, String\u003e args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getArg(String s) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args.get(s);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int getNumArgs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return args.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setCategory(String s) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        category \u003d s;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventAdd extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    private Event cachedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (cachedEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return \"Unable to create event! Please check your inputs again!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String output \u003d EventList.addEvent(cachedEvent);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        userInput \u003d ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getCategory().equals(\"event\") \u0026\u0026 (userInput.getCommand().equalsIgnoreCase(\"addEvent\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || userInput.getCommand().equalsIgnoreCase(\"add\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || userInput.getCommand().equalsIgnoreCase(\"a\"))) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (ui.getNumArgs() \u003e\u003d 3) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if ((ui.getArg(\"n\") \u003d\u003d null) || (ui.getArg(\"d\") \u003d\u003d null) || (ui.getArg(\"t\") \u003d\u003d null)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if ((ui.getArg(\"n\").equals(\"\")) || (ui.getArg(\"d\").equals(\"\")) || (ui.getArg(\"t\").equals(\"\"))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                cachedEvent \u003d new Event(userInput.getArg(\"n\"), userInput.getArg(\"d\"), userInput.getArg(\"t\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if (cachedEvent.date !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    return ACCEPT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"Syntax: event addEvent /n \u003cName\u003e /d \u003cDate YYYY-MM-DD\u003e /t \u003cTime\u003e\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 31,
      "JohnNub": 18
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventDel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventDel extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        index \u003d Integer.parseInt(userInput.getArg(\"\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d EventList.deleteEvent(index - 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"Syntax: event addEvent \u003cIndex\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        userInput \u003d ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"event\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"delEvent\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"del\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"d\"))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            if (ui.getNumArgs() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                if ((ui.getArg(\"\") !\u003d null)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                    return ACCEPT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 35,
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/CommandEventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class CommandEventList extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    private UserInput userInput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String output \u003d EventList.printEventList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.userInput \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (input.getCategory().equals(\"event\") \u0026\u0026 (input.getCommand().equalsIgnoreCase(\"listEvent\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            || input.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            || input.getCommand().equalsIgnoreCase(\"l\"))) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 28,
      "JohnNub": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static java.time.temporal.TemporalAdjusters.next;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected String eventName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    protected String eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public Event(String name, String date, String time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.eventName \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        setDateTime(date, time);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public void setEventDate(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getEventName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setEventName(String eventName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getEventTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return eventTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setEventTime(String eventTime) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public LocalDate getEventDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Returns the string format of the event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @return String format of event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public String printEvent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Event Name: \" + this.eventName + \"\\nDate: \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \"\\nTime: \" + this.eventTime + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * Attempts to read the date time. If it fails, uses relative timing to try again."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param dateStr The Date to be processed"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     * @param timeStr The time to be processed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void setDateTime(String dateStr, String timeStr) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        eventTime \u003d timeStr;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            date \u003d LocalDate.parse(dateStr);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            // Ignore"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        LocalDateTime start \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"next\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"next\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"next\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (dateStr.toLowerCase().contains(\"end\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (dateStr.toLowerCase().matches(\"end\\\\s*mon.*\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*tue.*\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*wed.*\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*thu.*\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*fri.*\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sat.*\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } else if (dateStr.toLowerCase().matches(\"end\\\\s*sun.*\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d LocalDateTime.now().with(next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (start !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                start \u003d start.withHour(23).withMinute(59).withSecond(59).withNano(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                eventTime \u003d \"23:59:59\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (start !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            date \u003d start.toLocalDate();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 30,
      "JohnNub": 86
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static Logger logger \u003d Logger.getGlobal();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * Adds member to the arraylist."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param event event to be added in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String addEvent(Event event) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Adding event to list\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        userOutput \u003d \"Got it. I\u0027ve added this Event:\\n\" + event.printEvent() + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Now you have \" + events.size() + \" event in the list.\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Added event to list\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * To delete an event based on the given index."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     * @param index index to be deleted from list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String deleteEvent(int index) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Deleting event\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d \"I\u0027ll remove this Event:\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d userOutput.concat(events.get(index).printEvent() + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            events.remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d userOutput.concat(\"Now you have \" + events.size() + \" event in the list.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            logger.info(\"Deleted test from list\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d \"OOPS!!! The event does not exist.Please try our help command!\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    public static String printEventList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        logger.info(\"Initialising event list\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String userOutput;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            logger.warning(\"Empty event list.\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d (\"Oops! The event list is empty!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            userOutput \u003d \"Here are the current events in your list:\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d userOutput.concat(events.indexOf(event) + 1 + \".\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                userOutput \u003d userOutput.concat(event.printEvent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            logger.info(\"Event List ready\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return userOutput;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/CommandFinanceAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeFinanceAddDescriptionLostException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNotNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandFinanceAdd extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userinput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private Logger logger \u003d Logger.getGlobal();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() throws DukeFinanceAddDescriptionLostException, DukeNotNumberException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.info(\"Start adding finance log...\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String input \u003d userinput.getArg(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (input \u003d\u003d null) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.warning(\"The input format is wrong.\\n\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            throw new DukeFinanceAddDescriptionLostException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String[] contents \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        int length \u003d contents.length;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String item \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0; i \u003c length - 1; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (i \u003d\u003d length - 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                item \u003d item + contents[i];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                item \u003d item + contents[i] + \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            for (int i \u003d 0; i \u003c contents[length - 1].length(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                if (!Character.isDigit(contents[length - 1].charAt(i)) \u0026\u0026 contents[length - 1].charAt(i) !\u003d \u0027.\u0027) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    logger.warning(\"The number in the end is missing...\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    throw new DukeNotNumberException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            FinanceLog fl \u003d new FinanceLog(item,Double.parseDouble(contents[length - 1]));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output \u003d FinanceList.addLog(fl);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.info(\"End adding...\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            logger.warning(\"The input format is wrong.\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            throw new DukeFinanceAddDescriptionLostException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"Syntax: hr addLog title value\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"finance\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"addlog\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"add\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"a\"))) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userinput \u003d ui;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 53,
      "JohnNub": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/CommandFinanceDel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.DukeNotNumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandFinanceDel extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userinput;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() throws DukeNotNumberException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String input \u003d userinput.getArg(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (!Character.isDigit(input.charAt(i))) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                throw new DukeNotNumberException();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        int index \u003d Integer.parseInt(input.trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d FinanceList.dellog(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"Syntax: finance delLog \u003cindex\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"finance\") \u0026\u0026 ui.getCommand().equalsIgnoreCase(\"dellog\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"del\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"d\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                Integer.parseInt(ui.getArg(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userinput \u003d ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 33,
      "JohnNub": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/CommandFinanceSummary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class CommandFinanceSummary extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private UserInput userinput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d FinanceList.summary();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"The format of input to show finance list is: finance summary\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public int validate(UserInput ui) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (ui.getCategory().equals(\"finance\") \u0026\u0026 (ui.getCommand().equalsIgnoreCase(\"summary\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"s\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || ui.getCommand().equalsIgnoreCase(\"l\"))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            userinput \u003d ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return NO_MATCH;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 26,
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/FinanceList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class FinanceList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static ArrayList\u003cFinanceLog\u003e  financeLogs \u003d new ArrayList\u003cFinanceLog\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static Logger logger \u003d Logger.getGlobal();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Add one log into the finance list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param fl the new finance log user wants to add"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the output when it successfully add one log"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String addLog(FinanceLog fl) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        financeLogs.add(fl);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d \"Got it! I\u0027ve added this to the list.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output1 \u003d fl.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (fl.getSize() \u003e 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output2 \u003d \"There are \" + fl.getSize() + \" logs in the list now.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output2 \u003d \"There is \" + fl.getSize() + \" log in the list now.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        output \u003d output + output1 + output2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Delete one particular log from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param index the index of the log which user wants to delete"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the output when successfully delete a log"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String dellog(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.info(\"Start deleting...\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            assert index \u003e 0 : \"The index must \u003e 0\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            financeLogs.remove(index - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            FinanceLog.finSize--;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            if (FinanceLog.finSize \u003e 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output2 \u003d \"There are \" + FinanceLog.finSize + \" logs in the list now.\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                output2 \u003d \"There is \" + FinanceLog.finSize + \" log in the list now.\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output1 \u003d \"Got it! I\u0027ve removed this from list.\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            String output \u003d output1 + output2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.info(\"End deleting...\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.warning(\"The index is out of bound.\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Your index input does not exist in the list\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Show the all the logs in the list and shows the total budget amount."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the finance list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static String summary() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.info(\"Start listing summary...\\n\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        if (FinanceLog.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            logger.warning(\"The list is empty.\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            return \"Sorry, your finance list is empty.\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String output \u003d \"Here is the list:\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        for (int i \u003d 0;i \u003c FinanceLog.getSize();i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "            output \u003d output.concat(\"\\t\" + (i + 1) + \".\" + financeLogs.get(i).getLog() + \" $\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                    + financeLogs.get(i).getLogVal() + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        output \u003d output.concat(\"Total budget: $\" + String.format(\"%.2f\",FinanceLog.getSum()) + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        logger.info(\"End processing...\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/finance/FinanceLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "public class FinanceLog {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private String finLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    private double finLogVal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static int finSize \u003d 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static double sum \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Create a new finance log."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param log the content of a finance log"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @param val the value of its budget"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public FinanceLog(String log, double val) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finLog \u003d log;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finLogVal \u003d val;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        finSize++;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        sum \u003d sum + val;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Gets the log\u0027s content."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return log\u0027s content"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String getLog() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return finLog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Get the log\u0027s budget amount."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return log\u0027s budget amount"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public double getLogVal() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return finLogVal;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Gets the size of finance log list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the size of finance log list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return finSize;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Gets the sum of total budget."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the sum of total budget"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public static double getSum() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * Form a formatted string for a finance log."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     * @return the string of a formatted finance log"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        return \"\\t\" + finSize + \".\" + finLog + \" $\" + finLogVal + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 60
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandAddMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static seedu.duke.hr.MemberList.isInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents add member command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandAddMember extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 input.getCommand().equalsIgnoreCase(\"addMember\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || (input.getCommand().equalsIgnoreCase(\"add\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"a\"))) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            if (input.getNumArgs() \u003e\u003d 4) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                if ((input.getArg(\"n\") \u003d\u003d null) || (input.getArg(\"p\") \u003d\u003d null) || (input.getArg(\"e\") \u003d\u003d null)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                        \u0026\u0026 (input.getArg(\"r\") \u003d\u003d null)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"n\").equals(\"\")) || (input.getArg(\"p\").equals(\"\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        || (input.getArg(\"e\").equals(\"\")) \u0026\u0026 (input.getArg(\"r\").equals(\"\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                        || !isInteger(input.getArg(\"p\"))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                return ACCEPT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        int phone \u003d Integer.parseInt(savedInput.getArg(\"p\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        Member m \u003d new Member(savedInput.getArg(\"n\"), phone, savedInput.getArg(\"e\"), savedInput.getArg(\"r\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d MemberList.addToList(m);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"You can use \u0027hr add\u0027 command this way:\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                + \"hr add /n NAME /p PHONE_NUMBER (INTEGER) /e EMAIL /r ROLE\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 43,
      "JohnNub": 11
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandDelMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static seedu.duke.hr.MemberList.isInteger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents delete member command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandDelMember extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 input.getCommand().equalsIgnoreCase(\"delMember\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"delete\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"d\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            if (input.getNumArgs() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                if ((input.getArg(\"\") !\u003d null) \u0026\u0026 isInteger(input.getArg(\"\"))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                    return ACCEPT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ARGUMENT_ERR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        index \u003d Integer.parseInt(savedInput.getArg(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d MemberList.deleteFromList(index - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"You can use \u0027hr delete\u0027 command this way:\\n\" + \"hr delete MEMBER_INDEX (INTEGER)\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 45,
      "JohnNub": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/CommandViewMember.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " * Represents view member command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class CommandViewMember extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    private UserInput savedInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.savedInput \u003d input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (input.getCategory().equals(\"hr\") \u0026\u0026 input.getCommand().equalsIgnoreCase(\"listMember\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"list\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                || input.getCommand().equalsIgnoreCase(\"l\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d MemberList.listMembers();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"You can use \u0027hr list\u0027 command this way:\\n\" + \"hr list\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 35,
      "JohnNub": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/Member.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class Member {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static int numOfMembers \u003d 0;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected String memberName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected int memberPhone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected String memberEmail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    protected String memberRole;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public Member(String name, int phone, String email, String role) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberName \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberPhone \u003d phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberEmail \u003d email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        this.memberRole \u003d role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        numOfMembers +\u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public int getMemberPhone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.memberPhone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String getMemberEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.memberEmail;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String getMemberRole() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return this.memberRole;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String getMemberName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return this.memberName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Prints task data in the desired form to be printed for user interaction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return \"name: \" + this.memberName + \" |phone: \" + this.getMemberPhone() + \" |email: \" + this.getMemberEmail()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \" |role: \" + this.getMemberRole();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 41,
      "JohnNub": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/hr/MemberList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke.hr;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class MemberList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static ArrayList\u003cMember\u003e members \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Adds member to the arraylist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param m member to be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String addToList(Member m) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        members.add(m);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this member:\\n\" + m.toString() + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have \" + Member.numOfMembers + \" member\" + ((Member.numOfMembers \u003d\u003d 1) ? \"\" : \"s\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \" in the list.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Returns the list of members."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return output error message or member list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String listMembers() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        if (Member.numOfMembers \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! The member list is empty!\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"Here is the list of members in your CCA:\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            for (int i \u003d 0; i \u003c Member.numOfMembers; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                int index \u003d i + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                output \u003d output.concat(index + \".\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                output \u003d output.concat(members.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Deletes the member from the arraylist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param index index of member to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return output error message or info of deleted member."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static String deleteFromList(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"Noted. I\u0027ll remove this member:\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(members.get(index).toString() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            members.remove(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            Member.numOfMembers--;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(\"Now you have \" + Member.numOfMembers + \" member\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d output.concat(((Member.numOfMembers \u003e 1) ? \"s\" : \"\") + \" in the list.\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            output \u003d \"OOPS!!! The member does not exist.\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * Checks whether input can be parsed into an integer."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @param s input to be checked"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     * @return true if input can be parsed as an integer, false if input cannot be parsed as an integer."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            int index \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 72
    }
  },
  {
    "path": "src/main/java/seedu/duke/others/CommandBye.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.others;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class CommandBye extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Ui.setShutdown(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"See you next time!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int validate(UserInput userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (userInput.getCategory().equals(\"\") \u0026\u0026 userInput.getCommand().equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/others/CommandHelp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke.others;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class CommandHelp extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        return \"Hello! Here is a list of commands you can try:\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t1. Add members:  hr add /n NAME /p PHONE_NUMBER /e EMAIL /r ROLE\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t2. Delete member: hr delete index\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t3. View hr list: hr list\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t4. Add events: event addEvent /n EVENT_NAME /d EVENT_DATE /t EVENT_TIME\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t5. Delete event: event delEvent EVENT_INDEX\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t6. View event list: event listEvent\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t7. Add financial log: finance addLog ITEM_NAME ITEM_VALUE\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t8. Delete financial log:  finance delLog ITEM_INDEX\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t9. View financial summary: finance summary\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\t10. Exit the program: bye\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public int validate(UserInput input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        if (input.getCategory().equals(\"\") \u0026\u0026 input.getCommand().equalsIgnoreCase(\"help\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return ACCEPT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            return NO_MATCH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public String help() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 14,
      "JohnNub": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    static final String LOGO \u003d \"    ____        _        \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "            + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 6,
      "WangZixin67": 1,
      "JohnNub": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/FileManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.FileManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.FileVisitResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.SimpleFileVisitor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.nio.file.attribute.BasicFileAttributes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class FileManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void fileManagerBasicTest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Set up test folder"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String path \u003d (int) (Math.random() * 1000000) + \"/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        FileManager fm \u003d new FileManager(path);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 1, basic write"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            FileManager.saveFile(path + \"Test1.txt\", \"Sample 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 01: Saving to file failed!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 2, Read fail"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            assertEquals(3, fm.readAll());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 02: Reading non-existent data failed!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 3, Empty write"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fm.saveAll();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 03: Empty write failed!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Test 4, Empty read"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            assertEquals(0, fm.readAll());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            fail(\"Test 04: Reading file with no data failed!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Clean up. If this raises an exception, it means we forgot to close either the writer or reader"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        deleteDir(path);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    void deleteDir(String file) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Path directory \u003d Paths.get(file);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            Files.walkFileTree(directory, new SimpleFileVisitor\u003cPath\u003e() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    Files.delete(file);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return FileVisitResult.CONTINUE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    Files.delete(dir);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                    return FileVisitResult.CONTINUE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 82
    }
  },
  {
    "path": "src/test/java/seedu/duke/HrTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.Member;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "import seedu.duke.hr.MemberList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "public class HrTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void addListDelMember_executesNormally() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected1 \u003d \"Got it. I\u0027ve added this member:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: James Gosling |phone: 11111111 |email: 111111@gmail.com |role: member\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 1 member in the list.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual1 \u003d MemberList.addToList(new Member(\"James Gosling\", 11111111, \"111111@gmail.com\", \"member\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected2 \u003d \"Here is the list of members in your CCA:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"1.name: James Gosling |phone: 11111111 |email: 111111@gmail.com |role: member\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual2 \u003d MemberList.listMembers();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected3 \u003d \"Noted. I\u0027ll remove this member:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"name: James Gosling |phone: 11111111 |email: 111111@gmail.com |role: member\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "                + \"Now you have 0 member in the list.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual3 \u003d MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected3, actual3);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void removeMember_MemberNotExists() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected \u003d \"OOPS!!! The member does not exist.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual \u003d MemberList.deleteFromList(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    public void listMember_MemberListEmpty() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String expected \u003d \"OOPS!!! The member list is empty!\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        String actual \u003d MemberList.listMembers();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 46
    }
  },
  {
    "path": "src/test/java/seedu/duke/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import seedu.duke.backend.UserInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    public void testParser() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Base Case"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        Parser p \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg1 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg1.put(\"\", \"2\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected1 \u003d new UserInput(\"foo\", arg1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected1.setCategory(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test1 \u003d \"foo 2\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test1).getArgs(), expected1.getArgs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test1).getCategory(), expected1.getCategory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test1).getCommand(), expected1.getCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Space \u0026 Repetition test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg2 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg2.put(\"\", \"2 2 2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected2 \u003d new UserInput(\"fOo\", arg2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected2.setCategory(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test2 \u003d \"fOo 2 2 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test2).getArgs(), expected2.getArgs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test2).getCategory(), expected2.getCategory());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test2).getCommand(), expected2.getCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Category and extra argument test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg3 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg3.put(\"\", \"something\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg3.put(\"a1\", \"2 3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected3 \u003d new UserInput(\"do\", arg3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected3.setCategory(\"hr\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test3 \u003d \"hr do something /a1 2 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test3).getArgs(), expected3.getArgs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test3).getCategory(), expected3.getCategory());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test3).getCommand(), expected3.getCommand());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Capitalization \u0026 trimming test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg4 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"\", \"mYeVenT     9000\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"arg\", \"some  arg\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"a2\", \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg4.put(\"a3\", \"another\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected4 \u003d new UserInput(\"AdD\", arg4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected4.setCategory(\"event\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test4 \u003d \"  eVeNt AdD     mYeVenT     9000  /  arg  some  arg /a2 /a3 another\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test4).getArgs(), expected4.getArgs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test4).getCategory(), expected4.getCategory());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test4).getCommand(), expected4.getCommand());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JohnNub"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        // Shorthand category, Accented Character and Argument Precedence test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        HashMap\u003cString, String\u003e arg5 \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg5.put(\"\", \"\\350\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        arg5.put(\"arg\", \"precedence test\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        UserInput expected5 \u003d new UserInput(\"testCase\\350\", arg5);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        expected5.setCategory(\"finance\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        String test5 \u003d \"  f testCase\\350  \\350\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "                + \"/  arg  some  arg / arg /arg                                     precedence test\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test5).getArgs(), expected5.getArgs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test5).getCategory(), expected5.getCategory());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "        assertEquals(p.parse(test5).getCommand(), expected5.getCommand());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JohnNub": 74
    }
  },
  {
    "path": "src/test/java/seedu/duke/event/EventTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    Event event \u003d new Event(\"PR meeting\", \"2000-06-30\", \"8pm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    void testPrintEvent() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(\"Event Name: \" + \"PR meeting\" + \"\\nDate: \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Jun 30 2000\" + \"\\nTime: \" + \"8pm\" + \"\\n\", event.printEvent());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    void testEventAdd() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected1 \u003d \"Got it. I\u0027ve added this Event:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Event Name: PR meeting\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nDate: Jun 30 2000\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nTime: 8pm\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nNow you have 1 event in the list.\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected1,EventList.addEvent(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected3 \u003d \"Here are the current events in your list:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"1.Event Name: PR meeting\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nDate: Jun 30 2000\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nTime: 8pm\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected3, EventList.printEventList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        String expected2 \u003d \"I\u0027ll remove this Event:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"Event Name: PR meeting\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nDate: Jun 30 2000\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nTime: 8pm\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "                + \"\\nNow you have 0 event in the list.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "        assertEquals(expected2,EventList.deleteEvent(0));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Varsha3006"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Varsha3006": 40
    }
  },
  {
    "path": "src/test/java/seedu/duke/finance/FinanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "package seedu.duke.finance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "class FinanceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    void testver1Finance() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected1 \u003d \"Got it! I\u0027ve added this to the list.\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"\\t1.write $12.5\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"There is 1 log in the list now.\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual1 \u003d FinanceList.addLog(new FinanceLog(\"write\", 12.5));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected1, actual1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected2 \u003d \"Here is the list:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"\\t1.write $12.5\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"Total budget: $12.50\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual2 \u003d FinanceList.summary();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected2, actual2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String expected3 \u003d \"Got it! I\u0027ve removed this from list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "                + \"There is 0 log in the list now.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        String actual3 \u003d FinanceList.dellog(1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "        assertEquals(expected3, actual3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "WangZixin67"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "WangZixin67": 25
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "hr add /n James Gosling /p 11111111 /e 111111@gmail.com /r member"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "hr list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeyutong811"
        },
        "content": "hr delete 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JohnNub"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yeyutong811": 3,
      "JohnNub": 1,
      "-": 1
    }
  }
]
