[
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Colin Ng | [Github](https://github.com/Colin386) | [Portfolio](docs/team/colinNg.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Tan | [Github](https://github.com/marcursor) | [Portfolio](docs/team/marcustan.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Matthew Gani | [Github](https://github.com/matthewgani) | [Portfolio](docs/team/matthewgani.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Low Qing Ning | [Github](https://github.com/ninggggx99) | [Portfolio](docs/team/lowqingning.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Ng | [Github](https://github.com/reinbowl) | [Portfolio](team/marcusng.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 1,
      "matthewgani": 1,
      "ninggggx99": 2,
      "-": 4,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/team/colinNg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "# Colin Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Changed about us file"
      }
    ],
    "authorContributionMap": {
      "Colin386": 7
    }
  },
  {
    "path": "docs/team/lowqingning.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "# Low Qing Ning - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/marcusng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "# Marcus Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/team/marcustan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "# Marcus Tan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "marcursor": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private UserData data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Command com;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Parser currentParse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    //Location refers to the \"data\" directory stored in the folder of this application"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static final String FILELOCATION \u003d \"data\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Constructor for the Schedule components."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param filePath is a string containing the location of where the data text files are to be stored"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        data \u003d new UserData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        currentParse \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main run function. Loops until the bye command is entered."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printDividerLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command c \u003d currentParse.parse(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main function where the program starts."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param args No arguments entered so far"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Duke duke \u003d new Duke(FILELOCATION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 58,
      "ninggggx99": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Zoom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to add events."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String eventType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Boolean isInvalidEventType \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for adding events seedu.duke"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param commandWords from user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public AddCommand(String[] commandWords) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String tempEventType \u003d commandWords[0].toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        switch (tempEventType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"zoom\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Zoom\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"personal\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Personal\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"timetable\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Timetable\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] argumentWords \u003d Arrays.copyOfRange(commandWords, 1, commandWords.length);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] argumentWords \u003d argument.split(\";\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Boolean successfulAdd \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isInvalidEventType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            switch (eventType) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Personal\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (argumentWords.length \u003e\u003d 1 \u0026\u0026 argumentWords.length \u003c\u003d 3) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    // 3 cases: only description, description and date, description and date and time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    if (argumentWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        data.getEventList(\"Personal\").add(new Personal(argumentWords[0]));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        successfulAdd \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    } else if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            data.getEventList(\"Personal\").add(new Personal(argumentWords[0], localDate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            successfulAdd \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            data.getEventList(\"Personal\").add(new Personal(argumentWords[0], localDate, localTime));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            successfulAdd \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    System.out.println(\"Personal event creating error\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Zoom\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (argumentWords.length \u003d\u003d 2 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    // 2 cases: only have description \u0026 zoomlink , have description,zoomlink, date,time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        data.getEventList(\"Zoom\").add(new Zoom(argumentWords[0].trim(), argumentWords[1].trim()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        successfulAdd \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            data.getEventList(\"Zoom\").add(new Zoom(argumentWords[0], argumentWords[1].trim(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                                    localDate, localTime));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            successfulAdd \u003d true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    System.out.println(\"Zoom event creating error\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Timetable\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (argumentWords.length \u003d\u003d 3 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    // 2 cases: description \u0026 date \u0026 time , description \u0026 location \u0026 date \u0026 time"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    if (argumentWords.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            data.getEventList(\"Timetable\").add(new Timetable(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                                    localDate, localTime));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            successfulAdd \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            data.getEventList(\"Timetable\").add(new Timetable(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                                    argumentWords[1].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            successfulAdd \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    System.out.println(\"Timetable event creating error\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                System.out.println(\"Invalid event type to be added\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (successfulAdd) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                System.out.println(\"Error adding \" + eventType + \" event, please try again\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Invalid add command!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 133,
      "ninggggx99": 14,
      "Reinbowl": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to end program seedu.duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for exiting the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 5,
      "ninggggx99": 14,
      "Reinbowl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CheckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to check availability."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for checking availability seedu.duke"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public CheckCommand(String command) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String checkDate \u003d command.replaceFirst(\"check\", \"\").trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] datesAndTime \u003d checkDate.split(\";\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate startDate \u003d getDate(datesAndTime[0].trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate endDate \u003d getDate(datesAndTime[2].trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalTime startTime \u003d getTime(datesAndTime[1].trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalTime endTime \u003d getTime(datesAndTime[3].trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] eventTypes \u003d new String[]{\"Personal\", \"Timetable\", \"Zoom\"};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        for (String type: eventTypes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            EventList eventsList \u003d data.getEventList(type);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            eventsInTimeRange.addAll(eventsList.checkEventsInTimeRange(startDate, endDate, startTime, endTime));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        //in place of a UI function"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (eventsInTimeRange.size() \u003e 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            for (Event event: eventsInTimeRange) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                System.out.println(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ui.printNoEventInTimeRangeMessage();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalDate getDate(String stringDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] dateFormats \u003d new String[]{\"dd/MM/yy\", \"MM/yy\", \"yy\"};"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        for (String format : dateFormats) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d LocalDate.parse(stringDate.trim(), formatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                //ignore"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"Input does not match any date formats.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalTime getTime(String stringTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] timeFormats \u003d new String[]{\"HH:mm\", \"HH\", \"hh:mm a\", \"hh a\"};"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        for (String format : timeFormats) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                time \u003d LocalTime.parse(stringTime.trim(), formatter);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return time;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                //ignore"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"Input does not match any time formats.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        time \u003d LocalTime.now();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 79,
      "ninggggx99": 17,
      "Reinbowl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * abstract class for commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public abstract void execute(UserData data, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Signal exit program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return true if user give exit seedu.duke.command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 19,
      "Reinbowl": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set deadline for personal events."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting deadline seedu.duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * To change to deadline of personal event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        int withTime \u003d parseUserCommand(command, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Event eventUpdated \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (withTime \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            eventUpdated \u003d data.deadlineChangeDateOnly(index, date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else if (withTime \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            eventUpdated \u003d data.deadlineChangeDateTime(index, date, time);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            System.out.println(\"Deadline does not have index/data\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (eventUpdated !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            ui.printDeadlineChangedMessage(eventUpdated);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Parsing user command to put in the correct format for arguments and checking if its date or date and time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command user input arguments"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return update deadline with time or without time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int parseUserCommand(String command, Ui ui) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String[] commandSplit \u003d command.split(\";\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (commandSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            index \u003d Integer.parseInt(commandSplit[0].trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else if (commandSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            index \u003d Integer.parseInt(commandSplit[0].trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                String timeString \u003d commandSplit[2].trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                timeString \u003d timeString.replace(\":\", \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                time \u003d DateTimeParser.timeParser(timeString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printExceptionMessage(e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return 2;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 80,
      "Reinbowl": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set goals."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting goals seedu.duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public GoalCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d data.getGoal();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printGoalMessage(goal);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d new Goal(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            data.setGoal(goal);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printChangeGoalMessage(goal);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            //update storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 17,
      "Reinbowl": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to list events."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String listEventType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Boolean isInvalidEventType \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for listing events seedu.duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String tempEventType \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        switch (tempEventType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"zoom\":"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            listEventType \u003d \"Zoom\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"personal\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            listEventType \u003d \"Personal\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Set list event type as personal\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"timetable\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            listEventType \u003d \"Timetable\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            listEventType \u003d \"ListAll\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isInvalidEventType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            switch (listEventType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Zoom\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Personal\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Timetable\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printSpecificList(listEventType, data.getEventList(listEventType));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"ListAll\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printList(data.getAllEventLists());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 40,
      "ninggggx99": 16,
      "Reinbowl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RepeatCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to repeat task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for repeating events seedu.duke"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private int eventIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private String eventType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private int timeInterval;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private int numberOfIterations;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private boolean isValid;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Set up for the repeat command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param command user input with the format eventIndex; eventType; timeInterval; NumberofIterations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public RepeatCommand(String command) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        parseUserCommand(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void parseUserCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        int argumentNumber \u003d 4;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Split up into various components and remove trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] words \u003d command.split(\";\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            words[i] \u003d words[i].trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (words.length !\u003d argumentNumber) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            this.isValid \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        eventIndex \u003d Integer.parseInt(words[0]) - 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        eventType \u003d capitaliseFirstLetter(words[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        numberOfIterations \u003d Integer.parseInt(words[3]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String intervalWord \u003d words[2];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (intervalWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"weekly\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            timeInterval \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"monthly\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            timeInterval \u003d 2;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            timeInterval \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        isValid \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (!isValid) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error! invalid input given to repeat.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        EventList information \u003d data.getEventList(this.eventType);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Event toChange \u003d information.getEventByIndex(this.eventIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        toChange.setRepeatUnit(this.timeInterval);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        toChange.setRepeatCount(this.numberOfIterations);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(\"All done, the program is set to repeat.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function accept a word string and capitalise the first letter."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param word String containing the word to have the first letter capitalised"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String of the word with first letter capitalised"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private String capitaliseFirstLetter(String word) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        char firstLetter \u003d word.charAt(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        firstLetter \u003d Character.toUpperCase(firstLetter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String remaining \u003d word.substring(1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String capitaliseFirstLetter \u003d Character.toString(firstLetter);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return capitaliseFirstLetter + remaining;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 77,
      "ninggggx99": 17,
      "Reinbowl": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/UserData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class UserData {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEventList\u003e eventLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private Goal goal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Personal\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Timetable\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Zoom\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setGoal(null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.eventLists \u003d new ArrayList\u003c\u003e(eventLists);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void addToEventList(String name, Event e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        getEventList(name).add(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList getEventList(String name) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList e : eventLists) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (e.getName().equals(name)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return null; //change this to throw exception, list not found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEventList\u003e getAllEventLists() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return eventLists;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the user\u0027s goal."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param goal to set to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns the user\u0027s goal."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return user\u0027s goal."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Set the user\u0027s deadline for personal events with date only."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param index of event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param date  of event to be completed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public Event deadlineChangeDateOnly(int index, LocalDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        EventList personalEvent \u003d getEventList(\"Personal\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Event oldEvent \u003d personalEvent.getEventByIndex(index - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Event updateEvent \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (oldEvent !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            updateEvent \u003d new Personal(oldEvent.getDescription(), date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            getEventList(\"Personal\").setEvent(index - 1, updateEvent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return updateEvent;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Set the user\u0027s deadline for personal events with date and time."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param index of event"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param date  of event to be completed"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param time  of event to be completed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public Event deadlineChangeDateTime(int index, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        EventList personalEvent \u003d getEventList(\"Personal\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Event oldEvent \u003d personalEvent.getEventByIndex(index - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Event updateEvent \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (oldEvent !\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            updateEvent \u003d new Personal(oldEvent.getDescription(), date, time);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            getEventList(\"Personal\").setEvent(index - 1, updateEvent);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return updateEvent;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 4,
      "ninggggx99": 38,
      "Reinbowl": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public abstract class Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected int repeatCount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    protected int repeatUnit; //weekly or monthly"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    protected static final int WEEKLY \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    protected static final int MONTHLY \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Creates a new event with the given description and default its done status to false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets event\u0027s description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setRepeatCount(int repeatCount) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.repeatCount \u003d repeatCount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void setRepeatUnit(int repeatUnit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.repeatUnit \u003d repeatUnit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the event\u0027s done status to true."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of event\u0027s done status."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of event\u0027s done status."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (isDone) ? \"✓\" : \"✕\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Returns a String representation of an event\u0027s repeat status."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return string representation of event\u0027s repeat status, with starting date, repetition amount and time"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getRepeatStatus() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String dateString;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatNumber;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatTimeInterval;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        dateString \u003d this.date.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatNumber \u003d Integer.toString(repeatCount);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (repeatUnit) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case WEEKLY:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatTimeInterval \u003d \"Weekly\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case MONTHLY:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatTimeInterval \u003d \"Monthly\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatTimeInterval \u003d \"NULL\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return \"Repeat Status: \" + repeatTimeInterval + \" for \" + repeatNumber + \" time(s) starting from \" + dateString;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[\" + getStatus() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 40,
      "matthewgani": 8,
      "Reinbowl": 59
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name, ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.events \u003d new ArrayList\u003cEvent\u003e(events);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void add(Event event) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public ArrayList\u003cEvent\u003e checkEventsInTimeRange(LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                                                   LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenDate \u003d event.date.isAfter(startDate) \u0026\u0026 event.date.isBefore(endDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenDate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.date.isEqual(startDate)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d !(event.time.isBefore(startTime));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.date.isEqual(endDate)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d !(event.time.isAfter(endTime));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenTime) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.add(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return eventsInTimeRange;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Event getEventByIndex(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return events.get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //event not found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Event getNewestEvent() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setEvent(int index, Event e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        events.set(index, e);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 17,
      "marcursor": 31,
      "matthewgani": 7,
      "ninggggx99": 4,
      "Reinbowl": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Goal extends Event {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of goal."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of goal."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Personal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Personal extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time, int repeatCount) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setRepeatCount(repeatCount);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, date, time, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Personal(String description, LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this(description, date, null, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (!hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 25,
      "ninggggx99": 1,
      "Reinbowl": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Timetable extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, String location, LocalDate date, LocalTime time, int repeatCount) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setLocation(location);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setRepeatCount(repeatCount);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, String location, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, location, date, time, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, date, time);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasLocation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \", Location: \" + location + \" on \"  + date + \", \" + time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 14,
      "Reinbowl": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Zoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Zoom extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String zoomLink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink, LocalDate date, LocalTime time, int repeatCount) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setZoomLink(zoomLink);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setRepeatCount(repeatCount);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, zoomLink, date, time, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, zoomLink, null, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink + \" on \"  + date + \", \" + time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 17,
      "Reinbowl": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String[] dateformatStrings \u003d {\"yyyy/M/d\", \"yyyy-M-d\", \"d/M/yy\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        \"d/M/yyyy\", \"d-M-yy\", \"d-M-yyyy\"};"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String[] timeformatStrings \u003d {\"h:m a\", \"hhmm a\", \"H:m\", \"HHmm\"};"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given date through the acceptable formats."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable date format is dd/mm/yy, yyyy/mm/dd, slashes can be replace with dashes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param date given to parse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalDate object containing given date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @throws Exception if date format is not accepted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static LocalDate dateParser(String date) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        while (i \u003c dateformatStrings.length) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateformatStrings[i]);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        throw new Exception(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given time through the acceptable formats."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable time format is both 12 hour and 24 hour, omitting colon requires the format hhmm."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param time given to parse."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalTime object containing the given time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @throws Exception if time format is not accepted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static LocalTime timeParser(String time) throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        time \u003d time.toUpperCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        while (i \u003c timeformatStrings.length) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(timeformatStrings[i]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalTime.parse(time, formatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        throw new Exception(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.CheckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.RepeatCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.GoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Default Constructor for parser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function takes in user input and then generates the correct command requested from the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param userInput String containing what is typed by the user on the computer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Command from what is written by user. Return null if incorrect command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Command parse(String userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (words.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, no command entered\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String commandWord \u003d words[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] argumentWords \u003d Arrays.copyOfRange(words, 1, words.length);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return new AddCommand(argumentWords);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new ListCommand(argument);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"check\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new CheckCommand(argument);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"repeat\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new RepeatCommand(argument);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"goal\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new GoalCommand(argument);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new DeadlineCommand(argument);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error! Unrecognised command\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 72,
      "matthewgani": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": " * Saves and loads the events list to and from an external txt file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Path fileNamePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Path fileDirectoryPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a new storage manager that can load and save files to and from a given filepath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param initPath is the name of the filepath which files are saved to and loaded from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Storage(String initPath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String locationOfFileName \u003d initPath + \",data.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Directory words only contain info on making the folder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //File words contain the info on how to make the file itself"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] pathDirectoryWords \u003d initPath.split(\",\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] pathFileWords \u003d initPath.split(\",\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileDirectoryPath \u003d createPath(pathDirectoryWords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileNamePath \u003d createPath(pathFileWords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a folder for the events list if it does not exist yet."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    protected void initialiseFolder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (!Files.exists(fileNamePath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Files.createDirectory(fileDirectoryPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                System.out.println(\"IO exception encountered when creating data directory.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Saves events to an external txt file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param fileName is the file to save events to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param eventsList is the events list to be saved to an external txt file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws IOException if the named file does not exist and cannot be created, or cannot be opened"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void saveFile(String fileName, ArrayList\u003cEvent\u003e eventsList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Loads events from an external txt file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param fileName is the file to load events from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws FileNotFoundException if no file with the given fileName is found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void loadFile(String fileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        List\u003cString\u003e eventInfo;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        ArrayList\u003cEvent\u003e loadedEventsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function accepts a string and creates a path object originating from the user directory."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param pathName is a string array which accepts in the path name words, each word represents a folder"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Path object indicating the location of the pathName keyed in initially."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path createPath(String[] pathName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String origin \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Path newPath \u003d Paths.get(origin, pathName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function gives a string containing the Directory location."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String containing directory location"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getDirectoryString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return fileDirectoryPath.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function gives a string containng the file full location path name."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String containing the file\u0027s location"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getFileLocationString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return fileNamePath.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 47,
      "marcursor": 60
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    Scanner in;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"_________________________________\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Welcome to scheduler--;!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Thank you for using scheduler--;!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"We hope to see you soon!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String receiveCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printEventAddedMessage(Event event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printRepeatEventMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printGoalMessage(Event goal) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Goal: \" + goal);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"You have no goal! Why not set one now?\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printChangeGoalMessage(Event goal) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"Goal changed to: \" + goal);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printCheckMessage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printSpecificList(String eventType, EventList eventList) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int eventCount \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (eventList.getEvents().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"You have no events under \" + eventType + \".\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Here is a list of your \" + eventType + \" events:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            for (Event event : eventList.getEvents()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                eventCount++;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                System.out.println(eventCount + \". \" + event.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printList(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int eventCount \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Here is a list of all your events!\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (EventList eventList : eventLists) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (eventList.getEvents().size() \u003e 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                System.out.println(\"Under \" + eventList.getName() + \" events, you have: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                for (Event event : eventList.getEvents()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    eventCount++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    System.out.println(eventCount + \". \" + event.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                System.out.println(\"You have no events under \" + eventList.getName() + \".\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventCount \u003d 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void printDeadlineChangedMessage(Event eventUpdated) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(eventUpdated);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageSavedMessage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file has successfully been saved!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageLoadingErrorMessage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file does not exist or has been corrupted!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printInvalidDateMessage() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The date entered is invalid!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printInvalidCommandMessage() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Sorry, I did not understand your command!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printNoEventInTimeRangeMessage() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"There are no events going on during that period.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints exception message."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param exceptionMessage String of warning message from various exceptions."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExceptionMessage(String exceptionMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(exceptionMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 4,
      "matthewgani": 118,
      "ninggggx99": 3,
      "Reinbowl": 9
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CheckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "class CheckCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventInTimeRange_printEventsInTimeRange() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput.split(\" \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"check 04/05/20; 13:00; 05/05/20; 14:00\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList personalList \u003d  data.getEventList(\"Personal\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(personalList.getEvents().get(0).toString(), outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventOutsideTimeRange_printEventsInTimeRange() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput.split(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"check 04/05/20; 13:00; 04/05/20; 14:00\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(\"There are no events going on during that period.\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 74
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "class DeadlineCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withDate_printDeadline() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input.split(\" \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withDateAndTime_printDeadline() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input.split(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07, 23:20\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 77
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/GoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "class GoalCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_oneString_printChangeGoal() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(\"Goal changed to: \" + inputString, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_nullInput_printGoal() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(\"You have no goal! Why not set one now?\", outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_twoSeparateStringThenNullInput_printChangeGoal() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString1 \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString2 \u003d \"Float like a bumblebee\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(inputString2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal: \" + inputString2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 71
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    void execute_noEvent_printNoEventsInLists() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Execute list command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // if the user enters \"list\" to list all events, the input string will be an empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command listCommand \u003d new ListCommand(inputString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"Here is a list of all your events!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"You have no events under Personal.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"You have no events under Timetable.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"You have no events under Zoom.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    void execute_zoomEvent_listZoomEvents() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event to data"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"zoom Math class; zoom.com; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput.split(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Execute list command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String inputString \u003d \"zoom\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command listCommand \u003d new ListCommand(inputString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"[Z][✕] Math class, Link: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"Here is a list of your Zoom events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"1. [Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 79
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/RepeatCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "class RepeatCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void repeat_validPersonalEventIndex_repeatPassMessagePrinted() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create the user data to have one item first"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String userInput \u003d \"personal holiday; 2020-10-01\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        AddCommand addPersonalEvent \u003d new AddCommand(userInput.split(\" \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //execute the repeat command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        RepeatCommand testing \u003d new RepeatCommand(\"1; personal; weekly; 3\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        testing.execute(data, ui, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //retrieve the modified item"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Event item \u003d data.getEventList(\"Personal\").getEventByIndex(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"Repeat Status: Weekly for 3 time(s) starting from 2020-10-01\", item.getRepeatStatus());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 33
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  }
]
