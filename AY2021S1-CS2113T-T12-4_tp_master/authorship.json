[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 1,
      "-": 46
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Colin Ng | [Github](https://github.com/Colin386) | [Portfolio](docs/team/colinNg.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Tan | [Github](https://github.com/marcursor) | [Portfolio](docs/team/marcustan.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Matthew Gani | [Github](https://github.com/matthewgani) | [Portfolio](docs/team/matthewgani.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Low Qing Ning | [Github](https://github.com/ninggggx99) | [Portfolio](docs/team/lowqingning.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Ng | [Github](https://github.com/reinbowl) | [Portfolio](team/marcusng.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 1,
      "matthewgani": 1,
      "ninggggx99": 2,
      "-": 4,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "{Table of contents goes here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Setting up, getting started"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Check feature"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "The check feature is implemented using the `CheckCommand` class. `CheckCommand` accesses the `Event`s stored within `EventList`s in order to determine if events are occurring within a given time period. It implements the following operations:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- `CheckCommand#getDate(stringDate)` -- Parses a given string to get a LocalDate variable (either the start or end date for the time period)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- `CheckCommand#getTime(stringTime)` -- Parses a given string to get a LocalTime variable (either the start or end time for the time period)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- `CheckCommand#checkEventsInTimeRange(eventsList, startDate, endDate, startTime, endTime)` -- Checks each event in the eventsList to see if they occur within the time period defined in the command, and saves all coinciding events in an ArrayList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "These operations are not exposed, and are used as private methods within the `CheckCommand` interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Given below is an example usage scenario and how the check feature functions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 1. The user inputs `check 11/5/2020; 5:15 PM; 15/5/2020; 9 PM` in order to check for events occurring between 11th May 2020, 5:15 pm and 15th May 2020, 9:00 pm. This input is received by the Ui, which processes it into a string. The string is parsed by the Parser, which returns a CheckCommand with the date and time parameters stored in it as a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 2. `CheckCommand#execute()` is called. The command string containing the date and time parameters are split into a String array to separate the different parameters. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 3. Within `CheckCommand#execute()`, `CheckCommand#getDate()` is called to parse the start and end dates, and `CheckCommand#getTime()` is called to parse the start and end times."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "This sequence diagram shows how the `getDate` method functions:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![Sequence Diagram for getDate](/docs/diagrams/getDate_seq_diagram.jpg)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 4. Within `CheckCommand#execute()`, the start date time and end date time is passed to `CheckCommand#checkEventsInTimeRange()` along with an `EventList` (i.e. Zoom, Personal or Timetable). This method checks each `Event` in the `EventList` to determine if the event occurs within the time period. If the event date time coincides with the time period, the event is added to an ArrayList that stores all the coinciding events in the current `EventList`. This is done for each `EventList`. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 5. The contents of the ArrayLists returned by `CheckCommand#checkEventsInTimeRange()` are combined into a single ArrayList, and a new `EventList` (\"coinciding\") is created using this combined list of events."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 6. `Ui#printList()` is called to print the list of coinciding events."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "The following sequence diagram shows how the check operation works:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![Sequence Diagram for CheckCommand](/docs/diagrams/CheckCommand_seq_diagram.jpg)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "#### [Proposed] Deadline feature"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The user executes ```deadline 1; 7/10/20; 11:20 PM``` command to set the deadline for the 1st event in Personal event list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "to be on the 7th October 2020 at 11:20 PM. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The ```deadline``` command calls ```DeadlineCommand#execute()```, adding/updating the personal event deadline. \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Given below is how the deadline command behave: \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "  \u003cimg width\u003d\"414\" height\u003d\"562\" src\u003d\"/docs/diagrams/DeadlineScenario.jpg\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The following sequence diagram shows how the deadline operation works: \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "![Sequence Diagram for Deadline Command](/docs/diagrams/DeadlineSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "#### [Proposed] Goal feature"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "##### Proposed Implementation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The proposed goal feature is achieved by `GoalCommand`. It either prints the current goal stored internally in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "`UserData` if there is one, or it sets the input as the new goal by replacing the previous goal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Given below is an example usage scenario of the goal feature."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 1. The user launches the application for the first time. `Ui#printGoal` is called, "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "a line informing them they have no goal is printed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 2. The user executes `goal save money` command to set the goal as \"save money\"."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The `goal` command is passed through a parser to return the GoalCommand with arguments initialised."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 3. `GoalCommand#execute()` is called, setting the goal in `UserData` to \"save money\". The change is printed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "with `Ui#printChangeGoal()`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 4. The user executes `goal` command to print the current goal."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The `goal` command is passed through a parser to return the GoalCommand with blank arguments."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 5.  `GoalCommand#execute()` is called, to retrieve the current goal in `UserData` and print it"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "with `Ui#printGoal()`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The following sequence diagram shows how the `goal save money` command is parsed:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "  \u003cimg src\u003d\"/docs/diagrams/GoalParseSequenceDiagram.jpg\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The following sequence diagram shows how `GoalCommand#execute()` works:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "  \u003cimg src\u003d\"/docs/diagrams/GoalExecuteSequenceDiagram.jpg\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Add Feature"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The add feature in the program allows the user to create one of 3 different events in scheduler--;."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "These 3 are the Personal, Zoom and Timetable events. These events have varying numbers of arguments or fields that can "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "be inserted upon creation. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Firstly, to begin, the user needs to key in the command `add [event type] [description]; [date]; [time]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The optional fields to fill in like the link and location for the zoom and timetable classes can be inserted respectively . For example,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`add zoom cs2113t meeting; zoom.sg; 16/09/20; 2100`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "When a command like this is called, the constructor to `addCommand` will be able to detect the event type based on the user\u0027s input. It then stores the event type in that instance of the addCommand."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Next, when `addCommand#execute` is called from the main, this method will call the respective method to create one of the three events. These methods are `addCommand#addPersonal`, `addCommand#addZoom`, and `addCommand#addTimetable`."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The personal event can contain the following fields: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description and date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. Description, date and time"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The zoom event can contain the following fields:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description and link"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description, link, date and time"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The Timetable event can contain the following fields:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description, date and time"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description, location, date and time"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The fields for what each event can contain were chosen based on what we as a team thought were important fields for the respective event types."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "However, these methods can easily be edited to accept different numbers of fields if we change our minds in the future."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Given below is an example scenario of the add feature:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 1. The user launches the application for the first time. There will be no events stored at the moment."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 2. The user executes `add zoom cs2113t meeting; zoom.sg; 16/09/20; 2100`. The `addCommand` instance is created and detects that the event is of Zoom type."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 3. `addCommand#execute` is called. The class knows the current addCommand is of Zoom type so it calls `addCommand#addZoom`."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 4. `addCommand#addZoom` detects there are 4 fields in the command, separated by semicolons, and uses this to create a new Zoom event."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 5. The Zoom event is then added to the user\u0027s `UserData` for further use."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The following sequence diagram shows how the whole add feature works: \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![Sequence Diagram for Add Command](/docs/diagrams/addCommand.jpg)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "#### Repeat Feature"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeat feature on the program allows for the user to be able to make certain events repeat several times over a defined time period."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "For instance, the user can request for a personal event to be repeated monthly for four months. To run the program, the user will need to key in the command `repeat [event type] [index] [timeUnit] [count]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|Argument| Description |"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|event type|What type of event is to be repeated? Accepted arguments are `personal`, `timetable` or `zoom`|"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|index|Index number of the event to be repeated that is stored on the Event List|"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|timeUnit|For what unit of time each event is to be repeated. Accepted arguments are `daily`, `weekly` and `monthly`|"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|count|Integer indicating how many times the event is to be repeated|"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "For example, to repeat a personal event located at index 2 for 3 days, the user will key in this: `repeat personal 2 daily 3`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The following sequence diagram shows the overall process of repeating an event:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command](/docs/diagrams/RepeatScenario.jpg)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The steps to repeating the command will be described in the following sections. "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 1: Obtaining the event information"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeat command first locates the event that is to be repeated along with its starting date."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Next, it creates an empty ArrayList called `repeatEventList` that will contain all repeated events."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command step 1](/docs/diagrams/repeatstep1.jpg)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 2: Incrementing the Original Date"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeatCommand object will now call upon Event to increment the date by a fixed unit of time. In the following diagram, it shows how the program flow will work should a monthly repeat increment be set. "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The increment date will be assigned the name `repeatDate`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command step 2](/docs/diagrams/repeatstep2.jpg)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 3: Set Repeat type"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeatCommand now will set the original Event to have a repeat type setting. In the diagram\u0027s example, it will be set to `monthly`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command step 3](/docs/diagrams/repeatstep3.jpg)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 4: Clone the event"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The original event is now cloned as shown in the following sequence diagram."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command step 4](/docs/diagrams/repeatstep4.jpg)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 5: Add the cloned activity"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The cloned activity will now have its date set to be `repeatDate`. This new activity is now added into the `repeatEventList` as shwon in the following diagram."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command step 5](/docs/diagrams/repeatstep5.jpg)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 6: Repeat steps 2 to 5"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Steps 2 to 5 are repeated up till the number specified by `count` as shown in the loop."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command step 6](/docs/diagrams/repeatstep6.jpg)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 7: Assign the ArrayList as the RepeatEventList attribute of the original event."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Finally, set the `repeatEventList` using the `setRepeatEventList` command as shown in the following section of the sequence diagram. The results of this process is printed and control returns back to the main program."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Sequence Diagram for Repeat Command step 7](/docs/diagrams/repeatstep7.jpg)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": " "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcursor"
        },
        "content": " "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Documentation, logging, testing, configuration, dev-ops (not sure what this entails)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Appendix: Requirements"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcursor"
        },
        "content": "##### Target user profile"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003ehas a need to organise events using scheduler\u003c/li\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eprefer desktop application\u003c/li\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003ecan type fast\u003c/li\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eprefer typing to mouse interactions\u003c/li\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eis reasonably comfortable using CLI apps\u003c/li\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marcursor"
        },
        "content": "##### Value proposition"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Use Cases"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003col\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eWork on any mainstream OS that has Java 11 or above installed\u003c/li\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eA user who has faster typing speed than average should be able to use this program with ease\u003c/li\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 64,
      "marcursor": 50,
      "matthewgani": 46,
      "ninggggx99": 26,
      "-": 28,
      "Reinbowl": 37
    }
  },
  {
    "path": "docs/team/colinNg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "# Colin Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Changed about us file"
      }
    ],
    "authorContributionMap": {
      "Colin386": 7
    }
  },
  {
    "path": "docs/team/lowqingning.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "# Low Qing Ning - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/marcusng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "# Marcus Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/team/marcustan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "# Marcus Tan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "marcursor": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private UserData data;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Command com;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Parser currentParse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    //Location refers to the \"data\" directory stored in the folder of this application"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static final String FILELOCATION \u003d \"data\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Constructor for the Schedule components."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param filePath is a string containing the location of where the data text files are to be stored"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        data \u003d new UserData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        currentParse \u003d new Parser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main run function. Loops until the bye command is entered."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Command c \u003d currentParse.parse(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main function where the program starts."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param args No arguments entered so far"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());*/"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Duke duke \u003d new Duke(FILELOCATION);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 59,
      "marcursor": 3,
      "ninggggx99": 4,
      "-": 19,
      "Reinbowl": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Zoom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.EventAddErrorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to add events."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String eventType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Boolean isInvalidEventType \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for adding events seedu.duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public AddCommand(String command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] commandWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String tempEventType \u003d commandWords[0].toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        switch (tempEventType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"zoom\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Zoom\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"personal\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Personal\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"timetable\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Timetable\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (commandWords.length \u003d\u003d 1 \u0026\u0026 eventType.equals(\"Personal\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // empty description, even with valid event types"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Empty parameters for Personal event!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] argumentWords \u003d Arrays.copyOfRange(commandWords, 1, commandWords.length);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds an event to individual eventLists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] argumentWords \u003d argument.split(\";\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isInvalidEventType) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                switch (eventType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                case \"Personal\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    addPersonal(data, ui, argumentWords);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                case \"Zoom\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    addZoom(data, ui, argumentWords);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                case \"Timetable\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    addTimetable(data, ui, argumentWords);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new EventAddErrorException(\"Invalid event type ot be added!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                e.printErrorMessage();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new EventAddErrorException(\"Invalid event type to add!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Timetable event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addTimetable(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003d\u003d 3 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 2 cases: description \u0026 date \u0026 time , description \u0026 location \u0026 date \u0026 time"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Timetable\", new Timetable(argumentWords[0].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Timetable\", new Timetable(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            argumentWords[1].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Timetable event!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Personal event."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addPersonal(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003e\u003d 1 \u0026\u0026 argumentWords.length \u003c\u003d 3) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 3 cases: only description, description and date, description and date and time"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim(), localDate));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Personal event!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Zoom event."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addZoom(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003d\u003d 2 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 2 cases: only have description \u0026 zoomlink , have description,zoomlink, date,time"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Zoom\", new Zoom(argumentWords[0].trim(), argumentWords[1].trim()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Zoom\", new Zoom(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            argumentWords[1].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Zoom event!\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 192,
      "ninggggx99": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to end program seedu.duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for exiting the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 5,
      "ninggggx99": 14,
      "Reinbowl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CheckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TryRegularParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.timeParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to check availability."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for checking availability seedu.duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public CheckCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Execute function for the command to state user\u0027s availability in a given period."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DukeException if insufficient fields are given after the \"check\" keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] datesAndTime \u003d command.split(\";\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate startDate \u003d getDate(datesAndTime[0].trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate endDate \u003d getDate(datesAndTime[2].trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert startDate !\u003d null : \"null date read for startDate\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert endDate !\u003d null : \"null date read for endDate\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalTime startTime \u003d getTime(datesAndTime[1].trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalTime endTime \u003d getTime(datesAndTime[3].trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert startTime !\u003d null : \"null time read for startTime\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert endTime !\u003d null : \"null time read for endTime\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String[] eventTypes \u003d new String[]{\"Personal\", \"Timetable\", \"Zoom\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            for (String type: eventTypes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                EventList eventsList \u003d data.getEventList(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.addAll(checkEventsInTimeRange(eventsList, startDate, endDate, startTime, endTime));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            EventList coinciding \u003d new EventList(\"coinciding\", eventsInTimeRange);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ui.printList(coinciding);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Insufficient fields provided to check events.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Date parser that interprets a date from a given string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param stringDate the string containing date information"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return a LocalDate corresponding to the date in stringDate or the current date if no date is found in the string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DateErrorException if stringDate does not correspond to a valid date format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalDate getDate(String stringDate) throws DateErrorException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] dateFields \u003d stringDate.replace(\"-\",\"/\").split(\"/\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (stringDate.isBlank()) { // if date is blank, defaults to current date"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return currentDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            switch (dateFields.length) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 1: // only year is given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter yearFormat \u003d DateTimeFormatter.ofPattern(\"yy[yy]\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                Year givenYear \u003d Year.parse(stringDate, yearFormat);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d currentDate.with(givenYear);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 2: // month and year is given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter yearMonthFormat \u003d DateTimeFormatter.ofPattern(\"M/yy[yy]\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                YearMonth givenYearMonth \u003d YearMonth.parse(stringDate, yearMonthFormat);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d currentDate.with(givenYearMonth);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 3: // day, month and year given"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter dayMonthYearFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yy[yy]\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d LocalDate.parse(stringDate, dayMonthYearFormat);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Time parser that interprets a time from a given string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param stringTime the string containing time information"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return a LocalTime corresponding to the time in stringTime or the current time if no time is found in the string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws TimeErrorException if stringTime does not correspond to a valid time format"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalTime getTime(String stringTime) throws TimeErrorException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (stringTime.isBlank()) { // if blank time is provided, default to current time"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h:m a\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String currentTime \u003d LocalTime.now().format(timeFormatter);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            time \u003d LocalTime.parse(currentTime, timeFormatter);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] stringTimeArray \u003d stringTime.split(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (stringTimeArray.length \u003d\u003d 2) { // 12 hour format hh a"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                int givenTwelveHour \u003d Integer.parseInt(stringTimeArray[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                String amPmIndicator \u003d stringTimeArray[1];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (givenTwelveHour \u003e\u003d 0 \u0026 givenTwelveHour \u003c\u003d 12) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    time \u003d timeParser(givenTwelveHour + \":00 \" + amPmIndicator); // default to minute 00"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    return time;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    throw new TryRegularParserException(\"hh a format time requires hours between 1-12.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (stringTimeArray.length \u003d\u003d 1) { // 24 hour format HH"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                int givenTwentyFourHour \u003d Integer.parseInt(stringTimeArray[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (givenTwentyFourHour \u003e\u003d 0 \u0026 givenTwentyFourHour \u003c\u003d 24) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    time \u003d timeParser(givenTwentyFourHour + \":00\"); // default to minute 00"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    return time;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    throw new TryRegularParserException(\"HH format time requires hours between 0-23.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException | TryRegularParserException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            // if hh:mm, HH:mm or other invalid non integers is given"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            time \u003d timeParser(stringTime); // exception will be thrown if invalid non-integer is given"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Checks for events within a given time period."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param eventsList the eventsList containing events to be checked"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param startDate the start date of the time period to be checked"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param endDate the end date of the time period to be checked"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param startTime the start time of the time period to be checked"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param endTime the end time of the time period to be checked"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return an ArrayList of events found occurring during the time period"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public ArrayList\u003cEvent\u003e checkEventsInTimeRange(EventList eventsList, LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                                                   LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        for (Event event : eventsList.getEvents()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenDate \u003d event.getDate().isAfter(startDate) \u0026\u0026 event.getDate().isBefore(endDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenDate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.getDate().isEqual(startDate)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d !(event.getTime().isBefore(startTime));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.getDate().isEqual(endDate)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d !(event.getTime().isAfter(endTime));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenTime) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.add(event);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return eventsInTimeRange;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 181,
      "ninggggx99": 17,
      "Reinbowl": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * abstract class for commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public abstract void execute(UserData data, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Signal exit program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return true if user give exit seedu.duke.command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 2,
      "ninggggx99": 19,
      "Reinbowl": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set deadline for personal events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting deadline seedu.duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * To change to deadline of personal event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            parseUserCommand(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            EventList personalList \u003d data.getEventList(\"Personal\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Event updatedEvent \u003d personalList.getEventByIndex(index - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (updatedEvent !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                Personal event \u003d (Personal) updatedEvent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasDate(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasTime(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setDate(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasDate(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasTime(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setTime(time);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printDeadlineChangedMessage(updatedEvent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new InvalidIndexException(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Parsing user command to put in the correct format for arguments and checking if its date or date and time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command user input arguments"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private void parseUserCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String[] commandSplit \u003d command.split(\";\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (commandSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                index \u003d parsingNumber(commandSplit[0].trim());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert date !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new WrongNumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else if (commandSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                index \u003d parsingNumber(commandSplit[0].trim());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert date !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                String timeString \u003d commandSplit[2].trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                timeString \u003d timeString.replace(\":\", \"\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                time \u003d DateTimeParser.timeParser(timeString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert time !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new WrongNumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Deadline!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Check if index is numerical format."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param number index in string format"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return index of event"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int parsingNumber(String number) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            int index \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new NumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 125,
      "Reinbowl": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set goals."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting goals seedu.duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public GoalCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert command !\u003d null : \"String for goal command should not be null\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d data.getGoal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printGoalMessage(goal);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            switch (command.toLowerCase()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case \"na\": case \"nil\": case \"delete\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                data.setGoal(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                goal \u003d new Goal(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                data.setGoal(goal);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printChangeGoalMessage(goal);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            //update storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 17,
      "Reinbowl": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to list events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for listing events seedu.duke"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEventList\u003e eventLists \u003d data.getAllEventLists();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printAvailableList(eventLists);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else if (command.equals(\"All\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                ui.printList(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printList(data.getEventList(command));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 6,
      "ninggggx99": 17,
      "Reinbowl": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RepeatCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingDeadlineRepeatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to repeat task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String DAILY \u003d \"DAILY\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String WEEKLY \u003d \"WEEKLY\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String MONTHLY \u003d \"MONTHLY\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String COMMANDTYPE_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String COMMANDTYPE_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static final String COMMANDTYPE_ERROR \u003d \"error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Constructor for the repeat command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param command user input with the format eventIndex; eventType; timeInterval; NumberofIterations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public RepeatCommand(String command, String commandType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case COMMANDTYPE_ADD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            executeAdd(data, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case COMMANDTYPE_LIST:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            executeList(data, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case COMMANDTYPE_ERROR:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            executeNull(data, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Static parser for repeat command creation. Distinguish between adding repeated dates or listing current repeats."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param input String containing user inputs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return RepeatCommand set to either add additional dates or set to list out current dates in event"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        switch (words.length) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[0] \u003d formatListName(words[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d String.join(\" \", words);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new RepeatCommand(input, COMMANDTYPE_LIST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[0] \u003d formatListName(words[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[2] \u003d words[2].toUpperCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[3]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d String.join(\" \", words);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new RepeatCommand(input, COMMANDTYPE_ADD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String errorMessage \u003d \"Wrong number of arguments provided\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new WrongNumberOfArgumentsException(errorMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Change the name of the list to ensure the first character is capitalised."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param name String containing name of list for the first character to be capitalised"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String with first character capitalised"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static String formatListName(String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return name.substring(0, 1).toUpperCase() + name.substring(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Checks if the string can be converted to an integer."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param number String containing the String form of an integer"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static void isValidNumber(String number) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Integer.parseInt(number);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new WrongNumberFormatException(\"Numbers must be in numerical format\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * List command. Used to show dates of repeated events."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data location where all user event information is stored"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param ui   User Interface class for printing on screens"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private void executeList(UserData data, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        EventList eventList \u003d data.getEventList(words[0]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Event repeatEvent \u003d eventList.getEventByIndex(index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printRepeatList(repeatEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Add command. Used to add repeated dates to an event."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data    location where all user event information is stored"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param ui      User Interface class for printing on screens"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param storage File storage location on computer"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void executeAdd(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        EventList eventList \u003d data.getEventList(words[0]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Event eventToRepeat \u003d eventList.getEventByIndex(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        LocalDate startDate \u003d eventToRepeat.getDate();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new MissingDeadlineRepeatException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String repeatType \u003d words[2];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int count \u003d Integer.parseInt(words[3]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeat(eventToRepeat, startDate, repeatType, count);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printRepeatAdd(eventToRepeat);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void repeat(Event eventToRepeat, LocalDate startDate, String repeatType, int count) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            LocalDate repeatDate;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            switch (repeatType) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case MONTHLY:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusMonths(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusWeeks(i);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusDays(i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                throw new InvalidTimeUnitException(repeatType);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            eventToRepeat.setRepeatType(repeatType);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Event repeatEvent;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatEvent \u003d eventToRepeat.clone();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                throw new DukeException(\"Cant clone\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            repeatEvent.setDate(repeatDate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            repeatEventList.add(repeatEvent);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventToRepeat.setRepeatEventList(repeatEventList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void executeNull(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 71,
      "ninggggx99": 19,
      "Reinbowl": 91
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/UserData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class UserData {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEventList\u003e eventLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private Goal goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Personal\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Timetable\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Zoom\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setGoal(null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.eventLists \u003d new ArrayList\u003c\u003e(eventLists);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void addToEventList(String name, Event e) throws InvalidListException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert e !\u003d null : \"event cannot be null\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        getEventList(name).add(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList getEventList(String name) throws InvalidListException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert name !\u003d null : \"name should not be null\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList e : eventLists) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (e.getName().equals(name)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        throw new InvalidListException(name + \" list does not exist.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEventList\u003e getAllEventLists() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return eventLists;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the user\u0027s goal."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param goal to set to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns the user\u0027s goal."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return user\u0027s goal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 4,
      "ninggggx99": 2,
      "Reinbowl": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public abstract class Event implements Cloneable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected ArrayList\u003cEvent\u003e repeatEventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String repeatType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Creates a new event with the given description and default its done status to false."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeatType \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeatEventList \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets event\u0027s description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setRepeatType(String repeatType) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.repeatType \u003d repeatType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setRepeatEventList(ArrayList\u003cEvent\u003e repeatEventList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.repeatEventList \u003d repeatEventList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the event\u0027s done status to true."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of event\u0027s done status."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of event\u0027s done status."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (isDone) ? \"✓\" : \"✕\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Gets date of the event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return LocalDate object containing the date of the event"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Gets time of the event."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return LocalTime object containing the time of the event"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getRepeatEventList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatEventList;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getRepeatType() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatType.toLowerCase();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public int getRepeatCount() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatEventList.size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Event clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Event) super.clone();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[\" + getStatus() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 29,
      "matthewgani": 4,
      "Reinbowl": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name, ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.events \u003d new ArrayList\u003cEvent\u003e(events);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void add(Event event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public Event getEventByIndex(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return events.get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new InvalidIndexException(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Event getNewestEvent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 10,
      "marcursor": 5,
      "matthewgani": 7,
      "ninggggx99": 6,
      "Reinbowl": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of goal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of goal."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Personal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Personal extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time, int repeatCount) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, date, time, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Personal(String description, LocalDate date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this(description, date, null, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setHasDate(Boolean hasDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.hasDate \u003d hasDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setHasTime(Boolean hasTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.hasTime \u003d hasTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Personal) super.clone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (!hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 25,
      "ninggggx99": 9,
      "Reinbowl": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Timetable extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasLocation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, String location, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setLocation(location);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, date, time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Timetable) super.clone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasLocation) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \", Location: \" + location + \" on \"  + date + \", \" + time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 13,
      "Reinbowl": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Zoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Zoom extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String zoomLink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setZoomLink(zoomLink);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, zoomLink, null, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Zoom) super.clone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 15,
      "Reinbowl": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DateErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DateErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DateErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 5,
      "marcursor": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EventAddErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class EventAddErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public EventAddErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class InvalidListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public InvalidListException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidTimeUnitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class InvalidTimeUnitException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public InvalidTimeUnitException(String wrongTimeUnit) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(wrongTimeUnit + \" is not a valid time unit. Valid types are: daily, weekly, monthly\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingDeadlineRepeatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class MissingDeadlineRepeatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public MissingDeadlineRepeatException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(\"Error! You cannot repeat an event that has no deadline!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TimeErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class TimeErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public TimeErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TryRegularParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class TryRegularParserException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public TryRegularParserException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/WrongNumberFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class WrongNumberFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public WrongNumberFormatException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/WrongNumberOfArgumentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class WrongNumberOfArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public WrongNumberOfArgumentsException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private static final String[] dateFormatStrings \u003d {\"yyyy/M/d\", \"yyyy-M-d\", \"d/M/yy\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        \"d/M/yyyy\", \"d-M-yy\", \"d-M-yyyy\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private static final String[] timeFormatStrings \u003d {\"h:m a\", \"hhmm a\", \"H:m\", \"HHmm\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given date through the acceptable formats."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable date format is dd/mm/yy, yyyy/mm/dd, slashes can be replace with dashes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param date given to parse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalDate object containing given date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DateErrorException if date format is not accepted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static LocalDate dateParser(String date) throws DateErrorException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert date !\u003d null : \"date cannot be null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        while (i \u003c dateFormatStrings.length) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateFormatStrings[i]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given time through the acceptable formats."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable time format is both 12 hour and 24 hour, omitting colon requires the format hhmm."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param time given to parse."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalTime object containing the given time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws TimeErrorException if time format is not accepted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static LocalTime timeParser(String time) throws TimeErrorException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert time !\u003d null : \"time cannot be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        time \u003d time.toUpperCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        while (i \u003c timeFormatStrings.length) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(timeFormatStrings[i]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalTime.parse(time, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 15,
      "Reinbowl": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.CheckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.RepeatCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.GoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Default Constructor for parser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function takes in user input and then generates the correct command requested from the user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param userInput String containing what is typed by the user on the computer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Command from what is written by user. Return null if incorrect command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (words.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, no command entered\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String commandWord \u003d words[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] argumentWords \u003d Arrays.copyOfRange(words, 1, words.length);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return new AddCommand(argument);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return ListCommand.parse(argument);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"check\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return new CheckCommand(argument + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"repeat\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return RepeatCommand.parse(argument);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"goal\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new GoalCommand(argument);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new DeadlineCommand(argument);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            throw new DukeException(\"Invalid Command.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 67,
      "marcursor": 1,
      "matthewgani": 1,
      "Reinbowl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": " * Saves and loads the events list to and from an external txt file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Path fileNamePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Path fileDirectoryPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a new storage manager that can load and save files to and from a given filepath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param initPath is the name of the filepath which files are saved to and loaded from"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Storage(String initPath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String locationOfFileName \u003d initPath + \",data.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Directory words only contain info on making the folder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //File words contain the info on how to make the file itself"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] pathDirectoryWords \u003d initPath.split(\",\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] pathFileWords \u003d initPath.split(\",\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileDirectoryPath \u003d createPath(pathDirectoryWords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileNamePath \u003d createPath(pathFileWords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a folder for the events list if it does not exist yet."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    protected void initialiseFolder() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (!Files.exists(fileNamePath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Files.createDirectory(fileDirectoryPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                System.out.println(\"IO exception encountered when creating data directory.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Saves events to an external txt file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param fileName is the file to save events to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param eventsList is the events list to be saved to an external txt file"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws IOException if the named file does not exist and cannot be created, or cannot be opened"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void saveFile(String fileName, ArrayList\u003cEvent\u003e eventsList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        FileWriter fw \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Loads events from an external txt file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param fileName is the file to load events from"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws FileNotFoundException if no file with the given fileName is found"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void loadFile(String fileName) throws FileNotFoundException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        List\u003cString\u003e eventInfo;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        ArrayList\u003cEvent\u003e loadedEventsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function accepts a string and creates a path object originating from the user directory."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param pathName is a string array which accepts in the path name words, each word represents a folder"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Path object indicating the location of the pathName keyed in initially."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path createPath(String[] pathName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String origin \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Path newPath \u003d Paths.get(origin, pathName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function gives a string containing the Directory location."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String containing directory location"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getDirectoryString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return fileDirectoryPath.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function gives a string containng the file full location path name."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String containing the file\u0027s location"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getFileLocationString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return fileNamePath.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 47,
      "marcursor": 60
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    Scanner in;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"_________________________________\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Welcome to scheduler--;!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Thank you for using scheduler--;!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"We hope to see you soon!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String receiveCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printEventAddedMessage(Event event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printRepeatAdd(Event event) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"is now repeating \" + event.getRepeatType() + \" for \" + event.getRepeatCount() + \" times.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printRepeatList(Event event) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(event + \" is also on:\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d event.getRepeatEventList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Event e : repeatEventList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"%s \", e.getDate().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"%s \", e.getTime().format(DateTimeFormatter.ofPattern(\"K:mm a\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"[%s]\", e.getStatus());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printGoalMessage(Goal goal) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Goal: \" + goal);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"You have no goal! Why not set one now?\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printChangeGoalMessage(Goal goal) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Goal changed to: \" + goal);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"No more goal!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printCheckMessage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Lists the name of all EventList in the given EventList ArrayList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param eventLists EventList ArrayList to list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printAvailableList(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"Following are all existing lists:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(list.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"\u0027list All\u0027 will list all existing lists.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Lists all the events in the given EventList."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param eventList EventList to list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printList(EventList eventList) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String eventListName \u003d eventList.getName();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d eventList.getEvents();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"You have no \" + eventListName + \" events!\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Here is a list of your \" + eventListName + \" events:\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            for (Event e : events) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                System.out.println(index + \". \" + e);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                if (e.getRepeatEventList() !\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                    System.out.println(\"   Repeated \" + e.getRepeatType() + \" for \" + e.getRepeatCount() + \" times.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void printDeadlineChangedMessage(Event eventUpdated) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(eventUpdated);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageSavedMessage() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file has successfully been saved!\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageLoadingErrorMessage() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file does not exist or has been corrupted!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints exception message."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param exceptionMessage String of warning message from various exceptions."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printErrorMessage(String exceptionMessage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(exceptionMessage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 81,
      "ninggggx99": 3,
      "Reinbowl": 63
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_timetableEvent_printEventAdded() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add timetable event to data"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String timetableInput \u003d \"timetable Math class; math building; 17/10/2000; 1300\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(timetableInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"[T][✕] Math class, Location: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"math building on 2000-10-17, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_invalidPersonalEvent_printZoomEventError() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event with incorrect number of parameters to data"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"zoom class meeting; zoom.sg; 17/10/2000\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"Incorrect number of parameters for Zoom event!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 3,
      "matthewgani": 59
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CheckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "class CheckCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventInTimeRange_printEventsInTimeRange() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"04/05/20; 13:00; 05/05/20; 14:00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList personalList \u003d  data.getEventList(\"Personal\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String expectedString \u003d \"Here is a list of your coinciding events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"1. [P][✕] Go out for dinner on 2020-05-05, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"_________________________________\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(expectedString, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventOutsideTimeRange_printEventsInTimeRange() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"04/05/20; 13:00; 04/05/20; 14:00\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String expectedString \u003d \"You have no coinciding events!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"_________________________________\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(expectedString, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 78,
      "matthewgani": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "class DeadlineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute_withDate_printDeadline() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute_withDateAndTime_printDeadline() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07, 23:20\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withoutDateandTime_wrongNumberOfArgumentsException() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberOfArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithoutDateandTime \u003d new DeadlineCommand(\"1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithoutDateandTime.execute(data, ui, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withInvalidIndex_invalidIndexException() throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithInvalidIndex \u003d new DeadlineCommand(\"0; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withIndexIsNotaNumber_wrongNumberFormatException() throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithInvalidIndex \u003d new DeadlineCommand(\"a; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 3,
      "matthewgani": 2,
      "ninggggx99": 125
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/GoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "class GoalCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_oneString_printChangeGoal() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_blankInput_printGoal() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have no goal! Why not set one now?\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_twoSeparateStringThenBlankInput_printChangeGoal() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString1 \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString2 \u003d \"Float like a bumblebee\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(inputString2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String blankString \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(blankString);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command.execute(data, ui, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal: \" + inputString2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 2,
      "Reinbowl": 87
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    void execute_noEvent_printNoEventsInLists() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        // Execute list command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        // if the user enters \"list\" to list all events, the input string will be an empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        assertEquals(\"Here is a list of all your events!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Personal.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Timetable.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Zoom.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_zoomEvent_listZoomEvents() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event to data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"zoom Math class; zoom.com; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Execute list command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String inputString \u003d \"zoom\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"[Z][✕] Math class, Link: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"Here is a list of your Zoom events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                        + \"1. [Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 2,
      "matthewgani": 54,
      "Reinbowl": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/RepeatCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingDeadlineRepeatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "class RepeatCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void setupEventLists() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Add Personal event to data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String personalInput \u003d \"personal party; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        personalInput \u003d \"personal surprise\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Add Zoom event to data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Add zoom event to data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String zoomInput \u003d \"zoom Math class; zoom.com; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Add Timetable Event to Data"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String timeTableInput \u003d \"timetable Science class; S17; 17/10/2000; 1500\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(timeTableInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_personalEventMonthly_personalEventRepeatedMonthly() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Create Repeat Command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 monthly 4\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Nov 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Dec 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Jan 2001 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Feb 2001 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_zoomEventWeekly_zoomEventRepeatedWeekly() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //creating repeat command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"zoom 1 weekly 3\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating weekly for 3 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"zoom 1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"16 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"23 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_timeTableEventDaily_timeTableEventRepeatedDaily() throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //creating repeat command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"timetable 1 daily 3\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[T][✕] Science class, Location: S17 on 2000-10-17, 15:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating daily for 3 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"timetable 1\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[T][✕] Science class, Location: S17 on 2000-10-17, 15:00 is also on:\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"18 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"19 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"20 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_personalEventRepeatDailyMonthlyChange_personalEventDailyToMonthly() throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for daily"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 daily 4\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating daily for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //clear screen and now test changing repeat from daily 4 to monthly 2"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1 monthly 2\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 2 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //clear screen and check if monthly repeats were successfully recorded"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Nov 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Dec 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventNoDeadline_missingDeadlineExceptionThrown() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event with no deadline"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 2 daily 4\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(MissingDeadlineRepeatException.class, () -\u003e {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongIndex_indexOutOfBoundsExceptionThrown() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for an index which does not exist"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 5 daily 4\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongUnit_invalidTimeUnitExceptionThrown() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event using wrong time unit"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 fortnightly 4\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidTimeUnitException.class, () -\u003e {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_tooLittleArgumentsProvided_wrongNumberOfArgumentsExceptionThrown() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event with too little information"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(WrongNumberOfArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongType_invalidEventListTypeExceptionThrown() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for an event type that does not exist"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"holiday 5 daily 4\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidListException.class, () -\u003e {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_userTypeWrongNumber_NumberFormatExceptionThrown() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command using wrong number writing format"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 weekly three\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 286,
      "marcursor": 6,
      "ninggggx99": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  }
]
