[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 1,
      "-": 46
    }
  },
  {
    "path": "data/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "null"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "data/personal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "party | 2000-10-09 | 1300 | 0 | 0 | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "surprise | 2020-09-14 | 0800 | 0 | 0 | F"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "hello there | 2002-02-02 | 0700 | 0 | 0 | F"
      }
    ],
    "authorContributionMap": {
      "Colin386": 3
    }
  },
  {
    "path": "data/timetable.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Science class | 2000-10-17 | 1500 | 0 | 0 | S17 | F"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "data/zoom.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Math class | 2000-10-09 | 1300 | 0 | 0 | zoom.com | F"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Colin Ng | [Github](https://github.com/Colin386) | [Portfolio](docs/team/colinNg.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Tan | [Github](https://github.com/marcursor) | [Portfolio](docs/team/marcustan.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Matthew Gani | [Github](https://github.com/matthewgani) | [Portfolio](docs/team/matthewgani.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Low Qing Ning | [Github](https://github.com/ninggggx99) | [Portfolio](docs/team/lowqingning.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Ng | [Github](https://github.com/reinbowl) | [Portfolio](team/marcusng.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 1,
      "matthewgani": 1,
      "ninggggx99": 2,
      "-": 4,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "{Table of contents goes here}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Setting up, getting started"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Check feature"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "The check feature is implemented using the `CheckCommand` class. `CheckCommand` accesses the `Event`s stored within `EventList`s in order to determine if events are occurring within a given time period. It implements the following operations:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- `CheckCommand#getDate(stringDate)` -- Parses a given string to get a LocalDate variable (either the start or end date for the time period)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- `CheckCommand#getTime(stringTime)` -- Parses a given string to get a LocalTime variable (either the start or end time for the time period)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- `CheckCommand#checkEventsInTimeRange(eventsList, startDate, endDate, startTime, endTime)` -- Checks each event in the eventsList to see if they occur within the time period defined in the command, and saves all coinciding events in an ArrayList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "These operations are not exposed, and are used as private methods within the `CheckCommand` interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Given below is an example usage scenario and how the check feature functions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 1. The user inputs `check 11/5/2020; 5:15 PM; 15/5/2020; 9 PM` in order to check for events occurring between 11th May 2020, 5:15 pm and 15th May 2020, 9:00 pm. This input is received by the Ui, which processes it into a string. The string is parsed by the Parser, which returns a CheckCommand with the date and time parameters stored in it as a string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 2. `CheckCommand#execute()` is called. The command string containing the date and time parameters are split into a String array to separate the different parameters. "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 3. Within `CheckCommand#execute()`, `CheckCommand#getDate()` is called to parse the start and end dates, and `CheckCommand#getTime()` is called to parse the start and end times."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "This sequence diagram shows how the `getDate` method functions:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for getDate](./diagrams/getDate_seq_diagram.jpg)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 4. Within `CheckCommand#execute()`, the start date time and end date time is passed to `CheckCommand#checkEventsInTimeRange()` along with an `EventList` (i.e. Zoom, Personal or Timetable). This method checks each `Event` in the `EventList` to determine if the event occurs within the time period. If the event date time coincides with the time period, the event is added to an ArrayList that stores all the coinciding events in the current `EventList`. This is done for each `EventList`. "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 5. The contents of the ArrayLists returned by `CheckCommand#checkEventsInTimeRange()` are combined into a single ArrayList, and a new `EventList` (\"coinciding\") is created using this combined list of events."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Step 6. `Ui#printList()` is called to print the list of coinciding events."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "The following sequence diagram shows how the check operation works:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for CheckCommand](./diagrams/CheckCommand_seq_diagram.jpg)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "#### [Proposed] Deadline feature"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The user executes ```deadline 1; 7/10/20; 11:20 PM``` command to set the deadline for the 1st event in Personal event list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "to be on the 7th October 2020 at 11:20 PM. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The ```deadline``` command calls ```DeadlineCommand#execute()```, adding/updating the personal event deadline. \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Given below is how the deadline command behave: \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "  \u003cimg width\u003d\"414\" height\u003d\"562\" src\u003d\"./diagrams/DeadlineScenario.jpg\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The following sequence diagram shows how the deadline operation works: \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Deadline Command](./diagrams/DeadlineSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "#### [Proposed] Goal feature"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "##### Proposed Implementation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The proposed goal feature is achieved by `GoalCommand`. It either prints the current goal stored internally in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "`UserData` if there is one, or it sets the input as the new goal by replacing the previous goal."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Given below is an example usage scenario of the goal feature."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 1. The user launches the application for the first time. `Ui#printGoal` is called, "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "a line informing them they have no goal is printed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 2. The user executes `goal save money` command to set the goal as \"save money\"."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The `goal` command is passed through a parser to return the GoalCommand with arguments initialised."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 3. `GoalCommand#execute()` is called, setting the goal in `UserData` to \"save money\". The change is printed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "with `Ui#printChangeGoal()`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 4. The user executes `goal` command to print the current goal."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The `goal` command is passed through a parser to return the GoalCommand with blank arguments."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 5.  `GoalCommand#execute()` is called, to retrieve the current goal in `UserData` and print it"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "with `Ui#printGoal()`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The following sequence diagram shows how the `goal save money` command is parsed:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence diagram for parsing goal command](./diagrams/GoalParseSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The following sequence diagram shows how `GoalCommand#execute()` works:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence diagram for goal command execute](./diagrams/GoalExecuteSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Add Feature"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The add feature in the program allows the user to create one of 3 different events in scheduler--;."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "These 3 are the Personal, Zoom and Timetable events. These events have varying numbers of arguments or fields that can "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "be inserted upon creation. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Firstly, to begin, the user needs to key in the command `add [event type] [description]; [date]; [time]`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The optional fields to fill in like the link and location for the zoom and timetable classes can be inserted respectively . For example,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`add zoom cs2113t meeting; zoom.sg; 16/09/20; 2100`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "When a command like this is called, the constructor to `addCommand` will be able to detect the event type based on the user\u0027s input. It then stores the event type in that instance of the addCommand."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Next, when `addCommand#execute` is called from the main, this method will call the respective method to create one of the three events. These methods are `addCommand#addPersonal`, `addCommand#addZoom`, and `addCommand#addTimetable`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The personal event can contain the following fields: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description and date"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. Description, date and time"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The zoom event can contain the following fields:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description and link"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description, link, date and time"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The Timetable event can contain the following fields:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description, date and time"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description, location, date and time"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The fields for what each event can contain were chosen based on what we as a team thought were important fields for the respective event types."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "However, these methods can easily be edited to accept different numbers of fields if we change our minds in the future."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Given below is an example scenario of the add feature:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 1. The user launches the application for the first time. There will be no events stored at the moment."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 2. The user executes `add zoom cs2113t meeting; zoom.sg; 16/09/20; 2100`. The `addCommand` instance is created and detects that the event is of Zoom type."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 3. `addCommand#execute` is called. The class knows the current addCommand is of Zoom type so it calls `addCommand#addZoom`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 4. `addCommand#addZoom` detects there are 4 fields in the command, separated by semicolons, and uses this to create a new Zoom event."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 5. The Zoom event is then added to the user\u0027s `UserData` for further use."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The following sequence diagram shows how the whole add feature works: \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Add Command](./diagrams/addCommand.jpg)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "#### Repeat Feature"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeat feature on the program allows for the user to be able to make certain events repeat several times over a defined time period."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "For instance, the user can request for a personal event to be repeated monthly for four months. To run the program, the user will need to key in the command `repeat [event type] [index] [timeUnit] [count]`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|Argument| Description |"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|event type|What type of event is to be repeated? Accepted arguments are `personal`, `timetable` or `zoom`|"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|index|Index number of the event to be repeated that is stored on the Event List|"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|timeUnit|For what unit of time each event is to be repeated. Accepted arguments are `daily`, `weekly` and `monthly`|"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|count|Integer indicating how many times the event is to be repeated|"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "For example, to repeat a personal event located at index 2 for 3 days, the user will key in this: `repeat personal 2 daily 3`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The following sequence diagram shows the overall process of repeating an event:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command](./diagrams/RepeatScenario.jpg)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The steps to repeating the command will be described in the following sections. "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 1: Obtaining the event information"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeat command first locates the event that is to be repeated along with its starting date."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Next, it creates an empty ArrayList called `repeatEventList` that will contain all repeated events."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 1](./diagrams/repeatstep1.jpg)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 2: Incrementing the Original Date"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeatCommand object will now call upon Event to increment the date by a fixed unit of time. In the following diagram, it shows how the program flow will work should a monthly repeat increment be set. "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The increment date will be assigned the name `repeatDate`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 2](./diagrams/repeatstep2.jpg)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 3: Set Repeat type"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeatCommand now will set the original Event to have a repeat type setting. In the diagram\u0027s example, it will be set to `monthly`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 3](./diagrams/repeatstep3.jpg)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 4: Clone the event"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The original event is now cloned as shown in the following sequence diagram."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 4](./diagrams/repeatstep4.jpg)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 5: Add the cloned activity"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The cloned activity will now have its date set to be `repeatDate`. This new activity is now added into the `repeatEventList` as shwon in the following diagram."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 5](./diagrams/repeatstep5.jpg)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 6: Repeat steps 2 to 5"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Steps 2 to 5 are repeated up till the number specified by `count` as shown in the loop."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 6](./diagrams/repeatstep6.jpg)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 7: Assign the ArrayList as the RepeatEventList attribute of the original event."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Finally, set the `repeatEventList` using the `setRepeatEventList` command as shown in the following section of the sequence diagram. The results of this process is printed and control returns back to the main program."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 7](./diagrams/repeatstep7.jpg)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": " "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcursor"
        },
        "content": " "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Documentation, logging, testing, configuration, dev-ops (not sure what this entails)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Appendix: Requirements"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcursor"
        },
        "content": "##### Target user profile"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003ehas a need to organise events using scheduler\u003c/li\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eprefer desktop application\u003c/li\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003ecan type fast\u003c/li\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eprefer typing to mouse interactions\u003c/li\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eis reasonably comfortable using CLI apps\u003c/li\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcursor"
        },
        "content": "##### Value proposition"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the value proposition: what problem does it solve?}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "|v1.0|new user|see usage instructions|refer to them when I forget how to use the application|"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "|v2.0|user|find a to-do item by name|locate a to-do without having to go through the entire list|"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Use Cases"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003col\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eWork on any mainstream OS that has Java 11 or above installed\u003c/li\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eA user who has faster typing speed than average should be able to use this program with ease\u003c/li\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 56,
      "marcursor": 48,
      "matthewgani": 45,
      "ninggggx99": 24,
      "-": 28,
      "Reinbowl": 47
    }
  },
  {
    "path": "docs/team/colinNg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "# Colin Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Changed about us file"
      }
    ],
    "authorContributionMap": {
      "Colin386": 7
    }
  },
  {
    "path": "docs/team/lowqingning.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "# Low Qing Ning - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/marcusng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "# Marcus Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/team/marcustan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "# Marcus Tan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "marcursor": 1,
      "-": 5
    }
  },
  {
    "path": "goalStoreTest/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Float like a bumblebee"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.ReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.StorageParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private UserData data;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Command com;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Parser currentParse;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    //Location refers to the \"data\" directory stored in the folder of this application"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static final String FILELOCATION \u003d \"data\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Constructor for the Schedule components."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param filePath is a string containing the location of where the data text files are to be stored"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage \u003d new Storage(filePath, ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        data \u003d new UserData();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        currentParse \u003d new Parser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main run function. Loops until the bye command is entered."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.loadAll(data);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                Command reminder \u003d currentParse.parse(\"reminder\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                reminder.execute(data,ui,storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Command c \u003d currentParse.parse(userInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.saveAll(data);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main function where the program starts."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param args No arguments entered so far"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Duke duke \u003d new Duke(FILELOCATION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 63,
      "marcursor": 3,
      "ninggggx99": 10,
      "-": 19,
      "Reinbowl": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Zoom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.EventAddErrorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to add events."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String eventType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Boolean isInvalidEventType \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for adding events seedu.duke"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public AddCommand(String command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] commandWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String tempEventType \u003d commandWords[0].toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        switch (tempEventType) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"zoom\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Zoom\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"personal\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Personal\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"timetable\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Timetable\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (commandWords.length \u003d\u003d 1 \u0026\u0026 eventType.equals(\"Personal\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // empty description, even with valid event types"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(\"Empty parameters for Personal event!\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] argumentWords \u003d Arrays.copyOfRange(commandWords, 1, commandWords.length);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds an event to individual eventLists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String[] argumentWords \u003d argument.split(\";\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (!isInvalidEventType) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                switch (eventType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                case \"Personal\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    addPersonal(data, ui, argumentWords);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    storage.saveFile(storage.getFileLocation(eventType), data, eventType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                case \"Zoom\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    addZoom(data, ui, argumentWords);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    storage.saveFile(storage.getFileLocation(eventType), data, eventType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                case \"Timetable\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    addTimetable(data, ui, argumentWords);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    storage.saveFile(storage.getFileLocation(eventType), data, eventType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new EventAddErrorException(\"Invalid event type ot be added!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                e.printErrorMessage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new EventAddErrorException(\"Invalid event type to add!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Timetable event."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addTimetable(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003d\u003d 3 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 2 cases: description \u0026 date \u0026 time , description \u0026 location \u0026 date \u0026 time"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Timetable\", new Timetable(argumentWords[0].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Timetable\", new Timetable(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            argumentWords[1].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Timetable event!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Personal event."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addPersonal(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003e\u003d 1 \u0026\u0026 argumentWords.length \u003c\u003d 3) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 3 cases: only description, description and date, description and date and time"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim(), localDate));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Personal event!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Zoom event."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addZoom(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003d\u003d 2 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 2 cases: only have description \u0026 zoomlink , have description,zoomlink, date,time"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Zoom\", new Zoom(argumentWords[0].trim(), argumentWords[1].trim()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Zoom\", new Zoom(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            argumentWords[1].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Zoom event!\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 3,
      "matthewgani": 192,
      "ninggggx99": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to end program seedu.duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for exiting the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 5,
      "ninggggx99": 14,
      "Reinbowl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private Map\u003cLocalDate, ArrayList\u003cEvent\u003e\u003e calendarMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private int eventsWithoutDateCount \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public CalendarCommand(String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEventList\u003e eventLists \u003d data.getAllEventLists();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ArrayList\u003cEvent\u003e events \u003d list.getEvents();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            addEventsToCalendar(events);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printCalendarStart(calendarMap.size(), eventsWithoutDateCount);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Map.Entry\u003cLocalDate, ArrayList\u003cEvent\u003e\u003e entry : calendarMap.entrySet()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printCalendar(entry);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void addEventsToCalendar(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Event e : events) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ArrayList\u003cEvent\u003e eventRepeatList \u003d e.getRepeatEventList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (eventRepeatList !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                addEventsToCalendar(eventRepeatList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            addEventToCalendar(e);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void addEventToCalendar(Event e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        LocalDate eventDate \u003d e.getDate();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (eventDate !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ArrayList\u003cEvent\u003e eventsOnDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (calendarMap.containsKey(eventDate)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate \u003d calendarMap.get(eventDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate.add(e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate.add(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                calendarMap.put(eventDate, eventsOnDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            eventsWithoutDateCount++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return new CalendarCommand(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 66
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CheckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TryRegularParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.timeParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to check availability."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Constructor for checking availability."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public CheckCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Execute function for the command to state user\u0027s availability in a given period."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DukeException if insufficient fields are given after the \"check\" keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] datesAndTime \u003d command.split(\";\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate startDate \u003d getDate(datesAndTime[0].trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate endDate \u003d getDate(datesAndTime[2].trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert startDate !\u003d null : \"null date read for startDate\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert endDate !\u003d null : \"null date read for endDate\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalTime startTime \u003d getTime(datesAndTime[1].trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalTime endTime \u003d getTime(datesAndTime[3].trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert startTime !\u003d null : \"null time read for startTime\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert endTime !\u003d null : \"null time read for endTime\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String[] eventTypes \u003d new String[]{\"Personal\", \"Timetable\", \"Zoom\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            for (String type: eventTypes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                EventList eventsList \u003d data.getEventList(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.addAll(checkEventsInTimeRange(eventsList, startDate, endDate, startTime, endTime));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            EventList coinciding \u003d new EventList(\"coinciding\", eventsInTimeRange);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ui.printList(coinciding);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Insufficient fields provided to check events.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Date parser that interprets a date from a given string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param stringDate the string containing date information"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return a LocalDate corresponding to the date in stringDate or the current date if no date is found in the string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DateErrorException if stringDate does not correspond to a valid date format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalDate getDate(String stringDate) throws DateErrorException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] dateFields \u003d stringDate.replace(\"-\",\"/\").split(\"/\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (stringDate.isBlank()) { // if date is blank, defaults to current date"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return currentDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            switch (dateFields.length) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 1: // only year is given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter yearFormat \u003d DateTimeFormatter.ofPattern(\"yy[yy]\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                Year givenYear \u003d Year.parse(stringDate, yearFormat);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d currentDate.with(givenYear);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 2: // month and year is given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter yearMonthFormat \u003d DateTimeFormatter.ofPattern(\"M/yy[yy]\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                YearMonth givenYearMonth \u003d YearMonth.parse(stringDate, yearMonthFormat);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d currentDate.with(givenYearMonth);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 3: // day, month and year given"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter dayMonthYearFormat \u003d DateTimeFormatter.ofPattern(\"d/M/yy[yy]\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d LocalDate.parse(stringDate, dayMonthYearFormat);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Time parser that interprets a time from a given string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param stringTime the string containing time information"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return a LocalTime corresponding to the time in stringTime or the current time if no time is found in the string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws TimeErrorException if stringTime does not correspond to a valid time format"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalTime getTime(String stringTime) throws TimeErrorException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (stringTime.isBlank()) { // if blank time is provided, default to current time"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h:m a\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String currentTime \u003d LocalTime.now().format(timeFormatter);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            time \u003d LocalTime.parse(currentTime, timeFormatter);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] stringTimeArray \u003d stringTime.split(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (stringTimeArray.length \u003d\u003d 2) { // 12 hour format hh a"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                int givenTwelveHour \u003d Integer.parseInt(stringTimeArray[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                String amPmIndicator \u003d stringTimeArray[1];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (givenTwelveHour \u003e\u003d 0 \u0026 givenTwelveHour \u003c\u003d 12) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    time \u003d timeParser(givenTwelveHour + \":00 \" + amPmIndicator); // default to minute 00"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    return time;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    throw new TryRegularParserException(\"hh a format time requires hours between 1-12.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (stringTimeArray.length \u003d\u003d 1) { // 24 hour format HH"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                int givenTwentyFourHour \u003d Integer.parseInt(stringTimeArray[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (givenTwentyFourHour \u003e\u003d 0 \u0026 givenTwentyFourHour \u003c\u003d 24) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    time \u003d timeParser(givenTwentyFourHour + \":00\"); // default to minute 00"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    return time;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    throw new TryRegularParserException(\"HH format time requires hours between 0-23.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException | TryRegularParserException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            // if hh:mm, HH:mm or other invalid non integers is given"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            time \u003d timeParser(stringTime); // exception will be thrown if invalid non-integer is given"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Checks for events within a given time period."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param eventsList the eventsList containing events to be checked"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param startDate the start date of the time period to be checked"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param endDate the end date of the time period to be checked"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param startTime the start time of the time period to be checked"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param endTime the end time of the time period to be checked"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return an ArrayList of events found occurring during the time period"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private ArrayList\u003cEvent\u003e checkEventsInTimeRange(EventList eventsList, LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                                                   LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        for (Event event : eventsList.getEvents()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenDate \u003d event.getDate().isAfter(startDate) \u0026\u0026 event.getDate().isBefore(endDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenTime;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenDate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.getDate().isEqual(startDate)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d !(event.getTime().isBefore(startTime));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.getDate().isEqual(endDate)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d !(event.getTime().isAfter(endTime));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenTime) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.add(event);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return eventsInTimeRange;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 182,
      "ninggggx99": 16,
      "Reinbowl": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * abstract class for commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public abstract void execute(UserData data, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Signal exit program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return true if user give exit seedu.duke.command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 2,
      "ninggggx99": 19,
      "Reinbowl": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set deadline for personal events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting deadline seedu.duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * To change to deadline of personal event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            parseUserCommand(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            EventList personalList \u003d data.getEventList(\"Personal\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Event updatedEvent \u003d personalList.getEventByIndex(index - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (updatedEvent !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                Personal event \u003d (Personal) updatedEvent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasDate(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasTime(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setDate(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasDate(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    event.setHasTime(true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setTime(time);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printDeadlineChangedMessage(updatedEvent);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            storage.saveFile(storage.getFileLocation(\"Personal\"), data, \"Personal\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new InvalidIndexException(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Parsing user command to put in the correct format for arguments and checking if its date or date and time."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command user input arguments"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private void parseUserCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String[] commandSplit \u003d command.split(\";\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (commandSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                index \u003d parsingNumber(commandSplit[0].trim());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert date !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new WrongNumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else if (commandSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                index \u003d parsingNumber(commandSplit[0].trim());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert date !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                String timeString \u003d commandSplit[2].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                timeString \u003d timeString.replace(\":\", \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                time \u003d DateTimeParser.timeParser(timeString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert time !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new WrongNumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Deadline!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Check if index is numerical format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param number index in string format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return index of event"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int parsingNumber(String number) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            int index \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new NumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "ninggggx99": 125,
      "Reinbowl": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.dateParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String listType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Constructor for setting event to done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DoneCommand(String listType, String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static Command parse(String input) throws WrongNumberOfArgumentsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] inputParameters \u003d input.trim().split(\" \", 3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String listType \u003d inputParameters[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String eventIndex \u003d inputParameters[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (inputParameters.length \u003c 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Event index not provided.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return new DoneCommand(listType, eventIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        listType \u003d capitaliseFirstLetter(listType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList eventList \u003d data.getEventList(listType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] eventIndexArray \u003d command.split(\" \",2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(eventIndexArray[0]) - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            Event doneEvent \u003d eventList.getEventByIndex(eventIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIndexArray.length \u003d\u003d 1 || doneEvent.getRepeatType() \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                doneEvent.markAsDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                ui.printEventMarkedDoneMessage(doneEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (eventIndexArray.length \u003d\u003d 2 \u0026\u0026 doneEvent.getRepeatType() !\u003d null) { // event is a repeat task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                LocalDate doneEventDate \u003d dateParser(eventIndexArray[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                ArrayList\u003cEvent\u003e repeatEventList \u003d doneEvent.getRepeatEventList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                for (Event e: repeatEventList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    if (e.getDate().isEqual(doneEventDate)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                        e.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                        ui.printEventMarkedDoneMessage(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberFormatException(\"Event index given is not an integer.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String capitaliseFirstLetter(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set goals."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting goals seedu.duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public GoalCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert command !\u003d null : \"String for goal command should not be null\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d data.getGoal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printGoalMessage(goal);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            switch (command.toLowerCase()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case \"na\": case \"nil\": case \"delete\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                data.setGoal(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                goal \u003d new Goal(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                data.setGoal(goal);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printChangeGoalMessage(goal);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            //update storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            storage.saveFile(storage.getFileLocation(\"Goal\"), data, \"Goal\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "ninggggx99": 17,
      "Reinbowl": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to list events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for listing events seedu.duke"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEventList\u003e eventLists \u003d data.getAllEventLists();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printAvailableList(eventLists);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else if (command.equals(\"All\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                ui.printList(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printList(data.getEventList(command));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 6,
      "ninggggx99": 17,
      "Reinbowl": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ReminderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to print reminder for user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for reminder seedu.duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ReminderCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * To find the events for today."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @throws DukeException error caught by duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEventList\u003e allEventList \u003d data.getAllEventLists();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEvent\u003e reminderEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        for (int i \u003d 0; i \u003c allEventList.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            ArrayList\u003cEvent\u003e eventList \u003d filterTodayEvents(allEventList.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            reminderEvents.addAll(eventList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ui.printReminder(reminderEvents);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Filter the events."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param eventList list of events in the category"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return todayEvents events happening today"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @throws InvalidIndexException index is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private ArrayList\u003cEvent\u003e filterTodayEvents(EventList eventList) throws InvalidIndexException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEvent\u003e todayEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.getSize(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            LocalDate eventDate \u003d eventList.getEventByIndex(i).getDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            ArrayList\u003cEvent\u003e repeatedList \u003d eventList.getEventByIndex(i).getRepeatEventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (repeatedList !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (checkingRepeatedEvent(repeatedList) !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    todayEvents.addAll(checkingRepeatedEvent(repeatedList));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (eventDate !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (dateNow.compareTo(eventDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    todayEvents.add(eventList.getEventByIndex(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return todayEvents;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Filter through repeated events."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param event list of repeated eventss"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return todayRepeatedEvent repeated events that happen today"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private ArrayList\u003cEvent\u003e checkingRepeatedEvent(ArrayList\u003cEvent\u003e event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEvent\u003e todayRepeatedEvent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        for (int i \u003d 0; i \u003c event.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            LocalDate eventDate \u003d event.get(i).getDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (eventDate !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (dateNow.compareTo(eventDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    todayRepeatedEvent.add(event.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return todayRepeatedEvent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RepeatCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingDeadlineRepeatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to repeat task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String DAILY \u003d \"DAILY\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String WEEKLY \u003d \"WEEKLY\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String MONTHLY \u003d \"MONTHLY\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String COMMANDTYPE_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String COMMANDTYPE_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static final String COMMANDTYPE_ERROR \u003d \"error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Constructor for the repeat command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param command user input with the format eventIndex; eventType; timeInterval; NumberofIterations"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public RepeatCommand(String command, String commandType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case COMMANDTYPE_ADD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            executeAdd(data, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case COMMANDTYPE_LIST:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            executeList(data, ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case COMMANDTYPE_ERROR:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            executeNull(data, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Static parser for repeat command creation. Distinguish between adding repeated dates or listing current repeats."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param input String containing user inputs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return RepeatCommand set to either add additional dates or set to list out current dates in event"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        switch (words.length) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[0] \u003d formatListName(words[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d String.join(\" \", words);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new RepeatCommand(input, COMMANDTYPE_LIST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[0] \u003d formatListName(words[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[2] \u003d words[2].toUpperCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[3]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d String.join(\" \", words);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new RepeatCommand(input, COMMANDTYPE_ADD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String errorMessage \u003d \"Wrong number of arguments provided\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new WrongNumberOfArgumentsException(errorMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Change the name of the list to ensure the first character is capitalised."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param name String containing name of list for the first character to be capitalised"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String with first character capitalised"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static String formatListName(String name) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return name.substring(0, 1).toUpperCase() + name.substring(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Checks if the string can be converted to an integer."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param number String containing the String form of an integer"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static void isValidNumber(String number) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Integer.parseInt(number);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new WrongNumberFormatException(\"Numbers must be in numerical format\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * List command. Used to show dates of repeated events."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data location where all user event information is stored"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param ui   User Interface class for printing on screens"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private void executeList(UserData data, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        EventList eventList \u003d data.getEventList(words[0]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Event repeatEvent \u003d eventList.getEventByIndex(index);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printRepeatList(repeatEvent);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Add command. Used to add repeated dates to an event."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data    location where all user event information is stored"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param ui      User Interface class for printing on screens"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param storage File storage location on computer"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void executeAdd(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        EventList eventList \u003d data.getEventList(words[0]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Event eventToRepeat \u003d eventList.getEventByIndex(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        LocalDate startDate \u003d eventToRepeat.getDate();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new MissingDeadlineRepeatException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String repeatType \u003d words[2];"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int count \u003d Integer.parseInt(words[3]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeat(eventToRepeat, startDate, repeatType, count);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printRepeatAdd(eventToRepeat);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.saveFile(storage.getFileLocation(eventList.getName()), data, eventList.getName());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void repeat(Event eventToRepeat, LocalDate startDate, String repeatType, int count) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            LocalDate repeatDate;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            switch (repeatType) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case MONTHLY:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusMonths(i);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusWeeks(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusDays(i);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                throw new InvalidTimeUnitException(repeatType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            eventToRepeat.setRepeatType(repeatType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Event repeatEvent;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatEvent \u003d eventToRepeat.clone();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                throw new DukeException(\"Cant clone\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            repeatEvent.setDate(repeatDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            repeatEventList.add(repeatEvent);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventToRepeat.setRepeatEventList(repeatEventList);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void executeNull(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 72,
      "ninggggx99": 19,
      "Reinbowl": 91
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/UndoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.dateParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class UndoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String listType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Constructor for setting event to undone."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public UndoneCommand(String listType, String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static Command parse(String input) throws WrongNumberOfArgumentsException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] inputParameters \u003d input.trim().split(\" \", 3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String listType \u003d inputParameters[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String eventIndex \u003d inputParameters[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (inputParameters.length \u003c 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Event index not provided.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return new UndoneCommand(listType, eventIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        listType \u003d capitaliseFirstLetter(listType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList eventList \u003d data.getEventList(listType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] eventIndexArray \u003d command.split(\" \",2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            int eventIndex \u003d Integer.parseInt(eventIndexArray[0]) - 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            Event undoneEvent \u003d eventList.getEventByIndex(eventIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIndexArray.length \u003d\u003d 1 || undoneEvent.getRepeatType() \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                undoneEvent.markAsUndone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                ui.printEventMarkedUndoneMessage(undoneEvent);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (eventIndexArray.length \u003d\u003d 2 \u0026\u0026 undoneEvent.getRepeatType() !\u003d null) { // event is a repeat task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                LocalDate undoneEventDate \u003d dateParser(eventIndexArray[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                ArrayList\u003cEvent\u003e repeatEventList \u003d undoneEvent.getRepeatEventList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                for (Event e: repeatEventList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    if (e.getDate().isEqual(undoneEventDate)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                        e.markAsUndone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                        ui.printEventMarkedUndoneMessage(e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberFormatException(\"Event index given is not an integer.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String capitaliseFirstLetter(String input) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 75
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/UserData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class UserData {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEventList\u003e eventLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private Goal goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Personal\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Timetable\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Zoom\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setGoal(null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.eventLists \u003d new ArrayList\u003c\u003e(eventLists);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void addToEventList(String name, Event e) throws InvalidListException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert e !\u003d null : \"event cannot be null\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        getEventList(name).add(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList getEventList(String name) throws InvalidListException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert name !\u003d null : \"name should not be null\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList e : eventLists) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (e.getName().equals(name)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        throw new InvalidListException(name + \" list does not exist.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEventList\u003e getAllEventLists() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return eventLists;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the user\u0027s goal."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param goal to set to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns the user\u0027s goal."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return user\u0027s goal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 4,
      "ninggggx99": 2,
      "Reinbowl": 57
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public abstract class Event implements Cloneable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected ArrayList\u003cEvent\u003e repeatEventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String repeatType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Creates a new event with the given description and default its done status to false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeatType \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeatEventList \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets event\u0027s description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setRepeatType(String repeatType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.repeatType \u003d repeatType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setRepeatEventList(ArrayList\u003cEvent\u003e repeatEventList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.repeatEventList \u003d repeatEventList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the event\u0027s done status to true."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Sets the event\u0027s done status to false."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of event\u0027s done status."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of event\u0027s done status."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (isDone) ? \"✓\" : \"✕\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Gets date of the event."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return LocalDate object containing the date of the event"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Gets time of the event."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return LocalTime object containing the time of the event"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getRepeatEventList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatEventList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getRepeatType() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatType.toLowerCase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public int getRepeatCount() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (repeatEventList \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatEventList.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Event clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Event) super.clone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[\" + getStatus() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return String.format(\"%s | \", time.format(DateTimeFormatter.ofPattern(\"K:mm a\")))"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                + String.format(\"%s | \", getStatus())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                + String.format(\"%s \", getDescription());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 38,
      "marcursor": 7,
      "matthewgani": 4,
      "Reinbowl": 83
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name, ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.events \u003d new ArrayList\u003cEvent\u003e(events);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void add(Event event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public Event getEventByIndex(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return events.get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new InvalidIndexException(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Event getNewestEvent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 10,
      "marcursor": 5,
      "matthewgani": 7,
      "ninggggx99": 10,
      "Reinbowl": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of goal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of goal."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Personal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Personal extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time, int repeatCount) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, date, time, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Personal(String description, LocalDate date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this(description, date, null, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setHasDate(Boolean hasDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.hasDate \u003d hasDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setHasTime(Boolean hasTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.hasTime \u003d hasTime;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Personal) super.clone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (!hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return \"P | \" + super.toCalendarString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 25,
      "ninggggx99": 9,
      "Reinbowl": 30
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Timetable extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasLocation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, String location, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setLocation(location);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, date, time);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasLocation \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Timetable) super.clone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasLocation) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \", Location: \" + location + \" on \"  + date + \", \" + time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return \"T | \" + super.toCalendarString() + String.format(\"| %s\", getLocation());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 4,
      "matthewgani": 13,
      "Reinbowl": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Zoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Zoom extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String zoomLink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    protected Boolean hasTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setZoomLink(zoomLink);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, zoomLink, null, null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasDate \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        hasTime \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getZoomLink() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.zoomLink;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Zoom) super.clone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (hasTime \u0026\u0026 hasDate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return \"Z | \" + super.toCalendarString() + String.format(\"| %s\", getZoomLink());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 4,
      "matthewgani": 15,
      "Reinbowl": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DateErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DateErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DateErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 5,
      "marcursor": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EventAddErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class EventAddErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public EventAddErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class InvalidListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public InvalidListException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidTimeUnitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class InvalidTimeUnitException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public InvalidTimeUnitException(String wrongTimeUnit) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(wrongTimeUnit + \" is not a valid time unit. Valid types are: daily, weekly, monthly\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingDeadlineRepeatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class MissingDeadlineRepeatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public MissingDeadlineRepeatException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(\"Error! You cannot repeat an event that has no deadline!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TimeErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class TimeErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public TimeErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TryRegularParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class TryRegularParserException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public TryRegularParserException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/WrongNumberFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class WrongNumberFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public WrongNumberFormatException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/WrongNumberOfArgumentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class WrongNumberOfArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public WrongNumberOfArgumentsException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private static final String[] dateFormatStrings \u003d {\"yyyy/M/d\", \"yyyy-M-d\", \"d/M/yy\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        \"d/M/yyyy\", \"d-M-yy\", \"d-M-yyyy\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private static final String[] timeFormatStrings \u003d {\"h:m a\", \"hhmm a\", \"H:m\", \"HHmm\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given date through the acceptable formats."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable date format is dd/mm/yy, yyyy/mm/dd, slashes can be replace with dashes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param date given to parse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalDate object containing given date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DateErrorException if date format is not accepted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static LocalDate dateParser(String date) throws DateErrorException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert date !\u003d null : \"date cannot be null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        while (i \u003c dateFormatStrings.length) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateFormatStrings[i]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given time through the acceptable formats."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable time format is both 12 hour and 24 hour, omitting colon requires the format hhmm."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param time given to parse."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalTime object containing the given time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws TimeErrorException if time format is not accepted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static LocalTime timeParser(String time) throws TimeErrorException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert time !\u003d null : \"time cannot be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        time \u003d time.toUpperCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        while (i \u003c timeFormatStrings.length) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(timeFormatStrings[i]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalTime.parse(time, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 15,
      "Reinbowl": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.CheckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.GoalCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.ReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.RepeatCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.command.UndoneCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.CalendarCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Default Constructor for parser."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function takes in user input and then generates the correct command requested from the user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param userInput String containing what is typed by the user on the computer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Command from what is written by user. Return null if incorrect command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (words.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, no command entered\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String commandWord \u003d words[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] argumentWords \u003d Arrays.copyOfRange(words, 1, words.length);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return new AddCommand(argument);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return ListCommand.parse(argument);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"check\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return new CheckCommand(argument + \" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"repeat\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return RepeatCommand.parse(argument);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"goal\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new GoalCommand(argument);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new DeadlineCommand(argument);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return DoneCommand.parse(argument);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        case \"undone\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return UndoneCommand.parse(argument);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return CalendarCommand.parse(argument);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            throw new DukeException(\"Invalid Command.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 60,
      "marcursor": 8,
      "matthewgani": 1,
      "ninggggx99": 14,
      "Reinbowl": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": " * Saves and loads the events list to and from an external txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileDirectoryPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path filePersonalPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileZoomPath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileTimeTablePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileGoalPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Returns the path to the file specified by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param name Name of the event type stored in the file that will be returned"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return path to the file storing the event type."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Path getFileLocation(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (name) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Personal\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return filePersonalPath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Zoom\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return fileZoomPath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Timetable\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return fileTimeTablePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Goal\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return fileGoalPath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printErrorMessage(\"Error! No such file exists\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a new storage manager that can load and save files to and from a given filepath."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param initPath is the name of the filepath which files are saved to and loaded from"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Storage(String initPath, Ui ui) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //firstly, make string representation of storage files"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Directory words only contain info on making the folder"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //File words contain the info on how to make the file itself"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] pathDirectoryWords \u003d initPath.split(\",\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileDirectoryPath \u003d createPath(pathDirectoryWords);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String personal \u003d initPath + \",personal.txt\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] personalWords \u003d personal.split(\",\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        filePersonalPath \u003d createPath(personalWords);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String zoom \u003d initPath + \",zoom.txt\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] zoomWords \u003d zoom.split(\",\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileZoomPath \u003d createPath(zoomWords);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String goal \u003d initPath + \",goal.txt\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] goalWords \u003d goal.split(\",\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileGoalPath \u003d createPath(goalWords);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String timeTable \u003d initPath + \",timetable.txt\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] timeTableWords \u003d timeTable.split(\",\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileTimeTablePath \u003d createPath(timeTableWords);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        initialiseFolder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a folder for the events list if it does not exist yet."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    protected void initialiseFolder() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (!Files.exists(fileDirectoryPath)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Files.createDirectory(fileDirectoryPath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                System.out.println(\"IO exception encountered when creating data directory.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Creates a txt file for the event if it does not exists yet."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileText path object of the file to be created if non-existent"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileType String of the type of event data this file will store"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void initialiseFile(Path fileText, String fileType) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (!Files.exists(fileText)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Files.createFile(fileText);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                System.out.println(\"File Created: \" + fileType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printErrorMessage(\"IO exception error! File cannot be created on system!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Saves All information onto the computer."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData object where all the current user event information is stored"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void saveAll(UserData data) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(filePersonalPath, data, \"Personal\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(fileTimeTablePath, data, \"Timetable\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(fileZoomPath, data, \"Zoom\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(fileGoalPath, data, \"Goal\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Saves information to a specified file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileName Path object of the file for information to be saved currently"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData object where all the current user event information is stored"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileType Name of the information type that will be saved."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void saveFile(Path fileName, UserData data, String fileType) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //firstly, form a temporary List of strings to store the data"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cString\u003e toBeWritten \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (fileType.equals(\"Goal\")) { //special case for goal"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Goal entry \u003d data.getGoal();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (entry \u003d\u003d null) { //nothing to write"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                toBeWritten.add(entry.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Files.write(fileName, toBeWritten);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //next, read out event by event and process it into a storable string"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            EventList listOfEvents \u003d data.getEventList(fileType);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cEvent\u003e events \u003d listOfEvents.getEvents();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (Event event:events) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                String entry \u003d StorageParser.eventToString(event, fileType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                toBeWritten.add(entry);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Files.write(fileName, toBeWritten);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (InvalidListException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error! List invalid type. Should not happen\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printErrorMessage(\"Error! File cannot be written to\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Loads every single data file into the program."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData structure with all the user information stored"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void loadAll(UserData data) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(filePersonalPath, data, \"Personal\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(fileZoomPath, data, \"Zoom\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(fileTimeTablePath, data, \"Timetable\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(fileGoalPath, data, \"Goal\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printStorageLoadMessage();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Loads events from an external txt file."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param fileName is the file to load events from"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws FileNotFoundException if no file with the given fileName is found"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void loadFile(Path fileName, UserData data, String fileType) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //First, extract out all the file information"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            this.initialiseFile(fileName, fileType);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            List\u003cString\u003e fileLines \u003d Files.readAllLines(fileName);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //Next, line by line reform the event"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //special case for goal"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (fileType.equals(\"Goal\")) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (fileLines.size() !\u003d 0) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    Goal prevGoal \u003d new Goal(fileLines.get(0));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    data.setGoal(prevGoal);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (int i \u003d 0; i \u003c fileLines.size(); i++) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                String line \u003d fileLines.get(i);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Event activity \u003d StorageParser.stringToEvent(line,fileType);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                data.addToEventList(fileType, activity);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //finally, store the information in the correct list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printStorageLoadingErrorMessage();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (InvalidListException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //do nothing for now"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, invalid list\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function accepts a string and creates a path object originating from the user directory."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param pathName is a string array which accepts in the path name words, each word represents a folder"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Path object indicating the location of the pathName keyed in initially."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path createPath(String[] pathName) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String origin \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Path newPath \u003d Paths.get(origin, pathName);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function gives a string containing the Directory location."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String containing directory location"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getDirectoryString() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return fileDirectoryPath.toString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 216,
      "marcursor": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.CheckCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.GoalCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Timetable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Zoom;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static String eventToString(Event activity, String type) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e words \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Personal\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            personalToArguments((Personal)activity, words);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Zoom\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            zoomToArguments((Zoom)activity, words);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Timetable\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            timetableToArguments((Timetable)activity, words);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, wrong data type provided\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return String.join(\" | \", words);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void handleRepeatSave(ArrayList\u003cString\u003e statuses, ArrayList\u003cEvent\u003e activities, int repeatCount) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c repeatCount; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Boolean repeatedActivityStatus \u003d activities.get(i).getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            statuses.add(Boolean.toString(repeatedActivityStatus));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void personalToArguments(Personal activity, ArrayList\u003cString\u003e words) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e statuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the dates and time of the event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String date \u003d \"0\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String time \u003d \"0\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            date \u003d activity.getDate().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            time \u003d activity.getTime().format(formatter);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Boolean activityStatus \u003d activity.getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        statuses.add(Boolean.toString(activityStatus));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatUnit \u003d \"0\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatNumber \u003d \"0\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getRepeatCount() !\u003d 0) { //it is a repeated activity"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatUnit \u003d activity.getRepeatType().toUpperCase();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatNumber \u003d Integer.toString(activity.getRepeatCount());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cEvent\u003e activitiesRepeated \u003d activity.getRepeatEventList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            handleRepeatSave(statuses, activitiesRepeated, activity.getRepeatCount());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the name of the event"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String name \u003d activity.getDescription();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(name);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(time);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatUnit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatNumber);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c statuses.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(statuses.get(i));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"T\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"F\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void zoomToArguments(Zoom activity, ArrayList\u003cString\u003e words) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e statuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the dates and time of the event"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String date \u003d \"0\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String time \u003d \"0\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            date \u003d activity.getDate().toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            time \u003d activity.getTime().format(formatter);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Boolean activityStatus \u003d activity.getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        statuses.add(Boolean.toString(activityStatus));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatUnit \u003d \"0\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatNumber \u003d \"0\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getRepeatCount() !\u003d 0) { //it is a repeated activity"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatUnit \u003d activity.getRepeatType().toUpperCase();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatNumber \u003d Integer.toString(activity.getRepeatCount());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cEvent\u003e activitiesRepeated \u003d activity.getRepeatEventList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            handleRepeatSave(statuses, activitiesRepeated, activity.getRepeatCount());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String url \u003d activity.getZoomLink();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the name of the event"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String name \u003d activity.getDescription();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(date);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(time);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatUnit);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatNumber);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(url);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c statuses.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(statuses.get(i));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"T\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"F\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void timetableToArguments(Timetable activity, ArrayList\u003cString\u003e words) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e statuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the dates and time of the event"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String date \u003d \"0\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String time \u003d \"0\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            date \u003d activity.getDate().toString();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            time \u003d activity.getTime().format(formatter);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Boolean activityStatus \u003d activity.getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        statuses.add(Boolean.toString(activityStatus));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatUnit \u003d \"0\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatNumber \u003d \"0\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getRepeatCount() !\u003d 0) { //it is a repeated activity"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatUnit \u003d activity.getRepeatType().toUpperCase();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatNumber \u003d Integer.toString(activity.getRepeatCount());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cEvent\u003e activitiesRepeated \u003d activity.getRepeatEventList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            handleRepeatSave(statuses, activitiesRepeated, activity.getRepeatCount());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String location \u003d activity.getLocation();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the name of the event"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String name \u003d activity.getDescription();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(name);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(date);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(time);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatUnit);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatNumber);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(location);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c statuses.size(); i++) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(statuses.get(i));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"T\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"F\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static Event stringToEvent(String line, String type) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] words \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] statuses;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] info;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            words[i] \u003d words[i].trim();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Personal\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            info \u003d Arrays.copyOfRange(words, 0, 5);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            statuses \u003d Arrays.copyOfRange(words, 5, words.length);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return makePersonal(info, statuses);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Zoom\":"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            info \u003d Arrays.copyOfRange(words, 0, 6);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            statuses \u003d Arrays.copyOfRange(words, 6, words.length);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return makeZoom(info, statuses);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Timetable\":"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            info \u003d Arrays.copyOfRange(words, 0, 6);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            statuses \u003d Arrays.copyOfRange(words, 6, words.length);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return makeTimetable(info, statuses);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static Personal makePersonal(String[] info, String[] statuses) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //0 is name, 1 is date, 2 is time, 3 is repeat unit, 4 is repeat number"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Personal p \u003d new Personal(info[0]);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (info[1].equals(\"0\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no date, event can be returned as is"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                setDone(p, statuses[0]);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else if (info[2].equals(\"0\")) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no time, but got date"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d null;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setDate(date);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setHasDate(true);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //has both date and time"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d DateTimeParser.timeParser(info[2]);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setDate(date);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setHasDate(true);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setTime(time);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setHasTime(true);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setDone(p, statuses[0]);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatSetter(p, statuses, info[3], info[4]);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return p;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"file corruption detected\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static Zoom makeZoom(String[] info, String[] statuses) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //0 is name, 1 is date, 2 is time, 3 is repeat unit, 4 is repeat number, 5 is zoom link"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Zoom z \u003d new Zoom(info[0], info[5]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (info[1].equals(\"0\")) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no date, event can be returned as is"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                setDone(z, statuses[0]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                return z;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else if (info[2].equals(\"0\")) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no time, but got date"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d null;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                z.setDate(date);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //has both date and time"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d DateTimeParser.timeParser(info[2]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                z.setDate(date);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                z.setTime(time);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setDone(z, statuses[0]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatSetter(z, statuses, info[3], info[4]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return z;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"file corruption detected\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static Timetable makeTimetable(String[] info, String[] statuses) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //0 is name, 1 is date, 2 is time, 3 is repeat unit, 4 is repeat number, 5 is location"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            LocalTime time \u003d DateTimeParser.timeParser(info[2]);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Timetable t \u003d new Timetable(info[0], date, time);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (!info[5].equals(\"0\")) { //location provided"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                t.setLocation(info[5]);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setDone(t, statuses[0]);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatSetter(t, statuses, info[3], info[4]);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return t;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"file corruption detected\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static void setDone(Event e, String doneStatus) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        boolean isDone \u003d doneStatus.equals(\"T\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            e.markAsDone();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static void repeatSetter(Event activity, String[] statuses, String timeUnit, String repeatNumber) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        LocalDate startDate \u003d activity.getDate();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        LocalTime startTime \u003d activity.getTime();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        int count \u003d Integer.parseInt(repeatNumber);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate repeatDate;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                switch (timeUnit) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                case \"MONTHLY\":"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatDate \u003d startDate.plusMonths(i);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                case \"WEEKLY\":"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatDate \u003d startDate.plusWeeks(i);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                case \"DAILY\":"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatDate \u003d startDate.plusDays(i);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    throw new InvalidTimeUnitException(timeUnit);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                activity.setRepeatType(timeUnit);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Event repeatEvent;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                repeatEvent \u003d activity.clone();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                repeatEvent.setDate(repeatDate);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (statuses[i].equals(\"T\")) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatEvent.markAsDone();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                repeatEventList.add(repeatEvent);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            activity.setRepeatEventList(repeatEventList);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, wrong date should not happen, file corrupted\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //throw new DukeException(\"Cant clone\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 364
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    Scanner in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"_________________________________\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Welcome to scheduler--;!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Thank you for using scheduler--;!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"We hope to see you soon!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String receiveCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printEventAddedMessage(Event event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printRepeatAdd(Event event) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"is now repeating \" + event.getRepeatType() + \" for \" + event.getRepeatCount() + \" times.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printRepeatList(Event event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(event + \" is also on:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d event.getRepeatEventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Event e : repeatEventList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"%s \", e.getDate().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"%s \", e.getTime().format(DateTimeFormatter.ofPattern(\"K:mm a\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"[%s]\", e.getStatus());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printGoalMessage(Goal goal) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Goal: \" + goal);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"You have no goal! Why not set one now?\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printChangeGoalMessage(Goal goal) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Goal changed to: \" + goal);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"No more goal!\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printCalendar(Map.Entry\u003cLocalDate, ArrayList\u003cEvent\u003e\u003e entry) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(entry.getKey().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsOnDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventsOnDate \u003d entry.getValue();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventsOnDate.sort(Comparator.comparing(Event::getTime));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Event e : eventsOnDate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(e.toCalendarString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        //print there are how many task without date"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printCalendarStart(int size, int count) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"Calendar has \" + size + \" dates to display.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (count \u003e 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(count + \" events not on the calendar because they have no date.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else if (count \u003e 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(count + \" event not on the calendar because it has no date.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printCheckMessage() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Lists the name of all EventList in the given EventList ArrayList."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param eventLists EventList ArrayList to list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printAvailableList(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"Following are all existing lists:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(list.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"\u0027list All\u0027 will list all existing lists.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Lists all the events in the given EventList."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param eventList EventList to list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printList(EventList eventList) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String eventListName \u003d eventList.getName();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d eventList.getEvents();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"You have no \" + eventListName + \" events!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Here is a list of your \" + eventListName + \" events:\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            for (Event e : events) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                System.out.println(index + \". \" + e);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                if (e.getRepeatEventList() !\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                    System.out.println(\"   Repeated \" + e.getRepeatType() + \" for \" + e.getRepeatCount() + \" times.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void printDeadlineChangedMessage(Event eventUpdated) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(eventUpdated);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void printReminder(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            System.out.println(\"You have no events today!\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            System.out.println(\"You have the following events today: \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Collections.sort(events, new Comparator\u003cEvent\u003e() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                public int compare(Event o1, Event o2) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    return o1.getTime().compareTo(o2.getTime());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            });"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                System.out.println(events.get(i).toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printEventMarkedDoneMessage(Event doneEvent) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"You have successfully marked this event as done!\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(doneEvent);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printEventMarkedUndoneMessage(Event undoneEvent) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"You have successfully marked this event as undone!\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(undoneEvent);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageSavedMessage() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file has successfully been saved!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void printStorageLoadMessage() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(\"The file has successfully been loaded!\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageLoadingErrorMessage() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file does not exist or has been corrupted!\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints exception message."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param exceptionMessage String of warning message from various exceptions."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printErrorMessage(String exceptionMessage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(exceptionMessage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 4,
      "marcursor": 7,
      "matthewgani": 78,
      "ninggggx99": 28,
      "Reinbowl": 88
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_timetableEvent_printEventAdded() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add timetable event to data"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String timetableInput \u003d \"timetable Math class; math building; 17/10/2000; 1300\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(timetableInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"[T][✕] Math class, Location: \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"math building on 2000-10-17, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_invalidPersonalEvent_printZoomEventError() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event with incorrect number of parameters to data"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"zoom class meeting; zoom.sg; 17/10/2000\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"Incorrect number of parameters for Zoom event!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 3,
      "matthewgani": 57
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_multipleEvents_printCalendar() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Add zoom events to data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String zoomInput1 \u003d \"zoom Math class; zoom.com; 17/10/20; 1300\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        new AddCommand(zoomInput1).execute(data, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"[Z][✕] Math class, Link: zoom.com on 2020-10-17, 13:00\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String zoomInput2 \u003d \"zoom Math class 2; zoom.com; 10/10/20; 1500\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        new AddCommand(zoomInput2).execute(data, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"[Z][✕] Math class 2, Link: zoom.com on 2020-10-10, 15:00\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Add timetable event"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String timetableInput \u003d \"timetable english class; school of english; 24/10/20; 8:00\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        new AddCommand(timetableInput).execute(data, ui, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"[T][✕] english class, Location: school of english on 2020-10-24, 08:00\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Repeat zoom event 2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String repeatInput \u003d \"zoom 2 weekly 3\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        RepeatCommand.parse(repeatInput).execute(data, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"[Z][✕] Math class 2, Link: zoom.com on 2020-10-10, 15:00\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"is now repeating weekly for 3 times.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Execute calendar command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        CalendarCommand.parse(\"\").execute(data, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Calendar has 4 dates to display.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"10 Oct 2020\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Z | 3:00 PM | ✕ | Math class 2 | zoom.com\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"17 Oct 2020\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Z | 1:00 PM | ✕ | Math class | zoom.com\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Z | 3:00 PM | ✕ | Math class 2 | zoom.com\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"24 Oct 2020\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"T | 8:00 AM | ✕ | english class | school of english\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Z | 3:00 PM | ✕ | Math class 2 | zoom.com\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"31 Oct 2020\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Z | 3:00 PM | ✕ | Math class 2 | zoom.com\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_eventWithoutDate_doNotPrintCalendar() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Add personal event without date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String personalInput \u003d \"personal to finish project\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        new AddCommand(personalInput).execute(data, ui, storage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"[P][✕] to finish project\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Execute calendar command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        CalendarCommand.parse(\"\").execute(data, ui, storage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Calendar has 0 dates to display.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"1 event not on the calendar because it has no date.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 119
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CheckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "class CheckCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventInTimeRange_printEventsInTimeRange() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"04/05/20; 13:00; 05/05/20; 14:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList personalList \u003d  data.getEventList(\"Personal\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String expectedString \u003d \"Here is a list of your coinciding events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"1. [P][✕] Go out for dinner on 2020-05-05, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"_________________________________\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(expectedString, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventOutsideTimeRange_printEventsInTimeRange() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"04/05/20; 13:00; 04/05/20; 14:00\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String expectedString \u003d \"You have no coinciding events!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"_________________________________\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(expectedString, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 71,
      "matthewgani": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "class DeadlineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute_withDate_printDeadline() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute_withDateAndTime_printDeadline() throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07, 23:20\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withoutDateandTime_wrongNumberOfArgumentsException() throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberOfArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithoutDateandTime \u003d new DeadlineCommand(\"1\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithoutDateandTime.execute(data, ui, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withInvalidIndex_invalidIndexException() throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithInvalidIndex \u003d new DeadlineCommand(\"0; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withIndexIsNotaNumber_wrongNumberFormatException() throws DukeException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithInvalidIndex \u003d new DeadlineCommand(\"a; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "marcursor": 3,
      "matthewgani": 2,
      "ninggggx99": 124
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/GoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "class GoalCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage store \u003d new Storage(\"goalStoreTest\", ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_oneString_printChangeGoal() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_blankInput_printGoal() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have no goal! Why not set one now?\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_twoSeparateStringThenBlankInput_printChangeGoal() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString1 \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString2 \u003d \"Float like a bumblebee\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(inputString2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String blankString \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(blankString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal: \" + inputString2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 8,
      "marcursor": 2,
      "Reinbowl": 82
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    void execute_noEvent_printNoEventsInLists() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        // Execute list command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        // if the user enters \"list\" to list all events, the input string will be an empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        assertEquals(\"Here is a list of all your events!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Personal.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Timetable.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Zoom.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_zoomEvent_listZoomEvents() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event to data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"zoom Math class; zoom.com; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Execute list command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String inputString \u003d \"zoom\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"[Z][✕] Math class, Link: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"Here is a list of your Zoom events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                        + \"1. [Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "marcursor": 2,
      "matthewgani": 53,
      "Reinbowl": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ReminderCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withoutEvents_printNoEvents() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ReminderCommand testWithEvents \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testWithEvents.execute(data, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have no events today!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withEvents_printEventsToday() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate current \u003d LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"timetable wakeup; \" + current.toString() + \"; 1000\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addTimetableEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addTimetableEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ReminderCommand testWithEvents \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testWithEvents.execute(data, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate printDate \u003d DateTimeParser.dateParser(current.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printDate + \", 10:00\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have the following events today: \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printDate + \", 10:00\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withRepeatedEvents_printEventsToday() throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate current \u003d LocalDate.now();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate last \u003d current.minusWeeks(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"timetable wakeup; \" + last.toString() + \"; 1000\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addTimetableEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addTimetableEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String repeatInput \u003d \"timetable 1 weekly 1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(repeatInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ReminderCommand testWithEvents \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testWithEvents.execute(data, ui, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate printLastDate \u003d DateTimeParser.dateParser(last.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate printDate \u003d DateTimeParser.dateParser(current.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printLastDate + \", 10:00\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printLastDate + \", 10:00\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"is now repeating weekly for 1 times.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have the following events today: \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printDate + \", 10:00\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 97
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/RepeatCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingDeadlineRepeatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "class RepeatCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void setupEventLists() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Add Personal event to data"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String personalInput \u003d \"personal party; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        personalInput \u003d \"personal surprise\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Add Zoom event to data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Add zoom event to data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String zoomInput \u003d \"zoom Math class; zoom.com; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Add Timetable Event to Data"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String timeTableInput \u003d \"timetable Science class; S17; 17/10/2000; 1500\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(timeTableInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_personalEventMonthly_personalEventRepeatedMonthly() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Create Repeat Command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 monthly 4\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Nov 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Dec 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Jan 2001 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Feb 2001 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_zoomEventWeekly_zoomEventRepeatedWeekly() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //creating repeat command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"zoom 1 weekly 3\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating weekly for 3 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"zoom 1\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"16 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"23 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_timeTableEventDaily_timeTableEventRepeatedDaily() throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //creating repeat command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"timetable 1 daily 3\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[T][✕] Science class, Location: S17 on 2000-10-17, 15:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating daily for 3 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"timetable 1\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[T][✕] Science class, Location: S17 on 2000-10-17, 15:00 is also on:\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"18 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"19 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"20 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_personalEventRepeatDailyMonthlyChange_personalEventDailyToMonthly() throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for daily"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 daily 4\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating daily for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //clear screen and now test changing repeat from daily 4 to monthly 2"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1 monthly 2\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 2 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //clear screen and check if monthly repeats were successfully recorded"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Nov 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Dec 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventNoDeadline_missingDeadlineExceptionThrown() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event with no deadline"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 2 daily 4\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(MissingDeadlineRepeatException.class, () -\u003e {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongIndex_indexOutOfBoundsExceptionThrown() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for an index which does not exist"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 5 daily 4\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongUnit_invalidTimeUnitExceptionThrown() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event using wrong time unit"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 fortnightly 4\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidTimeUnitException.class, () -\u003e {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_tooLittleArgumentsProvided_wrongNumberOfArgumentsExceptionThrown() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event with too little information"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(WrongNumberOfArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongType_invalidEventListTypeExceptionThrown() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for an event type that does not exist"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"holiday 5 daily 4\";"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidListException.class, () -\u003e {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_userTypeWrongNumber_NumberFormatExceptionThrown() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command using wrong number writing format"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 weekly three\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 286,
      "marcursor": 6,
      "ninggggx99": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.GoalCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage store \u003d new Storage(\"storagetester\", ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        store.loadAll(data);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void storageLoadAll_LoadFilesFromDirectory_allFilesLoaded() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage store \u003d new Storage(\"storagetester\", ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        store.loadAll(data);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand.execute(data, ui, store);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"The file has successfully been loaded!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"Here is a list of your Personal events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"1. [P][✕] stuff on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"   Repeated weekly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"2. [P][✓] birthday celebration on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"3. [P][✕] others\" + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"zoom\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand.execute(data, ui, store);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"Here is a list of your Zoom events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"1. [Z][✕] math, Link: www.zoom.com/blah\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"   Repeated daily for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"2. [Z][✓] computing, Link: www.zoom.com/hello\" + System.lineSeparator()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"timetable\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand.execute(data, ui, store);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"Here is a list of your Timetable events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"1. [T][✕] math, Location: S17 on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"   Repeated monthly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"2. [T][✓] computing, Location: COM2 on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        GoalCommand goalCheck \u003d new GoalCommand(\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        goalCheck.execute(data, ui, store);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"Goal: hello there\" + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void storageSaveAll_saveFilesIntoComputer_allFilesSaved() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelPersonalLoc \u003d {\"storagetestermodelans\", \"personal.txt\"};"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelZoomLoc \u003d {\"storagetestermodelans\", \"zoom.txt\"};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelTimetableLoc \u003d {\"storagetestermodelans\", \"timetable.txt\"};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelGoalLoc \u003d {\"storagetestermodelans\", \"goal.txt\"};"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path personalPath \u003d createPath(modelPersonalLoc);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path zoomPath \u003d createPath(modelZoomLoc);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path timetablePath \u003d createPath(modelTimetableLoc);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path goalPath \u003d createPath(modelGoalLoc);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e personalModel \u003d Files.readAllLines(personalPath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e zoomModel \u003d Files.readAllLines(zoomPath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e timetableModel \u003d Files.readAllLines(timetablePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e goalModel \u003d Files.readAllLines(goalPath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Storage store \u003d new Storage(\"storagetester\", ui);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            store.loadAll(data);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            store.saveAll(data);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualPersonalLoc \u003d {\"storagetester\", \"personal.txt\"};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualZoomLoc \u003d {\"storagetester\", \"zoom.txt\"};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualTimetableLoc \u003d {\"storagetester\", \"timetable.txt\"};"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualGoalLoc \u003d {\"storagetester\", \"goal.txt\"};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualPersonalPath \u003d createPath(actualPersonalLoc);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualZoomPath \u003d createPath(actualZoomLoc);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualTimetablePath \u003d createPath(actualTimetableLoc);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualGoalPath \u003d createPath(actualGoalLoc);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e personalActual \u003d Files.readAllLines(actualPersonalPath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e zoomActual \u003d Files.readAllLines(actualZoomPath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e timetableActual \u003d Files.readAllLines(actualTimetablePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e goalActual \u003d Files.readAllLines(actualGoalPath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(personalActual, personalModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(zoomActual, zoomModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(timetableActual, timetableModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(goalActual, goalModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            fail(\"IO error! File was not written to\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function accepts a string and creates a path object originating from the user directory."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param pathName is a string array which accepts in the path name words, each word represents a folder"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Path object indicating the location of the pathName keyed in initially."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path createPath(String[] pathName) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String origin \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Path newPath \u003d Paths.get(origin, pathName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 172
    }
  },
  {
    "path": "storagetester/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "hello there"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "storagetester/personal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "stuff | 2010-01-01 | 1200 | WEEKLY | 4 | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "birthday celebration | 2010-01-01 | 1200 | 0 | 0 | T"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "others | 0 | 0 | 0 | 0 | F"
      }
    ],
    "authorContributionMap": {
      "Colin386": 3
    }
  },
  {
    "path": "storagetester/timetable.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "math | 2010-01-01 | 1200 | MONTHLY | 4 | S17 | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | COM2 | T"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2
    }
  },
  {
    "path": "storagetester/zoom.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "math | 2010-01-01 | 1200 | DAILY | 4 | www.zoom.com/blah | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | www.zoom.com/hello | T"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2
    }
  },
  {
    "path": "storagetestermodelans/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "hello there"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "storagetestermodelans/personal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "stuff | 2010-01-01 | 1200 | WEEKLY | 4 | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "birthday celebration | 2010-01-01 | 1200 | 0 | 0 | T"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "others | 0 | 0 | 0 | 0 | F"
      }
    ],
    "authorContributionMap": {
      "Colin386": 3
    }
  },
  {
    "path": "storagetestermodelans/timetable.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "math | 2010-01-01 | 1200 | MONTHLY | 4 | S17 | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | COM2 | T"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2
    }
  },
  {
    "path": "storagetestermodelans/zoom.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "math | 2010-01-01 | 1200 | DAILY | 4 | www.zoom.com/blah | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | www.zoom.com/hello | T"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "del \"..\\..\\text-ui-test\\data\\*.*\" /f /q"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "del \".\\data\\*.*\" /f /q"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "rm ./data/*.*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "rm ./data/*.*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "-": 23
    }
  }
]
