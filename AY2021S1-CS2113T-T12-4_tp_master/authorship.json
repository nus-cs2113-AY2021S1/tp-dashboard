[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 1,
      "-": 46
    }
  },
  {
    "path": "data/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "hello there"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Colin Ng | [Github](https://github.com/Colin386) | [Portfolio](docs/team/colinNg.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Tan | [Github](https://github.com/marcursor) | [Portfolio](docs/team/marcustan.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Matthew Gani | [Github](https://github.com/matthewgani) | [Portfolio](docs/team/matthewgani.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Low Qing Ning | [Github](https://github.com/ninggggx99) | [Portfolio](docs/team/lowqingning.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Marcus Ng | [Github](https://github.com/reinbowl) | [Portfolio](team/marcusng.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 1,
      "matthewgani": 1,
      "ninggggx99": 2,
      "-": 4,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Introduction]()"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Setting up, getting started](#setting-up-getting-started)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Design](#design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Architecture](#architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [UI Component](#ui-component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Command Component](#command-component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Parser Component](#parser-component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [UserData Component](#userdata-component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Storage component](#storage-component)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Implementation](#implementation)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Help](#help-feature)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Add](#add-feature)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [List](#list-feature)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Calendar](#calendar-feature)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Repeat](#repeat-feature)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Deadline](#deadline-feature)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Check](#check-feature)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Goal](#goal-feature)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Done](#done-feature)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Undone](#undone-feature)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Delete](#delete-feature)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Note](#note-feature)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Reminder](#reminder-feature)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Extract](#extract-feature)    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Documentation, logging, testing, configuration, dev-ops](#documentation-logging-testing-configuration-dev-ops)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Appendix: Requirements](#appendix-requirements)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Product scope](#product-scope)   "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [User Stories](#user-stories) "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Use Cases](#use-cases)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Non-Functional Requirements](#non-functional-requirements)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Glossary](#glossary)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- [Instructions for manual testing](#instructions-for-manual-testing)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Launch and Shutdown](#launch-and-shutdown)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Loading and Saving Data](#loading--and-saving-data)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Adding new event](#adding-new-event)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Delete Event](#delete-event)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Repeat Event](#repeat-event)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Changing status of events](#changing-status-of-events)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Help Command](#help-command)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Printing calendar](#printing-calendar)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Checking schedule availability](#checking-schedule-availability)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Adding deadline to event](#adding-deadline-to-event)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    * [Setting reminder](#setting-reminder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Setting up, getting started"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Fork the Scheduler--; repo from this [link](https://github.com/AY2021S1-CS2113T-T12-4/tp)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Clone the fork on to your computer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. Open Intellij. If you are not in the welcome screen, click `File` -\u003e \u0027Close project\u0027 "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "to close the existing project dialog. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "4. Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    1. Click `Configure` -\u003e `Project Defaults` -\u003e `Project Structure`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    2. Click `New...` and set it to the directory of the JDK."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "5. Click `Open or Import` in Intellij."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "6. Locate the `build.gradle` file, select it and click `OK`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "7. If asked, choose to `Open as Project`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "8. Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "9. Wait for the importing process to finish."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "10. Locate run the \u0027Duke.java\u0027 file, right click and select `Run Duke.main()`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "11. Navigate to the `test\\java` folder and right click `seedu.duke` and select `Run Tests in \u0027seedu.duke\u0027`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "If the setup is successful, you should see this after step 10. All tests should also pass."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Welcome to scheduler--;!"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "File Created: Personal"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "File Created: Zoom"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "File Created: Timetable"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "File Created: Goal"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The file has successfully been loaded!"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You have no events today!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Architecture Diagram](./diagrams/Architecture.jpg)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of App. Given below is a quick overview of"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "each component."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "`Duke` class contains the main method. It is responsible for,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- At app launch: Initializes the components in the correct sequence, and connects them up with each other.  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- At shut down: Stores the user data from memory into the hard disk."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The rest of the App consists of five components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- `Ui`: The Ui of the App."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- `Parser`: Parses the input to determine which command to execute."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- `Command`: The command executer."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- `UserData`: Holds the data of the App in the memory."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Ui Component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The \u0027Ui\u0027 component is in charge of handling input from users and system output."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "#### Command Component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Diagram for commmand](./diagrams/Command.jpg)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "API: [Command.java](https://github.com/AY2021S1-CS2113T-T12-4/tp/blob/master/src/main/java/seedu/duke/command/Command.java) "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. `Parser` class to parse the user command "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1.  This results in a `Command` object executed by the `Parser`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1.  The command execution can affect the `Model`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "It listens for commands made in the Duke Class and sends the input to the parser class."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "It is also responsible for printing messages from commands and exception messages. "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Parser Component"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![Parser diagram](./diagrams/Parser_diagram.jpg)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcursor"
        },
        "content": "The `Parser` object uses its `parse` method to parse inputs passed to it from `Ui`. This method returns a `Command` object to be executed by `Duke`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### UserData Component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "![UserData diagram](./diagrams/UserData_diagram.jpg)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcursor"
        },
        "content": "The `UserData`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- stores `EventList` objects that store events of different categories (i.e. Personal, Timetable, Zoom)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- stores a `Goal` object that represents the current user goal."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- does not depend on the other components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Storage Component"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Diagram for storage class](./diagrams/classDiagramStorage.jpg)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "API [Storage.java](https://github.com/AY2021S1-CS2113T-T12-4/tp/blob/master/src/main/java/seedu/duke/storage/Storage.java) "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The storage component,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- is able to store all event and goal information onto the computer"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- is able to load all event and goal information from the computer into the program"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "![Diagram for storageOverall](./diagrams/storageOverall.jpg)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "How the storage component load files"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- the storage component will read the correct txt file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- It passes the text to the StorageParser."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- The event strings are converted to actual events using their respective class constructors."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- the events are added back into the UserData structure."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "How the storage component save files"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- The storage component will first retrieve the correct EventList from the UserData."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- It will next send this EventList into the StorageParser"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- The StorageParser uses its functions to convert the events into string representations"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- The StorageParser then returns these string representations to Storage"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- the Storage class then writes them to the correct Path and the corresponding text(.txt) files are modified. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "In this section, the features implemented will be explained using various UML diagrams and code snippets."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Help feature"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Add feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The add feature in the program allows the user to create one of 3 different events in scheduler--;."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "These 3 are the Personal, Zoom and Timetable events. These events have varying numbers of arguments or fields that can "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "be inserted upon creation. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Firstly, to begin, the user needs to key in the command `add [event type] [description]; [date]; [time]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The optional fields to fill in like the link and location for the zoom and timetable classes can be inserted respectively . For example,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`add zoom cs2113t meeting; zoom.sg; 16/09/20; 2100`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "When a command like this is called, the constructor to `addCommand` will be able to detect the event type based on the user\u0027s input. It then stores the event type in that instance of the addCommand."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Next, when `addCommand#execute` is called from the main, this method will call the respective method to create one of the three events. These methods are `addCommand#addPersonal`, `addCommand#addZoom`, and `addCommand#addTimetable`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The personal event can contain the following fields: "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description and date"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. Description, date and time"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The zoom event can contain the following fields:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description and link"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description, link, date and time"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The Timetable event can contain the following fields:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Description, date and time"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Description, location, date and time"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The fields for what each event can contain were chosen based on what we as a team thought were important fields for the respective event types."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "However, these methods can easily be edited to accept different numbers of fields if we change our minds in the future."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Given below is an example scenario of the add feature:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 1. The user launches the application for the first time. There will be no events stored at the moment."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 2. The user executes `add zoom cs2113t meeting; zoom.sg; 16/09/20; 2100`. The `addCommand` instance is created and detects that the event is of Zoom type."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 3. `addCommand#execute` is called. The class knows the current addCommand is of Zoom type so it calls `addCommand#addZoom`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 4. `addCommand#addZoom` detects there are 4 fields in the command, separated by semicolons, and uses this to create a new Zoom event."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 5. The Zoom event is then added to the user\u0027s `UserData` for further use."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The following sequence diagram shows how the whole add feature works: \u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Add Command](./diagrams/addCommand.jpg)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "#### List feature"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The list feature allows the user to print a list of events added by type."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The list of events is print according to the order it was added in."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "User calls the list command by executing `list [argument]`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Executing `list` without specifying any argument prints a list of event types available.  "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Specifying an event type as the argument prints a list of events of that type.  "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Specifying `all` as the argument prints a list of all events in the order: Personal, Timetable, Zoom."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Given below is an example usage scenario of the list feature."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 1. The user executes `list zoom` command to print a list of Zoom events."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The `list` command is passed through a parser to return the ListCommand with arguments initialised."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 2. `ListCommand#execute()` is called, retrieving the list of Zoom events in `UserData`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 3. `ListCommand#execute()` calls `Ui#printList()` and passes the list of Zoom events to print."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Step 4. `Ui#printList()` loops through every event in the Zoom event arraylist and prints it."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The following sequence diagram shows how the `list zoom` command is parsed:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence diagram for parsing list command](./diagrams/ListParseSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Calendar feature"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Repeat feature"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeat feature on the program allows for the user to be able to make certain events repeat several times over a defined time period."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": "For instance, the user can request for a personal event to be repeated monthly for four months. To run the program, the user will need to key in the command `repeat [event type] [index] [timeUnit] [count]`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|Argument| Description |"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|event type|What type of event is to be repeated? Accepted arguments are `personal`, `timetable` or `zoom`|"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|index|Index number of the event to be repeated that is stored on the Event List|"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|timeUnit|For what unit of time each event is to be repeated. Accepted arguments are `daily`, `weekly` and `monthly`|"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": "|count|Integer indicating how many times the event is to be repeated|"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": "For example, to repeat a personal event located at index 2 for 3 days, the user will key in this: `repeat personal 2 daily 3`."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The following sequence diagram shows the overall process of repeating an event:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command](./diagrams/RepeatScenario.jpg)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The steps to repeating the command will be described in the following sections. "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 1: Obtaining the event information"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeat command first locates the event that is to be repeated along with its starting date."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Next, it creates an empty ArrayList called `repeatEventList` that will contain all repeated events."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 1](./diagrams/repeatstep1.jpg)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 2: Incrementing the Original Date"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeatCommand object will now call upon Event to increment the date by a fixed unit of time. In the following diagram, it shows how the program flow will work should a monthly repeat increment be set. "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The increment date will be assigned the name `repeatDate`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 2](./diagrams/repeatstep2.jpg)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 3: Set Repeat type"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The repeatCommand now will set the original Event to have a repeat type setting. In the diagram\u0027s example, it will be set to `monthly`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 3](./diagrams/repeatstep3.jpg)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 4: Clone the event"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The original event is now cloned as shown in the following sequence diagram."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 4](./diagrams/repeatstep4.jpg)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 5: Add the cloned activity"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Colin386"
        },
        "content": "The cloned activity will now have its date set to be `repeatDate`. This new activity is now added into the `repeatEventList` as shwon in the following diagram."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 5](./diagrams/repeatstep5.jpg)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 6: Repeat steps 2 to 5"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Steps 2 to 5 are repeated up till the number specified by `count` as shown in the loop."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 6](./diagrams/repeatstep6.jpg)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 7: Assign the ArrayList as the RepeatEventList attribute of the original event."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Finally, set the `repeatEventList` using the `setRepeatEventList` command as shown in the following section of the sequence diagram. The results of this process is printed and control returns back to the main program."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "![Sequence Diagram for Repeat Command step 7](./diagrams/repeatstep7.jpg)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Deadline feature"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The user executes ```deadline 1; 7/10/20; 11:20 PM``` command to set the deadline for the 1st event in Personal event list"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "to be on the 7th October 2020 at 11:20 PM. "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The ```deadline``` command calls ```DeadlineCommand#execute()```, adding/updating the personal event deadline. \u003cbr\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Given below is how the deadline command behave: \u003cbr\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "  \u003cimg width\u003d\"414\" height\u003d\"562\" src\u003d\"./diagrams/DeadlineScenario.jpg\"\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The following sequence diagram shows how the deadline operation works: \u003cbr\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![Sequence Diagram for Deadline Command](./diagrams/DeadlineSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Check feature"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The check feature is implemented using the `CheckCommand` class. `CheckCommand` accesses the `Event`s stored within `EventList`s in order to determine if events are occurring within a given time period. It implements the following operations:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `CheckCommand#getDate(stringDate)` -- Parses a given string to get a LocalDate variable (either the start or end date for the time period)."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `CheckCommand#getTime(stringTime)` -- Parses a given string to get a LocalTime variable (either the start or end time for the time period)."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `CheckCommand#checkEventsInTimeRange(eventsList, startDate, endDate, startTime, endTime)` -- Checks each event in the eventsList to see if they occur within the time period defined in the command, and saves all coinciding events in an ArrayList."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "These operations are not exposed, and are used as private methods within the `CheckCommand` interface."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Given below is an example usage scenario and how the check feature functions."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 1. The user inputs `check 11/5/2020; 5:15 PM; 15/5/2020; 9 PM` in order to check for events occurring between 11th May 2020, 5:15 pm and 15th May 2020, 9:00 pm. This input is received by the Ui, which processes it into a string. The string is parsed by the Parser, which returns a CheckCommand with the date and time parameters stored in it as a string."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 2. `CheckCommand#execute()` is called. The command string containing the date and time parameters are split into a String array to separate the different parameters. "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 3. Within `CheckCommand#execute()`, `CheckCommand#getDate()` is called to parse the start and end dates, and `CheckCommand#getTime()` is called to parse the start and end times."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "This sequence diagram shows how the `getDate` method functions:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![Sequence Diagram for getDate](./diagrams/getDate_seq_diagram.jpg)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 4. Within `CheckCommand#execute()`, the start date time and end date time is passed to `CheckCommand#checkEventsInTimeRange()` along with an `EventList` (i.e. Zoom, Personal or Timetable). This method checks each `Event` in the `EventList` to determine if the event occurs within the time period. If the event date time coincides with the time period, the event is added to an ArrayList that stores all the coinciding events in the current `EventList`. This is done for each `EventList`. "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 5. The contents of the ArrayLists returned by `CheckCommand#checkEventsInTimeRange()` are combined into a single ArrayList, and a new `EventList` (\"coinciding\") is created using this combined list of events."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 6. `Ui#printList()` is called to print the list of coinciding events."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The following sequence diagram shows how the check operation works:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![Sequence Diagram for CheckCommand](./diagrams/CheckCommand_seq_diagram.jpg)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Goal feature"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The goal feature is achieved by `GoalCommand`. It either prints the current goal stored internally in"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`UserData` if there is one, or it sets the input as the new goal by replacing the previous goal."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Given below is an example usage scenario of the goal feature."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 1. The user launches the application for the first time. `Ui#printGoal` is called, "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "a line informing them they have no goal is printed."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 2. The user executes `goal save money` command to set the goal as \"save money\"."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The `goal` command is passed through a parser to return the GoalCommand with arguments initialised."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 3. `GoalCommand#execute()` is called, setting the goal in `UserData` to \"save money\". The change is printed"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "with `Ui#printChangeGoal()`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 4. The user executes `goal` command to print the current goal."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The `goal` command is passed through a parser to return the GoalCommand with blank arguments."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Step 5.  `GoalCommand#execute()` is called, to retrieve the current goal in `UserData` and print it"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "with `Ui#printGoal()`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The following sequence diagram shows how the `goal save money` command is parsed:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![Sequence diagram for parsing goal command](./diagrams/GoalParseSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The following sequence diagram shows how `GoalCommand#execute()` works:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "![Sequence diagram for goal command execute](./diagrams/GoalExecuteSequenceDiagram.jpg)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Done feature"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Undone feature"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Delete feature"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Note feature"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Reminder feature"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### Extract feature"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(WIP)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "marcursor"
        },
        "content": " "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## Documentation, logging, testing, configuration, dev-ops"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "marcursor"
        },
        "content": "## Appendix: Requirements"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "marcursor"
        },
        "content": "##### Target user profile"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003ehas a need to organise events using scheduler\u003c/li\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eprefer desktop application\u003c/li\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003ecan type fast\u003c/li\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eprefer typing to mouse interactions\u003c/li\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eis reasonably comfortable using CLI apps\u003c/li\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "marcursor"
        },
        "content": "##### Value proposition"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Manage one\u0027s events quickly compared to GUI scheduling applications. "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Users can check when they are free using a simple command "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "and also extract deadlines from any body of text."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### User Stories"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v1.0|office worker (working from home)|organise large amount of online Zoom meetings to manage|keep track of his schedule for the day|"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v1.0|university student|consolidate my schedule for both my online zoom lectures and my ordinary timetable|better manage my time|"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v1.0|university student having projects|be informed of the goals of my project|keep track of the project details|"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v1.0|university student|customise repeated task|set events like tutorials to weekly|"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v1.0|teacher|organise all my zoom links for my classes|it can be easily accessible.|"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v1.0|user|see the events that I have created|refer to them when I forget|"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v1.0|user|check when I am available on that day|avoid manually searching through my entire calendar to find out if I have time|"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v2.0|user|be able to keep track the status of completion of the events I created|focus more on the tasks that I need to complete|"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v2.0|user|view which events are upcoming in a convenient readable format|locate the events easily by date|"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v2.0|user|the application to alert me when my deadlines are coming up|be given enough time to work on them and not rush last minute|"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v2.0|user|create deadlines from the email text body|avoid looking through the email to create one by one|"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v2.0|new user (new to text-based application)|detailed directions on commands I can use|easily navigate through the application|"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|v2.0|new user (expert in using text-based application)|have some useful shortcut keys|speed up common tasks|"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Use Cases"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(For all use cases below, the System is Scheduler--; and the Actor is the user, unless specified otherwise)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Use case: Extracting deadlines from an email**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. User enters extract command for a body of text/email"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Scheduler--; shows a list of dates detected"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. User chooses one of the dates"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "4. Scheduler--; shows a list of the time slots detected"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "5. User chooses one of the time slots"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "6. Scheduler--; creates a personal event based on the user\u0027s choices"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2a. There are no dates detected."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Scheduler--; creates a Personal event with no date or time."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " 3a. User selects an invalid index from the list of dates."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- 3a1. Scheduler--; requests for the user to pick a valid number."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- 3a2. User enters new index."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Steps 3a1-3a2 are repeated until the index entered is valid."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " 5a. User selects an invalid index from the list of time slots."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- 5a1. Scheduler--; requests for the user to pick a valid number."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- 5a2. User enters new index."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Steps 5a1-5a2 are repeated until the index entered is valid."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Use case resumes from step 6."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Use case: Repeating an event and checking its status**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "MSS:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. User uses list command for one of the three types of events."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. Scheduler--; prints a list for the event type chosen."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3. User enters repeat command for one of the events."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "4. Scheduler--; prints a confirmation message."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "5. User uses repeat command to check status of the repeated event."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "6. Scheduler--; prints out the status of the repeated event."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Extensions:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "3a. User selects a personal event that does not have a deadline"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Scheduler--; prints an error message and use case ends."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "marcursor"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003col\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eWork on any mainstream OS that has Java 11 or above installed\u003c/li\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    \u003cli\u003eA user who has faster typing speed than average should be able to use this program with ease\u003c/li\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Mainstream OS: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Launch and Shutdown"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Initial Launch"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Copy the Java Archive file into an empty directory"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. On windows machines, open up the terminal and navigate to the directory"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type in `chcp 65001` and press enter"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type in `java -Dfile.encoding\u003dUTF-8 -jar scheduler.jar` and press enter"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. You should now see the welcome message printed on the screen"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Shutdown"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. In the program, type the word `bye` and press enter"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. You should now see the goodbye message printed on the screen"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. The program should return you back to the main terminal window"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Loading  and Saving Data"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Sample Load data"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Copy the Java Archive file into an empty directory"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. In this directory, make a directory called `data`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Copy the files in the `storagetester` directory into the `data` directory"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Launch the program as shown in the previous section"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list all`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. You should now see the files listed on the program as shown"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Adding new event"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Add a personal event"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Load the program"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal dental appointment`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list personal`, your new personal event should be displayed on the screen"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Delete Event"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Deleting a personal event"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Load the program"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal dental appointment`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list personal`, your new personal event should be displayed on the screen"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `delete 1` "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        When you type `list personal`, you should notice that the list is blank"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `delete 0`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        An error message should be displayed as none of the events are labelled with event index 0."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Repeat Event"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Repeating a personal event"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Load the program"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal dental appointment; 18/09/2020`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal birthday`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list personal`, your new personal events should be displayed on the screen"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `repeat personal 2 monthly 3`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        An error message should be displayed indicating that you cannot repeat an event with no deadline"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `repeat personal 1 monthly 3`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        When you type `repeat personal 1`, you should see a message indicating to you that the event is repeated monthly for three more times. "
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Changing status of events"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Changing the status of a personal event"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Load the program"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal dental appointment; 18/09/2020`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal birthday`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list personal`, your new personal events should be displayed on the screen"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `done pesonal 1`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        When you type `list personal`, you should see that the symbol of the first event has changed from a cross to a tick"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `undone personal 1`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        When you type `list personal`, you should see that the symbol of the first event has changed from a tick to a cross "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Help Command"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Getting generic help"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Load the program"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `help` and press enter"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. You should see a summary of all the commands available to the user printed on the screen"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Printing calendar"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Printing calendar"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Copy the Java Archive file into an empty directory"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. In this directory, make a directory called `data`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Copy the files in the `storagetester` directory into the `data` directory"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Launch the program as shown in the previous section"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list all`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. You should now see the files listed on the program as shown"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `calendar`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. As you press enter, you should see all your events and timings being displayed in chronological order"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Once all the events have been printed, the `End of calendar` message should appear"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    "
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Checking schedule availability"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Check Schedule"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Copy the Java Archive file into an empty directory"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. In this directory, make a directory called `data`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Copy the files in the `storagetester` directory into the `data` directory"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Launch the program as shown in the previous section"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list all`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. You should now see the files listed on the program as shown"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `check 01/01/2010; 1100; 01/01/2010; 2359;`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        1. You should see the check command prints out all events that fall between the timing of 01 Jan 2010 1100hrs to 2359hrs"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `check 01/01/2020; 1100; 01/01/2020; 2359`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        1. The message `You have no coinciding events!` should be printed. "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Adding deadline to event"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Repeating a personal event"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Load the program"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal dental appointment; 18/09/2020`"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal birthday`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `list personal`, your new personal events should be displayed on the screen"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `deadline 2; 03/08/2020`"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        A success message should be printed, indicating that the new deadline has been set"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        When `list personal` is typed, you should see that the second event now has a deadline attached to it"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Colin386"
        },
        "content": "### Setting reminder"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Repeating a personal event"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Load the program"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal dental appointment; 18/09/2020`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Type `add personal birthday; \u003c\u003ccurrent date that test is run\u003e\u003e`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    1. Test Case: `reminder`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        The program should show that the personal birthday event is the event that you have for today. "
      }
    ],
    "authorContributionMap": {
      "Colin386": 194,
      "marcursor": 23,
      "matthewgani": 285,
      "ninggggx99": 24,
      "-": 30,
      "Reinbowl": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "CS2113T – T12 – 04 Scheduler--;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Scheduler--; Does the job"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[1. About Scheduler--;](#1-about-scheduler--) \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.1 What can it do?](#11-what-can-it-do) \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.2 About this guide](#12-about-this-guide) \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.3 How to use this document?](#13-how-to-use-this-document) \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[1.4 Conventions used in this document](#14-conventions-used-in-this-document) \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[2. Quick Start](#2-quick-start) \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[2.1 System Requirements](#21-system-requirements) \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[2.2 Setup Instructions](#22-setup-instructions) \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.2.1 Windows](#221-windows) \u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.2.2 Mac OS X](#222-mac-os-x) \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[2.2.3 Linux](#223-linux) \u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[2.3 Test run](#23-test-run) \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[3. Features](#3-features) \u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.1 Viewing help: help](#31-viewing-help-help-colin-ng) \u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.2 Adding an event: add](#32-adding-an-event-add-matthew-gani) \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.3 List events: list](#33-list-events-list-marcus-ng) \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.1 List all events](#331-list-all-events-of-a-type) \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3.2 List all events of a type](#332-list-all-events) \u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.4 Calendar format list: calendar](#34-calendar-format-list-calendar-marcus-ng) \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.5 Deadlines: deadline](#35-deadlines-deadline-qing-ning) \u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.6 Repeat on daily/weekly/monthly basis: repeat](#36-repeat-on-dailyweeklymonthly-basis-repeat-colin-ng) \u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.7 Check availability on a specific date and time: check](#37-check-availability-on-a-specific-date-and-time-check-marcus-tan) \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.8 Goal setting and viewing: goal](#38-goal-setting-and-viewing-goal-marcus-ng) \u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.9 Mark events as done: done](#39-mark-events-as-done-done-marcus-tan) \u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.10 Mark events as not done: undone](#310-mark-events-as-not-done-undone-marcus-tan) \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.11 Deleting an event: delete](#311-deleting-an-event-delete-marcus-tan) \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.12 Note taking: note](#312-note-taking-note-qing-ning) \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.13 Reminder: reminder](#313-reminder-reminder-qing-ning) \u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.14 Extracting events from texts: extract](#314-extracting-events-from-texts-extract-matthew-gani) \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.15 Save events: save](#315-save-events-events-colin) \u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "\u0026nbsp;\u0026nbsp;[3.16 Exiting the program: bye](#316-exiting-the-program-bye) \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[4. FAQ](#4-faq) \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[5. Command Summary](#5-command-summary)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 1. About Scheduler--;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Hello! Welcome to scheduler--;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Scheduler--; (S--) is a desktop app for managing deadlines from different sources. The user will use a Command Line Interface to control it. It is specially designed for Computing students who are comfortable in using CLI and have Git project deadlines as well as consolidated Zoom session links due which will suit home based learning in this COVID period. "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 1.1 What can it do?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Scheduler--; comes with the following list of features to help you keep organised of your schedule.  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Check if your schedule is free between a certain date and time period"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Prioritize important task on your schedule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Categorise your events into personal events, zoom meetings or school timetable events. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Be reminded on the important tasks and expected deadlines "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Set certain events to occur repeatedly throughout your schedule "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Set personal daily goals for yourself "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- And many more... "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 1.2 About this guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "This user guide is for your reference on how to set up the Scheduler--; program on your computer. It provides you with information on how to get things done with scheduler--; and how to use the commands in the program. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 1.3 How to use this document?"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "To get started, take a look at the section labelled “Quick Start” to set up the application to run on your computer.  "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Once you have set up the application, you may use the table of contents present in this document to help find the correct command, learn how to use it and what it does.  "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 1.4 Conventions used in this document"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Words that are highlighted in grey, for instance, list, indicate that the words are commands to be typed into the command line interface. "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Words that are highlighted in grey and are in lower case indicates commands that are to be typed exactly. For instance, if the instructions says to type the words `list all` to run a command,  type on the program the exact words “list all” "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Words that are highlighted in grey and are in upper case indicates command arguments or parameters that are to be provided by the user. For instance, if the usage instruction informs you to type `delete EVENT_INDEX` and you know that the EVENT_INDEX is 2, type into the computer program “delete 2”. "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "This is a note textbox. Additional information about the command will be written in boxes such as this one. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Words that are highlighted in grey, in upper case and are surrounded by square brackets indicates command arguments or parameters that the user can choose to provide or not to provide. For instance, if the command instruction informs you to type `goal [NEW_GOAL]`, you can choose to omit the argument for NEW_GOAL and instead just simply type “goal”."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed warningBox\"}}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "**Warning!**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "This is a warning textbox. Any user interaction with the program that may result in issues or unintended results will be written in boxes such as this one. "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "**Notes about the command format**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Items in square brackets are optional"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "  e.g. `n/Name [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Items with ... after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "  e.g. `[t/TAG]...` can be used as  (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 2.1 System Requirements"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "To run Scheduler--;, your computer must meet these minimum system requirements "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Operating System: Windows 7 and above, Mac OS X or Linux "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- Java 11 installed on computer "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 2.2 Setup Instructions"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### 2.2.1 Windows"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Install Java 11 or above in your computer if you have not done so "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Download the latest scheduler.jar from [here](https://github.com/AY2021S1-CS2113T-T12-4/tp/releases) "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Copy the file to the folder you want to use as the folder for the Scheduler— "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Open the command prompt by entering `cmd` into the search bar and press enter "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Type `chcp 65001` into the command prompt and press enter "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Navigate to the folder where you saved the jar file using the command prompt "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Right click the top of the command prompt window, go to \u0027properties\u0027 and change the font to NSimSun to support ticks and crosses used in Scheduler--;. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Type `java -jar scheduler.jar` into the command prompt and press enter. "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. The welcome message for the program should appear. "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### 2.2.2 Mac OS X"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Install Java 11 or above in your computer if you have not done so "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Download the latest scheduler.jar from here "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Copy the file to the folder you want to use as the folder for the Scheduler--; "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Open the terminal by clicking on Launchpad-\u003eUtilities-\u003eTerminal "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Navigate to the folder you have stored the jar file in the command prompt "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Type `java -jar scheduler.jar` into the terminal and press enter. "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. The welcome message for the program should appear. "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### 2.2.3 Linux"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Install Java 11 or above in your computer if you have not done so "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Download the latest scheduler.jar from here "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Copy the file to the folder you want to use as the folder for the Scheduler--; "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Open the terminal in your linux distribution"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Navigate to the folder you have stored the jar file in the command prompt "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. Type `java -jar scheduler.jar` into the terminal and press enter. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. The welcome message for the program should appear. "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 2.3 Test run"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Type the command in the command box and press Enter to execute. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Some examples you can try: "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - `list`: List all events "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - `add EVENT_TYPE EVENT_NAME at DD/MM/YY HHMM`: Add an event to the scheduler "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - `bye`: exit the program "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. Refer to Features section for details of each command "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Congratulations! You have just finished setting up Scheduler--; Feel free to explore the program, or if you would like some assistance, take a look at the subsequent sections for instructions on how to use the available features of this program. Happy scheduling!"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "This section introduces and explains the features of Scheduler--;!"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.1 Viewing help: help (Colin Ng)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "If you are ever unsure on how to use a command, or you would like to learn more about the uses of a command, the help command is scheduler--; onboard help line for getting information. The help command allows you to get more information when you are unsure on how to use the program. It can also assist you with getting more information on how to use a specific command in the program. "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: `help [COMMAND]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": "#### How to use? "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "When you type in `help`, a generic help screen will be printed as shown below "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "help"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Here is a summary of all the commands that the program can run"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "help - Provides more information on how to use the commands available in the program"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "add - Records a personal, timetable or zoom event into the program"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "deadline - Sets or change a deadline for a personal event"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "repeat - repeat an event for a specified amount of times every day, week or month"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "goal - Sets up a goal for the user"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "done - mark the event as completed"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "delete - remove a personal, timetable or zoom event permamently from the program"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "note - Add in additional notes associate to the personal, timetable or zoom event"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "reminder - prints out events that will be occuring on the present day"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "extract - extracts out important event information from text to be recorded as events in the program"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "save - save current changes made to the program"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": "bye - exits the program "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "To find out more about each of these functions, type in \"help [COMMAND]\" into the terminal where COMMAND is the name of the command you would like more information about"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "If you want to get help for a specific command, type in `help [COMMAND]`. For example, the following screenshot shows what happens if you type in `help add`. "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "help add"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "add - Records a personal, timetable or zoom event into the program"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: add EVENT_TYPE EVENT_DESCRIPTION; [LINK/LOCATION]; DD/MM/YY; HH:MM AM/PM"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_TYPE specify what kind of event you would like to repeat. The accepted arguments for this are “personal”, “timetable” and “zoom”"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_DESCRIPTION is the name of the event"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[LINK/LOCATION] is an optional argument. provide a zoom link if your event is a zoom conference and provide a location if your event is a timetable event"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": "DD/MM/YY contains a date string in the format [DD/MM/YY]. This is the date of the deadline for the personal event."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[HH:MM] is an optional argument containing the time of the deadline for the personal event. It can be written in either 12-hour or 24-hour format."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": "You can even et help on how to use the help command by typing in `help help` as shown in the following screenshot"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": "help help"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": "help - Provides more information on how to use the commands available in the program"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: help [COMMAND]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[COMMAND] - command which you would like to find out more information about. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": "text in lowercase indicates that you should type it exactly like this when you type the command in the terminal"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Colin386"
        },
        "content": "text in uppercase indicates compulsory arguments that you will need to provide and type into the terminal to operate the command"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": "text in uppercase surrounded by square brackets [] indicates optional arguments that you can choose to provide and type into the terminal to operate the command"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.2 Adding an event: `add` (Matthew Gani)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "New to creating your events using Scheduler--;?"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Utilize our simple to use yet effective add feature which comprises of 3 different event types. "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You can add dates and times to these events and even website links and locations to some of them! "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The types of events available to be added include:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Zoom Meetings: Zoom"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- NUS timetable/lessons: Timetable"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Personal Events: Personal"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `add EVENT_TYPE EVENT_DESCRIPTION; [LINK/LOCATION]; DD/MM/YY; HH:MM AM/PM`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `EVENT_TYPE` specify the type of event you want to add. These include \"zoom\", \"timetable\" and \"personal\"."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `EVENT_DESCRIPTION` is the description or name of the event."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `LINK/LOCATION` is the website link or the location of the event. This is applicable and optional for zoom and timetable events respectively."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `DD/MM/YY` is the date associated with the event in the format `DD/MM/YY`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `HH:MM AM/PM` is the time of the event. It can be written in 12 or 24 hour format. "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Each event can have different combinations of fields for example:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Timetable events can contain:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Description, date and time "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Description, location, date and time"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Zoom events can contain: "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Description and link "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Description, link, date and time"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Personal events can contain: "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Description "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Description and date "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Description, date and time"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `add Zoom CS2113T Meeting; zoom.com.sg; 16/09/20; 2100` \u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `add personal Family Meeting; 18/09/20`  \u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `add Timetable CS2101 Lecture; NUS Computing; 18/09/20; 3:30 pm`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You have successfully added this event to your list!"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[Z][✕] CS2113T Meeting, Link: zoom.com.sg on 2020-09-16, 21:00"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You have successfully added this event to your list!"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[P][✕] Family Meeting on 2020-09-18"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You have successfully added this event to your list!"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[T][✕] CS2101 Lecture, Location: NUS Computing on 2020-09-18, 15:30"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "```"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- When giving the event type, take note that it is case-insensitive:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`add Zoom` is the same as `add zoom`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Only the full word will be recognized as the event type:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`add z` will NOT add a zoom event"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Remember to add the \u0027:\u0027 for the time, this is because `4 PM` will not be valid but `4:00 PM` will be."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed warningBox\"}}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Warning!**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Typing in the wrong format for date or time will cause the event to not be made. "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- Events cannot contain an empty description."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.3 List events: `list` (Marcus Ng)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "After you have added your events, it is essential that you can view the events you have added."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "You can do so using the list command to print out a list of your events in the order it was added in. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Format: ```list [EVENT_TYPE]```"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- ```EVENT_TYPE``` specify what kind of event you would like to list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "The accepted arguments for this are “personal”, “timetable” and “zoom”."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "When the optional argument `[EVENT_TYPE]` is omitted,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "list will print a list of available event types."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### 3.3.1 List all events of a type"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Example: ```list Zoom```"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "```"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "list zoom"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Here is a list of your Zoom events:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "1. [Z][X] CS2113T Meeting, Link: zoom.com.sg on 2020-09-16, 21:00"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "```"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "* You do not need to type the exact event type, it is case-insensitive. In other words,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "`list Zoom` is the same as `list zoom`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "#### 3.3.2 List all events"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "You can print a list of all events by executing the following command: ```list all```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "* Events will be listed in the order: Personal, Timetable, Zoom."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.4 Calendar format list: `calendar` (Marcus Ng)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "If you feel that the list command does not print the events in a format that you like,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "you can use the calendar command to sort everything by date and time and view your events by date."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Format: ```calendar```"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "This brings you into calendar printing mode."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- To print the next date, simply press enter."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- To exit the calendar printing mode, simply type in ```q```."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- This mode is exited once you see ```End of calendar``` on pressing enter."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "* Events without date or time are not printed in the calendar"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "* In calendar printing mode, all input except ```q``` is ignored. In other words, commands cannot be executed until"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "you exit this mode"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "```"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "calendar"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Calendar has 2 dates to display"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "1 event not on the calendar because it has no date and time"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "---------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "16 Sep 2020"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "---------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Z | 9:00 PM | X | CS2113T Meeting | zoom.com.sg"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "---------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "q"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "End of calendar"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "```"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.5 Deadlines: `deadline` (Qing Ning)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Want to set a deadline after you have created your personal event? Afraid that you forget your deadlines? Deadline is here to help! You can set the date and time of the task to be completed and on the day itself, we will remind you.  "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Format: `deadline EVENT_INDEX; DD/MM/YY; [HH:MM] AM/PM`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "- `EVENT_INDEX` is a number. It contains the index of the personal event that will have its deadline set or changed. "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "* `DD/MM/YY` contains a date string in the format `[DD/MM/YY]`. This is the date of the deadline for the personal event. "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "* `[HH:MM]` is an optional argument containing the time of the deadline for the personal event. It can be written in either 12-hour or 24-hour format. "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "`deadline 2; 23/07/20` sets the deadline of event number 2 to be on 23 July 2020 a "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "`deadline 7; 29/08/20; 14:25` sets the deadline of event number 7 to be on the 29 August 2020 at 2:25PM. "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "`deadline 7; 29/08/20; 11:20 PM` sets the deadline of event number 7 to be on the 29 August 2020 at 11:20PM. "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Expected output: "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "```"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "You have successfully updated the deadline for this event!"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "[P][X] sleep on 2020-08-29, 23:20"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "```"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Colin386"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "* The time can be omitted entirely. If you leave time field as blank, the command would not set any time for the event."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "* You may also omit the minutes in a time. If the minutes(MM) field of any time is empty, the time is read as when the hour begins (e.g. 4 pm would be taken as 4:00 pm)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "* AM/PM is required for 12 hour format"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed warningBox\"}}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Colin386"
        },
        "content": "**Warning!**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The event index keyed in have to be valid so that deadline can be created for the specified event index."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.6 Repeat on daily/weekly/monthly basis: `repeat` (Colin Ng)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Sets a specific event to be repeated either weekly or monthly in the calendar. "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Do you have any events that repeat frequently? For example, a dental appointment every month, or perhaps a math lesson every week? The repeat command in the program allows you to easily schedule such events into your event planner. Just select the event that you want to repeat, type in how often this event repeats and Scheduler--; will record down the event for you.  "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: `repeat EVENT_TYPE EVENT_INDEX [UNIT] [COUNT]` "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- `EVENT_TYPE` specify what kind of event you would like to repeat. The accepted arguments for this are “personal”, “timetable” and “zoom” "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- `EVENT_INDEX` is an number. It contains the index of the event that is to be repeated "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- `[UNIT]` can either take the word “Weekly” or “Monthly”. It tells the program to repeat the event either every week or every month. "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- `[COUNT]` takes an integer which indicates how many units of time will this event repeat itself. For instance, if the unit input is Weekly, placing a number 5 will repeat the event for 5 weeks. "
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Colin386"
        },
        "content": "When the optional arguments of `[UNIT]` and `[COUNT]` are omitted in the code, repeat will instead display the repeat status of the event.  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Colin386"
        },
        "content": "#### How to use? "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Colin386"
        },
        "content": "We will use the example of repeating a personal event named “Dental Appointment” for 3 months from the start date. "
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 1: Find the index number of the event to be repeated. "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Colin386"
        },
        "content": "You can do this by typing the command list personal into your application. The result for the following command is shown in the following photo. "
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Colin386"
        },
        "content": "list personal"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Here is a list of your Personal events:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Colin386"
        },
        "content": "1. [P][✕] party on 2000-10-09, 13:00"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Colin386"
        },
        "content": "2. [P][✕] surprise on 2020-09-14, 08:00"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Colin386"
        },
        "content": "3. [P][✕] hello there on 2002-02-02, 07:00"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Colin386"
        },
        "content": "4. [P][✕] dental appointment on 2020-03-02, 15:00"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Colin386"
        },
        "content": "In this case, the index number of our dental appointment is 4."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 2: Type the command into the terminal"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Colin386"
        },
        "content": "In our example, the arguments are set as such:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- EVENT_TYPE is set to personal"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- EVENT_INDEX is set to 4"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- UNIT is set to monthly"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- COUNT is set to 3"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Colin386"
        },
        "content": "When you type in the command repeat personal 4 monthly 3, the program automatically notes that this event will repeat for three subsequent months at the same timing. The program reports that it has set the event to repeat as shown in the following image. "
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Colin386"
        },
        "content": "repeat personal 4 monthly 3"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[P][✕] dental appointment on 2020-03-02, 15:00"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Colin386"
        },
        "content": "is now repeating monthly for 3 times"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Colin386"
        },
        "content": "##### Step 3: Verify the dates that the event occurs"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Colin386"
        },
        "content": "To check the status of the repeated event, simply key in repeat personal 4 in this case and you will obtain the status as shown in the following picture. "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Colin386"
        },
        "content": "repeat personal 4"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[P][✕] dental appointment on 2020-03-02, 15:00 is also on:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Colin386"
        },
        "content": "02 Apr 2020 3:00 PM [✕]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Colin386"
        },
        "content": "02 May 2020 3:00 PM [✕]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Colin386"
        },
        "content": "02 Jun 2020 3:00 PM [✕]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed warningBox\"}}"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Colin386"
        },
        "content": "**Warning!**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Colin386"
        },
        "content": "When setting personal events to repeat, do take note that the personal event needs to contain a deadline before it cn be repeated. Use the dateline command to provide a deadline to personal events that you want to repeat, but does not have a deadline. "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- `repeat personal 4 weekly 2` will repeat the personal event numbered 4 for another 2 weeks. Personal event 4 will app ear on the same day of the week for the next 2 weeks.  "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- `repeat zoom 5 monthly 3` will repeat the zoom event numbered 5 for another 3 months. Zoom event 5 will appear on the same day of the month for the next 3 months.  "
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- `repeat personal 4` will show the repeat status of the event. In the following screenshot, running this command in the terminal reveals that the personal event will be repeated for 3 more times on a daily basis.  "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Colin386"
        },
        "content": "repeat personal 4"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[P][✕] eat dinner on 2020-01-09, 18:00 is also on:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Colin386"
        },
        "content": "10 Jan 2020 6:00 PM [✕]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Colin386"
        },
        "content": "10 Jan 2020 6:00 PM [✕]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Colin386"
        },
        "content": "10 Jan 2020 6:00 PM [✕]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Colin386"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Colin386"
        },
        "content": "```"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.7 Check availability on a specific date and time: `check` (Marcus Tan)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Would you like to check if you happen to be free at a certain time? The check command allows you to scan through your events to check for any events you might have within a given time period."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Format: `check [START_DATE]; [START_TIME]; [END_DATE]; [END_DATE]`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Acceptable date formats: DD/MM/YYYY or DD/MM/YY"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Acceptable time formats: "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- 24 Hour format – HHmm or HH:mm (e.g. 14:00)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- 12 Hour format – hh:mm am/pm or hhmm am/pm (e.g. 2:00 pm)"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Example: `check 20/08/2020; 15:05; 25/08/2020; 13:00`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "marcursor"
        },
        "content": "This will check from 20 August 2020 3:05pm to 25 August 2020 1pm. "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Expected result:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "marcursor"
        },
        "content": "check 20/08/2020; 15:05; 25/08/2020; 13:00"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "marcursor"
        },
        "content": "You have no coinciding events!"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "marcursor"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "marcursor"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\tYou may omit the DD or DD/MM in a date. If you do not fill in these fields for the date, the command takes the current date for that field by default (e.g.  input 2021 on 11 Oct 2020 would be taken as 11/10/2021)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\tThe date can also be omitted entirely. If you leave a date field as blank, the command takes the current date for that field by default."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\tYou may also omit the minutes in a time. If the minutes(MM) field of any time is empty, the time is read as when the hour begins (e.g. 4 pm would be taken as 4:00 pm)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\tThe time can also be omitted entirely. If you leave a time field as blank, the command takes the current time by default."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "marcursor"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "marcursor"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed warningBox\"}}"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "marcursor"
        },
        "content": "**Warning!**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "marcursor"
        },
        "content": "- Even when you leave a time field (e.g. `[START_DATE]`) as blank, a semicolon (;) should still be used to denote the blank field (e.g. `check ; 2:00 pm; 25/12/2020; 2359`)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "marcursor"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.8 Goal setting and viewing: `goal` (Marcus Ng)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Have a long term or short-term goal? The goal command helps you to keep track of it. "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "You can use the goal command to print, set, remove or change your goal. "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Format: ```goal [GOAL]```"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- `[GOAL]` specify the new goal you want to set."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "When the optional argument `[GOAL]` is omitted, the current goal will be displayed."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "When `[GOAL]` is specified as `delete`, the current goal will be removed."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "* You can use `na` or `nil` instead of `delete` to remove goal."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- ```goal get cap 5.0``` will set your current goal as “get cap 5.0”. "
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "- ```goal save up $100``` after executing the above command will change your current goal to “save up $100”. "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "```"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "goal save up $100"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "Goal changed to: save up $100"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "```"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.9 Mark events as done: `done` (Marcus Tan)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "marcursor"
        },
        "content": "If you would like to mark an event as done, you can use the done command to do so. "
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Format: `done EVENT_TYPE EVENT_INDEX [EVENT_DATE]` "
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Acceptable date formats: DD/MM/YYYY or DD/MM/YY "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "marcursor"
        },
        "content": "If you wish to mark a specific event in a repeated task as done, you may enter the date of that repeated event."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\t`done personal 1` marks the 1st Personal event as done."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\t`done personal 2 1/3/2020` if the 2nd Personal event is a repeated event with a repetition occurring on 1st March 2020, that repetition will be marked as done "
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "marcursor"
        },
        "content": "done personal 2 1/3/2020"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "marcursor"
        },
        "content": "You have successfully marked this event as done!"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "marcursor"
        },
        "content": "[P][✓] test 2 on 2020-03-01, 14:00"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.10 Mark events as not done: `undone` (Marcus Tan)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Did you accidentally mark an event as done? Not to worry, just use the undone command to set the event status back to undone."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Format: `undone EVENT_TYPE EVENT_INDEX [EVENT_DATE]`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Acceptable date formats: DD/MM/YYYY or DD/MM/YY "
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "marcursor"
        },
        "content": "If you wish to mark a specific event in a repeated task as undone, you may enter the date of that repeated event."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\t`undone zoom 3` marks the 3rd Zoom event as not done."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\t`undone personal 2 1/3/2020` if the 2nd Personal event is a repeated event with a repetition occurring on 1st March 2020, that repetition will be marked as undone "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "marcursor"
        },
        "content": "undone personal 2 1/3/2020"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "marcursor"
        },
        "content": "You have successfully marked this event as undone!"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "marcursor"
        },
        "content": "[P][✕] test 2 on 2020-03-01, 14:00"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.11 Deleting an event: `delete` (Marcus Tan)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Want to remove an event from your schedule? Use the delete command to get rid of unnecessary events."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Format: `delete EVENT_TYPE; EVENT_INDEX; [EVENT_DATE]`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "marcursor"
        },
        "content": "-\t`delete personal 3` deletes the 3rd Personal event from Scheduler."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "marcursor"
        },
        "content": "Expected output:"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "marcursor"
        },
        "content": "delete personal 3"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "marcursor"
        },
        "content": "You have successfully deleted this event!"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "marcursor"
        },
        "content": "[P][✕] test 3 on 2020-01-01"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "marcursor"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "marcursor"
        },
        "content": "```"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.12 Note Taking: `note` (Qing Ning)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Need to take last minutes meeting notes? Need to write some notes but don’t know where to keep them? Fear not! We have got you covered. Use this command to take notes and attach them to the event you are attending. You can also choose to open an empty note and type the notes. "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Format: `note EVENT_TYPE; EVENT_INDEX`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "* The `EVENT_TYPE` have to be either personal, zoom or timetable."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "* Scheduler will prompt you to type your notes"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "`note personal; 1 `"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "#### How to use?"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "1. Find the index number of the event to write the note for "
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    You can do this by typing the command list EVENT_TYPE into your application. The result for the following command is shown in the following:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Here is a list of your Personal events:"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    1. [P][X] sleep "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    In this case, the index number that you want is 1."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "1. Type the command into the terminal"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    note personal; 1 "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "1. Scheduler will prompt you to type your notes"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Please type in your notes. To stop note taking, ensure that you are in a new line and type the semicolon key, \u0027;\u0027 and press enter "
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "1. Tell Scheduler you are done by pressing enter to go to a new line and insert a semicolon `;`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "1. Voilà! Your notes have been saved! "
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   You have successfully written the note for this event!"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   [P][X] sleep"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   ---------2020-10-30T00:53:01.907824900---------"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   hello there!"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   scheduler says hi:)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   _________________________________"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed warningBox\"}}"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Colin386"
        },
        "content": "**Warning!**"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "The event index keyed in have to be valid so that deadline can be created for the specified event index."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Colin386"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.13 Reminder: `reminder` (Qing Ning)"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Fear of forgetting what you have today? Scheduler—is here to show you your events and task to be completed for the day.  Cheers to no more missed deadlines and meetings! "
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Format: `reminder`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "```"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "You have the following events today:"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "[T][X] math, Location: S17 on 2020-10-26, 12:00"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "[Z][X] math, Link: www.zoom.com/blah on 2010-10-26, 12:00"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "[P][X] sleep on 2020-10-26, 23:00"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "```"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.14 Extracting events from texts: `extract` (Matthew Gani)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Ever feel tired of reading long emails everyday? Copy and paste your email into this feature!"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You can use our extract function which will help you read any text and extract out possible dates and times. "
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You’ll be able to choose the dates and times detected and create a Personal or Zoom event. "
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The extract feature detects dates in the DD/Month Name/YYYY format or the Month Name/DD/YYYY format which is used the most in emails. \u003cbr\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "It will detect time in 12 and 24 Hour formats, with \":\" or \".\" in between the time. It can detect time in the format of HH AM/PM too. \u003cbr\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "If a valid zoom link is detected, it will try to create a Zoom event for you. "
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "This feature needs a 3 step process to function, please press your enter key (denoted by `\u003center key\u003e`) in between all 3 steps for it to work properly."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Format: `extract TEXT_SUBJECT;` `\u003center key\u003e` `TEXT_BODY` `\u003center key\u003e` `extractend` `\u003center key\u003e`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `TEXT_SUBJECT` is the subject of the email or the name you want your event to be."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- `TEXT_BODY` is the body of the email of the text to be scanned through for dates and times."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Example: `extract CG2271 Quiz 2;` `\u003center key\u003e` \u003cbr\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`Hi all, we will be having the quiz on either 4th October 2020 or October 15 2020 at either 3pm or 3.30pm. "
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "The link is at https://nus-sg.zoom.us/j/2226375MG` `\u003center key\u003e`\u003cbr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "`extractend` `\u003center key\u003e`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Expected Output:"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "After `extract CG2271 Quiz 2;` `\u003center key\u003e`:"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Copy and paste or enter the body of the text you want to extract from!"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "At the end of your text, press enter to go to the next line, enter \u0027extractend\u0027 with no quotation marks and press enter once more."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "After `Hi all, we will be having the quiz on either 4th October 2020 or October 15 2020 at either 3pm or 3.30pm. The link is at https://nus-sg.zoom.us/j/2226375MG` `\u003center key\u003e`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "and `extractend` `\u003center key\u003e`:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "One zoom link detected and chosen: https://nus-sg.zoom.us/j/2226375MG"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "We have detected 2 dates in this text body!"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Please select the date you want for this event from the list below!"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. 2020-10-04"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. 2020-10-15"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "We have detected 2 timings in this text body!"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "Please select the time you want for this event from the list below!"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "1. 15:00"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2. 15:30"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "2"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "You have successfully added this event to your list!"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "[Z][✕] CG2271 Quiz 2, Link: https://nus-sg.zoom.us/j/2226375MG on 2020-10-15, 15:30"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "_________________________________"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "````"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "As shown above, the user can choose the date/time they want for the event as long as it is a valid number in the list."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " In the example, the user picks the second option for both date and time, shown by the two times \u00272\u0027 was input."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "matthewgani"
        },
        "content": " "
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "{{box op\u003d\"start\" cssClass\u003d\"boxed noteBox\"}}"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Note!**"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- It is not advised to edit the copy and pasted text in the command line. It may result in this feature not working as expected."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- The extract feature can also detect when there are suffixes like st/nd/rd/th for the day portion of the date."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- It is also able to attach the current year to the date if it is not specified in the text."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- The text body can include multiple paragraphs that are copy and pasted from emails."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- The month name detected can only be detected if spelled fully or is in its 3 letter short form. For example, `20 sep 2020` will be detected while `20 sept 2020` will not be detected."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "- The date/time/link has to be in the same line to be detected properly. For example, if the date/time/link is separated in a paragraph/by a new line it may not be detected properly. "
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "{{box op\u003d\"end\"}}"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.15 Save events: `events` (Colin)"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "### 3.16 Exiting the program: `bye` "
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Time to have a rest? See you later! Do not worry, we will keep your events in Scheduler--."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "In this section, you can find some frequently asked questions(FAQ)."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Q**: How do I transfer my data to another computer? \u003cbr\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**A**:"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Q**: What if I run into bugs while using Scheduler--;? \u003cbr\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**A**:"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Q**: What if I have any suggestions for Scheduler--? \u003cbr\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**A**:"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**Q**: Can I create 2 events on the same date and time? \u003cbr\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "**A**:"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "(Insert preface)"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "| Action | Format, Examples |"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|--------|------------------|"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "|Add|add EVENT_TYPE EVENT_DESCRIPTION; DD/MM/YY \u003cbr\u003e Eg: add personal Family Meeting; 18/09/20 \u003cbr\u003e \u003cbr\u003e add EVENT_TYPE EVENT_DESCRIPTION; LINK; DD/MM/YY; HH:MM \u003cbr\u003e Eg: add Zoom CS2113T Meeting; zoom.com.sg; 16/09/20; 2100 \u003cbr\u003e \u003cbr\u003e add EVENT_TYPE EVENT_DESCRIPTION; LOCATION; DD/MM/YY; HH:MM AM/PM \u003cbr\u003e Eg: add Timetable CS2101 Lecture; NUS Computing; 18/09/2020; 3:30 pm \u003cbr\u003e|"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|List|list all \u003cbr\u003e \u003cbr\u003e list TYPE \u003cbr\u003e Eg: list Zoom \u003cbr\u003e \u003cbr\u003e list from sd/DD/MM/YY to ed/DD/MM/YY \u003cbr\u003e Eg: list from sd/12/04/20 to ed/19/04/20 \u003cbr\u003e|"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Check|check [START_DATE]; [START_TIME]; [END_DATE]; [END_TIME] \u003cbr\u003e Eg: check 20/08/20; 15:05; 25/8/2020; 1 pm; \u003cbr\u003e|"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Repeat|repeat EVENT_TYPE EVENT_INDEX [UNIT] [COUNT] \u003cbr\u003e Eg: repeat timetable 2 weekly 4 \u003cbr\u003e|"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Goal|goal USERGOALS \u003cbr\u003e Eg: goal “Get CAP 5.0 for year 2” \u003cbr\u003e|"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Deadline|deadline EVENT_INDEX; DD/MM/YY; \u003cbr\u003e Eg: deadline 2 23/07/20 \u003cbr\u003e \u003cbr\u003e deadline EVENT_INDEX; DD/MM/YY; [HHMM] \u003cbr\u003e Eg: deadline 7 29/08/20 1425 \u003cbr\u003e \u003cbr\u003e deadline EVENT_INDEX; DD/MM/YY; [HH:MM] AM/PM \u003cbr\u003e Eg: deadline 7 29/08/20 11:25 PM \u003cbr\u003e|"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Set event as done|done EVENT_TYPE EVENT_INDEX [EVENT_DATE] \u003cbr\u003e Eg: done personal 1 1/4/2020 \u003cbr\u003e|"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Set event as undone|undone EVENT_TYPE EVENT_INDEX [EVENT_DATE] \u003cbr\u003e Eg: undone zoom 1 3/12/2020 \u003cbr\u003e|"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Delete|delete EVENT_TYPE EVENT_INDEX [EVENT_DATE] \u003cbr\u003e Eg: delete timetable 3 \u003cbr\u003e|"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Notes|note EVENT_TYPE; EVENT_INDEX \u003cbr\u003e note personal; 1 \u003cbr\u003e|"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "|Extract|extract TEXT_SUBJECT; `\u003center key\u003e` TEXT_BODY  `\u003center key\u003e` extractend `\u003center key\u003e`\u003cbr\u003e|"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Reminder|reminder \u003cbr\u003e|"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Save|save \u003cbr\u003e|"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Help|help \u003cbr\u003e|"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "|Bye|bye\u003cbr\u003e|"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Colin386": 224,
      "marcursor": 96,
      "matthewgani": 246,
      "ninggggx99": 101,
      "-": 48,
      "Reinbowl": 98
    }
  },
  {
    "path": "docs/team/colinNg.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "# Colin Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Scheduler--; (S--) is a desktop app for managing deadlines from different sources. The user will use a Command Line Interface to control it. It is specially designed for Computing students who are comfortable in using CLI and have Git project deadlines as well as consolidated Zoom session links due which will suit home based learning in this COVID period. "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Given below are my contributions to the project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **New Feature:** Added the ability to call for help in the application"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - What it does: allows the users to seek help and assistance on how to use the commands in the application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Justification: This features allows for users who are getting familiar with how to use the application a quick way to get help about a feature without having to dig through the thicker user manual. "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Highlights: This command required the implementation of a bracket system to inform the program which section of the help file to print out for each different variation of the help command called by the user. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **New Feature:** Assisted with the development of a repeat function"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - What it does: allows the user to repeat an event for a specified amount of iteration, each iteration is a specified amount of unit time away from the original date and time. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Justification: This features was implemented as the group felt that having to manually key in events that repeat periodically into the program would be tedious, hence the repeat command is provided to help speed up typing event information."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Highlights: It was difficult implementing the repeat command. We fist assumed that we could just simply store the states of the repeated events along the main events, but later realised that this method proved difficult to manage the repeated events for future events. One of our team members decided to implement events as a cloneable event, and it helped to make the implementation of future functions easier. "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **New Feature:** Added the ability for the program to load user data from the computer and save user data on the computer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **Code Contributed:** [RepoSense Link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dcolin386\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **Project Management:**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Help set up the team organisation repo"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Necessary general code enhancements"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **Enhancements to Existing Features:**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Updated the parser to accept multiple commands in succession for users who are familar with the product and would like to execute more than one command at once"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Assisted with the note taking application in terms of intepreting various special characters. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **Documentation:**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - User guide"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        - Added documentation for the features `repeat`, `help` and `save`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        - Added documentation for setting up the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Developer Guide:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        - Added implementation details for the saving functions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        - Added sequence diagram of the `repeat` command implementation."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        - Wrote manual testing instructions."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "- **Community:**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    - Assisted with peer review bug reporting [1](https://github.com/nus-cs2113-AY2021S1/tp/pull/51/files)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Colin386": 41
    }
  },
  {
    "path": "docs/team/lowqingning.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "# Low Qing Ning - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 1,
      "-": 5
    }
  },
  {
    "path": "docs/team/marcusng.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "# Marcus Ng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Reinbowl": 1
    }
  },
  {
    "path": "docs/team/marcustan.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "# Marcus Tan - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      }
    ],
    "authorContributionMap": {
      "marcursor": 1,
      "-": 5
    }
  },
  {
    "path": "goalStoreTest/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Float like a bumblebee"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "mainTest/personal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "meeting | 2021-01-27 | 0900 | 0 | 0 |  | F"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.command.ReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.StorageParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private UserData data;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Command com;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Parser currentParse;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    //Location refers to the \"data\" directory stored in the folder of this application"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static final String FILELOCATION \u003d \"data\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Constructor for the Schedule components."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param filePath is a string containing the location of where the data text files are to be stored"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage \u003d new Storage(filePath, ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        data \u003d new UserData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        currentParse \u003d new Parser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main run function. Loops until the bye command is entered."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.loadAll(data);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Command reminder \u003d currentParse.parse(\"reminder\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            reminder.execute(data, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ArrayList\u003cString\u003e allCommandInputs \u003d currentParse.multiParse(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                for (String commInputs : allCommandInputs) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    ui.printDividerLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    Command c \u003d currentParse.parse(commInputs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.saveAll(data);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printByeMessage();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Main function where the program starts."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param args No arguments entered so far"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        /*String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(\"Hello \" + in.nextLine());*/"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Duke duke \u003d new Duke(FILELOCATION);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 63,
      "marcursor": 3,
      "ninggggx99": 18,
      "-": 19,
      "Reinbowl": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Zoom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.EventAddErrorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to add events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String eventType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String argument;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private Boolean isInvalidEventType \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for adding events seedu.duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public AddCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (command \u003d\u003d null || command.equals(\"\") || command.equals(\" \")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String[] commandWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String tempEventType \u003d commandWords[0].toLowerCase();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            switch (tempEventType) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"zoom\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                eventType \u003d \"Zoom\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"personal\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                eventType \u003d \"Personal\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"timetable\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                eventType \u003d \"Timetable\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                isInvalidEventType \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String[] argumentWords \u003d Arrays.copyOfRange(commandWords, 1, commandWords.length);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds an event to individual eventLists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argument \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new EventAddErrorException(\"Wrong format for the add command!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (isInvalidEventType) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new EventAddErrorException(\"Invalid event type to be added!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String[] argumentWords \u003d argument.split(\";\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords[0].trim().equals(\"\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                throw new MissingDescriptionException(\"This event has an empty description!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            switch (eventType) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Personal\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                addPersonal(data, ui, argumentWords);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                storage.saveFile(storage.getFileLocation(eventType), data, eventType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Zoom\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                addZoom(data, ui, argumentWords);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                storage.saveFile(storage.getFileLocation(eventType), data, eventType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"Timetable\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                addTimetable(data, ui, argumentWords);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                storage.saveFile(storage.getFileLocation(eventType), data, eventType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                throw new EventAddErrorException(\"Invalid event type to be added!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            e.printErrorMessage();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Timetable event."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addTimetable(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003d\u003d 3 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 2 cases: description \u0026 date \u0026 time , description \u0026 location \u0026 date \u0026 time"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Timetable\", new Timetable(argumentWords[0].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Timetable\", new Timetable(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            argumentWords[1].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Timetable event!\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Personal event."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addPersonal(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003e\u003d 1 \u0026\u0026 argumentWords.length \u003c\u003d 3) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 3 cases: only description, description and date, description and date and time"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim(), localDate));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[1].trim());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(argumentWords[0].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Personal event!\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Adds a Zoom event."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data          object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui            containing the responses to print."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param argumentWords String array containing user input arguments"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return Boolean that confirms if the event was added"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private void addZoom(UserData data, Ui ui, String[] argumentWords) throws DukeException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (argumentWords.length \u003d\u003d 2 || argumentWords.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            // 2 cases: only have description \u0026 zoomlink , have description,zoomlink, date,time"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (argumentWords.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Zoom\", new Zoom(argumentWords[0].trim(), argumentWords[1].trim()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalDate localDate \u003d DateTimeParser.dateParser(argumentWords[2].trim());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localDate !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    LocalTime localTime \u003d DateTimeParser.timeParser(argumentWords[3].trim());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    assert localTime !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Zoom\", new Zoom(argumentWords[0].trim(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            argumentWords[1].trim(), localDate, localTime));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Zoom event!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 3,
      "matthewgani": 198,
      "ninggggx99": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ByeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to end program seedu.duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for exiting the program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 5,
      "ninggggx99": 14,
      "Reinbowl": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private Map\u003cLocalDate, ArrayList\u003cEvent\u003e\u003e calendarMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private int eventsWithoutDateCount \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public CalendarCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEventList\u003e eventLists \u003d data.getAllEventLists();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ArrayList\u003cEvent\u003e events \u003d list.getEvents();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            addEventsToCalendar(events);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printCalendarStart(calendarMap.size(), eventsWithoutDateCount);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Map.Entry\u003cLocalDate, ArrayList\u003cEvent\u003e\u003e entry : calendarMap.entrySet()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printCalendar(entry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (ui.receiveCommand().toLowerCase().equals(\"q\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printCalendarEnd();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void addEventsToCalendar(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Event e : events) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ArrayList\u003cEvent\u003e eventRepeatList \u003d e.getRepeatEventList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (eventRepeatList !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                addEventsToCalendar(eventRepeatList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            addEventToCalendar(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void addEventToCalendar(Event e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        LocalDate eventDate \u003d e.getDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        LocalTime eventTime \u003d e.getTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (eventDate !\u003d null \u0026\u0026 eventTime !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ArrayList\u003cEvent\u003e eventsOnDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            if (calendarMap.containsKey(eventDate)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate \u003d calendarMap.get(eventDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate.add(e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                eventsOnDate.add(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                calendarMap.put(eventDate, eventsOnDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            eventsWithoutDateCount++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return new CalendarCommand(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 72
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/CheckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TryRegularParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.timeParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to check availability."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class CheckCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Constructor for checking availability."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public CheckCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Execute function for the command to state user\u0027s availability in a given period."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DukeException if insufficient fields are given after the \"check\" keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] datesAndTime \u003d command.split(\";\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate startDate \u003d getDate(datesAndTime[0].trim());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate endDate \u003d getDate(datesAndTime[2].trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert startDate !\u003d null : \"null date read for startDate\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert endDate !\u003d null : \"null date read for endDate\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalTime startTime \u003d getTime(datesAndTime[1].trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalTime endTime \u003d getTime(datesAndTime[3].trim());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert startTime !\u003d null : \"null time read for startTime\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            assert endTime !\u003d null : \"null time read for endTime\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String[] eventTypes \u003d new String[]{\"Personal\", \"Timetable\", \"Zoom\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            for (String type: eventTypes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                ArrayList\u003cEvent\u003e events \u003d data.getEventList(type).getEvents();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.addAll(checkEventsInTimeRange(events, startDate, endDate, startTime, endTime));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            EventList coinciding \u003d new EventList(\"coinciding\", eventsInTimeRange);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ui.printList(coinciding);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Insufficient fields provided to check events.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Date parser that interprets a date from a given string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param stringDate the string containing date information"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return a LocalDate corresponding to the date in stringDate or the current date if no date is found in the string"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DateErrorException if stringDate does not correspond to a valid date format"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalDate getDate(String stringDate) throws DateErrorException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] dateFields \u003d stringDate.replace(\"-\",\"/\").split(\"/\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate date;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (stringDate.isBlank()) { // if date is blank, defaults to current date"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return currentDate;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            switch (dateFields.length) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 1: // only year is given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter yearFormat \u003d DateTimeFormatter.ofPattern(\"[yyyy][yy]\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                Year givenYear \u003d Year.parse(stringDate, yearFormat);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d currentDate.with(givenYear);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 2: // month and year is given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter yearMonthFormat \u003d DateTimeFormatter.ofPattern(\"M/[yyyy][yy]\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                YearMonth givenYearMonth \u003d YearMonth.parse(stringDate, yearMonthFormat);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d currentDate.with(givenYearMonth);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            case 3: // day, month and year given"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                DateTimeFormatter dayMonthYearFormat \u003d DateTimeFormatter.ofPattern(\"d/M/[yyyy][yy]\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                date \u003d LocalDate.parse(stringDate, dayMonthYearFormat);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                throw new DateErrorException(\"Too many fields given for the date!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Time parser that interprets a time from a given string."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param stringTime the string containing time information"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return a LocalTime corresponding to the time in stringTime or the current time if no time is found in the string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws TimeErrorException if stringTime does not correspond to a valid time format"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private LocalTime getTime(String stringTime) throws TimeErrorException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        LocalTime time;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (stringTime.isBlank()) { // if blank time is provided, default to current time"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h:m a\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String currentTime \u003d LocalTime.now().format(timeFormatter);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            time \u003d LocalTime.parse(currentTime, timeFormatter);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] stringTimeArray \u003d stringTime.split(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (stringTimeArray.length \u003d\u003d 2) { // 12 hour format hh a"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                int givenTwelveHour \u003d Integer.parseInt(stringTimeArray[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                String amPmIndicator \u003d stringTimeArray[1];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (givenTwelveHour \u003e\u003d 0 \u0026 givenTwelveHour \u003c\u003d 12) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    time \u003d timeParser(givenTwelveHour + \":00 \" + amPmIndicator); // default to minute 00"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    return time;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    throw new TryRegularParserException(\"hh a format time requires hours between 1-12.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (stringTimeArray.length \u003d\u003d 1) { // 24 hour format HH"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                int givenTwentyFourHour \u003d Integer.parseInt(stringTimeArray[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (givenTwentyFourHour \u003e\u003d 0 \u0026 givenTwentyFourHour \u003c\u003d 24) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    time \u003d timeParser(givenTwentyFourHour + \":00\"); // default to minute 00"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    return time;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    throw new TryRegularParserException(\"HH format time requires hours between 0-23.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException | TryRegularParserException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            // if hh:mm, HH:mm or other invalid non integers is given"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            time \u003d timeParser(stringTime); // exception will be thrown if invalid non-integer is given"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Checks for events within a given time period."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param events the eventsList containing events to be checked"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param startDate the start date of the time period to be checked"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param endDate the end date of the time period to be checked"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param startTime the start time of the time period to be checked"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param endTime the end time of the time period to be checked"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @return an ArrayList of events found occurring during the time period"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private ArrayList\u003cEvent\u003e checkEventsInTimeRange(ArrayList\u003cEvent\u003e events, LocalDate startDate, LocalDate endDate,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                                                    LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsInTimeRange \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (event.getDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenDate \u003d event.getDate().isAfter(startDate) \u0026\u0026 event.getDate().isBefore(endDate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            boolean eventIsBetweenTime;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenDate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.getDate().isEqual(startDate)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (event.getTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    eventIsBetweenTime \u003d true;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    eventIsBetweenTime \u003d !(event.getTime().isBefore(startTime));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else if (event.getDate().isEqual(endDate)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (event.getTime() \u003d\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    eventIsBetweenTime \u003d true;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    eventIsBetweenTime \u003d !(event.getTime().isAfter(endTime));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventIsBetweenTime \u003d false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (eventIsBetweenTime) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.add(event);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            if (event.getRepeatType() !\u003d null \u0026\u0026 event.getRepeatEventList() !\u003d null) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                eventsInTimeRange.addAll(checkEventsInTimeRange(event.getRepeatEventList(),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                        startDate, endDate, startTime, endTime));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return eventsInTimeRange;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 200,
      "ninggggx99": 16,
      "Reinbowl": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * abstract class for commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public abstract void execute(UserData data, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Signal exit program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return true if user give exit seedu.duke.command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 2,
      "ninggggx99": 19,
      "Reinbowl": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set deadline for personal events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting deadline seedu.duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public DeadlineCommand(String command) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * To change to deadline of personal event."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            parseUserCommand(command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            EventList personalList \u003d data.getEventList(\"Personal\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Event updatedEvent \u003d personalList.getEventByIndex(index - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (updatedEvent !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                //Personal event \u003d (Personal) updatedEvent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setDate(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setDate(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    updatedEvent.setTime(time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printDeadlineChangedMessage(updatedEvent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            storage.saveFile(storage.getFileLocation(\"Personal\"), data, \"Personal\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new InvalidIndexException(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Parsing user command to put in the correct format for arguments and checking if its date or date and time."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command user input arguments"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private void parseUserCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String[] commandSplit \u003d command.split(\";\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (commandSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                index \u003d parsingNumber(commandSplit[0].trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert date !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new WrongNumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else if (commandSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                index \u003d parsingNumber(commandSplit[0].trim());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                date \u003d DateTimeParser.dateParser(commandSplit[1].trim());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert date !\u003d null : \"date is not detected after parsing\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                String timeString \u003d commandSplit[2].trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                timeString \u003d timeString.replace(\":\", \"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                time \u003d DateTimeParser.timeParser(timeString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                assert time !\u003d null : \"time is not detected after parsing\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new WrongNumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Deadline!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Check if index is numerical format."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param number index in string format"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return index of event"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int parsingNumber(String number) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            int index \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new NumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "matthewgani": 1,
      "ninggggx99": 120,
      "Reinbowl": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.dateParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String listType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DeleteCommand(String listType, String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static Command parse(String input) throws WrongNumberOfArgumentsException, WrongNumberFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] inputParameters \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (inputParameters.length \u003c 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Event type or index not provided.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String listType \u003d inputParameters[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String eventIndex \u003d inputParameters[1].trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String[] eventIndexArray \u003d eventIndex.split(\" \",2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            Integer.parseInt(eventIndexArray[0]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberFormatException(\"Event index given is not an integer.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return new DeleteCommand(listType, eventIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        listType \u003d capitaliseFirstLetter(listType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList eventList \u003d data.getEventList(listType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] eventIndexArray \u003d command.split(\" \",2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        int eventIndex \u003d Integer.parseInt(eventIndexArray[0]) - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Event deleteEvent \u003d eventList.getEventByIndex(eventIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (eventIndexArray.length \u003d\u003d 1 || deleteEvent.getRepeatType() \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            eventList.getEvents().remove(deleteEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ui.printEventDeletedMessage(deleteEvent);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } else if (eventIndexArray.length \u003d\u003d 2 \u0026\u0026 deleteEvent.getRepeatType() !\u003d null) { // event is a repeat task"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate deleteEventDate \u003d dateParser(eventIndexArray[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ArrayList\u003cEvent\u003e repeatEventList \u003d deleteEvent.getRepeatEventList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            for (Event e: repeatEventList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (e.getDate().isEqual(deleteEventDate)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    repeatEventList.remove(e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    ui.printEventDeletedMessage(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String capitaliseFirstLetter(String input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.dateParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String listType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Constructor for setting event to done."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DoneCommand(String listType, String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static Command parse(String input) throws WrongNumberOfArgumentsException, WrongNumberFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] inputParameters \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (inputParameters.length \u003c 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Event type or index not provided.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String listType \u003d inputParameters[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String eventIndex \u003d inputParameters[1].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String[] eventIndexArray \u003d eventIndex.split(\" \",2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            Integer.parseInt(eventIndexArray[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberFormatException(\"Event index given is not an integer.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return new DoneCommand(listType, eventIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        listType \u003d capitaliseFirstLetter(listType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList eventList \u003d data.getEventList(listType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] eventIndexArray \u003d command.split(\" \",2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        int eventIndex \u003d Integer.parseInt(eventIndexArray[0]) - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Event doneEvent \u003d eventList.getEventByIndex(eventIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (eventIndexArray.length \u003d\u003d 1 || doneEvent.getRepeatType() \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            doneEvent.markAsDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ui.printEventMarkedDoneMessage(doneEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } else if (eventIndexArray.length \u003d\u003d 2 \u0026\u0026 doneEvent.getRepeatType() !\u003d null) { // event is a repeat task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate doneEventDate \u003d dateParser(eventIndexArray[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ArrayList\u003cEvent\u003e repeatEventList \u003d doneEvent.getRepeatEventList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            for (Event e: repeatEventList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (e.getDate().isEqual(doneEventDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    e.markAsDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    ui.printEventMarkedDoneMessage(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String capitaliseFirstLetter(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 79
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ExtractCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Zoom;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.InvalidExtractCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class ExtractCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private int dateCount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private int timeCount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String textSubject \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String textBody \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String eventType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String zoomLink;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private int zoomLinkCount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Constructor for parsing email/texts seedu.duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param command from user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ExtractCommand(String command) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (command.endsWith(\";\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            textSubject \u003d command.split(\";\", 2)[0];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        eventType \u003d \"Personal\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Extracts dates and timings from any block of text and creates Personal Event."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (textSubject \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new InvalidExtractCommandException(\"Text subject was not entered correctly!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printExtractTextBodyRequestMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printDividerLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        textBody \u003d receiveTextBody(ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (textBody \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new InvalidExtractCommandException(\"Text body was not entered correctly!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (textSubject.equals(\"\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new InvalidExtractCommandException(\"There is no text subject entered!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (textBody.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            throw new InvalidExtractCommandException(\"There is no text body entered!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cString\u003e zoomLinkList \u003d detectZoomLink(textBody);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (zoomLinkList.size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            eventType \u003d \"Zoom\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            zoomLink \u003d chooseZoomLink(zoomLinkList, ui);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cLocalDate\u003e dateList \u003d detectDate(textBody);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        LocalDate finalDate \u003d chooseFinalDate(dateList, ui);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (finalDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (eventType.equals(\"Personal\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printExtractNoDatePersonalEventMessage();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Personal\", new Personal(textSubject));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else if (eventType.equals(\"Zoom\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ui.printExtractNoDateZoomEventMessage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                data.addToEventList(\"Zoom\", new Zoom(textSubject, zoomLink));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ArrayList\u003cLocalTime\u003e timeList \u003d detectTime(textBody);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            LocalTime finalTime \u003d chooseFinalTime(timeList, ui);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (finalTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (eventType.equals(\"Personal\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printExtractNoTimePersonalEventMessage();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(textSubject, finalDate));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } else if (eventType.equals(\"Zoom\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printExtractNoTimeZoomEventMessage();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Zoom\", new Zoom(textSubject, zoomLink));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (eventType.equals(\"Personal\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Personal\", new Personal(textSubject, finalDate, finalTime));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } else if (eventType.equals(\"Zoom\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    data.addToEventList(\"Zoom\", new Zoom(textSubject, zoomLink, finalDate, finalTime));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ui.printEventAddedMessage(data.getEventList(eventType).getNewestEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        storage.saveFile(storage.getFileLocation(eventType), data, eventType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private ArrayList\u003cString\u003e detectZoomLink(String textBody) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cString\u003e zoomLinkList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Pattern urlPattern \u003d Pattern.compile(\"https?://(www\\\\.)?[-a-zA-Z0-9@:%._+~#\u003d]{1,256}\\\\.\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"[a-zA-Z0-9()]{1,6}\\\\b([-a-zA-Z0-9()@:%_+.~#?\u0026//\u003d]*)\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Matcher urlMatcher \u003d urlPattern.matcher(textBody);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        while (urlMatcher.find()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String url \u003d urlMatcher.group(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (url.contains(\".zoom.\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                zoomLinkList.add(url);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        zoomLinkCount \u003d zoomLinkList.size();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return zoomLinkList;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String chooseZoomLink(ArrayList\u003cString\u003e zoomLinkList, Ui ui) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomLink \u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (zoomLinkCount \u003e 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractChooseZoomLinkMessage(zoomLinkCount, zoomLinkList);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            boolean zoomLinkChosen \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            while (!zoomLinkChosen) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    int zoomLinkNumberChosen \u003d Integer.parseInt(ui.receiveCommand());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    if (zoomLinkNumberChosen \u003e zoomLinkCount || zoomLinkNumberChosen \u003c\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        ui.printExtractInvalidFieldChosenMessage(\"zoom link\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        zoomLink \u003d zoomLinkList.get(zoomLinkNumberChosen - 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        zoomLinkChosen \u003d true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printErrorMessage(\"We couldn\u0027t detect a number! Please choose again!\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            zoomLink \u003d zoomLinkList.get(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractSingleZoomLinkDetectedMessage(zoomLink);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return zoomLink;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String receiveTextBody(Ui ui) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String bodyLine \u003d \"\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String fullTextBody \u003d \"\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        while (!bodyLine.equals(\"extractend\")) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            bodyLine \u003d ui.receiveCommand().trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            fullTextBody \u003d fullTextBody.concat(\" \" + bodyLine);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return fullTextBody;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Detects 12 and 24 hour time slots from a text."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param textBody A string of the text body that is scanned through."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return An ArrayList of LocalTime objects for the time slots detected."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private ArrayList\u003cLocalTime\u003e detectTime(String textBody) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cString\u003e timeListInString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String upperCaseTextBody \u003d textBody.toUpperCase();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Pattern timePattern \u003d Pattern.compile(\"\\\\b(1[0-9]|0?[0-9]|2[0-3])([:.][0-5][0-9])?[\\\\h]?([AP][M])?\\\\b\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Matcher timeMatcher \u003d timePattern.matcher(upperCaseTextBody);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        while (timeMatcher.find()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String time \u003d timeMatcher.group(0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (time.contains(\".\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                time \u003d time.replaceAll(\"\\\\.\", \":\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (time.contains(\"PM\") || time.contains(\"AM\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (!time.contains(\" \")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    // adds space between AM/PM for it to work with parser later"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    time \u003d time.substring(0, time.length() - 2) + \" \" + time.substring(time.length() - 2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                if (!time.contains(\":\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    time \u003d time.substring(0, time.length() - 3) + \":00 \" + time.substring(time.length() - 2);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            time \u003d time.toLowerCase();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            timeListInString.add(time);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cLocalTime\u003e timeList \u003d verifyTime(timeListInString);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        timeCount \u003d timeList.size();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Verifies whether the time slots detected are legitimate and converts to LocalTime."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param timeListInString An ArrayList of strings of time slots detected."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return An ArrayList of LocalTime containing time slots that have been successfully converted."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private ArrayList\u003cLocalTime\u003e verifyTime(ArrayList\u003cString\u003e timeListInString) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cLocalTime\u003e timeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (String timeInString : timeListInString) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                LocalTime localTime \u003d DateTimeParser.timeParser(timeInString.trim());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                timeList.add(localTime);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (TimeErrorException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                // something went wrong with date parsing"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                // Log something?"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Allows user to choose the time they want from timeList."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param timeList An ArrayList of LocalTime containing all time slots detected."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui contains responses to print."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return the LocalTime object chosen by user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private LocalTime chooseFinalTime(ArrayList\u003cLocalTime\u003e timeList, Ui ui) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        LocalTime finalTime \u003d null;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (timeCount \u003e 1) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractChooseTimeMessage(timeCount, timeList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            boolean timeChosen \u003d false;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            while (!timeChosen) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    int timeNumberChosen \u003d Integer.parseInt(ui.receiveCommand());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    if (timeNumberChosen \u003e timeCount || timeNumberChosen \u003c\u003d 0) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        ui.printExtractInvalidFieldChosenMessage(\"timing\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        finalTime \u003d timeList.get(timeNumberChosen - 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        timeChosen \u003d true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printErrorMessage(\"We couldn\u0027t detect a number! Please choose again!\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (timeCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractNoFieldMessage(\"timing\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            finalTime \u003d timeList.get(0);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractSingleTimeDetectedMessage(finalTime);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return finalTime;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Detects all the dates from a block of text."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param textBody A string containing the text to be scanned through."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return An ArrayList of LocalDate objects for the dates detected."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private ArrayList\u003cLocalDate\u003e detectDate(String textBody) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cString\u003e dateListInString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String upperCaseTextBody \u003d textBody.toUpperCase();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Pattern dayMonthYearPattern \u003d Pattern.compile(\"\\\\b(([0]?[0-9])|([0-2][0-9])|([3][0-1]))(ST|ND|RD|TH)?[\\\\h-]\""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"(JAN|JANUARY|FEB|FEBRUARY|MAR|MARCH|APR|APRIL|MAY|JUN|JUNE|JUL|JULY|AUG\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"|AUGUST|SEP|SEPTEMBER|OCT|OCTOBER|NOV|NOVEMBER|DEC|DECEMBER),?([\\\\h-]\\\\d{4})?\\\\b\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Pattern monthDayYearPattern \u003d Pattern.compile(\"\\\\b(JAN|JANUARY|FEB|FEBRUARY|MAR|MARCH|APR|APRIL|MAY|JUN|JUNE|\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"JUL|JULY|AUG|AUGUST|SEP|SEPTEMBER|OCT|OCTOBER|NOV|NOVEMBER|DEC|DECEMBER)[\\\\h-]\""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"(([0]?[0-9])|([0-2][0-9])|([3][0-1]))(ST|ND|RD|TH)?,?([\\\\h-]\\\\d{4})?\\\\b\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Matcher dayMonthYearMatcher \u003d dayMonthYearPattern.matcher(upperCaseTextBody);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Matcher monthDayYearMatcher \u003d monthDayYearPattern.matcher(upperCaseTextBody);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        while (dayMonthYearMatcher.find()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String date \u003d dayMonthYearMatcher.group(0);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String day \u003d detectDay(date);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String month \u003d detectMonth(date);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String year \u003d detectYear(date);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String combinedDate \u003d day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            dateListInString.add(combinedDate);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        while (monthDayYearMatcher.find()) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String date \u003d monthDayYearMatcher.group(0);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String day \u003d detectDay(date);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String month \u003d detectMonth(date);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String year \u003d detectYear(date);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String combinedDate \u003d day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            dateListInString.add(combinedDate);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cLocalDate\u003e dateList \u003d verifyDate(dateListInString);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        dateCount \u003d dateList.size();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return dateList;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Verifies dates detected and converts them from string to LocalDate."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param dateListInString An ArrayList of strings containing dates."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return An ArrayList of LocalDate that contains verified dates."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private ArrayList\u003cLocalDate\u003e verifyDate(ArrayList\u003cString\u003e dateListInString) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        ArrayList\u003cLocalDate\u003e dateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (String dateInString : dateListInString) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                LocalDate localDate \u003d DateTimeParser.dateParser(dateInString);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                dateList.add(localDate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } catch (DateErrorException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                // something went wrong with date parsing"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                // Log something?"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return dateList;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Allows user to choose the dates they want from the dateList."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param dateList An ArrayList containing LocalDate objects to choose from."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param ui contains responses to print."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return A localDate object chosen for the event."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private LocalDate chooseFinalDate(ArrayList\u003cLocalDate\u003e dateList, Ui ui) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        LocalDate finalDate \u003d null;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (dateCount \u003e 1) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractChooseDateMessage(dateCount, dateList);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            boolean dateChosen \u003d false;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            while (!dateChosen) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    int dateNumberChosen \u003d Integer.parseInt(ui.receiveCommand());"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    if (dateNumberChosen \u003e dateCount || dateNumberChosen \u003c\u003d 0) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        ui.printExtractInvalidFieldChosenMessage(\"date\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        finalDate \u003d dateList.get(dateNumberChosen - 1);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        dateChosen \u003d true;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    ui.printErrorMessage(\"We couldn\u0027t detect a number! Please choose again!\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (dateCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractNoFieldMessage(\"date\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            finalDate \u003d dateList.get(0);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ui.printExtractSingleDateDetectedMessage(finalDate);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return finalDate;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Detects the day portion of the date."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param date String containing the full date detected."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return String containing the day."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String detectDay(String date) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String day \u003d null;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Pattern dayPattern \u003d Pattern.compile(\"\\\\b(([0]?[0-9])|([0-2][0-9])|([3][0-1])){1,2}(ST|ND|RD|TH)?\\\\b\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Matcher dayMatcher \u003d dayPattern.matcher(date);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (dayMatcher.find()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String dayMatch \u003d dayMatcher.group(0);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (dayMatch.contains(\"ST\") || dayMatch.contains(\"ND\")"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    || dayMatch.contains(\"RD\") || dayMatch.contains(\"TH\")) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                dayMatch \u003d dayMatch.substring(0, dayMatch.length() - 2);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (dayMatch.startsWith(\"0\")) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                day \u003d dayMatch.substring(1);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                day \u003d dayMatch;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Detects the month from the date."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param date A string containing the full date detected."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return A string containing the month detected."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String detectMonth(String date) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String month \u003d null;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Pattern monthPattern \u003d Pattern.compile(\"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Matcher monthMatcher \u003d monthPattern.matcher(date);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (monthMatcher.find()) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            switch (monthMatcher.group(0)) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"JAN\":"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"1\";"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"FEB\":"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"2\";"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"MAR\":"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"3\";"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"APR\":"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"4\";"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"MAY\":"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"5\";"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"JUN\":"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"6\";"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"JUL\":"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"7\";"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"AUG\":"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"8\";"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"SEP\":"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"9\";"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"OCT\":"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"10\";"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"NOV\":"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"11\";"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            case \"DEC\":"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                month \u003d \"12\";"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Detects the year from the date."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param date A string containing the full date."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return A string containing the year portion of the date."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String detectYear(String date) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String year \u003d date.substring(date.length() - 4);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            if (Integer.parseInt(year) \u003e 2100 || Integer.parseInt(year) \u003c 1900) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                year \u003d getCurrentYear();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            year \u003d getCurrentYear();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Retrieves the current year."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @return A string containing the current year."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private String getCurrentYear() {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Calendar currentDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int yearInInt \u003d currentDay.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String year \u003d String.valueOf(yearInInt);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 463
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to set goals."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for setting goals seedu.duke"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public GoalCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert command !\u003d null : \"String for goal command should not be null\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (command.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d data.getGoal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printGoalMessage(goal);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Goal goal \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            switch (command.toLowerCase()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case \"na\": case \"nil\": case \"delete\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                data.setGoal(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                goal \u003d new Goal(command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                data.setGoal(goal);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printChangeGoalMessage(goal);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            //update storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            storage.saveFile(storage.getFileLocation(\"Goal\"), data, \"Goal\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "ninggggx99": 17,
      "Reinbowl": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidHelpTopicException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    ArrayList\u003cString\u003e helpStuff;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    String helpTopic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public HelpCommand(String argument) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.command \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        argument \u003d argument.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (argument.equals(\"\")) { //blank argument set to be summary"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            argument \u003d \"summary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.helpTopic \u003d argument;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        helpStuff \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws InvalidHelpTopicException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.loadSystemResources(\"/helpfile.txt\", helpStuff);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        int beginIndex \u003d searchIndex(helpStuff, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        int endIndex \u003d searchIndex(helpStuff, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (beginIndex \u003c 0 || endIndex \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new InvalidHelpTopicException(this.helpTopic);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d beginIndex + 1; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String line \u003d helpStuff.get(i);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printMessage(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private int searchIndex(ArrayList\u003cString\u003e helpData, boolean isBegin) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String toSearchFor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (isBegin) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            toSearchFor \u003d \"begin \" + helpTopic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            toSearchFor \u003d \"end \" + helpTopic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        index \u003d helpData.indexOf(toSearchFor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to list events."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for listing events seedu.duke"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEventList\u003e eventLists \u003d data.getAllEventLists();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printAvailableList(eventLists);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else if (command.equals(\"All\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                ui.printList(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            ui.printList(data.getEventList(command));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new ListCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new ListCommand(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 6,
      "ninggggx99": 17,
      "Reinbowl": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/NoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to make notes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class NoteCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private String event;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for note."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command user\u0027s command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public NoteCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Create and save notes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @throws DukeException catch any exception under Duke."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            parseUserCommand(command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            EventList list \u003d data.getEventList(event);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Event eventRequested \u003d list.getEventByIndex(index - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (eventRequested !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printMessage(\"Please type in your notes.\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \" To stop note taking, ensure that you are in a new line and type the semicolon key,\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \" \\\u0027;\\\u0027 and press enter\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ArrayList\u003cString\u003e existingNotes \u003d eventRequested.getNotes();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ArrayList\u003cString\u003e additionalNotes \u003d getNotesFromUser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ArrayList\u003cString\u003e updatedNotes \u003d updatingNotesWithTimestamp(existingNotes, additionalNotes);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                eventRequested.setNotes(updatedNotes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                ui.printNoteMessage(eventRequested, updatedNotes);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new InvalidListException(\"No such event type\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            storage.saveFile(storage.getFileLocation(list.getName()), data, list.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (InvalidIndexException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new InvalidIndexException(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Parse user command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param command user\u0027s command."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @throws DukeException catch any exception under Duke."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private void parseUserCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String[] commandSplit \u003d command.split(\";\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (commandSplit.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                index \u003d parsingNumber(commandSplit[1].trim());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                event \u003d commandSplit[0].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                throw new WrongNumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Incorrect number of parameters for Note!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Require user\u0027s input for notes."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return a list of notes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private ArrayList\u003cString\u003e getNotesFromUser() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cString\u003e notesList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String temp \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        while (!temp.equals(\";\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            notesList.add(temp);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            temp \u003d sc.nextLine().trim();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return notesList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Concatenate existing and new notes with timestamp."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param existingNotes   notes stored in storage."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param additionalNotes notes that are just inputted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return a combined list of notes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private ArrayList\u003cString\u003e updatingNotesWithTimestamp(ArrayList\u003cString\u003e existingNotes,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                                                         ArrayList\u003cString\u003e additionalNotes) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String timestamp \u003d \"---------\" + now + \"---------\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        existingNotes.add(timestamp);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        additionalNotes \u003d convertSemiColonToBlank(additionalNotes);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        existingNotes.addAll(additionalNotes);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return existingNotes;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private ArrayList\u003cString\u003e convertSemiColonToBlank(ArrayList\u003cString\u003e notes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e convertedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (String note : notes) { //after splitting up the lines based on semicolons, add them"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] lines \u003d note.split(\";\", -1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            List\u003cString\u003e toBeAdded \u003d Arrays.asList(lines);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            convertedList.addAll(toBeAdded);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return convertedList;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Check if index is numerical format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param number index in string format"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return index of event"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private int parsingNumber(String number) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            int index \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new NumberFormatException(\"Index must be numerical format!\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 19,
      "ninggggx99": 134
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/ReminderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to print reminder for user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Constructor for reminder seedu.duke."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ReminderCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * To find the events for today."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param data    object of UserData class containing user\u0027s data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param ui      containing the responses to print."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param storage with the save file path to write to."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @throws DukeException error caught by duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEventList\u003e allEventList \u003d data.getAllEventLists();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEvent\u003e reminderEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        for (int i \u003d 0; i \u003c allEventList.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            ArrayList\u003cEvent\u003e eventList \u003d filterTodayEvents(allEventList.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            reminderEvents.addAll(eventList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ui.printReminder(reminderEvents);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Filter the events."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param eventList list of events in the category"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return todayEvents events happening today"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @throws InvalidIndexException index is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private ArrayList\u003cEvent\u003e filterTodayEvents(EventList eventList) throws InvalidIndexException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEvent\u003e todayEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        for (int i \u003d 0; i \u003c eventList.getSize(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            LocalDate eventDate \u003d eventList.getEventByIndex(i).getDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            ArrayList\u003cEvent\u003e repeatedList \u003d eventList.getEventByIndex(i).getRepeatEventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (repeatedList !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (checkingRepeatedEvent(repeatedList) !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    todayEvents.addAll(checkingRepeatedEvent(repeatedList));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (eventDate !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (dateNow.compareTo(eventDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    todayEvents.add(eventList.getEventByIndex(i));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return todayEvents;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Filter through repeated events."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param event list of repeated eventss"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return todayRepeatedEvent repeated events that happen today"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private ArrayList\u003cEvent\u003e checkingRepeatedEvent(ArrayList\u003cEvent\u003e event) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate dateNow \u003d LocalDate.now();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cEvent\u003e todayRepeatedEvent \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        for (int i \u003d 0; i \u003c event.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            LocalDate eventDate \u003d event.get(i).getDate();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (eventDate !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (dateNow.compareTo(eventDate) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    todayRepeatedEvent.add(event.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return todayRepeatedEvent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/RepeatCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingDeadlineRepeatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingRepeatListException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " * Command to repeat task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String DAILY \u003d \"DAILY\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String WEEKLY \u003d \"WEEKLY\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public static final String MONTHLY \u003d \"MONTHLY\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String COMMANDTYPE_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static final String COMMANDTYPE_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static final String COMMANDTYPE_ERROR \u003d \"error\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private String commandType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Constructor for the repeat command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param command user input with the format eventIndex; eventType; timeInterval; NumberofIterations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public RepeatCommand(String command, String commandType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case COMMANDTYPE_ADD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            executeAdd(data, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case COMMANDTYPE_LIST:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            executeList(data, ui);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case COMMANDTYPE_ERROR:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            executeNull(data, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Static parser for repeat command creation. Distinguish between adding repeated dates or listing current repeats."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param input String containing user inputs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return RepeatCommand set to either add additional dates or set to list out current dates in event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d input.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        switch (words.length) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[0] \u003d formatListName(words[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[1]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d String.join(\" \", words);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new RepeatCommand(input, COMMANDTYPE_LIST);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[0] \u003d formatListName(words[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            words[2] \u003d words[2].toUpperCase();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            isValidNumber(words[3]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            input \u003d String.join(\" \", words);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return new RepeatCommand(input, COMMANDTYPE_ADD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String errorMessage \u003d \"Wrong number of arguments provided\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new WrongNumberOfArgumentsException(errorMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Change the name of the list to ensure the first character is capitalised."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param name String containing name of list for the first character to be capitalised"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String with first character capitalised"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private static String formatListName(String name) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        name \u003d name.toLowerCase();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return name.substring(0, 1).toUpperCase() + name.substring(1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Checks if the string can be converted to an integer."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param number String containing the String form of an integer"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static void isValidNumber(String number) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Integer.parseInt(number);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new WrongNumberFormatException(\"Numbers must be in numerical format\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * List command. Used to show dates of repeated events."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data location where all user event information is stored"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param ui   User Interface class for printing on screens"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private void executeList(UserData data, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        EventList eventList \u003d data.getEventList(words[0]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Event repeatEvent \u003d eventList.getEventByIndex(index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (repeatEvent.getRepeatEventList() \u003d\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new MissingRepeatListException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printRepeatList(repeatEvent);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Add command. Used to add repeated dates to an event."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data    location where all user event information is stored"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param ui      User Interface class for printing on screens"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param storage File storage location on computer"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void executeAdd(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String[] words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        EventList eventList \u003d data.getEventList(words[0]);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Event eventToRepeat \u003d eventList.getEventByIndex(index);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        LocalDate startDate \u003d eventToRepeat.getDate();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throw new MissingDeadlineRepeatException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String repeatType \u003d words[2];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int count \u003d Integer.parseInt(words[3]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeat(eventToRepeat, startDate, repeatType, count);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ui.printRepeatAdd(eventToRepeat);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.saveFile(storage.getFileLocation(eventList.getName()), data, eventList.getName());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void repeat(Event eventToRepeat, LocalDate startDate, String repeatType, int count) throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            LocalDate repeatDate;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            switch (repeatType) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case MONTHLY:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusMonths(i);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case WEEKLY:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusWeeks(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            case DAILY:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatDate \u003d startDate.plusDays(i);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                throw new InvalidTimeUnitException(repeatType);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            eventToRepeat.setRepeatType(repeatType);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            eventToRepeat.setRepeatEventList(null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            Event repeatEvent;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                repeatEvent \u003d eventToRepeat.clone();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                throw new DukeException(\"Cant clone\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            repeatEvent.setDate(repeatDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            repeatEventList.add(repeatEvent);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventToRepeat.setRepeatEventList(repeatEventList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void executeNull(UserData data, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 79,
      "ninggggx99": 17,
      "Reinbowl": 91
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/SaveCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public SaveCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage.saveAll(data);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printStorageSavedMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 20
    }
  },
  {
    "path": "src/main/java/seedu/duke/command/UndoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static seedu.duke.parser.DateTimeParser.dateParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class UndoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String listType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Constructor for setting event to undone."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param command from user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public UndoneCommand(String listType, String command) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static Command parse(String input) throws WrongNumberOfArgumentsException, WrongNumberFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] inputParameters \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (inputParameters.length \u003c 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberOfArgumentsException(\"Event type or index not provided.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String listType \u003d inputParameters[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String eventIndex \u003d inputParameters[1].trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            String[] eventIndexArray \u003d eventIndex.split(\" \",2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            Integer.parseInt(eventIndexArray[0]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            throw new WrongNumberFormatException(\"Event index given is not an integer.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return new UndoneCommand(listType, eventIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute(UserData data, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        listType \u003d capitaliseFirstLetter(listType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList eventList \u003d data.getEventList(listType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String[] eventIndexArray \u003d command.split(\" \",2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        int eventIndex \u003d Integer.parseInt(eventIndexArray[0]) - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Event undoneEvent \u003d eventList.getEventByIndex(eventIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (eventIndexArray.length \u003d\u003d 1 || undoneEvent.getRepeatType() \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            undoneEvent.markAsUndone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ui.printEventMarkedUndoneMessage(undoneEvent);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } else if (eventIndexArray.length \u003d\u003d 2 \u0026\u0026 undoneEvent.getRepeatType() !\u003d null) { // event is a repeat task"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            LocalDate undoneEventDate \u003d dateParser(eventIndexArray[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            ArrayList\u003cEvent\u003e repeatEventList \u003d undoneEvent.getRepeatEventList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            for (Event e: repeatEventList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                if (e.getDate().isEqual(undoneEventDate)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    e.markAsUndone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                    ui.printEventMarkedUndoneMessage(e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private String capitaliseFirstLetter(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        return input.substring(0, 1).toUpperCase() + input.substring(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 79
    }
  },
  {
    "path": "src/main/java/seedu/duke/data/UserData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class UserData {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEventList\u003e eventLists \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private Goal goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Personal\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Timetable\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventLists.add(new EventList(\"Zoom\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setGoal(null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public UserData(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.eventLists \u003d new ArrayList\u003c\u003e(eventLists);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void addToEventList(String name, Event e) throws InvalidListException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert e !\u003d null : \"event cannot be null\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        getEventList(name).add(e);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList getEventList(String name) throws InvalidListException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert name !\u003d null : \"name should not be null\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList e : eventLists) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            if (e.getName().equalsIgnoreCase(name)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return e;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        throw new InvalidListException(name + \" list does not exist.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEventList\u003e getAllEventLists() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return eventLists;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the user\u0027s goal."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param goal to set to."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setGoal(Goal goal) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns the user\u0027s goal."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return user\u0027s goal."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 4,
      "ninggggx99": 3,
      "Reinbowl": 56
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public abstract class Event implements Cloneable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected LocalTime time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected ArrayList\u003cEvent\u003e repeatEventList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String repeatType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    protected ArrayList\u003cString\u003e notes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Creates a new event with the given description and default its done status to false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Event(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeatType \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        repeatEventList \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        notes \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assert notes.size() \u003d\u003d 0 : \"Notes should be empty\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets event\u0027s description."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param description of event."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setTime(LocalTime time) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setRepeatType(String repeatType) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.repeatType \u003d repeatType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setRepeatEventList(ArrayList\u003cEvent\u003e repeatEventList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.repeatEventList \u003d repeatEventList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Sets the event\u0027s done status to true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Sets the event\u0027s done status to false."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void markAsUndone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Set notes for event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param notes for event."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setNotes(ArrayList\u003cString\u003e notes) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this.notes \u003d notes;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of event\u0027s done status."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of event\u0027s done status."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (isDone) ? \"✓\" : \"✕\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Gets date of the event."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return LocalDate object containing the date of the event"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Gets time of the event."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return LocalTime object containing the time of the event"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public ArrayList\u003cEvent\u003e getRepeatEventList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatEventList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getRepeatType() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        if (repeatType \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return repeatType.toLowerCase();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public int getRepeatCount() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (repeatEventList \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return repeatEventList.size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Get notes for event."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return list of notes."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public ArrayList\u003cString\u003e getNotes() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return notes;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Event clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Event) super.clone();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return \"[\" + getStatus() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return String.format(\"%s | \", time.format(DateTimeFormatter.ofPattern(\"K:mm a\")))"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                + String.format(\"%s | \", getStatus())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                + String.format(\"%s \", getDescription());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 40,
      "marcursor": 11,
      "matthewgani": 4,
      "ninggggx99": 18,
      "Reinbowl": 82
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/EventList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private ArrayList\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events \u003d new ArrayList\u003cEvent\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public EventList(String name, ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.events \u003d new ArrayList\u003cEvent\u003e(events);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void add(Event event) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public Event getEventByIndex(int index) throws InvalidIndexException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return events.get(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            throw new InvalidIndexException(\"Error, no such index is available!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEvents() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Event getNewestEvent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 10,
      "marcursor": 5,
      "matthewgani": 7,
      "ninggggx99": 10,
      "Reinbowl": 26
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Goal(String description) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Returns a string representation of goal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return string representation of goal."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Personal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Personal extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time, int repeatCount) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, date, time, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Personal(String description, LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        this(description, date, null, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Personal clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Personal) super.clone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (time !\u003d null \u0026\u0026 date !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else if (time \u003d\u003d null \u0026\u0026 date !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString() + \" on \" + date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[P]\" + super.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return \"P | \" + super.toCalendarString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 14,
      "ninggggx99": 3,
      "Reinbowl": 29
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.sql.Time;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Timetable extends Event {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, String location, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setLocation(location);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable(String description, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, null, date, time);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Timetable clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Timetable) super.clone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (location !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \", Location: \" + location + \" on \"  + date + \", \" + time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[T]\" + super.toString() + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return \"T | \" + super.toCalendarString() + String.format(\"| %s\", getLocation());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 4,
      "matthewgani": 9,
      "Reinbowl": 34
    }
  },
  {
    "path": "src/main/java/seedu/duke/event/Zoom.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class Zoom extends Event {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    protected String zoomLink;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink, LocalDate date, LocalTime time) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setZoomLink(zoomLink);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setDate(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        setTime(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom(String description, String zoomLink) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this(description, zoomLink, null, null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setZoomLink(String zoomLink) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        this.zoomLink \u003d zoomLink;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getZoomLink() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return this.zoomLink;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public Zoom clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return (Zoom) super.clone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        if (time !\u003d null \u0026\u0026 date !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink + \" on \" + date + \", \" + time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return \"[Z]\" + super.toString() + \", Link: \" + zoomLink;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public String toCalendarString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return \"Z | \" + super.toCalendarString() + String.format(\"| %s\", getZoomLink());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 4,
      "matthewgani": 9,
      "Reinbowl": 33
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DateErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DateErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DateErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/DukeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printErrorMessage() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 5,
      "marcursor": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EventAddErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class EventAddErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public EventAddErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidExtractCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class InvalidExtractCommandException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public InvalidExtractCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidHelpTopicException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class InvalidHelpTopicException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public InvalidHelpTopicException(String topic) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(topic + \" is not a valid help command. Type help to see a list of all available help topics\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidIndexException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class InvalidIndexException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public InvalidIndexException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 3,
      "ninggggx99": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class InvalidListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public InvalidListException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidTimeUnitException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class InvalidTimeUnitException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public InvalidTimeUnitException(String wrongTimeUnit) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(wrongTimeUnit + \" is not a valid time unit. Valid types are: daily, weekly, monthly\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingDeadlineRepeatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class MissingDeadlineRepeatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public MissingDeadlineRepeatException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(\"Error! You cannot repeat an event that has no deadline!\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingDescriptionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public MissingDescriptionException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingRepeatListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class MissingRepeatListException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public MissingRepeatListException() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(\"This event has not been repeated currently\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TimeErrorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class TimeErrorException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public TimeErrorException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/TryRegularParserException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class TryRegularParserException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public TryRegularParserException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/WrongNumberFormatException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class WrongNumberFormatException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public WrongNumberFormatException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 8
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/WrongNumberOfArgumentsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class WrongNumberOfArgumentsException extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public WrongNumberOfArgumentsException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DateErrorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.TimeErrorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private static final String[] dateFormatStrings \u003d {\"yyyy/M/d\", \"yyyy-M-d\", \"d/M/yy\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        \"d/M/yyyy\", \"d-M-yy\", \"d-M-yyyy\"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private static final String[] timeFormatStrings \u003d {\"h:m a\", \"hhmm a\", \"H:m\", \"HHmm\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given date through the acceptable formats."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable date format is dd/mm/yy, yyyy/mm/dd, slashes can be replace with dashes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param date given to parse."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalDate object containing given date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws DateErrorException if date format is not accepted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static LocalDate dateParser(String date) throws DateErrorException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert date !\u003d null : \"date cannot be null\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        while (i \u003c dateFormatStrings.length) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(dateFormatStrings[i]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        throw new DateErrorException(\"Something is wrong with the date!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Parses the given time through the acceptable formats."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Acceptable time format is both 12 hour and 24 hour, omitting colon requires the format hhmm."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param time given to parse."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @return LocalTime object containing the given time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws TimeErrorException if time format is not accepted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public static LocalTime timeParser(String time) throws TimeErrorException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assert time !\u003d null : \"time cannot be null\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        time \u003d time.toUpperCase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        while (i \u003c timeFormatStrings.length) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(timeFormatStrings[i]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                return LocalTime.parse(time, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        throw new TimeErrorException(\"Something is wrong with the time!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcursor": 15,
      "Reinbowl": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.CalendarCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.CheckCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ExtractCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.GoalCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.NoteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ReminderCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.RepeatCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.SaveCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.UndoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Default Constructor for parser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function takes in user input and then generates the correct command requested from the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param userInput String containing what is typed by the user on the computer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Command from what is written by user. Return null if incorrect command"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (words.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, no command entered\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String commandWord \u003d words[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] argumentWords \u003d Arrays.copyOfRange(words, 1, words.length);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String argument \u003d String.join(\" \", argumentWords);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return new AddCommand(argument);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return ListCommand.parse(argument);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"check\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return new CheckCommand(argument + \" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"repeat\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return RepeatCommand.parse(argument);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"goal\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new GoalCommand(argument);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new DeadlineCommand(argument);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return DoneCommand.parse(argument);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        case \"undone\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return UndoneCommand.parse(argument);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            return DeleteCommand.parse(argument);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        case \"calendar\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            return CalendarCommand.parse(argument);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new HelpCommand(argument);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        case \"extract\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            return new ExtractCommand(argument);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        case \"note\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return new NoteCommand(argument);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"save\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return new SaveCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            throw new DukeException(\"Invalid Command.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function helps to split user inputs into separate command inputs."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Used to allow users to key in more than one command at a time."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param userInput String separated by pipe characters to indicate separate commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String ArrayList containing the command inputs as if they were typed separately"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public ArrayList\u003cString\u003e multiParse(String userInput) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] commandInputs;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        commandInputs \u003d userInput.split(\"\\\\|\", -1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e inputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (String commandInput : commandInputs) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            commandInput \u003d commandInput.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            inputList.add(commandInput);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return inputList;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 104,
      "marcursor": 10,
      "matthewgani": 5,
      "ninggggx99": 7,
      "Reinbowl": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": " * Saves and loads the events list to and from an external txt file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileDirectoryPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path filePersonalPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileZoomPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileTimeTablePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path fileGoalPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Returns the path to the file specified by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param name Name of the event type stored in the file that will be returned"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return path to the file storing the event type."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Path getFileLocation(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Personal\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return filePersonalPath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Zoom\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return fileZoomPath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Timetable\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return fileTimeTablePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Goal\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return fileGoalPath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printErrorMessage(\"Error! No such file exists\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a new storage manager that can load and save files to and from a given filepath."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param initPath is the name of the filepath which files are saved to and loaded from"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public Storage(String initPath, Ui ui) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //firstly, make string representation of storage files"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Directory words only contain info on making the folder"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //File words contain the info on how to make the file itself"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] pathDirectoryWords \u003d initPath.split(\",\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileDirectoryPath \u003d createPath(pathDirectoryWords);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String personal \u003d initPath + \",personal.txt\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] personalWords \u003d personal.split(\",\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        filePersonalPath \u003d createPath(personalWords);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String zoom \u003d initPath + \",zoom.txt\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] zoomWords \u003d zoom.split(\",\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileZoomPath \u003d createPath(zoomWords);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String goal \u003d initPath + \",goal.txt\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] goalWords \u003d goal.split(\",\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileGoalPath \u003d createPath(goalWords);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String timeTable \u003d initPath + \",timetable.txt\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] timeTableWords \u003d timeTable.split(\",\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        fileTimeTablePath \u003d createPath(timeTableWords);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        initialiseFolder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Creates a folder for the events list if it does not exist yet."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    protected void initialiseFolder() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (!Files.exists(fileDirectoryPath)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Files.createDirectory(fileDirectoryPath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                System.out.println(\"IO exception encountered when creating data directory.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcursor"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Creates a txt file for the event if it does not exists yet."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileText path object of the file to be created if non-existent"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileType String of the type of event data this file will store"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void initialiseFile(Path fileText, String fileType) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (!Files.exists(fileText)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Files.createFile(fileText);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                System.out.println(\"File Created: \" + fileType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printErrorMessage(\"IO exception error! File cannot be created on system!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Saves All information onto the computer."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData object where all the current user event information is stored"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void saveAll(UserData data) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(filePersonalPath, data, \"Personal\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(fileTimeTablePath, data, \"Timetable\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(fileZoomPath, data, \"Zoom\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        saveFile(fileGoalPath, data, \"Goal\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Saves information to a specified file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileName Path object of the file for information to be saved currently"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData object where all the current user event information is stored"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileType Name of the information type that will be saved."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void saveFile(Path fileName, UserData data, String fileType) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //firstly, form a temporary List of strings to store the data"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cString\u003e toBeWritten \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (fileType.equals(\"Goal\")) { //special case for goal"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                goalSave(fileName, data, toBeWritten);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else { //special case for event"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                eventSave(fileName, data, fileType, toBeWritten);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (InvalidListException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error! List invalid type. Should not happen\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printErrorMessage(\"Error! File cannot be written to\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Helper function for saving event information."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileName location on the computer where the event data is to be saved at"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData object containing all user information currently stored in the program"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileType String indicating what type of event we are storing"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param toBeWritten String ArrayList object which stores all test to be written to computer fileName"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @throws InvalidListException if there is no such event type stored in the program"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @throws IOException if there are problems encountered while writing to the file"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void eventSave(Path fileName, UserData data, String fileType, ArrayList\u003cString\u003e toBeWritten)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            throws InvalidListException, IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //next, read out event by event and process it into a storable string"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        EventList listOfEvents \u003d data.getEventList(fileType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d listOfEvents.getEvents();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (Event event:events) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String entry \u003d StorageParser.eventToString(event, fileType);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            toBeWritten.add(entry);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Files.write(fileName, toBeWritten);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Helper function for saving goal information."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileName path of the goal.txt file to save goal information"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData object containing all user information currently stored in the program"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param toBeWritten String ArrayList object which stores all test to be written to computer fileName"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @throws IOException if there are problems encountered while writing to the file"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private void goalSave(Path fileName, UserData data, ArrayList\u003cString\u003e toBeWritten) throws IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Goal entry \u003d data.getGoal();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (entry !\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            toBeWritten.add(entry.toString());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Files.write(fileName, toBeWritten);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } else { //nothing to modify in toBeWritten, so write a blank file"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Files.write(fileName, toBeWritten);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Loads every single data file into the program."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param data UserData structure with all the user information stored"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void loadAll(UserData data) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(filePersonalPath, data, \"Personal\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(fileZoomPath, data, \"Zoom\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(fileTimeTablePath, data, \"Timetable\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        loadFile(fileGoalPath, data, \"Goal\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui.printStorageLoadMessage();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * Loads events from an external txt file."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @param fileName is the file to load events from"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     * @throws FileNotFoundException if no file with the given fileName is found"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marcursor"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void loadFile(Path fileName, UserData data, String fileType) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //First, extract out all the file information"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            this.initialiseFile(fileName, fileType);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            List\u003cString\u003e fileLines \u003d Files.readAllLines(fileName);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //Next, line by line reform the event"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //Extraction of goal"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (fileType.equals(\"Goal\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (fileLines.size() !\u003d 0) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    Goal prevGoal \u003d new Goal(fileLines.get(0));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    data.setGoal(prevGoal);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //extraction of all other events"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (int i \u003d 0; i \u003c fileLines.size(); i++) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                String line \u003d fileLines.get(i);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Event activity \u003d StorageParser.stringToEvent(line,fileType);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                data.addToEventList(fileType, activity);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //finally, store the information in the correct list"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //do nothing"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printStorageLoadingErrorMessage();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (InvalidListException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //do nothing for now"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, invalid list\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function accepts a string and creates a path object originating from the user directory."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param pathName is a string array which accepts in the path name words, each word represents a folder"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Path object indicating the location of the pathName keyed in initially."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path createPath(String[] pathName) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String origin \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Path newPath \u003d Paths.get(origin, pathName);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function gives a string containing the Directory location."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return String containing directory location"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public String getDirectoryString() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return fileDirectoryPath.toString();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function loads files that are meant to be system resources such as images or text files."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param fileName location of the file in string form. Start from the root using the slash symbol"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param resource String ArrayList to store the information"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void loadSystemResources(String fileName, ArrayList\u003cString\u003e resource) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            InputStream is \u003d getClass().getResourceAsStream(fileName);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            InputStreamReader streamReader \u003d new InputStreamReader(is, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            BufferedReader reader \u003d new BufferedReader(streamReader);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                resource.add(line);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ui.printErrorMessage(\"Resource file could not be loaded!\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 275,
      "marcursor": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Timetable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.event.Zoom;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static String eventToString(Event activity, String type) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e words \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Personal\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            personalToArguments((Personal) activity, words);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Zoom\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            zoomToArguments((Zoom) activity, words);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Timetable\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            timetableToArguments((Timetable) activity, words);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, wrong data type provided\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return String.join(\" | \", words);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void handleRepeatSave(ArrayList\u003cString\u003e statuses, ArrayList\u003cEvent\u003e activities, int repeatCount) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c repeatCount; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Boolean repeatedActivityStatus \u003d activities.get(i).getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            statuses.add(Boolean.toString(repeatedActivityStatus));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void personalToArguments(Personal activity, ArrayList\u003cString\u003e words) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e statuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the dates and time of the event"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String date \u003d \"0\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String time \u003d \"0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            date \u003d activity.getDate().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            time \u003d activity.getTime().format(formatter);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Boolean activityStatus \u003d activity.getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        statuses.add(Boolean.toString(activityStatus));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatUnit \u003d \"0\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatNumber \u003d \"0\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getRepeatCount() !\u003d 0) { //it is a repeated activity"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatUnit \u003d activity.getRepeatType().toUpperCase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatNumber \u003d Integer.toString(activity.getRepeatCount());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cEvent\u003e activitiesRepeated \u003d activity.getRepeatEventList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            handleRepeatSave(statuses, activitiesRepeated, activity.getRepeatCount());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the name of the event"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String name \u003d activity.getDescription();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(time);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatUnit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatNumber);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String noteString \u003d notesListToString(activity.getNotes());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        words.add(noteString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c statuses.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(statuses.get(i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"T\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"F\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void zoomToArguments(Zoom activity, ArrayList\u003cString\u003e words) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e statuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the dates and time of the event"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String date \u003d \"0\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String time \u003d \"0\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            date \u003d activity.getDate().toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            time \u003d activity.getTime().format(formatter);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Boolean activityStatus \u003d activity.getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        statuses.add(Boolean.toString(activityStatus));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatUnit \u003d \"0\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatNumber \u003d \"0\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getRepeatCount() !\u003d 0) { //it is a repeated activity"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatUnit \u003d activity.getRepeatType().toUpperCase();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatNumber \u003d Integer.toString(activity.getRepeatCount());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cEvent\u003e activitiesRepeated \u003d activity.getRepeatEventList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            handleRepeatSave(statuses, activitiesRepeated, activity.getRepeatCount());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String url \u003d activity.getZoomLink();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the name of the event"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String name \u003d activity.getDescription();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(name);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(date);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(time);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatUnit);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatNumber);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(url);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String noteString \u003d notesListToString(activity.getNotes());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        words.add(noteString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c statuses.size(); i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(statuses.get(i));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"T\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"F\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static void timetableToArguments(Timetable activity, ArrayList\u003cString\u003e words) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cString\u003e statuses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the dates and time of the event"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String date \u003d \"0\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String time \u003d \"0\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getDate() !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            date \u003d activity.getDate().toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            time \u003d activity.getTime().format(formatter);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Boolean activityStatus \u003d activity.getStatus().equals(\"✓\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        statuses.add(Boolean.toString(activityStatus));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatUnit \u003d \"0\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String repeatNumber \u003d \"0\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (activity.getRepeatCount() !\u003d 0) { //it is a repeated activity"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatUnit \u003d activity.getRepeatType().toUpperCase();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatNumber \u003d Integer.toString(activity.getRepeatCount());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cEvent\u003e activitiesRepeated \u003d activity.getRepeatEventList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            handleRepeatSave(statuses, activitiesRepeated, activity.getRepeatCount());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String location \u003d activity.getLocation();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //obtain the name of the event"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String name \u003d activity.getDescription();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(name);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(date);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(time);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatUnit);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(repeatNumber);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        words.add(location);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String noteString \u003d notesListToString(activity.getNotes());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        words.add(noteString);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c statuses.size(); i++) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            boolean isDone \u003d Boolean.parseBoolean(statuses.get(i));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (isDone) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"T\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                words.add(\"F\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public static Event stringToEvent(String line, String type) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] words \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] statuses;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String[] info;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String[] notes;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        for (int i \u003d 0; i \u003c words.length; i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            words[i] \u003d words[i].trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Personal\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            info \u003d Arrays.copyOfRange(words, 0, 5);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            notes \u003d Arrays.copyOfRange(words, 5, 6);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            statuses \u003d Arrays.copyOfRange(words, 6, words.length);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return makePersonal(info, statuses, notes);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Zoom\":"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            info \u003d Arrays.copyOfRange(words, 0, 6);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            notes \u003d Arrays.copyOfRange(words, 6, 7);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            statuses \u003d Arrays.copyOfRange(words, 7, words.length);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return makeZoom(info, statuses, notes);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        case \"Timetable\":"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            info \u003d Arrays.copyOfRange(words, 0, 6);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            notes \u003d Arrays.copyOfRange(words, 6, 7);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            statuses \u003d Arrays.copyOfRange(words, 7, words.length);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            return makeTimetable(info, statuses, notes);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static Personal makePersonal(String[] info, String[] statuses, String[] notes) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //0 is name, 1 is date, 2 is time, 3 is repeat unit, 4 is repeat number"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Personal p \u003d new Personal(info[0]);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (info[1].equals(\"0\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no date, event can be returned as is"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                setDone(p, statuses[0]);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                notesSetter(p, notes[0]);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else if (info[2].equals(\"0\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no time, but got date"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d null;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setDate(date);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //has both date and time"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d DateTimeParser.timeParser(info[2]);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setDate(date);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                p.setTime(time);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setDone(p, statuses[0]);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatSetter(p, statuses, info[3], info[4]);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            notesSetter(p, notes[0]);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return p;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"file corruption detected\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static Zoom makeZoom(String[] info, String[] statuses, String[] notes) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //0 is name, 1 is date, 2 is time, 3 is repeat unit, 4 is repeat number, 5 is zoom link"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Zoom z \u003d new Zoom(info[0], info[5]);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (info[1].equals(\"0\")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no date, event can be returned as is"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                setDone(z, statuses[0]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                notesSetter(z, notes[0]);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                return z;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else if (info[2].equals(\"0\")) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //no time, but got date"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d null;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                z.setDate(date);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                //has both date and time"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalTime time \u003d DateTimeParser.timeParser(info[2]);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                z.setDate(date);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                z.setTime(time);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setDone(z, statuses[0]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatSetter(z, statuses, info[3], info[4]);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            notesSetter(z, notes[0]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return z;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"file corruption detected\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static Timetable makeTimetable(String[] info, String[] statuses, String[] notes) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //0 is name, 1 is date, 2 is time, 3 is repeat unit, 4 is repeat number, 5 is location"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            LocalDate date \u003d DateTimeParser.dateParser(info[1]);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            LocalTime time \u003d DateTimeParser.timeParser(info[2]);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Timetable t \u003d new Timetable(info[0], date, time);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (!info[5].equals(\"0\")) { //location provided"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                t.setLocation(info[5]);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setDone(t, statuses[0]);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatSetter(t, statuses, info[3], info[4]);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            notesSetter(t, notes[0]);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return t;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"file corruption detected\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static void setDone(Event e, String doneStatus) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        boolean isDone \u003d doneStatus.equals(\"T\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            e.markAsDone();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private static void repeatSetter(Event activity, String[] statuses, String timeUnit, String repeatNumber) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        LocalDate startDate \u003d activity.getDate();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        LocalTime startTime \u003d activity.getTime();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        int count \u003d Integer.parseInt(repeatNumber);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d count; i++) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                LocalDate repeatDate;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                switch (timeUnit) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                case \"MONTHLY\":"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatDate \u003d startDate.plusMonths(i);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                case \"WEEKLY\":"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatDate \u003d startDate.plusWeeks(i);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                case \"DAILY\":"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatDate \u003d startDate.plusDays(i);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    throw new InvalidTimeUnitException(timeUnit);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                activity.setRepeatType(timeUnit);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Event repeatEvent;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                repeatEvent \u003d activity.clone();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                repeatEvent.setDate(repeatDate);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (statuses[i].equals(\"T\")) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    repeatEvent.markAsDone();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                repeatEventList.add(repeatEvent);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            activity.setRepeatEventList(repeatEventList);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.out.println(\"Error, wrong date should not happen, file corrupted\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //throw new DukeException(\"Cant clone\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Set the notes for event."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param e event."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param notes notes for event."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static void notesSetter(Event e, String notes) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String noteString \u003d notes;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        noteString \u003d noteString.trim();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ArrayList\u003cString\u003e noteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        if (noteString.equals(\"\")) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            e.setNotes(noteList);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assert noteList.size() \u003d\u003d 0 : \"There were notes provided\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            //do not discard trailing empty strings"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] noteArr \u003d noteString.split(\";\", -1);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Collections.addAll(noteList, noteArr);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        e.setNotes(noteList);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Convert ArrayList to String for notes."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param notes list of notes."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @return notes in string format."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private static String notesListToString(ArrayList\u003cString\u003e notes) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringBuffer notesBuffer \u003d new StringBuffer();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String noteString \u003d \"\";"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (!notes.isEmpty() \u0026\u0026 !(notes.size() \u003d\u003d 1 \u0026\u0026 notes.get(0).equals(\"\"))) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            for (String s : notes) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                if (s !\u003d \"\") {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    notesBuffer.append(s);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    notesBuffer.append(\";\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            noteString \u003d notesBuffer.toString();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        return noteString;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 345,
      "ninggggx99": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.event.Goal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    Scanner in;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printDividerLine() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"_________________________________\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Welcome to scheduler--;!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printByeMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Thank you for using scheduler--;!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"We hope to see you soon!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public String receiveCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printEventAddedMessage(Event event) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printRepeatAdd(Event event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"is now repeating \" + event.getRepeatType() + \" for \" + event.getRepeatCount() + \" times.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printRepeatList(Event event) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(event + \" is also on:\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e repeatEventList \u003d event.getRepeatEventList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Event e : repeatEventList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"%s \", e.getDate().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            if (e.getTime() !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                System.out.printf(\"%s \", e.getTime().format(DateTimeFormatter.ofPattern(\"K:mm a\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.printf(\"[%s]\", e.getStatus());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printGoalMessage(Goal goal) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Goal: \" + goal);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"You have no goal! Why not set one now?\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printChangeGoalMessage(Goal goal) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (goal !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Goal changed to: \" + goal);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"No more goal!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private void printCalendarDivider() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"---------------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printCalendar(Map.Entry\u003cLocalDate, ArrayList\u003cEvent\u003e\u003e entry) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(entry.getKey().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printCalendarDivider();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e eventsOnDate;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventsOnDate \u003d entry.getValue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        eventsOnDate.sort(Comparator.comparing(Event::getTime));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (Event e : eventsOnDate) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(e.toCalendarString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printCalendarDivider();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printCalendarStart(int size, int count) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"Calendar has \" + size + \" dates to display\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (count \u003e 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(count + \" events not on the calendar because they have no date and time\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        } else if (count \u003e 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(count + \" event not on the calendar because it has no date and time\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printCalendarDivider();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printCalendarEnd() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"End of calendar\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printCheckMessage() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Lists the name of all EventList in the given EventList ArrayList."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param eventLists EventList ArrayList to list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printAvailableList(ArrayList\u003cEventList\u003e eventLists) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"Following are all existing lists:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        for (EventList list : eventLists) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(list.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.out.println(\"\u0027list All\u0027 will list all existing lists.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * Lists all the events in the given EventList."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     * @param eventList EventList to list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printList(EventList eventList) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String eventListName \u003d eventList.getName();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d eventList.getEvents();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"You have no \" + eventListName + \" events!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            System.out.println(\"Here is a list of your \" + eventListName + \" events:\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "            for (Event e : events) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                System.out.println(index + \". \" + e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                if (e.getRepeatEventList() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                    System.out.println(\"   Repeated \" + e.getRepeatType() + \" for \" + e.getRepeatCount() + \" times.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                if (e.getNotes().size() \u003e 0) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    String indexWord \u003d Integer.toString(index);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    System.out.println(\"   Type \\\"view \" + eventListName + \" \" + indexWord + \"\\\" to see notes\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void printDeadlineChangedMessage(Event eventUpdated) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(eventUpdated);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void printReminder(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        if (events.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            System.out.println(\"You have no events today!\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            System.out.println(\"You have the following events today: \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            Collections.sort(events, new Comparator\u003cEvent\u003e() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                public int compare(Event o1, Event o2) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                    return o1.getTime().compareTo(o2.getTime());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            });"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            for (int i \u003d 0; i \u003c events.size(); i++) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                System.out.println(events.get(i).toString());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printEventMarkedDoneMessage(Event doneEvent) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"You have successfully marked this event as done!\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(doneEvent);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printEventMarkedUndoneMessage(Event undoneEvent) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"You have successfully marked this event as undone!\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(undoneEvent);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void printEventDeletedMessage(Event deleteEvent) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(\"You have successfully deleted this event!\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.out.println(deleteEvent);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * Print note created along with existing notes."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param eventUpdated event attached to notes."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     * @param notes list of notes."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void printNoteMessage(Event eventUpdated, ArrayList\u003cString\u003e notes) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(\"You have successfully written the note for this event!\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.out.println(eventUpdated);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            System.out.println(notes.get(i));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageSavedMessage() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file has successfully been saved!\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void printStorageLoadMessage() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(\"The file has successfully been loaded!\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printStorageLoadingErrorMessage() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"The file does not exist or has been corrupted!\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractNoDatePersonalEventMessage() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Since no date was detected in the text body, \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"the personal event will only contain the description.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractNoDateZoomEventMessage() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Since no date was detected in the text body, \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"the zoom event will only contain the description and zoom link.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractNoTimeZoomEventMessage() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Even though date was detected, time was not, in Scheduler--; \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"a zoom event cannot have the date without the time. So \""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"a zoom event with only the date and zoom link will be created.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractNoTimePersonalEventMessage() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Since no time was detected in the text body, \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"the personal event will only contain the description and the date.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractChooseTimeMessage(int timeCount, ArrayList\u003cLocalTime\u003e timeList) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"We have detected \" + timeCount + \" timings in this text body!\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Please select the time you want for this event from the list below!\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int timeNumber \u003d 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (LocalTime time : timeList) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(timeNumber + 1 + \". \" + time);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            timeNumber++;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractSingleTimeDetectedMessage(LocalTime finalTime) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"One timing detected and chosen: \" + finalTime);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractChooseDateMessage(int dateCount, ArrayList\u003cLocalDate\u003e dateList) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"We have detected \" + dateCount + \" dates in this text body!\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Please select the date you want for this event from the list below!\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int dateNumber \u003d 0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (LocalDate date : dateList) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(dateNumber + 1 + \". \" + date);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            dateNumber++;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractSingleDateDetectedMessage(LocalDate finalDate) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"One date detected and chosen: \" + finalDate);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractTextBodyRequestMessage() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Copy and paste or enter the body of the text you want to extract from!\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"At the end of your text, press enter to go to the next line, enter \u0027extractend\u0027 \""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                + \"with no quotation marks and press enter once more.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractInvalidFieldChosenMessage(String field) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Invalid \" + field + \" number to choose! Please choose again!\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractNoFieldMessage(String field) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"No \" + field + \" detected for this text body!\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractChooseZoomLinkMessage(int zoomLinkCount, ArrayList\u003cString\u003e zoomLinkList) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"We have detected \" + zoomLinkCount + \" zoom links in this text body!\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"Please select the zoom link you want for this event from the list below!\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        int zoomLinkNumber \u003d 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        for (String zoomLink : zoomLinkList) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.out.println(zoomLinkNumber + 1 + \". \" + zoomLink);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            zoomLinkNumber++;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        printDividerLine();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void printExtractSingleZoomLinkDetectedMessage(String zoomLink) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(\"One zoom link detected and chosen: \" + zoomLink);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * Prints exception message."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     * @param exceptionMessage String of warning message from various exceptions."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void printErrorMessage(String exceptionMessage) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.out.println(exceptionMessage);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void printMessage(String message) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 14,
      "marcursor": 13,
      "matthewgani": 160,
      "ninggggx99": 41,
      "Reinbowl": 96
    }
  },
  {
    "path": "src/main/resources/helpfile.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "summary | help | add | deadline | repeat | goal | done | delete | note | reminder | extract | save | bye"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin summary"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Here is a summary of all the commands that the program can run"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "help - Provides more information on how to use the commands available in the program"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "add - Records a personal, timetable or zoom event into the program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "deadline - Sets or change a deadline for a personal event"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "repeat - repeat an event for a specified amount of times every day, week or month"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "goal - Sets up a goal for the user"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "done - mark the event as completed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "delete - remove a personal, timetable or zoom event permamently from the program"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "note - Add in additional notes associate to the personal, timetable or zoom event"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": "reminder - prints out events that will be occuring on the present day"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "extract - extracts out important event information from text to be recorded as events in the program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "save - save current changes made to the program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "bye - exits the program "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "To find out more about each of these functions, type in \"help [COMMAND]\" into the terminal where COMMAND is the name of the command you would like more information about"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end summary"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin help"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "help - Provides more information on how to use the commands available in the program"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: help [COMMAND]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[COMMAND] - command which you would like to find out more information about. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "text in lowercase indicates that you should type it exactly like this when you type the command in the terminal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "text in uppercase indicates compulsory arguments that you will need to provide and type into the terminal to operate the command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "text in uppercase surrounded by square brackets [] indicates optional arguments that you can choose to provide and type into the terminal to operate the command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end help"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin add"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "add - Records a personal, timetable or zoom event into the program"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: add EVENT_TYPE EVENT_DESCRIPTION; [LINK/LOCATION]; DD/MM/YY; HH:MM AM/PM"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_TYPE specify what kind of event you would like to repeat. The accepted arguments for this are “personal”, “timetable” and “zoom”"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_DESCRIPTION is the name of the event"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[LINK/LOCATION] is an optional argument. provide a zoom link if your event is a zoom conference and provide a location if your event is a timetable event"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "DD/MM/YY contains a date string in the format [DD/MM/YY]. This is the date of the deadline for the personal event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[HH:MM] is an optional argument containing the time of the deadline for the personal event. It can be written in either 12-hour or 24-hour format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end add"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin deadline"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "deadline - Sets or change a deadline for a personal event"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: deadline EVENT_INDEX; DD/MM/YY; [HH:MM] AM/PM"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_INDEX is a number. It contains the index of the personal event that will have its deadline set or changed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "DD/MM/YY contains a date string in the format [DD/MM/YY]. This is the date of the deadline for the personal event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[HH:MM] is an optional argument containing the time of the deadline for the personal event. It can be written in either 12-hour or 24-hour format. "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end deadline"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin repeat"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "repeat - repeat an event for a specified amount of times every day, week or month"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: repeat EVENT_TYPE EVENT_INDEX [UNIT] [COUNT]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_TYPE specify what kind of event you would like to repeat. The accepted arguments for this are “personal”, “timetable” and “zoom”"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_INDEX is an number. It contains the index of the event that is to be repeated"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[UNIT] can either take the word “Weekly” or “Monthly”. It tells the program to repeat the event either every week or every month."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[COUNT] takes an integer which indicates how many units of time will this event repeat itself. For instance, if the unit input is Weekly, placing a number 5 will repeat the event for 5 weeks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end repeat"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin goal"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "goal - Sets up a goal for the user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: goal [NEW_GOAL]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[NEW_GOAL] is the goal that you will want to set for yourself. For example, \"goal get cap 5.0\" will set your current goal as \"get cap 5.0\"."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end goal"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin done"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "done - mark the event as completed"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: done EVENT_TYPE; EVENT_INDEX; [EVENT_DATE] "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_TYPE specify what kind of event you would like to mark as done. The accepted arguments for this are \"personal\", \"timetable\" and \"zoom\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_INDEX is a number. It contains the index of the event that is to be repeated"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[EVENT_DATE] is an optional argument. When a date is provided for marking a repeated command as done, the done command will mark the repetition with the date matching EVENT_DATE as done"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end done"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin delete"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": "delete - remove a personal, timetable or zoom event permamently from the program"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: delete EVENT_TYPE; EVENT_INDEX; [EVENT_DATE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_TYPE specify what kind of event you would like to delete. The accepted arguments for this are \"personal\", \"timetable\" and \"zoom\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "EVENT_INDEX is a number. It contains the index of the event that is to be deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "[EVENT_DATE] is an optional argument. When a date is provided for deleting a repeated command, the delete command will delete the repetition with the date matching EVENT_DATE"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end delete"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin note"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "To be implemented"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end note"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin reminder"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "reminder - prints out events that will be occuring on the present day"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: reminder"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end reminder"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin extract"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "extract - extracts out important event information from text to be recorded as events in the program"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: extract TEXT_SUBJECT; TEXT_BODY"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "TEXT_SUBJECT - name of the event"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "TEXT_BODY - body of text to be provided to the scheduler. The scheduler will san through looking for important information and will present you with the information to be recorded for your consideration."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end extract"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin save"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "save - save current changes made to the program"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: save"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end save"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "begin bye"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "bye - exits the program "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "Format: bye"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "end bye"
      }
    ],
    "authorContributionMap": {
      "Colin386": 133
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class DukeTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private UserData data;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Parser currentParse;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private InputStream stdin \u003d System.in;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private ByteArrayInputStream inStream;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void setupComponents(String inputString) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inStream \u003d new ByteArrayInputStream(inputString.getBytes());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setIn(inStream);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        storage \u003d new Storage(\"mainTest\", ui);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        data \u003d new UserData();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        currentParse \u003d new Parser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void multiParser_multipleValidCommands_allCommandsRun() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"add personal birthday; 03/01/2001; 0000; | list personal | delete personal 1\\r\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setupComponents(inputString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cString\u003e allCommandInputs \u003d currentParse.multiParse(userInput);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (String commInputs : allCommandInputs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Command c \u003d currentParse.parse(commInputs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(\"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"[P][✕] birthday on 2001-01-03, 00:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"Here is a list of your Personal events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"1. [P][✕] birthday on 2001-01-03, 00:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"You have successfully deleted this event!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"[P][✕] birthday on 2001-01-03, 00:00\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            fail(\"Should not have any errors in executing commands\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.setIn(stdin);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void multiParser_singleValidCommand_singleCommandsRun() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"add personal birthday; 03/01/2001; 0000;\\r\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setupComponents(inputString);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cString\u003e allCommandInputs \u003d currentParse.multiParse(userInput);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (String commInputs : allCommandInputs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Command c \u003d currentParse.parse(commInputs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(\"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"[P][✕] birthday on 2001-01-03, 00:00\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            fail(\"Should not have any errors in executing commands\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.setIn(stdin);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void multiParser_singleErrorCommand_singleCommandsRunWithException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"add personal birthday; 03/01/2001; 0000; | delete 1\\r\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setupComponents(inputString);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cString\u003e allCommandInputs \u003d currentParse.multiParse(userInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (String commInputs : allCommandInputs) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Command c \u003d currentParse.parse(commInputs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.setIn(stdin);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(\"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"[P][✕] birthday on 2001-01-03, 00:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void multiParser_extractNoteCommand_commandRunOneAtATime() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputExtract \u003d \"extract meeting; |\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputEventDetail \u003d \"Dont forget your meeting on 27 Jan 2021 at 9am\\r\\nextractend\\r\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputNote \u003d \"note personal; 1;\\r\\n\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputNoteDetail \u003d \"Meeting is fun!\\r\\n;\\r\\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d inputExtract + inputNote + inputEventDetail + inputNoteDetail;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            setupComponents(inputString);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String userInput \u003d ui.receiveCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            ArrayList\u003cString\u003e allCommandInputs \u003d currentParse.multiParse(userInput);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            for (String commInputs : allCommandInputs) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                ui.printDividerLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                Command c \u003d currentParse.parse(commInputs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                c.execute(data, ui, storage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            fail(\"No exception should occur\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.setIn(stdin);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(\"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"Copy and paste or enter the body of the text you want to extract from!\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"At the end of your text, press enter to go to the next line,\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + enter \\\u0027extractend\\\u0027 with no quotation marks and press enter once more.\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"One date detected and chosen: 2021-01-27\" + System.lineSeparator()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"One timing detected and chosen: 09:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                            + \"[P][✕] meeting on 2021-01-27, 09:00\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 185,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.EventAddErrorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    void execute_emptyInputForAddCommand_EventAddErrorException() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String addInput \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertThrows(EventAddErrorException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(addInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    void execute_emptyDescriptionForZoomEvent_printEmptyDescriptionError() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String addInput \u003d \"zoom   ; \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(addInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"This event has an empty description!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_timetableEvent_printEventAdded() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add timetable event to data"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String timetableInput \u003d \"timetable Math class; math building; 17/10/2000; 1300\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(timetableInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"[T][✕] Math class, Location: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"math building on 2000-10-17, 13:00\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_invalidPersonalEvent_printZoomEventError() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event with incorrect number of parameters to data"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"zoom class meeting; zoom.sg; 17/10/2000\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"Incorrect number of parameters for Zoom event!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    void execute_invalidPersonalEventTiming_printTimeParseError() throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add personal event with invalid time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"personal meeting; 16/9/2020; 18:89 PM\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"Something is wrong with the time!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    void execute_invalidZoomEventDate_printDateParseError() throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event with invalid date"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"personal meeting; 35/9/2020; 4 PM\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"Something is wrong with the date!\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 3,
      "matthewgani": 115
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_eventWithoutDate_doNotPrintCalendarForEvent() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Add personal event without date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String personalInput \u003d \"personal to finish project\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        new AddCommand(personalInput).execute(data, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"[P][✕] to finish project\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        // Execute calendar command"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        CalendarCommand.parse(\"\").execute(data, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Calendar has 0 dates to display\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"1 event not on the calendar because it has no date and time\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"---------------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"End of calendar\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Reinbowl": 58
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/CheckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcursor"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.event.Personal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcursor"
        },
        "content": "class CheckCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventInTimeRange_printEventsInTimeRange() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"04/05/20; 13:00; 05/05/20; 14:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        EventList personalList \u003d  data.getEventList(\"Personal\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String expectedString \u003d \"Here is a list of your coinciding events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"1. [P][✕] Go out for dinner on 2020-05-05, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"_________________________________\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(expectedString, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_eventOutsideTimeRange_printEventsInTimeRange() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Add events to data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String personalInput \u003d \"personal Go out for dinner; 05/05/20; 12:00\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        // Execute check command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String inputString \u003d \"04/05/20; 13:00; 04/05/20; 14:00\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        Command checkCommand  \u003d new CheckCommand(inputString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        checkCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        String expectedString \u003d \"You have no coinciding events!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcursor"
        },
        "content": "                + \"_________________________________\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        assertEquals(expectedString, outputStreamCaptor.toString().trim());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcursor"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcursor"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcursor"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "marcursor": 71,
      "matthewgani": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/DeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "class DeadlineCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute_withDate_printDeadline() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    public void execute_withDateAndTime_printDeadline() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        DeadlineCommand testDeadlineWithDateOnly \u003d new DeadlineCommand(\"1; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testDeadlineWithDateOnly.execute(data, ui, storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully updated the deadline for this event!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[P][✕] sleep on 2020-10-07, 23:20\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withoutDateandTime_wrongNumberOfArgumentsException() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberOfArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithoutDateandTime \u003d new DeadlineCommand(\"1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithoutDateandTime.execute(data, ui, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withInvalidIndex_invalidIndexException() throws DukeException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithInvalidIndex \u003d new DeadlineCommand(\"0; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withIndexIsNotaNumber_wrongNumberFormatException() throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            DeadlineCommand testDeadlineWithInvalidIndex \u003d new DeadlineCommand(\"a; 7/10/20; 11:20 PM\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testDeadlineWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "marcursor": 3,
      "matthewgani": 2,
      "ninggggx99": 122
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ExtractCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Nested;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.exception.InvalidExtractCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class ExtractCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    class Test1 {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"  \\r\\n extractend \\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ByteArrayInputStream inStream \u003d new ByteArrayInputStream(extractInput.getBytes());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setIn(inStream);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        void execute_emptyTextSubjectOfEvent_InvalidExtractCommandException() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \";\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            assertThrows(InvalidExtractCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ExtractCommand extractCommand \u003d new ExtractCommand(extractInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                extractCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @AfterEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void tearDown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(standardOut);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    class Test2 {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"  \\r\\n extractend \\r\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ByteArrayInputStream inStream \u003d new ByteArrayInputStream(extractInput.getBytes());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setIn(inStream);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        void execute_emptyTextBodyOfEvent_InvalidExtractCommandException() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"quiz; \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            assertThrows(InvalidExtractCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                ExtractCommand extractCommand \u003d new ExtractCommand(extractInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                extractCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @AfterEach"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void tearDown() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(standardOut);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    class Test3 {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"Hi class, please note there will be a meeting soon \\r\\n extractend \\r\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ByteArrayInputStream inStream \u003d new ByteArrayInputStream(extractInput.getBytes());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setIn(inStream);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        void execute_CreatePersonalEventWithNoDateOrTime_printSuccessfulAdd() throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"Meeting;\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Command extractCommand \u003d new ExtractCommand(extractInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            extractCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            assertEquals(\"Copy and paste or enter the body of the text you want to extract from!\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"At the end of your text, press enter to go to the next line, enter \u0027extractend\u0027 \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"with no quotation marks and press enter once more.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"No date detected for this text body!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"Since no date was detected in the text body, \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"the personal event will only contain the description.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"[P][✕] Meeting\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @AfterEach"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void tearDown() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(standardOut);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    class Test4 {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"Hi class, please note there will be a makeup lesson on 17th nov\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    + \" and 32 jan \\r\\n extractend \\r\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ByteArrayInputStream inStream \u003d new ByteArrayInputStream(extractInput.getBytes());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setIn(inStream);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        void execute_CreatePersonalEventWithDateOnly_printSuccessfulAdd() throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"CS2113T Makeup Lesson;\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Command extractCommand \u003d new ExtractCommand(extractInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            extractCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            assertEquals(\"Copy and paste or enter the body of the text you want to extract from!\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"At the end of your text, press enter to go to the next line, enter \u0027extractend\u0027 \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"with no quotation marks and press enter once more.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"One date detected and chosen: 2020-11-17\" + System.lineSeparator()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"No timing detected for this text body!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"Since no time was detected in the text body, \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"the personal event will only contain the description and the date.\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"[P][✕] CS2113T Makeup Lesson on 2020-11-17\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @AfterEach"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void tearDown() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(standardOut);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    class Test5 {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"Hi class, please note there will be a quiz \\r\\n on oct 5 2020 \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    + \"at 4pm \\r\\n extractend \\r\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ByteArrayInputStream inStream \u003d new ByteArrayInputStream(extractInput.getBytes());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setIn(inStream);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        void execute_CreatePersonalEventOneDateAndTime_printSuccessfulAdd() throws DukeException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Command extractCommand \u003d new ExtractCommand(\"CG2271 Quiz;\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            extractCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            assertEquals(\"Copy and paste or enter the body of the text you want to extract from!\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"At the end of your text, press enter to go to the next line, enter \u0027extractend\u0027 \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"with no quotation marks and press enter once more.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"One date detected and chosen: 2020-10-05\" + System.lineSeparator()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"One timing detected and chosen: 16:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"[P][✕] CG2271 Quiz on 2020-10-05, 16:00\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @AfterEach"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void tearDown() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(standardOut);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    class Test6 {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"Hi class, please note there will be a quiz \\r\\n \""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    + \"on jan 30 or may 15 at 06:00 am or 7pm \\r\\n extractend \\r\\n 2 \\r\\n 2 \\r\\n\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ByteArrayInputStream inStream \u003d new ByteArrayInputStream(extractInput.getBytes());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setIn(inStream);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        void execute_CreatePersonalEventMultipleDateAndTime_printSuccessfulAdd() throws DukeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Command extractCommand \u003d new ExtractCommand(\"GEH quiz;\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            extractCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            assertEquals(\"Copy and paste or enter the body of the text you want to extract from!\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"At the end of your text, press enter to go to the next line, enter \u0027extractend\u0027 \""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"with no quotation marks and press enter once more.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"We have detected 2 dates in this text body!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"Please select the date you want for this event from the list below!\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"1. 2020-01-30\" + System.lineSeparator()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"2. 2020-05-15\" + System.lineSeparator()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"We have detected 2 timings in this text body!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"Please select the time you want for this event from the list below!\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"1. 06:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"2. 19:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"[P][✕] GEH quiz on 2020-05-15, 19:00\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @AfterEach"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void tearDown() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(standardOut);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Nested"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    class Test7 {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @BeforeEach"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void setUp() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            String extractInput \u003d \"The seminar will be held via Zoom. You may tune in using this link:\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    + \"\\n\" + \"https://nus-sg.zoom.us/j/9290988107?pwd\u003ddDZSQ0lTa0loaTRPc1F1d01hbWVFZz09\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    + \" \\r\\n extractend \\r\\n\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            ByteArrayInputStream inStream \u003d new ByteArrayInputStream(extractInput.getBytes());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setIn(inStream);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        void execute_CreateZoomEventLinkOnly_printSuccessfulAdd() throws DukeException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            Command extractCommand \u003d new ExtractCommand(\"Seminar;\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            extractCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            assertEquals(\"Copy and paste or enter the body of the text you want to extract from!\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"At the end of your text, press enter to go to the next line, enter \u0027extractend\u0027 \""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"with no quotation marks and press enter once more.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"_________________________________\" + System.lineSeparator()"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"One zoom link detected and chosen:\""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \" https://nus-sg.zoom.us/j/9290988107?pwd\u003ddDZSQ0lTa0loaTRPc1F1d01hbWVFZz09\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"No date detected for this text body!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"Since no date was detected in the text body,\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \" the zoom event will only contain the description and zoom link.\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \"[Z][✕] Seminar, Link:\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + \" https://nus-sg.zoom.us/j/9290988107?pwd\u003ddDZSQ0lTa0loaTRPc1F1d01hbWVFZz09\""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                            + System.lineSeparator(),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                    outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        @AfterEach"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        public void tearDown() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "            System.setOut(standardOut);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "matthewgani": 292
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/GoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "class GoalCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage store \u003d new Storage(\"goalStoreTest\", ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_oneString_printChangeGoal() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_blankInput_printGoal() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"You have no goal! Why not set one now?\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    void execute_twoSeparateStringThenBlankInput_printChangeGoal() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString1 \u003d \"Fly like a butterfly\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command command \u003d new GoalCommand(inputString1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String inputString2 \u003d \"Float like a bumblebee\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(inputString2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String blankString \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        command \u003d new GoalCommand(blankString);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        command.execute(data, ui, store);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal changed to: \" + inputString2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"Goal: \" + inputString2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 8,
      "marcursor": 2,
      "Reinbowl": 82
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.event.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    void execute_noEvent_printNoEventsInLists() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Storage storage \u003d new Storage(\"data\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        // Execute list command"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        String inputString \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        // if the user enters \"list\" to list all events, the input string will be an empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //        assertEquals(\"Here is a list of all your events!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Personal.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Timetable.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"You have no events under Zoom.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void execute_zoomEvent_listZoomEvents() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Add zoom event to data"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String zoomInput \u003d \"zoom Math class; zoom.com; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        Command addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        // Execute list command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        String inputString \u003d \"zoom\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        listCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        assertEquals(\"You have successfully added this event to your list!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"[Z][✕] Math class, Link: \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"Here is a list of your Zoom events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                        + \"1. [Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Reinbowl"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "matthewgani"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1,
      "marcursor": 2,
      "matthewgani": 52,
      "Reinbowl": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/NoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class NoteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withWrongIndex_invalidIndexException() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            NoteCommand testNotesWithInvalidIndex \u003d new NoteCommand(\"personal; 7\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testNotesWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withWrongList_invalidListException() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(InvalidListException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            NoteCommand testNotesWithInvalidIndex \u003d new NoteCommand(\"persona; 1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testNotesWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withoutListTypeorIndex_wrongNumberOfArgumentsException() throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberOfArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            NoteCommand testNotesWithMissingArguments \u003d new NoteCommand(\"personal\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testNotesWithMissingArguments.execute(data, ui, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withIndexIsNotaNumber_wrongNumberFormatException() throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"personal sleep\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addPersonalEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addPersonalEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            NoteCommand testNotesWithInvalidIndex \u003d new NoteCommand(\"personal; a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "            testNotesWithInvalidIndex.execute(data, ui, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(standardOut);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 99
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/ReminderCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.parser.DateTimeParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withoutEvents_printNoEvents() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ReminderCommand testWithEvents \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testWithEvents.execute(data, ui, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have no events today!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withEvents_printEventsToday() throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate current \u003d LocalDate.now();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"timetable wakeup; \" + current.toString() + \"; 1000\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addTimetableEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addTimetableEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ReminderCommand testWithEvents \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testWithEvents.execute(data, ui, storage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate printDate \u003d DateTimeParser.dateParser(current.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printDate + \", 10:00\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have the following events today: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printDate + \", 10:00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    public void execute_withRepeatedEvents_printEventsToday() throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate current \u003d LocalDate.now();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate last \u003d current.minusWeeks(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String input \u003d \"timetable wakeup; \" + last.toString() + \"; 1000\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command addTimetableEvent \u003d new AddCommand(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        addTimetableEvent.execute(data, ui, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String repeatInput \u003d \"timetable 1 weekly 1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(repeatInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        ReminderCommand testWithEvents \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        testWithEvents.execute(data, ui, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate printLastDate \u003d DateTimeParser.dateParser(last.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        LocalDate printDate \u003d DateTimeParser.dateParser(current.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        StringWriter expectedStringWriter \u003d new StringWriter();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(expectedStringWriter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have successfully added this event to your list!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printLastDate + \", 10:00\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printLastDate + \", 10:00\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"is now repeating weekly for 1 times.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"_________________________________\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"You have the following events today: \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.println(\"[T][✕] wakeup on \" + printDate + \", 10:00\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        String expected \u003d expectedStringWriter.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertEquals(expected, outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 95
    }
  },
  {
    "path": "src/test/java/seedu/duke/command/RepeatCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcursor"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidListException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.InvalidTimeUnitException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingDeadlineRepeatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.MissingRepeatListException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "import seedu.duke.exception.WrongNumberFormatException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.WrongNumberOfArgumentsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "class RepeatCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Storage storage \u003d new Storage(\"data\", ui);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void setupEventLists() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Add Personal event to data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String personalInput \u003d \"personal party; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        personalInput \u003d \"personal surprise\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        personalInput \u003d \"personal hello; 29/02/2020\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        personalInput \u003d \"personal leap ahead; 31/01/2019\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(personalInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Add zoom event to data"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String zoomInput \u003d \"zoom Math class; zoom.com; 09/10/2000; 1300\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(zoomInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //Add Timetable Event to Data"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String timeTableInput \u003d \"timetable Science class; S17; 17/10/2000; 1500\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand \u003d new AddCommand(timeTableInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        addCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_personalEventMonthly_personalEventRepeatedMonthly() throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Create Repeat Command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 monthly 4\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Nov 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Dec 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Jan 2001 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Feb 2001 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_personalEventMonthlyNoTime_personalEventRepeatedMonthly() throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Create Repeat Command"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 3 monthly 4\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] hello on 2020-02-29\" + System.lineSeparator()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 3\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] hello on 2020-02-29 is also on:\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"29 Mar 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"29 Apr 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"29 May 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"29 Jun 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_personalEventMonthlyLeapYearFinalDay_personalEventRepeatedMonthly() throws DukeException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        // Create Repeat Command"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 4 monthly 24\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] leap ahead on 2019-01-31\" + System.lineSeparator()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 24 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 4\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] leap ahead on 2019-01-31 is also on:\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"28 Feb 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Mar 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Apr 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 May 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Jun 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Jul 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Aug 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Sep 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Oct 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Nov 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Dec 2019 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Jan 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"29 Feb 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Mar 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Apr 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 May 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Jun 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Jul 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Aug 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Sep 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Oct 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Nov 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Dec 2020 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"31 Jan 2021 [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_personalPrintRepeatNoExist_MissingRepeatListExceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            // Create Repeat Command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String inputString \u003d \"personal 4\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            fail(\"This command should have thrown an exception\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (MissingRepeatListException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            fail(\"The wrong exception type was thrown\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_zoomEventWeekly_zoomEventRepeatedWeekly() throws DukeException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //creating repeat command"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"zoom 1 weekly 3\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating weekly for 3 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"zoom 1\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[Z][✕] Math class, Link: zoom.com on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"16 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"23 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"30 Oct 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_timeTableEventDaily_timeTableEventRepeatedDaily() throws DukeException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //creating repeat command"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"timetable 1 daily 3\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[T][✕] Science class, Location: S17 on 2000-10-17, 15:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating daily for 3 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //check the dates reported and erase previous output"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"timetable 1\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[T][✕] Science class, Location: S17 on 2000-10-17, 15:00 is also on:\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"18 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"19 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"20 Oct 2000 3:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "marcursor"
        },
        "content": "    void repeat_personalEventRepeatDailyMonthlyChange_personalEventDailyToMonthly() throws DukeException {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for daily"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 daily 4\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating daily for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //clear screen and now test changing repeat from daily 4 to monthly 2"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1 monthly 2\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"is now repeating monthly for 2 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //clear screen and check if monthly repeats were successfully recorded"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"personal 1\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"[P][✕] party on 2000-10-09, 13:00 is also on:\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + System.lineSeparator()"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Nov 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"09 Dec 2000 1:00 PM [✕]\" + System.lineSeparator()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventNoDeadline_missingDeadlineExceptionThrown() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event with no deadline"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 2 daily 4\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(MissingDeadlineRepeatException.class, () -\u003e {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongIndex_indexOutOfBoundsExceptionThrown() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for an index which does not exist"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 5 daily 4\";"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidIndexException.class, () -\u003e {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongUnit_invalidTimeUnitExceptionThrown() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event using wrong time unit"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 fortnightly 4\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidTimeUnitException.class, () -\u003e {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_tooLittleArgumentsProvided_wrongNumberOfArgumentsExceptionThrown() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for event with too little information"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(WrongNumberOfArgumentsException.class, () -\u003e {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_repeatingEventWrongType_invalidEventListTypeExceptionThrown() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command for an event type that does not exist"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"holiday 5 daily 4\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertThrows(InvalidListException.class, () -\u003e {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void repeat_userTypeWrongNumber_NumberFormatExceptionThrown() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        //create repeat command using wrong number writing format"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal 1 weekly three\";"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        PrintStream outputLoc \u003d new PrintStream(outputStreamCaptor);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(outputLoc);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "        assertThrows(WrongNumberFormatException.class, () -\u003e {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Command repeatCommand \u003d RepeatCommand.parse(inputString);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            repeatCommand.execute(data, ui, storage);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        });"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 400,
      "marcursor": 6,
      "ninggggx99": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.GoalCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.data.UserData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Colin386"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Colin386"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final PrintStream standardOut \u003d System.out;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage store \u003d new Storage(\"storagetester\", ui);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        store.loadAll(data);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void storageLoadAll_LoadFilesFromDirectory_allFilesLoaded() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Storage store \u003d new Storage(\"storagetester\", ui);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        store.loadAll(data);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String inputString \u003d \"personal\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        System.setOut(new PrintStream(outputStreamCaptor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Command listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand.execute(data, ui, store);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"The file has successfully been loaded!\" + System.lineSeparator()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"Here is a list of your Personal events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"1. [P][✕] stuff on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"   Repeated weekly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"2. [P][✓] birthday celebration on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"3. [P][✕] others\" + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"zoom\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand.execute(data, ui, store);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"Here is a list of your Zoom events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"1. [Z][✕] math, Link: www.zoom.com/blah on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"   Repeated daily for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "matthewgani"
        },
        "content": "                        + \"2. [Z][✓] computing, Link: www.zoom.com/hello on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        inputString \u003d \"timetable\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand \u003d ListCommand.parse(inputString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        listCommand.execute(data, ui, store);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"Here is a list of your Timetable events:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"1. [T][✕] math, Location: S17 on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"   Repeated monthly for 4 times.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"2. [T][✓] computing, Location: COM2 on 2010-01-01, 12:00\" + System.lineSeparator()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        outputStreamCaptor.reset();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        GoalCommand goalCheck \u003d new GoalCommand(\"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        goalCheck.execute(data, ui, store);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        assertEquals(\"Goal: hello there\" + System.lineSeparator()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                        + \"_________________________________\" + System.lineSeparator(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Colin386"
        },
        "content": "                outputStreamCaptor.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    void storageSaveAll_saveFilesIntoComputer_allFilesSaved() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelPersonalLoc \u003d {\"storagetestermodelans\", \"personal.txt\"};"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelZoomLoc \u003d {\"storagetestermodelans\", \"zoom.txt\"};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelTimetableLoc \u003d {\"storagetestermodelans\", \"timetable.txt\"};"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] modelGoalLoc \u003d {\"storagetestermodelans\", \"goal.txt\"};"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path personalPath \u003d createPath(modelPersonalLoc);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path zoomPath \u003d createPath(modelZoomLoc);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path timetablePath \u003d createPath(modelTimetableLoc);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path goalPath \u003d createPath(modelGoalLoc);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e personalModel \u003d Files.readAllLines(personalPath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e zoomModel \u003d Files.readAllLines(zoomPath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e timetableModel \u003d Files.readAllLines(timetablePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e goalModel \u003d Files.readAllLines(goalPath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Storage store \u003d new Storage(\"storagetester\", ui);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            UserData data \u003d new UserData();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            store.loadAll(data);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            store.saveAll(data);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualPersonalLoc \u003d {\"storagetester\", \"personal.txt\"};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualZoomLoc \u003d {\"storagetester\", \"zoom.txt\"};"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualTimetableLoc \u003d {\"storagetester\", \"timetable.txt\"};"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            String[] actualGoalLoc \u003d {\"storagetester\", \"goal.txt\"};"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualPersonalPath \u003d createPath(actualPersonalLoc);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualZoomPath \u003d createPath(actualZoomLoc);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualTimetablePath \u003d createPath(actualTimetableLoc);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            Path actualGoalPath \u003d createPath(actualGoalLoc);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e personalActual \u003d Files.readAllLines(actualPersonalPath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e zoomActual \u003d Files.readAllLines(actualZoomPath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e timetableActual \u003d Files.readAllLines(actualTimetablePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            final List\u003cString\u003e goalActual \u003d Files.readAllLines(actualGoalPath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(personalActual, personalModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(zoomActual, zoomModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(timetableActual, timetableModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            assertEquals(goalActual, goalModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Colin386"
        },
        "content": "            fail(\"IO error! File was not written to\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * Function accepts a string and creates a path object originating from the user directory."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @param pathName is a string array which accepts in the path name words, each word represents a folder"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     * @return Path object indicating the location of the pathName keyed in initially."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Colin386"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    private Path createPath(String[] pathName) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        String origin \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        Path newPath \u003d Paths.get(origin, pathName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Colin386"
        },
        "content": "        return newPath;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Colin386"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Colin386"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Colin386"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Colin386": 170,
      "matthewgani": 2
    }
  },
  {
    "path": "storagetester/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "hello there"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "storagetester/personal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "stuff | 2010-01-01 | 1200 | WEEKLY | 4 |  | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "birthday celebration | 2010-01-01 | 1200 | 0 | 0 |  | T"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "others | 0 | 0 | 0 | 0 |  | F"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 3
    }
  },
  {
    "path": "storagetester/timetable.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "math | 2010-01-01 | 1200 | MONTHLY | 4 | S17 |  | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | COM2 |  | T"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 2
    }
  },
  {
    "path": "storagetester/zoom.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "math | 2010-01-01 | 1200 | DAILY | 4 | www.zoom.com/blah |  | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | www.zoom.com/hello |  | T"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 2
    }
  },
  {
    "path": "storagetestermodelans/goal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "hello there"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "storagetestermodelans/personal.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "stuff | 2010-01-01 | 1200 | WEEKLY | 4 |  | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "birthday celebration | 2010-01-01 | 1200 | 0 | 0 |  | T"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "others | 0 | 0 | 0 | 0 |  | F"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 3
    }
  },
  {
    "path": "storagetestermodelans/timetable.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "math | 2010-01-01 | 1200 | MONTHLY | 4 | S17 |  | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | COM2 |  | T"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 2
    }
  },
  {
    "path": "storagetestermodelans/zoom.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "math | 2010-01-01 | 1200 | DAILY | 4 | www.zoom.com/blah |  | F | F | F | T | F"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ninggggx99"
        },
        "content": "computing | 2010-01-01 | 1200 | 0 | 0 | www.zoom.com/hello |  | T"
      }
    ],
    "authorContributionMap": {
      "ninggggx99": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Colin386"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "Colin386": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "setlocal enableextensions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "pushd %~dp0"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "call gradlew clean shadowJar"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "cd build\\libs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "for /f \"tokens\u003d*\" %%a in ("
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u0027dir /b *.jar\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ") do ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    set jarloc\u003d%%a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Colin386"
        },
        "content": "del \"..\\..\\text-ui-test\\data\\*.*\" /f /q"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "java -jar %jarloc% \u003c ..\\..\\text-ui-test\\input.txt \u003e ..\\..\\text-ui-test\\ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "cd ..\\..\\text-ui-test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Colin386"
        },
        "content": "del \".\\data\\*.*\" /f /q"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT \u003eNUL \u0026\u0026 ECHO Test passed! || Echo Test failed!"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "-": 18
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# change to script directory"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "cd \"${0%/*}\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "cd .."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "./gradlew clean shadowJar"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "cd text-ui-test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Colin386"
        },
        "content": "rm ./data/*.*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "cp EXPECTED.TXT EXPECTED-UNIX.TXT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "diff EXPECTED-UNIX.TXT ACTUAL.TXT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Colin386"
        },
        "content": "rm ./data/*.*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "then"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test passed!\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "else"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \"Test failed!\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "Colin386": 2,
      "-": 23
    }
  }
]
