[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerct"
        },
        "content": "    mainClassName \u003d \"seedu.modtracker.ModTracker\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerct"
        },
        "content": "    archiveBaseName \u003d \"modtracker\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerct": 2,
      "-": 44,
      "KennethEer": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lhydl"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Hao Yuan | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Joe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Ron John | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | John Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![](https://via.placeholder.com/100.png?text\u003dPhoto) | Don Roe | [Github](https://github.com/) | [Portfolio](docs/team/johndoe.md)"
      }
    ],
    "authorContributionMap": {
      "limgl1998": 1,
      "lhydl": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/modtracker/ModTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerct"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerct"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerct"
        },
        "content": " * Main entry-point for the java.seedu.modtracker application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerct"
        },
        "content": "public class ModTracker {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerct"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerct"
        },
        "content": "    private ModuleList modList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerct"
        },
        "content": "        new ModTracker(\"data/modtracker.txt\").run();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public ModTracker(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerct"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerct"
        },
        "content": "        modList \u003d new ModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerct"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Runs the program until termination."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerct"
        },
        "content": "        String name \u003d startAndGetName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerct"
        },
        "content": "        loadData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        runCommandLoopUntilExitCommand(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Starts the program, prints the welcome message and name-enter prompt."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * @return name of user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerct"
        },
        "content": "    private String startAndGetName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        ui.printWelcomeScreen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        return ui.printNamePrompt();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Reads the user command until the user enters the exit command and terminates the program."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * @param name name of user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerct"
        },
        "content": "    private void runCommandLoopUntilExitCommand(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        while (!parser.isExit()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            String input \u003d ui.readCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerct"
        },
        "content": "            parser.parse(input, modList, name, storage, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerct"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerct"
        },
        "content": "    protected void loadData() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerct"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerct"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerct"
        },
        "content": "            Scanner reader \u003d storage.getReader();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerct"
        },
        "content": "            while (reader.hasNext()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerct"
        },
        "content": "                String input \u003d reader.nextLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerct"
        },
        "content": "                parser.parse(input, modList, \"\", storage, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerct"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerct"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerct"
        },
        "content": "            ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public ModuleList getModList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kerct"
        },
        "content": "        return modList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lhydl": 27,
      "kerct": 37,
      "-": 6,
      "KennethEer": 3
    }
  },
  {
    "path": "src/main/java/seedu/modtracker/ModView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerct"
        },
        "content": "public class ModView {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private static final int LENGTH_OF_MODULE_CODE \u003d 6;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String FIRST_PART_OF_BORDER \u003d \"+------+-\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String SECOND_PART_OF_BORDER \u003d \"-------+----------+----------+\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String FIRST_PART_OF_HEADER \u003d \"| Week | Module \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String SECOND_PART_OF_HEADER \u003d \"| Expected |  Actual  |\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String NO_INPUT \u003d \" No Input \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final int DECIMAL_PLACES \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final int MIN_WEEK_VALUE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final int MAX_WEEK_VALUE \u003d 13;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String WEEK_NUMBER_PADDING_CHAR \u003d \"0\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final int FACTOR \u003d 10;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String REPLACE_BY_WEEK_NUMBER \u003d \"WK\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String REPLACE_BY_MODULE_CODE \u003d \"XXXXXX\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String FIRST_PART_OF_CONTENT \u003d \"|  \" + REPLACE_BY_WEEK_NUMBER"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            + \"  | \" + REPLACE_BY_MODULE_CODE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String PADDING_CHAR \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String REPLACE_BY_EXPECTED_WORKLOAD \u003d \"YY\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String REPLACE_BY_NO_EXPECTED_WORKLOAD_FOUND \u003d \"    YY    \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String REPLACE_BY_ACTUAL_WORKLOAD \u003d \"ZZZZ\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String REPLACE_BY_NO_ACTUAL_WORKLOAD_FOUND \u003d \"   ZZZZ   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String SECOND_PART_OF_CONTENT \u003d \" |\" + REPLACE_BY_NO_EXPECTED_WORKLOAD_FOUND"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            + \"|\" + REPLACE_BY_NO_ACTUAL_WORKLOAD_FOUND + \"|\" + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String INVALID_WEEK_NUMBER \u003d \"Please input a week number between 1 and 13 inclusive.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final String EMPTY_MODULE_LIST \u003d \"The module list is empty. Please input some modules to be tracked.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * Gets all the module codes of modules taken by the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * @param modList list containing all the modules taken."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * @return a list containing all the modules codes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private ArrayList\u003cString\u003e getModuleCode(ArrayList\u003cModule\u003e modList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        for (Module m : modList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            output.add(m.getModuleCode());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * Prints the week number, module code, expected workload and actual time spent"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * in the specified week for all the modules taken in a table format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * @param list       list class containing all the modules taken."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * @param weekNumber specified week number."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public void printAllModuleInformation(ModuleList list, int weekNumber) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cModule\u003e modList \u003d list.getData();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        if (weekNumber \u003c MIN_WEEK_VALUE || weekNumber \u003e MAX_WEEK_VALUE) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            System.out.println(INVALID_WEEK_NUMBER + System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        if (modList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            System.out.println(EMPTY_MODULE_LIST + System.lineSeparator());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assert weekNumber \u003e\u003d MIN_WEEK_VALUE : \"week number should be between 1 and 13 inclusive\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assert weekNumber \u003c\u003d MAX_WEEK_VALUE : \"week number should be between 1 and 13 inclusive\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assert !modList.isEmpty() : \"modList should not be empty\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cString\u003e moduleCodes \u003d getModuleCode(modList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        int maxLength \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        for (String s : moduleCodes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            if (s.length() \u003e maxLength) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                maxLength \u003d s.length();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        int extraCharsToBeAdded \u003d maxLength - LENGTH_OF_MODULE_CODE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        StringBuilder dashToBeAdded \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        StringBuilder spaceToBeAdded \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        StringBuilder crossToBeAdded \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        for (int i \u003d 0; i \u003c extraCharsToBeAdded; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            dashToBeAdded.append(\"-\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            spaceToBeAdded.append(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            crossToBeAdded.append(\"X\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String border \u003d FIRST_PART_OF_BORDER + dashToBeAdded + SECOND_PART_OF_BORDER;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String header \u003d FIRST_PART_OF_HEADER + spaceToBeAdded + SECOND_PART_OF_HEADER;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String contents \u003d FIRST_PART_OF_CONTENT + crossToBeAdded + SECOND_PART_OF_CONTENT;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.out.print(border + header + border);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        for (Module m : modList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            String out \u003d contents;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            String crosses \u003d REPLACE_BY_MODULE_CODE + crossToBeAdded;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            String weekNum \u003d (isTwoDigitNumber(weekNumber) ? \"\" : WEEK_NUMBER_PADDING_CHAR) + weekNumber;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            out \u003d out.replace(REPLACE_BY_WEEK_NUMBER, weekNum);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            StringBuilder moduleCode \u003d new StringBuilder(m.getModuleCode());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            while (moduleCode.length() \u003c crosses.length()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                moduleCode.append(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            out \u003d out.replace(crosses, moduleCode.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            if (m.doesExpectedWorkLoadExist()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                String expectedWorkLoad \u003d (isTwoDigitNumber(m.getExpectedWorkload()) ? \"\" : PADDING_CHAR)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                        + m.getExpectedWorkload();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                out \u003d out.replace(REPLACE_BY_EXPECTED_WORKLOAD, expectedWorkLoad);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                out \u003d out.replace(REPLACE_BY_NO_EXPECTED_WORKLOAD_FOUND, NO_INPUT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            if (m.doesActualTimeExist(weekNumber)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                double actualTime \u003d m.getActualTime()[weekNumber - INDEX_OFFSET];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                actualTime \u003d round(actualTime, DECIMAL_PLACES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                String actualWorkLoad \u003d (isTwoDigitNumber((int) actualTime) ? \"\" : PADDING_CHAR)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                        + actualTime;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                out \u003d out.replace(REPLACE_BY_ACTUAL_WORKLOAD, actualWorkLoad);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                out \u003d out.replace(REPLACE_BY_NO_ACTUAL_WORKLOAD_FOUND, NO_INPUT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            System.out.print(out + border);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private double round(double value, int decimalPlaces) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        int scale \u003d (int) Math.pow(FACTOR, decimalPlaces);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return (double) Math.round(value * scale) / scale;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private boolean isTwoDigitNumber(int num) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return String.valueOf(num).length() \u003d\u003d 2;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limgl1998": 136,
      "lhydl": 1,
      "kerct": 2
    }
  },
  {
    "path": "src/main/java/seedu/modtracker/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KennethEer"
        },
        "content": " * Represents a module. A \u003ccode\u003eModule\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KennethEer"
        },
        "content": " * a module with its moduleCode, expected time and actual time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KennethEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final int NO_INPUT \u003d -1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private int expected \u003d NO_INPUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private final double[] actualTime \u003d new double[13];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public Module(String mod) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerct"
        },
        "content": "        moduleCode \u003d mod;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        Arrays.fill(actualTime, NO_INPUT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public Module(String mod, String expected) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerct"
        },
        "content": "        moduleCode \u003d mod;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        this.expected \u003d Integer.parseInt(expected);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        Arrays.fill(actualTime, NO_INPUT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        if (expected \u003d\u003d NO_INPUT) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerct"
        },
        "content": "            return moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerct"
        },
        "content": "        return moduleCode + \", Expected Workload: \" + expected + \"h\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public int getExpectedWorkload() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return expected;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public void setExpectedWorkload(int expected) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerct"
        },
        "content": "        this.expected \u003d expected;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public double[] getActualTime() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return actualTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    public void addActualTime(String time, String week) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        double d \u003d Double.parseDouble(time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        int i \u003d Integer.parseInt(week);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        if (this.actualTime[i - INDEX_OFFSET] \u003d\u003d NO_INPUT) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            this.actualTime[i - INDEX_OFFSET] \u003d d;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            this.actualTime[i - INDEX_OFFSET] +\u003d d;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    public void minusActualTime(String time, String week) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        double d \u003d Double.parseDouble(time);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        int i \u003d Integer.parseInt(week);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kerct"
        },
        "content": "        //assert this.actualTime[i - INDEX_OFFSET] !\u003d NO_INPUT : \"Cannot minus if actual time is not initialised\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kerct"
        },
        "content": "        if (this.actualTime[i - INDEX_OFFSET] !\u003d NO_INPUT) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "            this.actualTime[i - INDEX_OFFSET] -\u003d d;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        if (!(obj instanceof Module)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        Module m \u003d (Module) obj;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        return moduleCode.equals(m.moduleCode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public boolean doesExpectedWorkLoadExist() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return (expected !\u003d NO_INPUT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public boolean doesActualTimeExist(int weekNumber) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        return (actualTime[weekNumber - INDEX_OFFSET] !\u003d NO_INPUT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limgl1998": 35,
      "DesmondKJL": 10,
      "kerct": 12,
      "KennethEer": 38
    }
  },
  {
    "path": "src/main/java/seedu/modtracker/ModuleList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KennethEer"
        },
        "content": " * Represents a module list. A \u003ccode\u003eModuleList\u003c/code\u003e object corresponds to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KennethEer"
        },
        "content": " * a list of modules and a Ui object"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KennethEer"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "public class ModuleList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public static ArrayList\u003cModule\u003e modList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String MODULECODE_SPACING \u003d \"Please type module code without any spacing.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String MODULECODE_LENGTH \u003d \"The module code should have 6 - 8 characters without any spacing.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String INVALID_MODULECODE \u003d \"Please check module code again.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String INVALID_HOURS \u003d \"Please input a valid number of hours.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String ERROR_ADDMOD \u003d \"Please type addmod \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String ERROR_ADDEXP \u003d \"Please type addexp \u003cmodule code\u003e \u003cexpected workload\u003e\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String ERROR_DELETEMOD \u003d \"Please type deletemod \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String ERROR_DELETEEXP \u003d \"Please type deleteexp \u003cmodule code\u003e\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final int MIN_MOD_LENGTH \u003d 6;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final int MAX_MOD_LENGTH \u003d 8;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public static final int NO_INPUT \u003d -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Checks if the module exists in the list of modules."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param input module code typed in by user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @return true if module is found in the list of modules, false otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public boolean checkIfModuleExist(String input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        Module currentMod \u003d new Module(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        for (Module mod: modList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (mod.equals(currentMod)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Checks if the module is valid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param module module code typed in by user."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @return true if module code is valid, false otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public boolean checkIfModuleValid(String module, boolean toPrint) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        String trimmedMod \u003d module.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        if (trimmedMod.contains(\" \")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(MODULECODE_SPACING + System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } else if (trimmedMod.length() \u003c MIN_MOD_LENGTH || trimmedMod.length() \u003e MAX_MOD_LENGTH) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(INVALID_MODULECODE + \" \" + MODULECODE_LENGTH + System.lineSeparator());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Checks if the time is valid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param hours number of hours typed in by user."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @return true if number of hours is valid, false otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public boolean checkIfTimeValid(double hours, boolean toPrint) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        if (hours \u003c 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(INVALID_HOURS + System.lineSeparator());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Creates a module and adds the module to the list of modules if the module"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * does not exist."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param input module code typed in by user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param storage storage object where data is stored."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void addMod(String input, boolean toPrint, Storage storage) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            String[] modInfo \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            String modCode \u003d modInfo[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            modCode \u003d modCode.toUpperCase();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (!checkIfModuleValid(modCode, toPrint)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            assert modCode.length() \u003e\u003d MIN_MOD_LENGTH : MODULECODE_LENGTH;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            assert modCode.length() \u003c\u003d MAX_MOD_LENGTH : MODULECODE_LENGTH;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (checkIfModuleExist(modCode)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                if (toPrint) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    ui.printExist(modCode);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                Module currentModule \u003d new Module(modCode);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                modList.add(currentModule);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                if (toPrint) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    ui.printAdd(currentModule);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    storage.appendToFile(input);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(ERROR_ADDMOD + System.lineSeparator());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Creates a module and adds the module with expected time to the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * list of modules if module does not exist."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * If module already exist, update expected time based on user input."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param input module code and expected time typed in by user."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param storage storage object where data is stored."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void addExp(String input, boolean toPrint, Storage storage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            String[] modInfo \u003d input.trim().split(\" \", 3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            String modCode \u003d modInfo[1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            String expTime \u003d modInfo[2];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            modCode \u003d modCode.toUpperCase();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (!checkIfModuleValid(modCode, toPrint)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            int expectedTime \u003d Integer.parseInt(expTime);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (!checkIfTimeValid(expectedTime, toPrint)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            assert expectedTime \u003e\u003d 0 : \"The expected time should be positive\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            Module currentMod \u003d new Module(modCode, expTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (!checkIfModuleExist(modCode)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                modList.add(currentMod);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                int index \u003d modList.indexOf(currentMod);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                modList.get(index).setExpectedWorkload(expectedTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                ui.printAdd(currentMod);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                storage.appendToFile(input);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(ERROR_ADDEXP + System.lineSeparator());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(\"NumberFormatException: \" + nfe.getMessage() + System.lineSeparator());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Deletes the module if module exists."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param input module code typed in by user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param storage storage object where data is stored."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void deleteMod(String input, boolean toPrint, Storage storage) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            String[] modInfo \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            String modCode \u003d modInfo[1];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            modCode \u003d modCode.toUpperCase();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (!checkIfModuleValid(modCode, toPrint)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (checkIfModuleExist(modCode)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                Module inputMod \u003d new Module(modCode);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                modList.remove(inputMod);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                if (toPrint) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    ui.printDelete(modCode);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    storage.appendToFile(input);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                if (toPrint) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    ui.printNotExist(modCode);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(ERROR_DELETEMOD + System.lineSeparator());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Deletes the expected time of the module if module exists."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param input module code and expected time typed in by user."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * @param storage storage object where data is stored."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void deleteExp(String input, boolean toPrint, Storage storage) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            String[] modInfo \u003d input.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            String modCode \u003d modInfo[1];"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            modCode \u003d modCode.toUpperCase();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (!checkIfModuleValid(modCode, toPrint)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (checkIfModuleExist(modCode)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                Module inputMod \u003d new Module(modCode);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                int index \u003d modList.indexOf(inputMod);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                modList.get(index).setExpectedWorkload(NO_INPUT);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                if (toPrint) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    ui.printDeleteExp(modCode);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    storage.appendToFile(input);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                if (toPrint) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                    ui.printNotExist(modCode);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                System.out.println(ERROR_DELETEEXP + System.lineSeparator());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * Adds time to actual workload to an existing module."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * @param input module code, added time spent and week input by user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * @param storage storage object where data is stored."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void addTime(String input, boolean toPrint, Storage storage) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String[] commandInfo \u003d input.trim().split(\" \", 4);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        commandInfo[1] \u003d commandInfo[1].toUpperCase();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        Module currentModule \u003d new Module(commandInfo[1]);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        int index \u003d modList.indexOf(currentModule);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        modList.get(index).addActualTime(commandInfo[2], commandInfo[3]);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        if (toPrint) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "            System.out.println(commandInfo[2] + \" hours are added to \" + commandInfo[1] + System.lineSeparator());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            storage.appendToFile(input);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * Minus time from actual workload to an existing module."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * @param input module code, removed time spent and week input by user."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * @param toPrint whether the UI should print the output."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     * @param storage storage object where data is stored."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void minusTime(String input, boolean toPrint, Storage storage) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String[] commandInfo \u003d input.trim().split(\" \", 4);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        commandInfo[1] \u003d commandInfo[1].toUpperCase();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        Module currentModule \u003d new Module(commandInfo[1]);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        int index \u003d modList.indexOf(currentModule);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        int week \u003d Integer.parseInt(commandInfo[3]);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        if (modList.get(index).doesActualTimeExist(week)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "            modList.get(index).minusActualTime(commandInfo[2], commandInfo[3]);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                System.out.println(commandInfo[2] + \" hours are removed from \""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                        + commandInfo[1] + System.lineSeparator());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "                storage.appendToFile(input);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            if (toPrint) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                System.out.println(\"Cannot minus actual time as there is no actual time inputted.\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                        + System.lineSeparator());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public ArrayList\u003cModule\u003e getData() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        return modList;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lhydl": 19,
      "DesmondKJL": 23,
      "kerct": 1,
      "KennethEer": 244
    }
  },
  {
    "path": "src/main/java/seedu/modtracker/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lhydl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lhydl"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lhydl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lhydl"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    protected static boolean exit \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_ADDMOD \u003d \"addmod\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_ADDTIME \u003d \"addtime\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_ADDEXP \u003d \"addexp\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_DELETEMOD \u003d \"deletemod\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_DELETEEXP \u003d \"deleteexp\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_MINUS \u003d \"minus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String COMMAND_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Parses user inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * @param modList module list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * @param name name entered by the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * @param storage storage object to load and store data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * @param toPrint whether the UI should print the output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public void parse(String input, ModuleList modList, String name, Storage storage, boolean toPrint) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assert input !\u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String[] command \u003d input.trim().split(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        switch (command[0].toLowerCase()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_ADDMOD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerct"
        },
        "content": "            modList.addMod(input, toPrint, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_ADDEXP:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerct"
        },
        "content": "            modList.addExp(input, toPrint, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_DELETEMOD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerct"
        },
        "content": "            modList.deleteMod(input, toPrint, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_DELETEEXP:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerct"
        },
        "content": "            modList.deleteExp(input, toPrint, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_ADDTIME:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                modList.addTime(input, toPrint, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_MINUS:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerct"
        },
        "content": "                modList.minusTime(input, toPrint, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_LIST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerct"
        },
        "content": "            assert toPrint : \"toPrint should be true\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                ui.printTable(modList, Integer.parseInt(command[1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                ui.printErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                System.out.println(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_HELP:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kerct"
        },
        "content": "            assert toPrint : \"toPrint should be true\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            if (!input.toLowerCase().trim().equals(COMMAND_HELP)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                ui.printInvalidCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                ui.printHelpList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        case COMMAND_EXIT:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kerct"
        },
        "content": "            assert toPrint : \"toPrint should be true\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            if (!input.toLowerCase().trim().equals(COMMAND_EXIT)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                ui.printInvalidCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                ui.printExitScreen(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                exit \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kerct"
        },
        "content": "            assert toPrint : \"toPrint should be true\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            ui.printInvalidCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Checks for exit status."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * @return status of exit"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lhydl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limgl1998": 1,
      "lhydl": 87,
      "kerct": 13,
      "KennethEer": 1
    }
  },
  {
    "path": "src/main/java/seedu/modtracker/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerct"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerct"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerct"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerct"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerct"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerct"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerct"
        },
        "content": " * Deals with loading tasks from and saving tasks to a file."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerct"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerct"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerct"
        },
        "content": "    private final String filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerct"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerct"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * Creates a new Storage object with a File created at the specified file path."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerct"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * @param filePath File path whereby data is loaded from and stored at."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerct"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerct"
        },
        "content": "        if (filePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerct"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kerct"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kerct"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerct"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerct"
        },
        "content": "            file \u003d new File(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kerct"
        },
        "content": "            file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kerct"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kerct"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kerct"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kerct"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kerct"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * Returns a scanner object to read the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kerct"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * @return Scanner to read the file of the Storage object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * @throws FileNotFoundException If the file cannot be found."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kerct"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public Scanner getReader() throws FileNotFoundException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kerct"
        },
        "content": "        assert file !\u003d null : \"File should not be null\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kerct"
        },
        "content": "        return new Scanner(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kerct"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * Appends the specified input to the storage file and creates a new line."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kerct"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * @param input The input to be appended to the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kerct"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public void appendToFile(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kerct"
        },
        "content": "        assert filePath !\u003d null : \"File path should not be null\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kerct"
        },
        "content": "        assert file !\u003d null : \"File should not be null\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kerct"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kerct"
        },
        "content": "            // creates a FileWriter in append mode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kerct"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kerct"
        },
        "content": "            fw.write(input + System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kerct"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kerct"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kerct"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kerct"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kerct"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerct": 64
    }
  },
  {
    "path": "src/main/java/seedu/modtracker/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lhydl"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lhydl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lhydl"
        },
        "content": " * Text UI of the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lhydl"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lhydl"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    private static final Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String INVALID_COMMAND \u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String ENTER_HELP \u003d \"Enter \u003chelp\u003e for a quick view of available commands.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String HELP_LIST \u003d \"Available Commands:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"1. addmod \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"   example: addmod CS2113T\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"2. addexp \u003cmodule code\u003e \u003cexpected workload\u003e\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"   example: addexp CS2113T 5\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"3. addtime \u003cmodule code\u003e \u003cactual time spent\u003e \u003cweek number\u003e\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"   example: addtime CS2113T 2 1\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"4. list \u003cweek number\u003e\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"   example: list 2\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"5. deletemod \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"   example: deletemod CS2113T\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"6. deleteexp \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"   example: deleteexp CS2113T\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"7. minus \u003cmodule code\u003e \u003ctime\u003e \u003cweek number\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"   example: minus CS2113T 2 1\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"8. exit\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public static final String LOGO \u003d \"|\\\\\\\\        /|         |\u003d\u003d\u003d\u003d\u003d\u003d            ||\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"||\\\\\\\\      / |  __   __|  ||  __  ___ ___ ||    ___   ____\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"|| \\\\\\\\    /  |//  \\\\//  |  ||//  \\\\/  |/    ||// / _ \\\\ //   \\\\\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"||  \\\\\\\\  /   |||   ||  |  |||   ||  ||    ||\\\\\\\\ | __/ ||\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"||   \\\\\\\\/    |\\\\\\\\__/\\\\\\\\__|  |||   \\\\\\\\__|\\\\___ || \\\\\\\\\\\\___| ||\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            + \"*****************************************************|\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Reads input entered by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * @return input entered by the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Prints the invalid command line."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void printInvalidCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(INVALID_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(ENTER_HELP + System.lineSeparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Prints the welcome screen when the program starts."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void printWelcomeScreen() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(\"Hello from\" + System.lineSeparator() + LOGO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(\"Full user guide available at: https://ay2021s1-cs2113t-f12-4.github.io/tp/\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(ENTER_HELP + System.lineSeparator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Prompts the user to enter his/her name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public String printNamePrompt() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(\"What is your name?\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String name \u003d in.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            printInvalidCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            printNamePrompt();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            System.out.println(\"Hello \" + name + \"!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lhydl"
        },
        "content": "            System.out.println(\"What can I do for you?\" + System.lineSeparator());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Prints the exit line when user entered \"bye\"."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void printExitScreen(String name) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(\"All changes saved.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(\"Bye \" + name + \". Hope to see you again soon!\" + System.lineSeparator());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Prints all the module information in a table."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * @param modList list of modules."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     * @param week specified week number."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    public void printTable(ModuleList modList, int week) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kerct"
        },
        "content": "        ModView view \u003d new ModView();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(modList,week);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     * Prints all available commands."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lhydl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void printHelpList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(HELP_LIST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Prints the message when module does not exist."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void printNotExist(String moduleCode) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.out.println(moduleCode + \" does not exist.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Prints the message when module exists."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void printExist(String moduleCode) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.out.println(moduleCode + \" already exists.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Prints the message when module is deleted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void printDelete(String moduleCode) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.out.println(moduleCode + \" is removed.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Prints the message when module is deleted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void printDeleteExp(String moduleCode) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.out.println(\"Expected Workload of \" + moduleCode + \" is removed.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     * Prints the message when module is added to modList."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void printAdd(Module moduleDetail) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.out.println(moduleDetail + \" is added.\" + System.lineSeparator());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kerct"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kerct"
        },
        "content": "     * Prints the given error message."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kerct"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public void printErrorMessage(String message) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kerct"
        },
        "content": "        System.out.println(\"There was an error :(\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kerct"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.out.println(ENTER_HELP);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lhydl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limgl1998": 9,
      "lhydl": 93,
      "kerct": 10,
      "KennethEer": 35
    }
  },
  {
    "path": "src/test/java/seedu/modtracker/ModTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerct"
        },
        "content": "class ModTrackerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerct": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/modtracker/ModViewTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "class ModViewTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    private final ModView view \u003d new ModView();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    void printAllModuleInformation_emptyList_emptyModuleList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ModuleList emptyList \u003d new ModuleList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        emptyList.getData().clear();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(emptyList, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(ModView.EMPTY_MODULE_LIST + System.lineSeparator()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    void printAllModuleInformation_invalidWeekNumber_invalidWeekNumber() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ModuleList emptyList \u003d new ModuleList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        emptyList.getData().clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(emptyList, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(ModView.INVALID_WEEK_NUMBER + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(emptyList, -1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(ModView.INVALID_WEEK_NUMBER + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(emptyList, 14);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(ModView.INVALID_WEEK_NUMBER + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    void printAllModuleInformation_6CharLongModuleCode_tableAdjustedTo6Char() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ModuleList filledList \u003d new ModuleList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cModule\u003e modList \u003d filledList.getData();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.add(new Module(\"CS1231\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String expected \u003d ModView.FIRST_PART_OF_BORDER + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_HEADER + ModView.SECOND_PART_OF_HEADER"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + \"|  01  | CS1231 | No Input | No Input |\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + ModView.SECOND_PART_OF_BORDER;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(filledList, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(expected + System.lineSeparator(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    void printAllModuleInformation_7CharLongModuleCode_tableAdjustedTo7Char() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ModuleList filledList \u003d new ModuleList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cModule\u003e modList \u003d filledList.getData();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.add(new Module(\"GER1000\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String expected \u003d ModView.FIRST_PART_OF_BORDER + \"-\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_HEADER + \" \" + ModView.SECOND_PART_OF_HEADER"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"-\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + \"|  01  | GER1000 | No Input | No Input |\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"-\" + ModView.SECOND_PART_OF_BORDER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(filledList, 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(expected + System.lineSeparator(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    void printAllModuleInformation_8CharLongModuleCode_tableAdjustedTo8Char() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ModuleList filledList \u003d new ModuleList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cModule\u003e modList \u003d filledList.getData();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.add(new Module(\"GER1000H\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String expected \u003d ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_HEADER + \"  \" + ModView.SECOND_PART_OF_HEADER"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + \"|  01  | GER1000H | No Input | No Input |\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(filledList, 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(expected + System.lineSeparator(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    void printAllModuleInformation_hasExpectedWorkload_displaysExpectedWorkLoad() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ModuleList filledList \u003d new ModuleList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cModule\u003e modList \u003d filledList.getData();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.clear();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.add(new Module(\"GER1000H\", \"8\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String expected \u003d ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_HEADER + \"  \" + ModView.SECOND_PART_OF_HEADER"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + \"|  01  | GER1000H |     8    | No Input |\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(filledList, 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(expected + System.lineSeparator(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    void printAllModuleInformation_hasActualWorkload_displaysActualWorkLoad() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ModuleList filledList \u003d new ModuleList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        ArrayList\u003cModule\u003e modList \u003d filledList.getData();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.clear();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        Module mod \u003d new Module(\"GER1000H\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        mod.addActualTime(\"8\", \"1\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        modList.add(mod);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limgl1998"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        String expected \u003d ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_HEADER + \"  \" + ModView.SECOND_PART_OF_HEADER"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + \"|  01  | GER1000H | No Input |    8.0   |\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                + ModView.FIRST_PART_OF_BORDER + \"--\" + ModView.SECOND_PART_OF_BORDER;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        view.printAllModuleInformation(filledList, 1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "        assertEquals(expected + System.lineSeparator(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "                outContent.toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limgl1998": 159
    }
  },
  {
    "path": "src/test/java/seedu/modtracker/ModuleListMinusAddTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "class ModuleListMinusAddTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    private static final String TEST_FILEPATH \u003d \"test/data/modlist.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    Storage storage \u003d new Storage(TEST_FILEPATH);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    ModuleList modulesTest \u003d new ModuleList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    public void addTime_ModuleWithoutActualWorkload_ModuleWithWorkloadAdded() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        modulesTest.addMod(\"addmod CS3030\", true, storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        modulesTest.addTime(\"addtime CS3030 4 4\", true, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        String expected \u003d \"4 hours are added to CS3030\" + System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    public void minusTime_ModuleWithActualWorkload_ModuleWithWorkloadSubtracted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        modulesTest.minusTime(\"minustime CS3030 2 4\", true, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        String expected \u003d \"2 hours are removed from CS3030\" + System.lineSeparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "DesmondKJL": 38
    }
  },
  {
    "path": "src/test/java/seedu/modtracker/ModuleListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "class ModuleListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    private static final String TEST_FILEPATH \u003d \"test/data/modlist.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    Storage storage \u003d new Storage(TEST_FILEPATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    ModuleList modulesTest \u003d new ModuleList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void addExp_emptyModuleList_newModuleWithExpTimeAdded() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        ArrayList\u003cModule\u003e testList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        Module testMod \u003d new Module(\"CS3030\", \"4\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        testList.add(testMod);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        modulesTest.addExp(\"addExp CS3030 4\", true, storage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        String expected \u003d \"CS3030, Expected Workload: 4h is added.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertArrayEquals(testList.toArray(), modulesTest.modList.toArray());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void addModule_emptyModuleList_newModuleAdded() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        String expected \u003d \"CS5000 is added.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        modulesTest.addMod(\"addMod CS5000\", true, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertTrue(modulesTest.checkIfModuleExist(\"CS5000\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void addModule_invalidInput_printErrorMessage() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        String expected \u003d \"Please type addmod \u003cmodule code\u003e\" + System.lineSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        modulesTest.addMod(\"addMod\", true, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void deleteModule_removeModule_ModuleRemoved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        String expected \u003d \"CS5000 is removed.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        modulesTest.deleteMod(\"deleteMod CS5000\", true, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertFalse(modulesTest.checkIfModuleExist(\"CS5000\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void deleteModule_removeNonExistingModule_printErrorMessage() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        String expected \u003d \"CS0000 does not exist.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        modulesTest.deleteMod(\"deleteMod CS0000\", true, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    public void deleteExp_ModuleWithExpTime_ModuleWithExpTimeRemoved() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        modulesTest.deleteExp(\"deleteExp CS3030\", true, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        String expected \u003d \"Expected Workload of CS3030 is removed.\" + System.lineSeparator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KennethEer": 84
    }
  },
  {
    "path": "src/test/java/seedu/modtracker/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lhydl"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lhydl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lhydl"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lhydl"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lhydl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lhydl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lhydl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lhydl"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    ModuleList modList \u003d new ModuleList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void parse_invalidInput_expectPrintInvalid() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String input1 \u003d \"exit addmod \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        parser.parse(input1, modList, null, null, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String expected \u003d Ui.INVALID_COMMAND + System.lineSeparator() + Ui.ENTER_HELP + System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String input2 \u003d \"addexps\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        parser.parse(input2, modList, null, null, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        outContent.reset();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String input3 \u003d \"help 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        parser.parse(input3, modList, null, null, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void parse_blankInput_expectPrintInvalid() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        parser.parse(input, modList, null, null, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String expected \u003d Ui.INVALID_COMMAND + System.lineSeparator() + Ui.ENTER_HELP + System.lineSeparator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void parse_exitInput_expectPrintExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String input \u003d \"exit\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String name \u003d \"Lee\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        parser.parse(input, modList, name, null, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String expected \u003d \"All changes saved.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lhydl"
        },
        "content": "                + \"Bye \" + name + \". Hope to see you again soon!\" + System.lineSeparator();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assertEquals(expected + System.lineSeparator(), outContent.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void parse_exitInput_expectExitStatusTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String input \u003d \"exit\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        parser.parse(input, modList, null, null, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assertTrue(parser.isExit());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lhydl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    public void parse_anyInput_expectExitStatusFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        String input \u003d \"addexp \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        parser.parse(input, modList, null, null, true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lhydl"
        },
        "content": "        assertFalse(parser.isExit());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lhydl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lhydl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lhydl": 75
    }
  },
  {
    "path": "src/test/java/seedu/modtracker/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kerct"
        },
        "content": "package seedu.modtracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kerct"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kerct"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kerct"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerct"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerct"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kerct"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kerct"
        },
        "content": "    private static final String TEST_DATA_FILEPATH \u003d \"test/data/modtracker.txt\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kerct"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public void constructor_nullFilePath_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kerct"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Storage(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kerct"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kerct"
        },
        "content": "    public void load_validFormat_success() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kerct"
        },
        "content": "        ModTracker modTracker \u003d new ModTracker(TEST_DATA_FILEPATH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kerct"
        },
        "content": "        modTracker.loadData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kerct"
        },
        "content": "        ModuleList actualModList \u003d modTracker.getModList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kerct"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertTrue(actualModList.checkIfModuleExist(\"CS1000\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertTrue(actualModList.checkIfModuleExist(\"EE2000\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "        assertFalse(actualModList.checkIfModuleExist(\"CS1231\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kerct"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kerct"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kerct": 25,
      "KennethEer": 3
    }
  },
  {
    "path": "test/data/modlist.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "addMod CS3040"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addExp CS3030 4"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addMod CS5000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addExp CS3030 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addMod CS5000"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addExp CS3030 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addMod CS5000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "addExp CS3030 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "addmod CS3030"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addtime CS3030 4 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "minustime CS3030 2 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "DesmondKJL"
        },
        "content": "addmod CS3030"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "addtime CS3030 4 4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "minustime CS3030 2 4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lhydl"
        },
        "content": "addExp CS3030 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lhydl"
        },
        "content": "deleteExp CS3030"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lhydl"
        },
        "content": "addMod CS5000"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lhydl"
        },
        "content": "deleteMod CS5000"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lhydl"
        },
        "content": "addtime CS3030 4 4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lhydl"
        },
        "content": "minustime CS3030 2 4"
      }
    ],
    "authorContributionMap": {
      "limgl1998": 10,
      "DesmondKJL": 4,
      "lhydl": 6
    }
  },
  {
    "path": "test/data/modtracker.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "addmod cs1000"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "addmod ee2000"
      }
    ],
    "authorContributionMap": {
      "KennethEer": 2
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "addmod CS1000"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "addmod CS2113t"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "addexp CS3000 6"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KennethEer"
        },
        "content": "addexp CS3200 8"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limgl1998"
        },
        "content": "list 2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kerct"
        },
        "content": "deletemod CS1000"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kerct"
        },
        "content": "deletemod cs2113t"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lhydl"
        },
        "content": "exit"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KennethEer"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limgl1998": 1,
      "lhydl": 1,
      "kerct": 2,
      "-": 1,
      "KennethEer": 5
    }
  }
]
