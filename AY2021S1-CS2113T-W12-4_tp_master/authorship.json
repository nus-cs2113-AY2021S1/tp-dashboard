[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Duke project template"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up in Intellij"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Prerequisites: JDK 11 (use the exact version), update Intellij to the most recent version."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure Intellij for JDK 11**, as described [here](https://se-education.org/guides/tutorials/intellijJdk.html)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project _as a Gradle project_**, as described [here](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the set up**: After the importing is complete, locate the `src/main/java/seedu/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :compileJava"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :processResources NO-SOURCE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003e Task :Duke.main()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   Hello from"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    ____        _        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   What is your name?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   Type some word and press enter to let the execution proceed to the end."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation using Gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* This project uses Gradle for build automation and dependency management. It includes a basic build script as well (i.e. the `build.gradle` file)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Gradle, refer to the [Gradle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/gradle.html)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "## Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "### I/O redirection tests"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* To run _I/O redirection_ tests (aka _Text UI tests_), navigate to the `text-ui-eventTest` and run the `runtest(.bat/.sh)` script."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit tests"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* A skeleton JUnit eventTest (`src/eventTest/java/seedu/duke/DukeTest.java`) is provided with this project template. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to JUnit, refer to the [JUnit Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/junit.html)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Checkstyle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* A sample CheckStyle rule configuration is provided in this project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are new to Checkstyle, refer to the [Checkstyle Tutorial at se-education.org/guides](https://se-education.org/guides/tutorials/checkstyle.html)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## CI using GitHub Actions"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The project uses [GitHub actions](https://github.com/features/actions) for CI. When you push a commit to this repo or PR against it, GitHub actions will run automatically to build and verify the code as updated by the commit/PR."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## Documentation"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "`/docs` folder contains a skeleton version of the project documentation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Steps for publishing documentation to the public: "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. If you are using this project template for an individual project, go your fork on GitHub.\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   If you are using this project template for a team project, go to the team fork on GitHub."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click on the `settings` tab."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "1. Scroll down to the `GitHub Pages` section."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set the `source` as `master branch /docs folder`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Optionally, use the `choose a theme` button to choose a theme for your documentation."
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "-": 62
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    compile \"com.dorkbox:Notify:3.7\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Main\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    archiveBaseName \u003d \"plan\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4,
      "-": 44
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# About us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Display | Name | Github Profile | Portfolio "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "--------|:----:|:--------------:|:---------:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cimg src\u003d\"https://drive.google.com/uc?export\u003dview\u0026id\u003d1EK9qNzHpkKKZSlPaKqaFDoPnGSfde8OW\" width\u003d\"100\"/\u003e | Elizabeth | [Github](https://github.com/elizabethcwt) | [Portfolio](/team/elizabethcwt.md)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cimg src\u003d\"https://drive.google.com/uc?export\u003dview\u0026id\u003d1np2uKCplo5cd0IO9I_z6H0yDG6_l_jcJ\" width\u003d\"100\"/\u003e | Chen Jinran | [Github](https://github.com/untitle4) | [Portfolio](/team/untitle4.md)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cimg src\u003d\"https://drive.google.com/uc?export\u003dview\u0026id\u003d1XRp4H8eoUAkBDrwZCdpgBR5DlZdKOcRZ\" width\u003d\"100\"/\u003e | Chan Xu Hui | [Github](https://github.com/durianpancakes) | [Portfolio](/team/durianpancakes.md)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cimg src\u003d\"https://drive.google.com/uc?export\u003dview\u0026id\u003d1eRzs57_tc7ptjTmoyW9vpW6SVV8udjpS\" width\u003d\"100\"/\u003e | Andre Wong | [Github](https://github.com/AndreWongZH) | [Portfolio](/team/andrewongzh.md)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cimg src\u003d\"https://drive.google.com/uc?export\u003dview\u0026id\u003d1Z2n6aIVfZQEvQ9ZHQzuNn27GLYLzRHgg\" width\u003d\"100\"/\u003e | Alicia Ho | [Github](https://github.com/Aliciaho) | [Portfolio](/team/aliciaho.md)"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 5,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Purpose"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This document describes the architecture and system design of Plan\u0026Score, which will evolve throughout future releases. "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Each release will have an edition of the document, and the current edition of the document for the first public release is v2.1."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The goal of this document is to cover the high-level system architecture and design. This document is divided into three major parts: design, implementation, product proposition. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![diagram](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 1. Architecture Diagram"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The `Main` class is responsible for,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* At app launch: Initializes the main components in the correct sequence and read data from our data files"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* At shut down: Terminates the continuous loop and shut down the components"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "`Common` represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `UserInterface`: The user interface of the App."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Controller`: User input parser and command executor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Model`: Holds the data of the App in memory"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The interaction between them is defined in an interface."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Exposes its functionality using a concrete {Component Name}Manager class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### UserInterface component"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![userinterfacecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/UserInterfaceComponent.png)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 2. Class Diagram of the UserInterface component"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: UserInterface.java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UserInterface component,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Prompts commands from the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Execute user commands using the Controller component."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Displays information based on changes to Model data."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Prints the user’s events of the week in a timetable format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This component uses the singleton design, meaning that there is only an instance required throughout the entire lifetime of the application, obtained with the following command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`UserInterface userInterface \u003d UserInterface.getInstance()`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Controller component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![controllercomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ControllerComponent.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 3. Class Diagram of the Controller component"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "API: ControlManager.java"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Controller component,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Receives user input from the user interface."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Extracts the command and model type from the user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Generate the required command from the CommandFactory.java class"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Extract the required model to be accessed and modified."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Executes the command with the corresponding model."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Model component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![modelcomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ModelComponent.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 4. Class Diagram of the Model component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "API: Model.java"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The Model component,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Holds all the in-memory data of type event, quiz and contact."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Each data type has a corresponding manager that the controller can interface with. This is named as \u003cdatatype\u003eManager.java."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* During a command execution, the manager will handle the modification and reading of its data type."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* After the execution, the corresponding output is then passed on to the User Interface component to be shown to the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Storage component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![storagecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/StorageComponent.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 5. Class Diagram of the Storage component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: StorageManager.java"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Storage component,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Creates the necessary data files for the operation of Plan\u0026Score."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Reads encoded data from Plan\u0026Score’s data files."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Writes encoded data to Plan\u0026Score’s data files."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "There are 3 categories of data stored by Plan\u0026Score: `event`, `quiz` and `config`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Plan\u0026Score loads data automatically from .txt files in the `data` directory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Each `StorageManager` reads in their respective data files through a `decoder` and writes to the same file through an `encoder`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Event Storage"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![eventstorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/EventStorageManager.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Figure 6. Class Diagram of EventStorageManager"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: EventStorageManager.java"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`EventStorageManager` is responsible for the reading and writing of data from Plan\u0026Score’s `events.txt` file, located in the `{root}/data` directory."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It utilises a decoder (`EventListDecoder.java`) for the reading of data, and an encoder (`EventListEncoder.java`) for the writing of data. "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "###### Reading events"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`EventListDecoder` is responsible for the decoding of data from `events.txt`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It returns an `EventParameter` to `EventStorageManager`. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![eventreadstorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/EventStorageReadSequence.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 7. Sequence Diagram of the reading of data"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "###### Writing events"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`EventListEncoder` is responsible for the creation of the encoded strings for `EventStorageManager` to write to `events.txt`."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It returns a `String` to `EventStorageManager` for further writing. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![eventwritestorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/EventStorageSaveSequence.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 8. Sequence Diagram of the writing of data"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Quiz Storage"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: QuizStorageManager.java"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![quizwritestorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/QuizWriteStorage.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 9. Sequence Diagram of the writing of data"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![quizreadstorage](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/QuizReadStorage.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 10. Sequence Diagram of the reading of data"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Quiz Storage,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Checks existence of the quiz data file in the `data` directory. If the file does not exist, create a new data file for quiz storage."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `quizListEncoder` class to encode the ArrayList of type Quiz into its String representations and writes them into the quiz data file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `quizListDecoder` class to decode the String representations of quizzes in the quiz data file and add the quizzes back into the ArrayList of type Quiz."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Config Storage"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "API: ConfigStorageManager.java"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![configstoragecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ConfigStorage.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 11. Class Diagram of the ConfigStorageManager"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Config Storage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Checks existence of the config data file in the `data` directory. If the file does not exist, create a new data file for config storage."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `configEncoder` class to encode the String of user name, the integer number of recommended hours and finally, the boolean which checks if the program has run before. The encoded string is written into a config data file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Invokes the `configDecoder` class to decode the String user name, the integer number of recommended hours and the boolean which checks if the program has run before from a config data file. The three variables are used to show a different welcome message."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The Config Parameter,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Helps to store the String of user name, the integer number of recommended hours and finally, the boolean which checks if the program has run before."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Contents stored in the parameter are subsequently used by configEncoder to encode them into a string. "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "---"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### User Interface"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The user interface of Plan\u0026Score uses the singleton design. There is only one instance of UserInterface to be used throughout the application. The API for the user interface is UserInterface.java."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Printing to user"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Instead of using the default method `System.out.println()` provided by Java to display messages to the user, use `showToUser(String …)` where multiple strings can be added into the arguments. Each string provided that is separated by `,` will be printed on the next line."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example input:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "String string1 \u003d \"Hello\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "String string2 \u003d \"How are you?\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "userInterface.showToUser(string1, string2);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "How are you?"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Code:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public void showToUser(String... message) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   for (String m : message) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "       out.println(m);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Printing arrays to user"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The method `printArray(ArrayList\u003cString\u003e stringArrayList)` is provided for the printing of any arraylists."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example input:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "ArrayList\u003cString\u003e stringArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "// Adding items into the stringArrayList"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "stringArrayList.add(\"Hello\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "stringArrayList.add(\"How are you?);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "// Obtaining user interface instance"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "userInterface.printArray(stringArrayList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example output:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Hello"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "How are you?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Code:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public void printArray(ArrayList\u003cString\u003e stringArrayList) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   assert stringArrayList !\u003d null;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   for (String line : stringArrayList) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "       userInterface.showToUser(line);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "   }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Help feature"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![helpcomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/Help.png)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Figure 12. Sequence Diagram of the help feature"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "When a user enters ‘help’, the input will be read in by the UI class."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UI class will then parse the user input into the ControlManager class, which calls the runLogic() method."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The extractCommand() method of the CommandParser class is then called, extracting and returning the command type based on the user’s input."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "In this case, the command type would be ‘help’."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The corresponding actionableCommand will be generated via the generateActionableCommand() method in the CommandFactory class."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Lastly, the execute() method in the HelpCommand class is called, which in turn calls its own handleHelp() method."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This displays the help message via the showToUser() method of the userInterface."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "### Set Hours feature"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![sethourscomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/SetHours.png)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 13. Sequence Diagram of the set hours feature"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "When a user enters ‘set hours’, the input will be read in by the UI class."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The UI class will then parse the user input into the ControlManager class, which calls the runLogic() method."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The extractCommand() method of the CommandParser class is then called, extracting and returning the command type based on the user’s input."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "In this case, the command type would be ‘set hours’."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The corresponding actionableCommand will be generated via the generateActionableCommand() method in the CommandFactory class."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Lastly, the execute() method in the SetHoursCommand class is called, which in turn calls the editHours() function from the configManager class."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Add feature"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![addcomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/Add.png)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 14. Sequence Diagram of the add feature"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Firstly, when the user enters add .. /n .. /s .. /e .. , the input will be read in by the UI class."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UI class will then parse the user input into the ControlManager class where the command will be extracted and processed by the CommandParser class."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "According to which category they belong to i.e class,cca,test,tuition etc, they are sent to their respective category managers."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "In each manager, the user input is processed and made into a new Event item by the Event class."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The result is subsequently outputted by the UI class to the user. "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Delete feature"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![deletecomponent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/DeleteFeatureDiagram.png)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 15. Sequence Diagram of the delete feature"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Firstly, when the user enters delete \u003cevent\u003e \u003cnumber\u003e, the input will be read in by the UI class."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The UI class will then parse the user input into the ControlManager class where the command will be extracted and processed by the CommandParser class. The result is passed into ModelExtractor Class."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "According to which category they belong to i.e. class, cca, test, tuition etc, they are sent to their respective category managers. In each manager, the user input is processed and the Event item would be deleted by the Event class."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The result is subsequently outputted by the UI class to the user. "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java to allow the continuous usage of the program. "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### List feature"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### List contact / quiz"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![listcontact](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ListContact.png)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 16. Sequence diagram for listing quizzes"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The list command will invoke the `ContactManager` or `QuizManager` class’s list() method respectively."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If the ArrayList is empty, it will inform the user that there is no data to display."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The method will then loop through the ArrayList and convert it into its string representation."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "#### List event ([date] / today / week)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "While the back-end data processing is the same for all three types of list requests, the list event week request requires a different front-end class to display to the user."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "As such, we divide this section into 2 sub-sections, with List event (\u003cdate\u003e/today) in the first subsection, and List event week in the next subsection."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The execution of the ListCommand will cause the `EventManager` class to invoke `EventManager#listSchedule()`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This will then create an instance of the `ListSchedule` class, with all the classes, ccas, tests and tuitions data"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "as its attributes."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "#### List event ([date] / today)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![listevent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ListEvent.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 17. Sequence diagram for listing out events."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Inside this `EventManager#listSchedule()`, we then call the `ListSchedule#getPrintableEvents()` and this will start"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "to convert ArrayList of type Event into its corresponding `toString()` representation."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This is then padded with numbers and an ArrayList of type string is returned to `EventManager#listSchedule()`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "It is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Special parameters:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "In the case where the parameters passed in is ‘today’, the `ListSchedule#checkAndConvertToday()` will"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "check if the user passed in ‘today’ as a parameter."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If that is true, then it converts the userInput attribute to `LocalDate.now()`, which is the current date."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "When filtering the events to be converted, the start time of the event is compared with the parameter date."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "If it is equal, the event will be converted and be printed out."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### List event week/nextweek"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![listeventweek](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/ListWeekSequence.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 18. Sequence diagram for listing out events for week/nextweek."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Inside this `EventManager`, we then call the `UserInterface#printWeekSchedule(EventManager, ListWeekCommand)`, passing "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "in the current instance of EventManager into this method and a ListWeekCommand that determines if the current or next "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "week is to be printed. "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "`UserInterface#printWeekSchedule(EventManager)` will then construct an instance of `CalendarWeekRenderer(EventManager)` "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "which will display the week schedule to the user."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "As of V2.1, the CalendarWeekRenderer does not support printing the location parameter of the Tuition class."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Example code snippet:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "userInterface.printWeekSchedule(this, ListWeekCommand.CURRENT_WEEK); // the EventManager instance is passed into the method call"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "```"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Find feature"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Find contact / quiz"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The find feature will invoke the `ContactManager` or `QuizManager` class’s find() method respectively."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Find event \u003ckeyword(s)\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The execution of FindCommand will cause the `EventManager` class to invoke `EventManager#findSchedule()`. Inside this `EventManager#findSchedule()`, it creates an instance of the `FindSchedule` class, with all the classes, ccas, tests and tuitions data as its attributes. "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We then call the `FindSchedule#getFilteredEvents()` and this will start to convert ArrayList of type Event into its corresponding `toString()` representation. An ArrayList of type String is returned to `EventManager#findSchedule()`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The diagram below shows the execution flow explained below."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![findevent](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/FindEvent.png)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 19. Sequence diagram for finding events."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Find quiz \u003ckeyword(s)\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The execution of FindCommand will cause the `QuizManager` class to create an instance of the `FindQuiz` class, with all the quizzes data as its attributes. "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We then call the `findQuiz#filterQuizzes()` and this will start to convert ArrayList of type Quiz into its corresponding `toString()` representation. An ArrayList of type String is returned to `QuizManager#find()`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This is then passed to the `UserInterface#printArray()` to be printed out to the user."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The diagram below shows the execution flow explained below."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "![findquiz](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/diagram/FindQuiz.png)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Figure 20. Sequence diagram for finding quizzes."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Quiz feature"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Take quiz"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "This execution of the quiz command will invoke the QuizManager class’s quiz() method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "The variable correctCounter will be initialized to be 0."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "If the input \u003cnumber\u003e is:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- Less than 1 (including negative numbers), or"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- more than the total number of questions in the current quiz list,"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "the program will inform the user that their input is invalid, and provide the range of questions the user can attempt."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "If the input is not an integer:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- the program will inform the user that their input is of the wrong format, and"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- probe them to enter a value of integer type."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- The method will then randomly select the input number of quiz questions in the quiz ArrayList, and"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- convert it into its string representation."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- This is then passed to the UserInterface#printArray() to be printed out to the user."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- When each quiz question is printed, the user needs to input an answer to this question."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- The input answer will then be compared to the answer of that quiz question."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- If the answers are the same, the variable correctCounter in QuizManager() will be incremented by 1. "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- Upon completion of this feature, it returns a boolean value “true” to the active flag in UserInterface.java,"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- which allows the continuous usage of the program."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " Target User Profile:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Is a Primary 6 student with a packed schedule"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "One-stop application for Primary 6 students to plan their schedule and do revision tests at the same time."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|As a forgetful Primary 6 Student|to be able to remember all the classes I have in school|plan my class schedule accordingly|"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|to be able to remember all the extra-curricular activities I have in school |Plan my cca schedule accordingly. |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|to be able to remember all the tuition classes I have outside of school and remember the locations of my tuition centres  |Plan my tuition schedule accordingly and would not get lost. |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I have many class tests and examinations leading up to PSLE, and would like to keep track of all my upcoming test dates|I know the test dates in advance and can plan my revision schedule well.|"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I would like to list all my classes, extra-curricular activities, tuition classes and test dates|I can have a overview of what I schedules I have|"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I would like to be able to remember all the commands used in this program|I do not need to refer to the user guide all the time|"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v1.0|Primary 6 student|I would like to be able to remember all the commands used in this program|I do not need to refer to the user guide all the time|"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v2.0|Primary 6 student|to remember the contact details of my teachers|I can contact them in case there is an emergency.|"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v2.0|Primary 6 student|to see the list of questions I have added|I can keep track of the questions I need.|"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "|v2.0|Primary 6 student|to practice via short and interactive online trivia|I can revise in an entertaining manner.|"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Should work on any Windows, Mac and Linux operating system with Java 11 installed."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Should update the storage every time a command changes the data."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Users should be able to view the output of their command within 10 seconds"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Accessing and loading of data should take less than 5 seconds when we have less than 10000 data entries."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* *glossary item* - Definition"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Data entries "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "\tEvent, Quiz or contact data that are either in storage or in their respective Manager class"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Given below are instructions to test the app manually"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Adding of CCAs"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user that the model type is missing."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add cca`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user to include all /n /s and /e inputs."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add cca /n abc /s date1 /e date 2`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to enter a valid date time format."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add test /n Math test /s 2020-10-3 1300 /e 2020-10-3 1400`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user that cca has been added. Running `list event` command will show the added cca inside."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `add test /n Math test /s 2020-10-3 1300 /e 2020-10-3 1000`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user that start time is later than end time."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Listing of events"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to list either event, quiz or contact"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Show a list of events and categorized into its event type. If there are no events, inform the user that the schedule is empty."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event 2020-10-3`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Show a  list of events that matches with the specified date. If no events that match, inform the user that the schedule is not found."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event date`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to enter a valid date time format."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list event 2020-10-3 2pm`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Expected: Inform the user not to enter extra parameters."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Finding of contacts"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `find`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform the user to find either event, quiz or contact"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `list contact math`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Show a list of contacts that matches the keywords. If there are no contacts found , inform the user that the search has no result."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `find event`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Remind the user to include the keyword in the command."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Test case: `find testing`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\t* Expected: Inform user that the program does not recognise the model."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Dealing with missing data files"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "There are two ways we use to define a missing file: "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "When the “data” directory in the project root directory is missing."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "When any of the critical data .txt files (i.e events.txt, quiz.txt) are missing from the “data” directory."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We can simulate this by deleting any of the critical data .txt file, or the “data” directory \tas a whole. "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Expected: The “data” directory as well as “event.txt“ and “quiz.txt” are recreated."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "However, any prior data stored will be lost. \t"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Dealing with corrupted data files"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We define a file to be corrupted when our decoders are unable to decode the data .txt files."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We can simulate this by changing the encoded text in the file. For example, a Class that has the follow parameters:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Description: Math tutorial"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "isDone: false"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Start: 2020-09-21 1500"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "End: 2020-09-21 1600"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "should be encoded as “[CLASS]|false|Math tutorial|2020-09-21 1500|2020-09-21 1600” in the events.txt file. "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Corrupted forms can be in the following forms, but not limited to:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "“[CLASS]|Math tutorial|2020-09-21 1500|2020-09-21 1600”: the isDone parameter is missing from the encoded string."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "“[CLASS]|false|Math tutorial|2020-09-21 1600”: one of the date-time parameter is missing from the encoded string"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "“[CLASS]+false+Math tutorial+2020-09-21 1500+2020-09-21 1600”: the parameter separator “+” is not recognized by our decoder."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Expected: the program will not be able to start, with the error message “): Storage file corrupted. Please delete your data directory and relaunch.” shown."
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 25,
      "AndreWongZH": 148,
      "durianpancakes": 326,
      "-": 25,
      "elizabethcwt": 13
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "# Plan\u0026Score"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "to plan and track their classes, CCAs and test dates."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "This enables the students to remember their schedule, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Useful links:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [User Guide](UserGuide.md)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Developer Guide](DeveloperGuide.md)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [About Us](AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 6,
      "-": 6
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [1. Introduction](#introduction)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [2. About this User Guide](#about-this-user-guide)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "- [3. How to user this User Guide](#how-to-use-this-user-guide)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- [4. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "- [5. Initialisation](#initialisation)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "- [6. Commands](#commands)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Command Format](#command-format)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Category Types](#category-types)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [Help:](#viewing-help-help) `help`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [PLAN component of Plan\u0026Score](#plan-component-of-planscore)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    - [Set Recommended Hours](#set-recommended-hours-set-hours) `set hours`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Class Category](#category-class)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Add a class:](#adding-a-class-add-class) `add class`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "      - [Delete a class:](#deleting-a-class-delete-class) `delete class`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Cca Category](#category-cca)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Add a cca:](#adding-a-cca-add-cca) `add cca`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Delete a cca:](#deleting-a-cca-delete-cca) `delete cca`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Test Category](#category-test)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Add a test:](#adding-a-test-add-test) `add test`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      - [Delete a test:](#deleting-a-test-delete-test) `delete test`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    - [Tuition Category](#category-tuition)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "      - [Add a tuition:](#adding-a-tuition-add-tuition) `add tuition`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "      - [Delete a tuition:](#deleting-a-tuition-delete-tuition) `delete tuition`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    - [List schedule:](#listing-out-schedule-list-event-\u003ctoday/[date]/week/nextweek\u003e) `list event \u003ctoday/[date]/week/nextweek\u003e`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Find event:](#finding-an-event-find-event) `find event`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [SCORE component of Plan\u0026Score:](#score-component-of-planscore)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Take a quiz:](#taking-a-quiz-quiz)`quiz`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Add a quiz question:](#adding-a-quiz-question-add-quiz) `add quiz`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Delete a quiz question:](#deleting-a-quiz-question-delete-quiz) `delete quiz`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [List quiz questions:](#listing-out-all-quiz-questions-list-quiz) `list quiz`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Find a quiz by keyword:](#finding-a-quiz-find-quiz) `find quiz`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - [Search for former incorrect quiz questions:](#searching-for-former-incorrect-quiz-questions-quiz-record) `quiz record`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  - [Contact component of Plan\u0026Score:](#contact-component-of-planscore)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Add a contact:](#adding-a-contact-add-contact) `add contact`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Delete a contact:](#deleting-a-contact-delete-contact) `delete contact`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [List a contact:](#listing-out-contacts-list-contact) `list contact`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    - [Find a contact:](#finding-a-contact-find-contact) `find contact`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  - [Exit the program:](#exits-program-bye) `bye`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "- [7. Saving Data](#saving-data)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "- [8. FAQ](#faq)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "- [9. Troubleshooting](#troubleshooting)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "- [10. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Plan\u0026Score is an application consisting of 2 key components:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Event scheduler"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Quiz component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "and a sub-component:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Contact list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "These components aim to tackle the issue of poor planning and revision most Primary 6 students in Singapore face."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "This application uses a command line interface, meaning that you operate the application by typing commands into a Command Box."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![initialization](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/initialization.png)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Figure 1. The graphical user interface for Plan\u0026Score"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## About this User Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "This User Guide serves to provide an in-depth explanation of Plan\u0026Score’s usage and functionalities, as well as troubleshooting steps you can take if problems are encountered."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## How to use this User Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "To navigate to the contents of your desired feature, simply click on the hyperlinks provided in the contents page above."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The highlights and symbols used in this document are as follow:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![information](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/information.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![warning](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/warning.png)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "`Add class`  A grey highlight is used to denote text to be entered into the  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "           command line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "1. Ensure that you have Java `11` or above installed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "2. Download the latest version of `Plan\u0026Score` from [here](https://github.com/AY2021S1-CS2113T-W12-4/tp/releases)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "3. Run the program by entering `java -jar plan.jar` in your terminal."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "4. You can exit the program by running `bye`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "## Initialisation"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "When you first open Plan\u0026Score, you will be greeted by a welcome message as well as "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "a prompt asking for your name. This is as shown below."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![introduction](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/intro_screen.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Type in your name and press \u0027Enter\u0027 to proceed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![keyname](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/name.png)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Afterwards, you will be prompt to enter the number of recommended hours that "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "you wish to accomplish per day. Key in your desired number of hours "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "and press \u0027Enter\u0027 to proceed. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![keyhours](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/hours.png)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "This is the end of the initialisation process. You can now enjoy the rest of Plan\u0026Score\u0027s"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "amazing features!"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![finishintro](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/finish_intro.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## Commands"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Command Format"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* A command can contain multiple parameters."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * A `test` contains a `description`, `start` and `end`, where `description`, `start` and `end` are parameters that make up a `test`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Command parameters cannot be swapped."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * `add test /n [name of test] /s [start date-time of test] /e [end date-time of test]` will work but `add test /s [start date-time of test] /e [end date-time of test] /n [name of test]` will give an error"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Extra spaces in the command will be sanitized."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * `   list     event      ` will be sanitized to `list event`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Command will be converted as lowercase."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * `LIST EVENT` will be modified to `list event`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Commands with extra parameters provided will give an error"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * `delete class 1 2 3 abc` will be give an error."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category Types"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* Plan\u0026Score has the following categories types: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  1. `event`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `class`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `cca`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `test`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "      1. `tuition`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  1. `contact`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "  1. `quiz`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* The category type often follows after the command word (E.g `class` follows after `add` to form `add class`)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Shows all available commands that you can use"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Firstly, type ‘help’ in the command line as seen below, and press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![help1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/help1.png)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The output containing all the different commands is seen in the console."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![help2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/help_command_1.png)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![help2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/help_command_2.png)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Plan component of Plan\u0026Score"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "It allows you to plan and track the following category types:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Class"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Cca"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Tuitions"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![indexinfo](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/indexinfo.png)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "#### Set Recommended Hours: `set hours`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Allows you to change the number of recommended hours you would want to have per day."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type `set hours` in the command line as seen below. Press \u0027Enter\u0027 to execute it."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![sethours1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/set_hours_1.png)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Afterwards, Plan\u0026Score will prompt you to enter the number of recommended hours that "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "you wish to accomplish per day. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![sethours2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/set_hours_2.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Key in your new desired number of hours and press \u0027Enter\u0027 to proceed. "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is then seen in the console as shown below."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![sethours3](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/set_hours_3.png)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[number of hours]` must be written in numerals."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![sethourserror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/set_hours_error.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category: Class"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Adding a class: `add class`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to add a new class with a name, date and time."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Firstly, type `add` in the command line as seen below, followed by the category type which is the class. Afterwards, key in the description of the class as well as its start and end date and time. Press `Enter` to execute it."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![addclass1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/addclass1.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addclass2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_class_2.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "* `[name of class]` can be in a natural language format and"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "cannot contain \u0027/\u0027. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[start date-time of class]` and `[end date-time of class]` must be in yyyy-mm-dd HHMM format with HHMM in 24-hour format."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Parameters `/n`, `/s`, `/e` cannot be swapped."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addclasserror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/class_error.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Deleting a class: `delete class`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to delete a class based on its index in the list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type ‘delete’ in the command line as seen below, followed by the category type which is the class. Afterwards, key in the corresponding index of the class you would like to delete. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deleteclass1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_class_1.png)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deleteclass2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_class_2.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[class number]` must be written in numerals."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deleteclasserror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_class_error.png)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category: Cca"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Adding a cca: `add cca`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allow you to add a new cca with a name, date and time."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type ‘add’ in the command line as seen below, followed by the category type which is the cca. Afterwards, key in the description of the cca as well as its start and end date and time. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addCca1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_cca_1.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addCca2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_cca_2.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[name of cca]` can be in a natural language format and"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "cannot contain \u0027/\u0027. "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[start date-time of cca]` and `[end date-time of cca]` must be in yyyy-mm-dd HHMM format with HHMM in 24-hour format."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Parameters `/n`, `/s`, `/e` cannot be swapped."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addccaerror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_cca_error.png)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Deleting a cca: `delete cca`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to delete a cca based on its index in the list."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type ‘delete’ in the command line as seen below, followed by the category type which is the cca. Afterwards, key in the corresponding index of the cca you would like to delete. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deleteCca1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_cca_1.png)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deleteCca2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_cca_2.png)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[cca number]` must be written in numerals."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deleteccaerror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_cca_error.png)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Category: Test"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Adding a test: `add test`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to add a new test with a name, date and time."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type ‘add’ in the command line as seen below, followed by the category type which is the test. Afterwards, key in the description of the test as well as its start and end date and time. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addtest1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_test_1.png)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addtest2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_test_2.png)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[name of test]` can be in a natural language format and"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "cannot contain \u0027/\u0027. "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[start date-time of test]` and `[end date-time of test]` must be in yyyy-mm-dd HHMM format with HHMM in 24-hour format."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Parameters `/n`, `/s`, `/e` cannot be swapped."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addtesterror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_test_error.png)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "##### Deleting a test: `delete test`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Allows you to delete a test event based on its index in the list."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type ‘delete’ in the command line as seen below, followed by the category type which is the test. Afterwards, key in the corresponding index of the test you would like to delete. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deletetest1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_test_1.png)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deletetest2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_test_2.png)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[test number]` must be written in numerals."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deletetesterror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_test_error.png)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Category: Tuition"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Adding a tuition: `add tuition`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Allows you to add a new test with a name, date, time, location."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type ‘add’ in the command line as seen below, followed by the category type which is the tuition. Afterwards, key in the description of the tuition, its start and end date and time as well as its location. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addtuition1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_tuition_1.png)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addtuition2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_tuition_2.png)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[name of tuition]` and `[location of tuition]` can be in a natural language format and"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "cannot contain \u0027/\u0027. "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[start date-time of tuition]` and `[end date-time of tuition]` must be in yyyy-mm-dd HHMM format with HHMM in 24-hour format."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Parameters `/n`, `/s`, `/e`, `/l` cannot be swapped."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![addtuitionerror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_tuition_error.png)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "##### Deleting a tuition: `delete tuition`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Allows you to delete a tuition based on its index in the list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, type ‘delete’ in the command line as seen below, followed by the category type which is the tuition. Afterwards, key in the corresponding index of the tuition you would like to delete. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deletetuition1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_tuition_1.png)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deletetuition2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_tuition_2.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* `[tuition number]` must be written in numerals."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![deletetuitionerror](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_tuition_error.png)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "#### Listing out schedule: `list event \u003ctoday/[date]/week/nextweek\u003e`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to list out the entire schedule for classes, ccas and tests."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "You can also choose to list today\u0027s schedule, the schedule"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "for the week or the schedule for a specific date."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "##### List event: `list event`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Firstly, to list out all events, type ‘list event’ in the command line, as seen below. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listevent1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_1.png)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The list is arranged by their respective categories. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listevent2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_2.png)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "##### List event today: `list event today`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Secondly, to list out all events today, type ‘list event today’ in the command line, as seen below. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventtoday1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_today_1.png)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The list is arranged by their respective categories. The date and time is converted to a more readable form, enabling you to read it more pleasantly. The index of the event is corresponding to its index in the entire list."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventtoday2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_today_2.png)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "##### List event week: `list event week`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Thirdly, to list out all events in the current week, type ‘list event week’ in the command line, as seen below. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventweek1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_week_1.png)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. It is displayed in a calendar format for easier readability. The events are listed according to time. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventweek2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_week_2.png)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "##### List event next week: `list event nextweek`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Fourthly, to list out all events in the next week, type ‘list event nextweek’ in the command line, as seen below. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventnextweek1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_nextweek_1.png)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. It is displayed in a calendar format for easier readability. The events are listed according to time. The date and time is converted to a more readable form, enabling you to read it more pleasantly."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventnextweek2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_nextweek_2.png)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "##### List event date: `list event [desired date]`"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Lastly, to list out all events on a particular date, type ‘list event [desired date]’ in the command line, as seen below. Press ‘Enter’ to execute it."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventdate1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_date_1.png)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is seen in the console. The list is arranged by their respective categories. The date and time is converted to a more readable form, enabling you to read it more pleasantly. The index of the event is corresponding to its index in the entire list."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![listeventdate2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_event_date_2.png)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Finding an event: `find event`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to look for classes, ccas and tests and tuitions that match your given keyphrase."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "In the case when you have many events in your schedule and you need to find a specific event to check the date. You can use the `find event` command to look for the event you want by entering keywords related to it."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Let\u0027s say we need to find out when my vocabulary test is on."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "untitle4"
        },
        "content": "We can first type `find event vocabulary` into the command box, and press \u0027Enter\u0027 to execute it."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![find1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find1.JPG)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "The output can then be seen in the console."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![find2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find2.JPG)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "And we can find the date we are looking for over here."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "![find3](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find3.JPG)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find%20note.jpg\" width\u003d\"500\"  alt\u003d\"findnote\"/\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Format: `find event [KEYPHRASE]`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Examples: `find event math`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Example Output:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [CLASS] Math from 19th Aug, 01:00 PM to 19th Aug , 02:00 PM"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "   [TEST] Math from 26th Sep, 11:00 AM to 26th Sep, 12:00 PM"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "```"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Score component of Plan\u0026Score"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Enables the following category type:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "quiz"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The quiz feature enables you to spend the extra time resulting from your productive scheduling to hone your Mathematics for your upcoming PSLE."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Taking a Quiz: `quiz`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Taking a Mathematics quiz with any number of questions you want, ranging from just 1 question to the total number of questions in the quiz list."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "First, enter `quiz`, followed by the number of questions you would like to take in your quiz. For example, you could enter `quiz 1` to attempt a quiz with 1 question."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The following output would then be displayed."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![quiz1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/quiz1.png)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Adding a Quiz Question: `add quiz`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Allows you to add a Mathematics multiple-choice quiz question to the quiz list."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Note that the `/e (explanation)` is an optional parameter. You can add a quiz question with or without an explanation."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "First, enter `add quiz`, follow by `/q`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Then, enter the question you would like to add."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Next, enter `/o1`, followed by the answer option you would like to enter. Repeat this for the rest of the three options."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Now, enter `/a`, followed by the number corresponding to the correct answer option."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Lastly, enter `/e`, followed by the explanation to the solution of the question. This last part is optional."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "An example of such a command would be: `add quiz /q What is 26+5? /o1 28 /o2 31 /o3 38 /o4 41 /a 2 /exp Adding 5 to 26 gives us 31.`."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The corresponding output would then be displayed as shown below."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![quizadded](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/quizadded.png)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Deleting a Quiz Question: `delete quiz`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to delete a quiz question from the quiz list."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Simply enter `delete quiz`, followed by the index number corresponding to the quiz question you would like to delete in your quiz list."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "For example, you could enter `delete quiz 1`."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "You would expect to see this output."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![deletequiz1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/deletequiz1.png)"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "#### Listing out All Quiz Questions: `list quiz`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to list out all the questions in the quiz list."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "All you have to enter is `list quiz` for this command."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "This output should then be seen."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![listquiz](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/listquiz.png)"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Finding a quiz: `find quiz`"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Look for quizzes that match the given keyword(s) that you want."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Note that searches are case-insensitive and user can provide multiple words to compare with"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "The format for this command is `find quiz`, followed by the keyword(s) you would like to search for in your list of quiz questions."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "For example, you could enter `find quiz 26`."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Then, you would expect to see this in your output."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![findquiz](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/findquiz.png)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Searching for former incorrect quiz questions: `quiz record`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows you to list out the incorrect quizzes in your last quiz attempt."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Simply enter `quiz record`."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "You should see the full list of questions you have answered wrongly in your previous quiz attempt, as shown below."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "![quizrecord](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/quizrecord.png)"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "### Contact component of Plan\u0026Score"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Adding a contact `add contact`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Allows you to add a teacher\u0027s contact details to the contact list."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Firstly, type \u0027add\u0027 in the command line as seen below, followed by the category type which is the contact. "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Afterwards, key in the description of the contact. Press \u0027Enter\u0027 to execute it."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![add_contact_command](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_contact_command.png)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "untitle4"
        },
        "content": "The output is seen in the console."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![add_contact](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_contact.png)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "untitle4"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* `[subject of contact]`, `[name of contact]`, `[phone number of contact]` and "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "untitle4"
        },
        "content": "`[email of contact]` can be in a natural language format and cannot contain \u0027/\u0027."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* Parameters `/s`, `/n`, `/p`, `/e` cannot be swapped."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![add_contact_wrongly](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/add_contact_wrongly.png)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Deleting a contact `delete contact`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Allows you to delete a contact from the contact list."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Firstly, type \u0027delete\u0027 in the command line as seen below, followed by the category type which is the contact. "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Afterwards, key in the corresponding index of the contact you would like to delete. Press \u0027Enter\u0027 to execute it."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![delete_contact_command](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_contact_command.png)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "untitle4"
        },
        "content": "The output is seen in the console."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![delete_contact](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_contact.png)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "untitle4"
        },
        "content": "WARNING:"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* `[contact number]` must be written in numerals."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![erroraddclass](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/erroraddclass.png)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![delete_contact_wrongly](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/delete_contact_wrongly.png)"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Listing out contacts `list contact`"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Allows you to list out all the contacts in the contact list"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "untitle4"
        },
        "content": "To list out all contacts, type \u0027list contact\u0027 in the command line, as seen below. "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Press \u0027Enter\u0027 to execute it."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![list_contact_command](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_contact_command.png)"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "untitle4"
        },
        "content": "The output is seen in the console."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![list_contact](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/list_contact.png)"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "#### Finding a contact `find contact`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Look for contacts that match the given keywords you want."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "untitle4"
        },
        "content": "In the case when you have many contacts in your list and you need to find a specific contact, you can use the "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "untitle4"
        },
        "content": "`find contact` command to look for the contact you want by entering keywords related to it."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Let\u0027s say we need to find out the contact of our math teacher. We can type `find contact math` "
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "untitle4"
        },
        "content": "into the command box, and press \u0027Enter\u0027 to execute it."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![find_contact_command](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find_contact_command.png)"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "untitle4"
        },
        "content": "The output can then be seen in the console."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "untitle4"
        },
        "content": "![find_contact](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find_contact.png)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "untitle4"
        },
        "content": "\u003cimg src\u003d\"https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/find%20note.jpg\" width\u003d\"500\"  alt\u003d\"findnote\"/\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "### Exits Program: `bye`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Exits the program once you have finished using it."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Type the command and press \u0027Enter\u0027 to execute it."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![bye1](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/bye_1.png)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "The output is shown in the console. It contains a simple goodbye message."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "![bye2](https://raw.githubusercontent.com/AY2021S1-CS2113T-W12-4/tp/master/docs/images/bye_2.png)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## Saving Data"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Plan\u0026Score saves all your data automatically after every command. There is no need to save manually."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer?"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "**A**: We recommend you to transfer the entire folder containing plan.jar and the `data` directory. Then, follow instructions given in our `Quick Start` section to set up Plan\u0026Score."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "## Troubleshooting"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "**Q**: Plan\u0026Score is unable to start. How can I fix this?"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "**A**: Your data files might have been corrupted. To fix this, you can attempt the following steps:"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "**We recommend adult supervision for this process.**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "1. Locate the `data` directory. It should be in the same directory as where Plan\u0026Score is located."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Open the `events.txt` file."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Check if any of the data are violating our decoding formats:"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  * For class/cca/test, the format should be: `[IDENTIFIER]|[true/false]|[DESCRIPTION]|[DATE IN YYYY-MM-DD HHMM]|[DATE IN YYYY-MM-DD HHMM]`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  * For tuition, the format should be: `[IDENTIFIER]|[true/false]|[DESCRIPTION]|[DATE IN YYYY-MM-DD HHMM]|[DATE IN YYYY-MM-DD HHMM]|location`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Edit the file to the correct formats shown above"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Launch Plan\u0026Score"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Confirm that Plan\u0026Score runs without any error"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "In the unfortunate event where the error persists, please reset Plan\u0026Score to factory settings."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "We recommend keeping a duplicate of the contents in `events.txt` to assist with the re-adding of events."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Ensure you have duplicated `events.txt`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Delete `events.txt`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Launch Plan\u0026Score"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Confirm that Plan\u0026Score runs without any error"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. `events.txt` should appear in the `data` directory"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Copy any unaffected events from the duplicated file in Step 1"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "1. Re-add affected events through the command line interface"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "-------|--------|--------"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "help|`help`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "add event|`add [class/cca/test] /n [description] /s [start-date-time] /e [end date-time]`, `add [tuition] /n [description] /s [start-date-time] /e [end-date-time] /l [location]`|`add class /n Math /s 2020-09-06 1300 /e 2020-09-06 1400`, `add tuition /n Math /s 2020-09-06 1300 /e 2020-09-06 1400 /l home`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "add quiz|`add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3] /o4 [option 4] /a [option answer] /e (explanation)`|`add quiz /q 1 + 1 \u003d ? /o1 1 /o2 2 /o3 3 /o4 4 /a 2 /exp no explanation needed`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "add contact|`add contact /s [subject] /n [name of contact person] /p [phone number] /e [email address]`|`add contact /s math /n thomas /p 91779977 /e thomas@gmail.com`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "delete event|`delete [class/cca/test/tuition] [item number]`|`delete class 1`, `delete test 1`, `delete cca 1`"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "delete quiz|`delete quiz [item number]`|`delete quiz 1`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "delete contact|`delete contact [item number]`|`delete contact 1`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "list event|`list event (\u003cdate/today/week\u003e)`|`list event 2020-09-06`"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "list quiz|`list quiz`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "list contact| `list contact`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Find event|`find event [keyword(s)]`|`find event English`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Find quiz|`find quiz [keyword(s)]`|`find quiz 2 + 2 \u003d 4`"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Find contact|`find contact [keyword(s)]`|`find contact jonny@gmail.com`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "quiz|`quiz [no of questions]`|`quiz 15`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "display quiz record|`quiz record`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "set hours|`set hours`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "bye|`bye`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 251,
      "untitle4": 55,
      "AndreWongZH": 123,
      "durianpancakes": 55,
      "-": 34,
      "elizabethcwt": 200
    }
  },
  {
    "path": "docs/team/aliciaho.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "# Alicia Ho Shimin - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "## Project: Plan\u0026Score"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students to plan and track their classes, CCAs and test dates. This enables the students to remember their schedule, so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "## Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Features:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Add test "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    What it does: Allow users to add a test to their schedule."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Justification: This feature improves the product because the users can tests to their schedule to better plan for it. Hence, allowing them to revise for their tests well in advance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Delete test "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    What it does: Allow users to delete a test to their schedule."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Justification: This feature improves the product because the users can delete any past tests or tests that have been cancelled. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Hence, allowing them to better plan their schedule. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Set Recommended hours"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    What it does: Allow users to set their recommended hours per day."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Justification: This feature improves the product because the users are able to set the amount of productive hours they want to accomplish."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    This allows users to remain within their recommended hours thus preventing them from overloading."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Highlights: This enhancement affects existing commands and commands to be added in the future e.g checking if time exceeded."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    The implementation was challenging as it required changes to existing commands and classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * List event today/[date]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    What it does: Allow users to list their events for today or the date they desire."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Justification: This feature improves the product because users are able to check the schedule for that day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Time left"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    What it does: Allow users to see the amount of productive hours they have for a particular day."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Justification: This feature improves the product because users are able to know how "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    many productive hours they have left for that day thus, they are able to better plan their schedule and not overload."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Highlights: This enhancement affects existing commands e.g add/delete/list event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    The implementation was challenging as it required changes to existing commands and classes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Date Time conversion"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    What it does: Converts date time from yyyy-MM-dd HHmm to date time in natural language format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Justification: This feature improves the product because users can intuitively know the date time of their events."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Highlights: This enhancement affects existing commands e.g add/delete."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    The implementation was challenging as it required changes to existing commands and classes."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    Credits: [To find out ordinal numbers] https://stackoverflow.com/questions/4011075/how-do-you-format-the-day-of-the-month-to-say-11th-21st-or-23rd-ordinal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Code contributed: [RepoSense link](https://github.com/AY2021S1-CS2113T-W12-4/tp/commit/30a3bdd436ef6e9b0d9aba258a316a60399fef46)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Reviewed PRs: https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/355#pullrequestreview-525631892"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Reported bugs and suggestions for other teams: [#16](https://github.com/nus-cs2113-AY2021S1/tp/pull/16)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Contribution to user guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Wrote documentation for `add test`,`delete test`,`list event today`,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    `list event [date]`,`bye`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Help to enhance documentation for `help`, `add class`, `delete class`, `add cca`, "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    `delete cca`, `add test`, `delete test`, `add tuition`, `delete tuition`,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    `list event`, `list event today`, `list event [date]`, `list event week`,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    `list event nextweek`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Wrote documentation and did diagrams for Initialisation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Did diagrams for `help`, `add class`, `delete class`, `add cca`, "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    `delete cca`, `add test`, `delete test`, `add tuition`, `delete tuition`,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    `list event`, `list event today`, `list event [date]`, `list event week`,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    `list event nextweek`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Update table for `command summary`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "* Contribution to developer guide"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Wrote documentation for `help` feature"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Did UML for `add` and `delete` feature"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Wrote documentation for `product scope`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    * Wrote documentation and did UML for `set hours`"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 84
    }
  },
  {
    "path": "docs/team/andrewongzh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Project: Plan\u0026Score"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Plan\u0026Score is a Java command-line application that allows Primary 6 students to plan and track their classes, CCAs and test dates. This enables the students to remember their schedule, so they can plan well in advance for their tests and score better."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "## Contributions"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Features:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * List events [#18](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/18)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * What it does: allows the user to list out all their classes, ccas, tests and tuitions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * Justification: Allow users to view all their schedule at a glance. The numbering that appears here also corresponds to which events to delete later."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Find events [#178](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/178)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * What it does: allows the user to search for all the events by keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * Justification: multiple keywords can be entered to be search again."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Add quiz [#123](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/123)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * What it does: allows the user to add a quiz question to quiz manager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Find contacts [#240](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/240)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * What it does: allows the user to find contacts."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Quiz Notification [#217](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/217)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * What it does: shows notification to user if quiz has not been attempted since two days ago."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Contacts storage [#347](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/347)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Code contributed: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dAndreWongZH\u0026tabRepo\u003dAY2021S1-CS2113T-W12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Enhancements:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Refactor code in controller package"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * Have a command parser to extract out commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * Have a model parser to extract out the models"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * Adhere to single responsibility principle"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Create a command factory that generates the correct command class to execute on"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * All commands inherit from abstract class command so that all commands will have method execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * EventManager class to add another layer of abstraction"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Refactor storage class to inherit from abstract StorageManager to merge duplicated methods [#125](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/125)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Logger class follows a singleton pattern [#146](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/146)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Add encapsulation to models by adding an interface to all the modelManagers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Command sanitization"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * Ensure that handle cases where there are"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            * extra parameters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            * swapped parameters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            * command in uppercase"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            * command with extra whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Factory reset"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        * Ensure program can still run after factory reset"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Update code using forking workflow when doing pull requests"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Set up issue tracker and milestones for `v1.0`, `v2.0` and `v2.1`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Set up github project dashboard to track progress"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Released `v2.0` onto github"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Reviewed PRs: [#17](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/17) [#355](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/355) [#363](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/363) [#375](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/375)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Contributed to forum discussions: [#37](https://github.com/nus-cs2113-AY2021S1/forum/issues/87)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Helping others on the forum: [#29](https://github.com/nus-cs2113-AY2021S1/forum/issues/29)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Reported bugs and suggestions for other teams: [#2](https://github.com/nus-cs2113-AY2021S1/tp/pull/2)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Contribution to user guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Wrote documentation for `Finding events`, `Finding contacts`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Wrote documentation for `Listing events`, `Adding quiz`, `Quiz notification`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Added images initially for initialization, help, add and delete class"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Update and enhanced table for `command summary`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "* Contribution to developer guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Add colors and removed footboxes to UML diagrams"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Add UML diagrams for figure 1, 3, 4, 15, 16"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Wrote documentation for `Architecture`, `Controller component` and `Model component` in the Design section"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Wrote documentation for `List contact/quiz` and `List event (/today)` feature"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Wrote documentation for `Find event \u003ckeyword(s)\u003e` feature"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Wrote documentation for Non-Functional Requirements"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    * Wrote documentation for manual testing for sections on `Adding of CCAs`, `Listing of events` and `Finding of contacts`"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 69
    }
  },
  {
    "path": "docs/team/durianpancakes.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "# Chan Xu Hui - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "Plan\u0026Score is a Command Line Interface (CLI) Application that possesses an in-built timetable, "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "quiz and contacts tracker. It is written in Java. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* New Feature: Added the ability for Plan\u0026Score to perform I/O operations with .txt files."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* New Feature: Added the ability for Plan\u0026Score to support Tuition events."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Code Contributed: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003ddurianpancakes\u0026tabRepo\u003dAY2021S1-CS2113T-W12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Project Management:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    * Reviewed PRs: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * [#356](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/356)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * [#346](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/346)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    * Reported bugs and suggestions for other teams: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * [#57](https://github.com/nus-cs2113-AY2021S1/tp/pull/57)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Enhancement to existing features: "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    * Added the ability for Plan\u0026Score to display current and next week\u0027s events in a Week View format. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * What it does: Instead of listing events in a vertical list format, Plan\u0026Score can list them in a "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    more intuitive and eye-pleasing way."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * Justification: Listing a long list of events in a list format can lead to inconvenience in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                     scrolling by the user. By displaying it in a horizontal timetable manner, "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                     Plan\u0026Score makes efficient use of the Command Line Interface\u0027s display real"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                     estate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * Highlights: The implementation was challenging as it required me to come up with the entire "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                  logic of processing the events to be printed in the right format. The lack of"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                  experience in this also added to the challenge."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    * Assisted in the migration of String date-times used in Plan\u0026Score to Calendar type. [#206](https://github.com/AY2021S1-CS2113T-W12-4/tp/issues/206) "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    * User Guide: "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * Added documentations for `Tuition`, `list event week`, `list event nextweek` and `Troubleshooting` sections."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * Added initial version of the `Command Summary`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * Added implementation details of the `UserInterface`, `list event week/nextweek` and `Storage` features."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * Added manual testing instructions for missing and corrupted files."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        * Added UML diagrams for figures 2, 5, 6, 7, 8"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 40,
      "-": 4
    }
  },
  {
    "path": "docs/team/elizabethcwt.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "## Elizabeth Chan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "### Project: Plan\u0026Score"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Plan\u0026Score is a Java command-line application that does two main things:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "1. Plan"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows students to plan and track their:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    \u003cul\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        \u003cli\u003eSchool classes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        \u003cli\u003eCCAs"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        \u003cli\u003eTests"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        \u003cli\u003eTuition"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    \u003c/ul\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    This inculcates effective scheduling habits in these students from a young age, which they will carry with them as they grow older."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "2. Score"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Allows students to practice quizzes regularly and consistently, honing their required skills for their upcoming PSLE."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Apart from that, Plan\u0026Score also allows students to save contact details of their teachers, cca coaches, or any other relevant person in a highly convenient way."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "In essence, Plan\u0026Score is not merely a scheduling application like many other applications in the market. It is a one-of-a-kind and all-encompassing application, tailored for Primary 6 students in Singapore (for now)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "#### Summary of Contributions"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Link to my code contribution (via RepoSense):"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "[My contributions](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003delizabethcwt\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "Given below are my contributions to Plan\u0026Score."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- Feature: Help"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - What it does: Displays the updated list of available features and corresponding commands for user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Justification: By including the required format to enter the input via quotation marks, provides a convenient way for users to remember how to input commands. It also allows them to view and track new features during application updates."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Highlights: This feature is usually what the user first accesses when launching the application, and provides a bird’s eye view of the whole application before delving into each individual feature."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- Feature: Class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - What it does: Stores user’s classes, attains class list size, allows adding and deleting of classes"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Justification: This feature allows users to schedule well, by entering their school classes into the application. Users can then remove any of these classes once they’re done, or no longer relevant. Users can then view exactly how many classes, as well as which classes they have, to manage their workload and time better."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Highlights: This feature affects existing commands and commands to be added in future. It requires an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Relevant classes in source code: EventClass.java class and EventClassManager.java"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- Feature: Take Quiz"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - What it does: Displays a number of quiz questions, as specified by the user, in randomised order. Then, reviews the correctness of the user’s answers, an explanation for each question, as well as the user’s score."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Justification: This feature allows users to score well, by allowing them to take quizzes of any size they’d like, according to how much time they have. Since it is integrated into this application, along with the scheduler, it is highly accessible for users."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Highlights: This feature requires the use of a manager, to manage multiple arraylists. It also requires a lot of checks to handle different user inputs for each question, valid or invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Relevant classes in source code: Quiz.java, QuizManager.java and UserAnswerManager.java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- Project Management"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Managed release `v1.0` on GitHub"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Reviewed PRs: [#363](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/363)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "- Documentation"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - User Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        - Created structure and added hyperlinks"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        - Created photos of tips and warnings boxes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        - Added photos for score component features/commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        - Added details for `help`, `add class`, `delete class`, and `quiz` commands/features"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        - Added `help` and `quiz` components in the Command Summary"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                     "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    - Developer\u0027s Guide"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        - Added explanation for help feature"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        - Added UML diagrams for the `quiz storage` and `find quiz` features."
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 65
    }
  },
  {
    "path": "docs/team/untitle4.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "# Chen Jinran\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "## Project: Plan\u0026Score"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Plan\u0026Score is a Command Line Interface application for primary 6 students to"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "possess a schedule, quiz and contact tracker. It is written in Java."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* New Feature: Added the ability to add/delete ccas."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * What it does: Allows the user to add an event of type cca in the schedule."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    Allows the user to delete the existing ccas in the schedule."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * Justification: This is a basic feature for constructing the schedule."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* New Feature: Added a file storage feature for quiz that allows the application to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "store the quizzes in a text file automatically."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* New Feature: Added the ability to delete quizzes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * What it does: Allows the user to delete the existing quizzes in the quiz list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* New Feature: Added a find quiz command for users to find quizzes in the quiz list with input keyword(s)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* New Feature: Added a quiz record feature."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * What it does: Allows users to review the incorrect quizzes in their last quiz attempt."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* New Feature: Added the ability to add/delete contacts."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * What it does: Allows users to add a contact in the contact list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    Allows the user to delete the existing contacts in the contact list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* Code contributed: [RepoSense link](https://nus-cs2113-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-09-27\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003duntitle4\u0026tabRepo\u003dAY2021S1-CS2113T-W12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * PRs reviewed: [#363](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/363)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * Added an optional parameter `explanation` for a quiz question: [#150](https://github.com/AY2021S1-CS2113T-W12-4/tp/pull/150)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * User Guide:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        * Added implementation details of the `add`, `delete`,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        `list` and `find` features for quiz."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        * Added implementation details of the `add` and `delete` for cca."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        * Added picture demonstration of the `add`, `delete`, `list` and `find` command for contacts "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        and update the corresponding implementation details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * Developer Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        * Drafted the description of the `quiz` feature."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        * Added UML diagrams for the `quiz storage` and `find quiz` features."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "       "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    * Reported bugs and suggestions for other teams in the class (example: [Reviewing T14-3](https://github.com/untitle4/ped/issues/4))"
      }
    ],
    "authorContributionMap": {
      "untitle4": 51
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.StorageExceptionHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.contact.ContactStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.quiz.QuizStorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.event.EventStorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.config.ConfigManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.CONTACT_FILE_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.EVENT_FILE_NAME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.QUIZ_FILE_NAME;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static UserInterface userInterface;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static boolean isRunning \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private EventStorageManager eventStorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private QuizStorageManager quizStorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ContactStorageManager contactStorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ConfigManager configManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean isActive;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Main() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        initializeStorageManagers();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        isActive \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        loadModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        while (isRunning) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new Main().run();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } catch (StorageCorruptedException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_STORAGE_CORRUPTED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                StorageExceptionHandler storageExceptionHandler \u003d new StorageExceptionHandler();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                storageExceptionHandler.handleCorruptedStorage();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void run() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_HELLO_FROM_DUKE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            configManager.getIntroductoryVariables(configManager.getConfig());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showWelcomeMessage(configManager.getConfig());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            while (isActive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                isActive \u003d userInterface.runUi(model, eventStorageManager, quizStorageManager, contactStorageManager);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                isRunning \u003d isActive;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Program ended unexpectedly\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        // Exit Message"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_BYE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Sets up the eventManager, quizManager, contactManager and configManager to be saved into model."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws StorageCorruptedException If unable to load data correctly."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void loadModel() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ContactManager contactManager \u003d new ContactManager(contactStorageManager.loadData());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizStorageManager.loadData());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventParameter eventParameter \u003d eventStorageManager.loadData();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventManager eventManager \u003d new EventManager(eventParameter, configManager.getConfig());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        model \u003d new Model(eventManager, contactManager, quizManager, configManager);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Sets up storage managers to get data from text file storage."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void initializeStorageManagers() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventStorageManager \u003d new EventStorageManager(EVENT_FILE_NAME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        quizStorageManager \u003d new QuizStorageManager(QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        contactStorageManager \u003d new ContactStorageManager(CONTACT_FILE_NAME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        configManager \u003d ConfigManager.getInstance();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "untitle4": 1,
      "AndreWongZH": 73,
      "durianpancakes": 24,
      "-": 3,
      "elizabethcwt": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/LogManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the objects that logs all the processes of the program at each step."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class LogManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String LOG_FILE_LOCATION \u003d \"./logfile.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static LogManager logManager \u003d null;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger LOGGER \u003d Logger.getLogger(\"log\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * The constructor here is only called once when program runs to initialize a new LogManager instance."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private LogManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            FileHandler fileHandler \u003d new FileHandler(LOG_FILE_LOCATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // set log level, defaults to Level.INFO"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.setLevel(Level.INFO);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // prevents printing of log messages to console"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // redirects log messages to a file instead"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            LOGGER.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INITIALIZATION_LOGGER_FAILED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns an instance of the LogManager class for users to get the logger instance."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return LogManager instance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static LogManager getLogManagerInstance() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (logManager \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logManager \u003d new LogManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return logManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns a logger instance that the programmer can use to log process info."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A logger instance."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Logger getLogger() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return LOGGER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 61,
      "durianpancakes": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/common/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Intro related messages"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_LOGO \u003d \" ------   -                          -----\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|   _  | | |                        | ____|\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  | | | | |                        | |___\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  |_| | | |  -----     -----    \u0026  |____ |  ------   -----   -----   -----\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|      | | | /  -  \\\\   |  _  |          | | | _____| /  -  \\\\ /  ___\\\\ /  -- \\\\\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|  ----  | | | | | |   | | | |       ___| | | |      | | | | | /     |  ___|\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"| |      | | | |_|  \\\\  | | | |      |     | | |____  | |_| | | |     | |____\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"|_|      |_| \\\\____/\\\\_\\\\ |_| |_|      |_____| |______| \\\\_____/ |_|     \\\\_____/\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO_FROM_DUKE \u003d \"Hello from\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + Messages.MESSAGE_LOGO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_NAME \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_PROMPT_HOURS \u003d \"Key in the number of hours you would like \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"to be productive each day (not more than 12)?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_SHOW_HOURS \u003d \"This is your recommended hours per day: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_SHOW_NEW_HOURS \u003d \"This is your new recommended hours per day: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_HELLO \u003d \"Hello \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_COMMAND \u003d \"What can we do for you? \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"(Enter \u0027help\u0027 for the list of available commands!)\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_HOURS_ERROR_NON_NUMBER \u003d \"Please indicate in NUMERALS, \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"how many hours you would like to set!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // General error messages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_READ_ERROR \u003d \"There was an error loading your files.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_INITIALIZATION_ERROR \u003d \"STORAGE: There was an error\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_STORAGE_CORRUPTED \u003d \"): Storage file corrupted.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_FACTORY_RESET_PROMPT \u003d \"Would you like to reset Plan\u0026Score? [y/n]\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"(NOTE: This will result in the loss of all data!)\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MANUAL_TROUBLESHOOT_PROMPT \u003d \"Otherwise, consider going through the \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"troubleshooting steps provided in our User Guide to fix the problem manually.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_FACTORY_RESET_INVALID_INPUT_PROMPT \u003d \"Please enter [y/n] only!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_FACTORY_RESET_SUCCESSFUL \u003d \"Reset successful! Please relaunch Plan\u0026Score.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_FACTORY_RESET_FAILED_OR_CANCELLED \u003d \"Reset failed/cancelled. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please follow troubleshooting steps provided in our User Guide to reset Plan\u0026Score.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_LIST_PARAMETERS \u003d \"Please tell me what you want to be listed! \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"You can either \u0027list event\u0027 or \u0027list quiz\u0027 or \u0027list contact\u0027\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_RECOMMENDED_TIME_EXCEEDED \u003d \"Recommended time exceeded!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_PROMPT_CHECK_START_END_INPUTS \u003d \"Please check the start and end inputs again!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_ERROR_START_AFTER_END \u003d \"The start time given is later \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"than the end time given!\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please check your inputs again!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_ERROR_EQUALS_END \u003d \"The start time given is the same as \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"the end time given!\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please check your inputs again!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_EMPTY_SCHEDULE_LIST \u003d \"Schedule is %s. Add some!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_INITIALIZATION_LOGGER_FAILED \u003d \"Failed to set up logger\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_MISSING_MODEL \u003d \":( Oops! Category type is missing! \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            + \"Enter \u0027help\u0027 if needed!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_FIND_PARAMETERS \u003d \"Please tell me what you want to be listed! \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            + \"You can either \u0027find event\u0027 or \u0027find quiz\u0027 or \u0027find contact\u0027\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String MESSAGE_SWAPPED_PARAMETERS \u003d \":( Please do not swap the parameters\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETERS \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Remember to include ALL %s inputs!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_EMPTY_PARAMETERS \u003d \":( OOPS!!! Ensure ALL parameters are filled up!\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \":( Oops! I did not recognize that command! \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Enter \u0027help\u0027 if needed!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_MODEL \u003d \":( Oops! I did not recognize that category type\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" or category not compatible with command! \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Enter \u0027help\u0027 if needed!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_EXTRA_PARAM \u003d \":( OOPS!!! Please do not enter extra inputs\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //Messages for date time"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_LIST_INVALID_DATE \u003d \":( OOPS!!! Please enter today/week/valid date\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"and time in format yyyy-mm-dd!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please enter valid date and time in format yyyy-mm-dd HHMM!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from CalendarWeekRenderer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MONDAY_LABEL \u003d \"[MON]\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUESDAY_LABEL \u003d \"[TUE]\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_WEDNESDAY_LABEL \u003d \"[WED]\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_THURSDAY_LABEL \u003d \"[THU]\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_FRIDAY_LABEL \u003d \"[FRI]\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SATURDAY_LABEL \u003d \"[SAT]\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_SUNDAY_LABEL \u003d \"[SUN]\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    // Messages from Contact related classes"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this contact: \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this contact: \";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate in NUMERALS, which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate which contact you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_INVALID_CONTACT_INDEX \u003d \":( OOPS!!! Please indicate a valid contact index!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_EMPTY_CONTACT_LIST \u003d \"Contact list is empty. Add some!!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CONTACT_INDEX_OUT_OF_BOUNDS \u003d \"There is not such a contact in your list!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Messages from Class related classes"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this class: \";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this class: \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate which class you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this class as done:\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate in NUMERALS, which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Please indicate which class you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS_INDEX \u003d \":( OOPS!!! Please indicate a valid class index!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    // Messages from Cca related classes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this cca: \";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this cca: \";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this cca as done:\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate in NUMERALS, which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            + \"Please indicate which cca you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String MESSAGE_INVALID_CCA_INDEX \u003d \":( OOPS!!! Please indicate a valid cca index!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    // Messages from Test related classes"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this test: \";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this test: \";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate which test you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this test as done:\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate in NUMERALS, which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            + \"Please indicate which test you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_INVALID_TEST_INDEX \u003d \":( OOPS!!! Please indicate a valid test index!\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String MESSAGE_TIME_LEFT_HEADER \u003d \"Time left for this day: \";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Messages from Tuition related classes"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_SUFFIX \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 suffixes!\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_MISSING_TUITION_INPUT \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Remember to include ALL \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027 inputs!\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this tuition: \";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_SUCCESS \u003d \"Noted. I\u0027ve removed this tuition: \";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to delete!\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_SUCCESS \u003d \"Nice! I\u0027ve marked this tuition as done:\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NON_NUMBER \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate in NUMERALS, which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN \u003d \":( OOPS!!! \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            + \"Please indicate which tuition you\u0027d like to set as Done!\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String MESSAGE_INVALID_TUITION_INDEX \u003d \":( OOPS!!! Please indicate a valid tuition index!\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Messages from Quiz related classes"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_DELETE_ERROR_NON_NUMBER \u003d \":( OOPS!!! Please indicate in NUMERALS, \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"which quiz you\u0027d like to delete!\\n\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_INVALID_HELP_COMMAND \u003d \":( OOPS!!! Are you trying to take a quiz or add/delete a\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" quiz question? Enter \u0027help\u0027 to check the correct format!\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_EMPTY_QUIZ_LIST \u003d \"Quiz list is empty. Add some!\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_INDEX_OUT_OF_BOUND \u003d \"There is no such question in your quiz list!\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_QUESTION_NOT_FOUND \u003d \"No question provided\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_ANSWER_NOT_FOUND \u003d \"No answer provided\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_OPTIONS_NOT_FOUND \u003d \"Options not provided\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_ADD_SUCCESSFUL \u003d \"Quiz question added!\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_INVALID_ANS_PROVIDED \u003d \":( OOPS! Incorrect answer format! \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"Your answer can only be either 1, 2, 3 or 4!\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_FULL_MARKS \u003d \"Congratulations! You got full marks in your last attempt!\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_WRONG_QUESTIONS_HEADER \u003d \"Here are the incorrect questions \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"in your last quiz attempt:\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_LIST_HEADER \u003d \"Here are the questions in your quiz list:\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_MISSING_ANSWER \u003d \":( OOPS! Please enter your answer for the \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"question above!\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_NO_QUIZ_ATTEMPTS \u003d \"You have not taken a quiz yet!\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static String invalid_number_of_quiz_questions_message(int size) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return \":( OOPS!!! Please enter a valid number of quiz questions to attempt! (1~\" + size + \")\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_MISSING_QUIZ_PARAM \u003d \"Please indicate the command you would like to apply on\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" quiz!\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_QUIZ_NON_NUMBER \u003d \"Please enter a valid number or \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"enter \u0027quiz record\u0027 to see your incorrect questions in your previous quiz!\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static String print_quiz_score(int correctCounter, int noOfQues) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return \"You scored \" + correctCounter + \" out of \" + noOfQues + \"!\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"Scroll up to review your quiz.\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_HELP \u003d \"Hello! Here is a list of commands you can try:\\n\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t1. Add class: \u0027add class /n [name of class] /s [start date-time of class] /e\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" [end date-time of class]\u0027\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t2. Delete class: \u0027delete class [class number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t3. Add cca: \u0027add cca /n [name of cca] /s [start date-time of cca] /e [end date-time of cca]\u0027\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t4. Delete cca: \u0027delete cca [cca number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t5. Add test: \u0027add test /n [name of test] /s [start date-time of test] /e \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"[end date-time of test]\u0027\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t6. Delete test: \u0027delete test [test number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t7. Add tuition: \u0027add tuition /n [name of tuition] /s [start date-time of tuition] /e \""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"start date-time of tuition] /l [location of tuition]\u0027\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t8. Delete tuition: \u0027delete tuition [tuition number]\u0027\\n\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t9. List events (class, test, cca, tuition): \u0027list\u0027\\n\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t10. Find relevant event(s): \u0027find [keyword(s)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t11. Add contact: \u0027add contact /s [subject] /n [name of contact person] /p [phone number]\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" /e [email address]\u0027\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t12. Delete contact: \u0027delete contact [contact number]\u0027\\n\""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t13. List contact: \u0027list contact\u0027\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t14. Find contact: \u0027find contact [keyword(s)]\u0027\\n\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t15. Take Mathematics quiz: \u0027quiz [no. of questions]\u0027\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t16. Add quiz question: \u0027add quiz /q [question] /o1 [option 1] /o2 [option 2] /o3 [option 3]\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \" /o4 [option 4] /a [option answer] /exp (explanation)\u0027\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t17. Delete quiz question: \u0027delete quiz [question number]\u0027\\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t18. List quiz questions: \u0027list quiz\u0027\\n\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t19. Find quiz questions: \u0027find quiz [keyword(s)]\u0027\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t20. Display former incorrect quiz question records: \u0027quiz record\u0027\\n\\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t21. Exit program: \u0027bye\u0027\\n\\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\n\\tNOTE:\\n\\t1. Please enter the date-time in the following format: YYYY-MM-DD \""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"[time in 24hr format]\\n\\te.g. 2020-08-19 1300\\n\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            + \"\\t2. For command 16 (Add quiz question), the \u0027explanation\u0027 field is OPTIONAL\\n\\n\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_BYE \u003d \"BYE BYE! SEE YOU NEXT TIME! :3\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_EXTRA_HELP_PARAM \u003d \"OOPS! Were you trying to ask for help? Just enter \u0027help\u0027!\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_NO_EVENTS_FOUND \u003d \"Sorry but your searches yield no results!\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String MESSAGE_NO_QUIZZES_FOUND \u003d \"Sorry but there is not such a quiz in your list!\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 30,
      "untitle4": 27,
      "AndreWongZH": 8,
      "durianpancakes": 71,
      "elizabethcwt": 100
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/ControlManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.controller.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.controller.command.CommandFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelExtractor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteFindCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingModelException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.contact.ContactStorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.event.EventStorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.quiz.QuizStorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.CONTACT_FILE_NAME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.QUIZ_FILE_NAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Manages the parsing of commands and models and the execution of commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ControlManager {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private String userInput;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final EventStorageManager eventStorageManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final QuizStorageManager quizStorageManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ContactStorageManager contactStorageManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ControlManager(String userInput, Model model, EventStorageManager eventStorageManager,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                          QuizStorageManager quizStorageManager, ContactStorageManager contactStorageManager) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput !\u003d null : \"ControlManager must not accept null userInput\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventStorageManager \u003d eventStorageManager;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizStorageManager \u003d quizStorageManager;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contactStorageManager \u003d contactStorageManager;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Executes generated command class with a model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return CommandType back to user interface to determine if program exits."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType runLogic() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType modelType \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain dataModel \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"Running controller logic now\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            trimWhitespace();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"Extracting command\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d new CommandParser(userInput).extractCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            final Command actionableCommand \u003d new CommandFactory(commandType, userInput).generateActionableCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (commandType \u003d\u003d CommandType.BYE) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"User terminates program\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return commandType;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // Only extract model for certain commands(add, delete, list, find, quiz, done, set)."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (doesRequireModel(commandType)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Extracting model\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                modelType \u003d new ModelParser(userInput).extractModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dataModel \u003d new ModelExtractor(model, modelType).retrieveModel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            checkInvalidModels(commandType, modelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"Executing command\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            actionableCommand.execute(dataModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidHelpCommandException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EXTRA_HELP_PARAM);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (InvalidModelException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_MODEL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (MissingParameterException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(String.format(Messages.MESSAGE_MISSING_PARAMETERS, e.getMessage()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyParameterException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_PARAMETERS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IncompleteListCommandException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INCOMPLETE_LIST_PARAMETERS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (MissingModelException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_MISSING_MODEL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IncompleteFindCommandException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INCOMPLETE_FIND_PARAMETERS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ExtraParameterException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_EXTRA_PARAM);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (SwappedParameterException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_SWAPPED_PARAMETERS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            refreshEvents();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            refreshQuizzes();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            refreshContacts();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Replaces all multiple spaces with only a single space and trims spaces at the start and end."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void trimWhitespace() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInput \u003d userInput.trim().replaceAll(\" +\", \" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if user entered an invalid model after the command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Commands such as add, delete and done cannot be paired with a model type event."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param commandType Command Type to be checked."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param modelType Model Type to be compared against."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If add, delete or done is followed after event model."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void checkInvalidModels(CommandType commandType, ModelType modelType) throws InvalidModelException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if ((commandType \u003d\u003d CommandType.ADD || commandType \u003d\u003d CommandType.DELETE || commandType \u003d\u003d CommandType.DONE)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 modelType \u003d\u003d ModelType.EVENT) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if ((commandType \u003d\u003d CommandType.FIND || commandType \u003d\u003d CommandType.LIST)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \u0026\u0026 (modelType !\u003d ModelType.EVENT \u0026\u0026 modelType !\u003d ModelType.CONTACT \u0026\u0026 modelType !\u003d ModelType.QUIZ)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if ((commandType \u003d\u003d CommandType.SET) \u0026\u0026 (modelType !\u003d ModelType.HOURS)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if a modelType is required to be extracted out."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Help and Bye command need not require any model."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param commandType The command type to be checked."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Boolean to inform a need for model extraction."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean doesRequireModel(CommandType commandType) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isAdd \u003d commandType \u003d\u003d CommandType.ADD;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isDelete \u003d commandType \u003d\u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isDone \u003d commandType \u003d\u003d CommandType.DONE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isList \u003d commandType \u003d\u003d CommandType.LIST;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isFind \u003d commandType \u003d\u003d CommandType.FIND;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isQuiz \u003d commandType \u003d\u003d CommandType.QUIZ;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean isSet \u003d commandType \u003d\u003d CommandType.SET;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return isAdd || isDelete || isDone || isList || isFind || isQuiz || isSet;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Saves the contacts data in ContactManager into contact.txt"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void refreshContacts() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            contactStorageManager.saveData(model.getContactManager().getContacts(), CONTACT_FILE_NAME);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the latest Events from the data file."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void refreshEvents() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getCcaManager().getCcas());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getTestManager().getTests());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getClassManager().getClasses());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.addAll(model.getEventManager().getTuitionManager().getTuitions());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventStorageManager.saveData(events);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the latest Quizzes from the data file."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void refreshQuizzes() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d model.getQuizManager().getQuizList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            quizStorageManager.saveData(quizzes, QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 170,
      "durianpancakes": 46,
      "elizabethcwt": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for adding a class, cca, test, tuition, quiz and contact."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public AddCommand(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Runs add command on corresponding model type."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param modelMain A model type to be modified or read."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyParameterException If command if has empty parameters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If command is lacking prefixes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws EmptyParameterException, MissingParameterException,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            SwappedParameterException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelManager modelManager \u003d (ModelManager) modelMain;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelManager.add(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteFindCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the base of all command types."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected final String userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Runs if the execution requires passing the user input to the model."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput String given from the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected Command(String userInput) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public abstract void execute(ModelMain modelMain) throws InvalidHelpCommandException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EmptyParameterException, MissingParameterException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            IncompleteListCommandException, IncompleteFindCommandException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ExtraParameterException, SwappedParameterException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 1,
      "AndreWongZH": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/CommandFactory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.unused.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a generator that returns the corresponding Command class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * based on the commandType."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandFactory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final CommandType commandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandFactory(CommandType commandType, String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert commandType !\u003d null : \"commandType must not be null\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns a Command class back to the ControlManager"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * based on the commandType."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Command class which is to be executed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Command generateActionableCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new HelpCommand(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new AddCommand(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DeleteCommand(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new DoneCommand(userInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new ListCommand(userInput);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new FindCommand(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new QuizCommand(userInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case SET:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return new SetHoursCommand(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case BYE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // bye does not have a corresponding Command class"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            assert false : \"all commandType should be handled\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 53
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for deleting a class, cca, test, tuition, quiz and contact."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INPUT_LENGTH_THREE \u003d 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public DeleteCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Runs delete on the required model."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param modelMain A model type to be modified or read."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws ExtraParameterException If user adds extra parameters to delete [model] [number]."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws ExtraParameterException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003e INPUT_LENGTH_THREE) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new ExtraParameterException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelManager modelManager \u003d (ModelManager) modelMain;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelManager.delete(separatedInputs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteFindCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for searching via event description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Runs find command on corresponding model type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param modelMain A model type to be modified or read."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If command is lacking keywords."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws IncompleteFindCommandException If model is missing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws MissingParameterException, IncompleteFindCommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new IncompleteFindCommandException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain instanceof EventManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EventManager eventManager \u003d (EventManager) modelMain;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.find(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof QuizManager) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizManager.find(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof ContactManager) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ContactManager contactManager \u003d (ContactManager) modelMain;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            contactManager.find(userInput);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidHelpCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for asking for help."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public HelpCommand(String userInput) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003ehandleHelp()\u003c/h2\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints out all available features users can use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @exception InvalidHelpCommandException to inform the user if their help input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void handleHelp() throws InvalidHelpCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String[] userInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (userInputs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"printing out all features users can use\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_HELP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid help command\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new InvalidHelpCommandException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 28,
      "elizabethcwt": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the command for listing events, quizzes and contacts."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INPUT_LENGTH_TWO \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ListCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Runs list command on corresponding model type."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param modelMain A model type to be modified or read."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws IncompleteListCommandException If model is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws ExtraParameterException If user adds extra parameters to list contacts or quiz."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws IncompleteListCommandException, ExtraParameterException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new IncompleteListCommandException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelMain instanceof EventManager) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            EventManager eventManager \u003d (EventManager) modelMain;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            eventManager.list(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof QuizManager \u0026\u0026 separatedInputs.length \u003d\u003d INPUT_LENGTH_TWO) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizManager.list();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else if (modelMain instanceof ContactManager \u0026\u0026 separatedInputs.length \u003d\u003d INPUT_LENGTH_TWO) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ContactManager contactManager \u003d (ContactManager) modelMain;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            contactManager.list();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new ExtraParameterException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 50
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/QuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static seedu.duke.common.Messages.MESSAGE_MISSING_QUIZ_PARAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static seedu.duke.common.Messages.MESSAGE_QUIZ_NON_NUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAX_PARAM_SIZE \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_RECORD \u003d \"record\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public QuizCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void execute(ModelMain modelMain) throws ExtraParameterException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        QuizManager quizManager \u003d (QuizManager) modelMain;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput !\u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(INPUT_SPACE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003e MAX_PARAM_SIZE) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new ExtraParameterException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs[1].toLowerCase().equals(INPUT_RECORD)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                quizManager.recordedQuizzes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                quizManager.checkQuizSizeValidity(separatedInputs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            System.out.println(MESSAGE_MISSING_QUIZ_PARAM);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            System.out.println(MESSAGE_QUIZ_NON_NUMBER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 13,
      "AndreWongZH": 16,
      "elizabethcwt": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/command/SetHoursCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.config.ConfigManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "//@@author Aliciaho"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class SetHoursCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Runs if the execution requires passing the user input to the model."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInput String given from the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    protected SetHoursCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void execute(ModelMain modelMain) throws NumberFormatException, ExtraParameterException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (userInput.split(INPUT_SPACE).length \u003e 2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new ExtraParameterException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ConfigManager configManager \u003d (ConfigManager) modelMain;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        configManager.editHours();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 26,
      "AndreWongZH": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingModelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the process of extracting out the commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_ADD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_BYE \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACES \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int LENGTH_SINGLE_WORD \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SET \u003d \"set\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandParser(String userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.toLowerCase().split(INPUT_SPACES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        commandType \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if the first word in the input string matches any command word."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If it contains any command word, returns the respective commandType."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return CommandType corresponding to the command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidCommandException If no command word matches the first word."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingModelException If command is missing a model word."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws ExtraParameterException If command contains extra parameters."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public CommandType extractCommand() throws InvalidCommandException, MissingModelException, ExtraParameterException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting command now...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[MAIN_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_ADD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new MissingModelException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.ADD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DELETE:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new MissingModelException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DELETE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_DONE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new MissingModelException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.DONE;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_LIST:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.LIST;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_BYE:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003e LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new ExtraParameterException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.BYE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_HELP:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.HELP;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_FIND:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.FIND;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_QUIZ:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.QUIZ;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SET:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d LENGTH_SINGLE_WORD) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new MissingModelException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d CommandType.SET;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidCommandException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 100
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/CommandType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible commands available to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ADD, DELETE, DONE, HELP, LIST, BYE, QUIZ, FIND, SET"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/DateTimeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "//@@author Aliciaho"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * To configure the Date and Time of the events from yyyy-mm-dd HHMM format to dd suffix mm yyyy, hh:mm aa format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final int MAX_HHMM \u003d 2400;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author Aliciaho-reused"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Get the suffix for each day."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * ref to: https://stackoverflow.com/questions/4011075/how-do-you-format-the-day-of-the-month-to-say-11th-21st-or-23rd-ordinal"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param day day number of the month"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return respective suffix for the day inputted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getDayNumberSuffix(int day) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assert day \u003e 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assert day \u003c 31;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (day \u003e\u003d 11 \u0026\u0026 day \u003c\u003d 13) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (day % 10) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"st\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"nd\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"rd\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"th\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convert time from HH:mm format to hh:mma format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param calendar date time inputted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the time in hh:mma format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String parseTime(Calendar calendar) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.log(Level.INFO, \"converting time to hh:mma\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"hh:mma\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convert day and month into MM-yyyy format."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param calendar date time inputted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the date in MM-yyyy format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public String parseDayAndMonth(Calendar calendar) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.log(Level.INFO, \"converting date to MM-yyyy\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"MM-yyyy\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convert a string input to date time format yyyy-MM-dd HHmm in Calendar form."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param string user input string"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return calendar date time in yyyy-MM-dd HHmm in Calendar form"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @exception ParseException exception thrown when valid date and time is not inputted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Calendar convertStringToCalendar(String string) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.log(Level.INFO, \"converting string to calendar\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        checkDateTimeFormat(string);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d sdf.parse(string);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Validates if the datetime string is following the correct format (yyyy-MM-dd HHmm)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param string User input string."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws ParseException If date is not according to the format."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void checkDateTimeFormat(String string) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d (\\\\d\\\\d\\\\d\\\\d)$\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(string);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new ParseException(\"Invalid datetime\", 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (Integer.parseInt(matcher.group(1)) \u003e MAX_HHMM) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new ParseException(\"Invalid datetime\", 0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert a string input to date time format yyyy-MM-dd in Calendar form."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param string user input string"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return calendar date time in yyyy-MM-dd in Calendar form"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception ParseException exception thrown when valid date and time is not inputted"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Calendar convertStringToCalendarByDate(String string) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting string to calendar\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Date date \u003d sdf.parse(string);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert a Calendar form in date time format yyyy-MM-dd HHmm to String."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time input in Calendar form"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return calendar date time input in String form"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String convertCalendarToString(Calendar calendar) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting calendar to string\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Add day suffix to date time string."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param calendar date time in calendar form"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return date time string with day suffix"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String obtainFormattedDateTimeString(Calendar calendar) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"converting to MMM yyyy, hh:mma format\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"MMM yyyy, hh:mma\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int dayOfMonth \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting day suffix\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String dayOfMonthString \u003d dayOfMonth + getDayNumberSuffix(dayOfMonth);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String monthAndYearString \u003d sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return dayOfMonthString + \" \" + monthAndYearString;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Convert date time in Calendar form to dd-MM in String form."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param calendar date time in Calendar form"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return dd-MM in String form"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String obtainFormattedDayAndMonthString(Calendar calendar) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"converting to dd-MM format\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd-MM\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return sdf.format(calendar.getTime());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Check if two dates are equal."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param listInput date time input from List"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInput date time input by user"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return true if both dates are equal"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @throws DateTimeParseException if valid datetime is not inputted"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean isDateEqual(Calendar listInput, Calendar userInput) throws DateTimeParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"checking if dates are equal\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listDay \u003d listInput.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userDay \u003d userInput.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listMonth \u003d listInput.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userMonth \u003d userInput.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int listYear \u003d listInput.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int userYear \u003d userInput.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return (listDay \u003d\u003d userDay)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listMonth \u003d\u003d userMonth)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 (listYear \u003d\u003d userYear);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Get the dates for this week."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return dateCalendars ArrayList containing the dates for this week"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cCalendar\u003e getDaysOfWeek(Calendar calendar) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting days of the week\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cCalendar\u003e dateCalendars \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        switch (calendar.get(Calendar.DAY_OF_WEEK)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.MONDAY:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 0);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.TUESDAY:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.WEDNESDAY:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -2);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.THURSDAY:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -3);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.FRIDAY:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -4);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.SATURDAY:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -5);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        case Calendar.SUNDAY:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, -6);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"adding days of week to dateCalendars\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar newCalendar \u003d (Calendar) calendar.clone();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            dateCalendars.add(newCalendar);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return dateCalendars;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Get duration between two Calendar dates."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param startDateCalendar starting date"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param endDateCalendar ending date"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return duration between the two dates in minutes"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public long getDuration(Calendar startDateCalendar, Calendar endDateCalendar) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting duration between two dates\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        long timeDurationInMinutes;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        timeDurationInMinutes \u003d Duration.between(startDateCalendar.toInstant(),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                endDateCalendar.toInstant()).toMinutes();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return timeDurationInMinutes;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cCalendar\u003e getCurrentDaysOfWeek() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cCalendar\u003e getNextDaysOfWeek() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        calendar.add(Calendar.DAY_OF_MONTH, 7);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 155,
      "AndreWongZH": 24,
      "durianpancakes": 22,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelExtractor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a extractor that returns the corresponding Model Manager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * based on the modelType."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelExtractor {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ModelType modelType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelExtractor(Model model, ModelType modelType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.modelType \u003d modelType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns the Model Manager based on the modelType."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns null if modelType is EVENT or null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return Model Manager to be read or modified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If modelType does not match any of the Model Managers."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelMain retrieveModel() throws InvalidModelException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (modelType \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CLASS:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getClassManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CCA:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getCcaManager();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TEST:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTestManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case TUITION:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager().getTuitionManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getQuizManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case CONTACT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getContactManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case EVENT:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getEventManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case HOURS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return model.getConfigManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the process of extracting out the model to be performed on."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ModelParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CLASS \u003d \"class\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TEST \u003d \"test\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_CCA \u003d \"cca\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SCHEDULE_TUITION \u003d \"tuition\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_QUIZ \u003d \"quiz\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_CONTACT \u003d \"contact\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_HOURS \u003d \"hours\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int SUB_COMMAND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACES \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAIN_COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String[] separatedInputs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ModelType modelType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelParser(String userInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        separatedInputs \u003d userInput.toLowerCase().split(INPUT_SPACES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        modelType \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if the second word in the input string matches any model word."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If it contains any model word, returns the respective modelType."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return ModelType corresponding to the model."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws InvalidModelException If the second word does not match any model word."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ModelType extractModel() throws InvalidModelException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Extracting model now...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs[MAIN_COMMAND_INDEX].equals(\"quiz\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return modelType \u003d ModelType.QUIZ;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        switch (separatedInputs[SUB_COMMAND_INDEX]) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CLASS:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CLASS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_CCA:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CCA;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TEST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TEST;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_SCHEDULE_TUITION:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.TUITION;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_CONTACT:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.CONTACT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_QUIZ:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.QUIZ;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_EVENT:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.EVENT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        case INPUT_HOURS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            modelType \u003d ModelType.HOURS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new InvalidModelException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return modelType;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 85
    }
  },
  {
    "path": "src/main/java/seedu/duke/controller/parser/ModelType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents all possible models available to the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public enum ModelType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    CLASS, CCA, TEST, TUITION, QUIZ, CONTACT, EVENT, HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyListException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EmptyListException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/EmptyParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EmptyParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/ExtraParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ExtraParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/IncompleteFindCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class IncompleteFindCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/IncompleteListCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class IncompleteListCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidDateException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidDateException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final InvalidDateType errorType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public InvalidDateException(InvalidDateType errorType) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.errorType \u003d errorType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public InvalidDateType getErrorType() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.errorType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 1,
      "durianpancakes": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidDateType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public enum InvalidDateType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    START_AFTER_END, START_EQUALS_END"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidHelpCommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class InvalidHelpCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidInputException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidInputException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidModelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class InvalidModelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/InvalidValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class InvalidValueException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 1,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingModelException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class MissingModelException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/MissingParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class MissingParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public MissingParameterException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/StorageCorruptedException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageCorruptedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/StorageSeparatorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageSeparatorException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/exception/SwappedParameterException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class SwappedParameterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ConfigParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigParameter {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private int recommendedHours;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private boolean hasProgramRan;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ConfigParameter(String name, int recommendedHours, boolean hasProgramRan) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.recommendedHours \u003d recommendedHours;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.hasProgramRan \u003d hasProgramRan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ConfigParameter() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.recommendedHours \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.hasProgramRan \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getRecommendedHours() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return recommendedHours;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setRecommendedHours(int recommendedHours) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.recommendedHours \u003d recommendedHours;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean getHasProgramRan() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return hasProgramRan;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void setHasProgramRan(boolean hasProgramRan) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.hasProgramRan \u003d hasProgramRan;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 13,
      "durianpancakes": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Interactable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods across all ModelManager that the controller can call."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface Interactable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Adds an object to a ModelManager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If command is missing parameters prefix."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyParameterException If no parameter inputs are found after the prefix."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void add(String userInput) throws MissingParameterException, EmptyParameterException, SwappedParameterException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Deletes an object from a ModelManager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void delete(String[] userInputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 28
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.config.ConfigManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a model object that stores volatile memory of the program data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * This consist of the eventManager, contactManager, quizManager and configManager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    EventManager eventManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ContactManager contactManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    QuizManager quizManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ConfigManager configManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public Model(EventManager eventManager, ContactManager contactManager,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                 QuizManager quizManager, ConfigManager configManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contactManager \u003d contactManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizManager \u003d quizManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.configManager \u003d configManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager getEventManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ContactManager getContactManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return contactManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager getQuizManager() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ConfigManager getConfigManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return configManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ModelMain.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.config.ConfigManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the main model class which is inherited by all Managers."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.event.EventManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see ModelManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see ConfigManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class ModelMain {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the main model class which is inherited by Contact, Quiz, Class, Test, CCA, Tuition Manager."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.contact.ContactManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.quiz.QuizManager"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * @see seedu.duke.model.event.classlesson.EventClassManager"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class ModelManager extends ModelMain implements Interactable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/config/ConfigInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for ConfigManager that the controller can call."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface ConfigInteractable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Changes the recommended hours a day."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void editHours();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getIntroductoryVariables(ConfigParameter configParameter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/config/ConfigManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.config.ConfigStorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "//@@author Aliciaho"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class ConfigManager extends ModelMain implements ConfigInteractable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String CONFIG_FILE_NAME \u003d \"/config.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private final ConfigStorageManager configStorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static UserInterface userInterface;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private ConfigParameter configParameter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static ConfigManager INSTANCE \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static ConfigManager getInstance() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (INSTANCE \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            INSTANCE \u003d new ConfigManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return INSTANCE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private ConfigManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.configStorageManager \u003d new ConfigStorageManager(CONFIG_FILE_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.configParameter \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Load data from configStorageManager to configParam."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return configParam containing data from configStorageManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ConfigParameter getConfig() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ConfigParameter configParameter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        configParameter \u003d configStorageManager.loadData();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return configParameter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void getIntroductoryVariables(ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting username and recommended hours from user\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (!configParameter.getHasProgramRan()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_PROMPT_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            String userName \u003d userInterface.getUserCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter.setName(userName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            int recommendedHours;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            recommendedHours \u003d getInputHours();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter.setRecommendedHours(recommendedHours);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter.setHasProgramRan(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        saveConfigParameter(configParameter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private int getInputHours() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int recommendedHours \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_PROMPT_HOURS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                recommendedHours \u003d Integer.parseInt(userInterface.getUserCommand());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_HOURS_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } while (recommendedHours \u003c\u003d 0 || recommendedHours \u003e 12);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return recommendedHours;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Save the new ConfigParam into ConfigStorageManager."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param configParameter configParam storing the new inputs"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void saveConfigParameter(ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configStorageManager.saveData(configParameter);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void editHours() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"editing hours to take in new hours input\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int newHours;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        newHours \u003d getInputHours();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_SHOW_NEW_HOURS + newHours);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter \u003d getConfig();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            configParameter.setRecommendedHours(newHours);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            saveConfigParameter(configParameter);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (StorageCorruptedException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            // This should not occur at this point in time"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_CORRUPTED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 101,
      "AndreWongZH": 3,
      "durianpancakes": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/Contact.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * \u003ch2\u003e Class class \u003c/h2\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * Contains details of contact."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class Contact {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String phoneNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Contact(String subject, String name, String phoneNumber, String email) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.phoneNumber \u003d phoneNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getSubject() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getPhoneNumber() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return phoneNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject + \" teacher: \" + name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nPhone number: \" + phoneNumber"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\nemail address: \" + email + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return subject + \"|\" + name + \"|\" + phoneNumber + \"|\" + email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 46,
      "AndreWongZH": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/ContactInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for ContactManager that the controller can call."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface ContactInteractable extends Interactable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * List all contacts in ContactManager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Find a list of contacts that matches with the keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If keyword is missing from the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void delete(String[] userInputs) throws IndexOutOfBoundsException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 25
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/contact/ContactManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ContactManager extends ModelManager implements ContactInteractable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int BEGIN_INDEX \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int END_INDEX \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int USER_INPUT_OFFSET \u003d 12;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int S_INDEX \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int N_INDEX \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int P_INDEX \u003d 3;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final int E_INDEX \u003d 4;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String S_PREFIX \u003d \"s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String N_PREFIX \u003d \"n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String P_PREFIX \u003d \"p\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String E_PREFIX \u003d \"e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cContact\u003e contacts;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ContactManager(ArrayList\u003cContact\u003e contacts) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getContactListSize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return contacts.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cContact\u003e getContacts() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Adds a contact with provided details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws EmptyParameterException if no parameter are provided for each section."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws MissingParameterException if sections symbols are missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void add(String userInput) throws EmptyParameterException, MissingParameterException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            SwappedParameterException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (!userInput.contains(\"/s\") || !userInput.contains(\"/n\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || !userInput.contains(\"/p\") || !userInput.contains(\"/e\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new MissingParameterException(\"\u0027/s\u0027, \u0027/n\u0027, \u0027/p\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        validateSwappedParameters(separatedInputs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into subject, name, phone number\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"and email address.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String subject \u003d separatedInputs[1].substring(1).trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String name \u003d separatedInputs[2].substring(1).trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String phoneNumber \u003d separatedInputs[3].substring(1).trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String emailAddress \u003d separatedInputs[4].substring(1).trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (subject.equals(\"\") || name.equals(\"\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || phoneNumber.equals(\"\") || emailAddress.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"subject/name/phone number/email address is empty\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.add(new Contact(subject, name, phoneNumber, emailAddress));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_ADD_SUCCESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                contacts.get(getContactListSize() - 1).toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Delete a contact indicated by the user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput the input provided by the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws IndexOutOfBoundsException if there is not such a contact in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void delete(String[] userInput) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int contactIndex;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            contactIndex \u003d Integer.parseInt(userInput[2]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((contactIndex \u003c\u003d 0) || (contactIndex \u003e getContactListSize())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CONTACT_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                contacts.get(contactIndex - 1).toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        contacts.remove(contactIndex - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getContactStatement();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Provide a list of contacts for the user."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (contacts.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_CONTACT_LIST);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c getContactListSize(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Contact \" + (i + 1) + \":\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        contacts.get(i).toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Prints to user all the found events that matches with keyword provided."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If input supplied does not contain any keywords."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException(\"keywords as\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e filteredContacts \u003d filterContacts(userInput);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (filteredContacts.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_EVENTS_FOUND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface.printArray(filteredContacts);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Searches for a match in the contacts list against the keyword."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An ArrayList of contacts after filtering."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ArrayList\u003cString\u003e filterContacts(String userInput) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e filteredContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Contact contact : contacts) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            for (String keyword: separatedInputs) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchName \u003d contact.getName().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchEmail \u003d contact.getEmail().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchSubject \u003d contact.getSubject().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                boolean matchPhoneNumber \u003d contact.getPhoneNumber().toLowerCase().contains(keyword);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                if (matchName || matchEmail || matchSubject || matchPhoneNumber) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    filteredContacts.add(contact.toString());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return filteredContacts;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Validates if the parameters are swapped."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs An arraylist of type string of the user input."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws SwappedParameterException If letter does not match up with the required prefix."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected void validateSwappedParameters(String[] userInputs) throws SwappedParameterException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasS \u003d userInputs[S_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(S_PREFIX);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasN \u003d userInputs[N_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(N_PREFIX);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasP \u003d userInputs[P_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(P_PREFIX);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasE \u003d userInputs[E_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(E_PREFIX);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!hasS || !hasN || !hasP || !hasE) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new SwappedParameterException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * A simple method to show contact(s) in the text box."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getContactStatement() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String contactStatement \u003d getContactListSize() \u003c\u003d 1 ? \" contact\" : \" contacts\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getContactListSize() + contactStatement + \" in your list.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 109,
      "AndreWongZH": 99,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected Calendar start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    protected Calendar end;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public Event(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public Event(String description, Calendar start, Calendar end, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Calendar getStart() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public Calendar getEnd() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (obj \u003d\u003d null || obj.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Event otherEvent \u003d (Event) obj;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return this.description.equals(otherEvent.description)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.isDone \u003d\u003d otherEvent.isDone();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int compareTo(Event otherEvent) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (this.getStart().before(otherEvent.start)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 12,
      "untitle4": 5,
      "AndreWongZH": 5,
      "durianpancakes": 45,
      "elizabethcwt": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventDataManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuitionManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the model class which is inherited by Class, Test, CCA, Tuition Manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class EventDataManager extends ModelManager implements EventInteractable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int BEGIN_INDEX \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int END_INDEX \u003d 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String N_PREFIX \u003d \"n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String S_PREFIX \u003d \"s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String E_PREFIX \u003d \"e\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String L_PREFIX \u003d \"l\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int N_INDEX \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int S_INDEX \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int E_INDEX \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int L_INDEX \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Validates if the parameters are swapped."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs An arraylist of type string of the user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws SwappedParameterException If letter does not match up with the required prefix."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected void validateSwappedParameters(String[] userInputs) throws SwappedParameterException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasN \u003d userInputs[N_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(N_PREFIX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasS \u003d userInputs[S_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(S_PREFIX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasE \u003d userInputs[E_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(E_PREFIX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasL \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (this instanceof EventTuitionManager) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            hasL \u003d userInputs[L_INDEX].substring(BEGIN_INDEX, END_INDEX).contentEquals(L_PREFIX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!hasN || !hasS || !hasE || !hasL) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new SwappedParameterException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for Class, CCA, Test and Tuition Manager that the controller can call."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface EventInteractable extends Interactable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Set a particular event to be done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setDone(String[] userInputs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 16
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.InvalidDateType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCcaManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTestManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuitionManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a handler that manages the four different event managers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * This provides access to each individual event managers and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * also performs listing and searches for the entire events data set."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventManager extends ModelMain implements EventManagerInteractable {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int USER_INPUT_OFFSET \u003d 10;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_WEEK \u003d \"week\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INPUT_LENGTH_NO_PARAMS \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INPUT_LENGTH_ONE_PARAM \u003d 3;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int DATE_PARAM_INDEX \u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_NEXT_WEEK \u003d \"nextweek\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventClassManager eventClassManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventTestManager eventTestManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventCcaManager eventCcaManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static EventTuitionManager eventTuitionManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ConfigParameter configParameter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventManager(EventParameter eventParameter, ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventClassManager \u003d new EventClassManager(eventParameter.getClasses(), this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventTestManager \u003d new EventTestManager(eventParameter.getTests(), this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventCcaManager \u003d new EventCcaManager(eventParameter.getCcas(), this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        eventTuitionManager \u003d new EventTuitionManager(eventParameter.getTuitions(), this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.configParameter \u003d configParameter;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventClassManager getClassManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventClassManager;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventTestManager getTestManager() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventTestManager;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventCcaManager getCcaManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventCcaManager;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventTuitionManager getTuitionManager() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return eventTuitionManager;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Prints to user all the found events that matches with keyword provided."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput Input supplied by the user that contains the keywords."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If input supplied does not contain any keywords."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new MissingParameterException(\"keywords as\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(param, eventClassManager.getClasses(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                eventCcaManager.getCcas(), eventTestManager.getTests(), eventTuitionManager.getTuitions());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e filteredEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (filteredEvents.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_EVENTS_FOUND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        userInterface.printArray(filteredEvents);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Lists out user\u0027s events based on everything, date or week."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks if there are any extra parameters and will inform user if there is."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * The dateParam here passed into listSchedule can be null to indicate list everything."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void list(String userInput) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            // check if user entered extra parameters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003e INPUT_LENGTH_ONE_PARAM) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_INVALID_EXTRA_PARAM);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            String dateParam \u003d  separatedInputs.length \u003d\u003d INPUT_LENGTH_NO_PARAMS"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    ? null"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    : separatedInputs[DATE_PARAM_INDEX];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ListSchedule listSchedule \u003d new ListSchedule(dateParam, eventClassManager.getClasses(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    eventCcaManager.getCcas(), eventTestManager.getTests(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    eventTuitionManager.getTuitions(), configParameter);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (separatedInputs.length \u003d\u003d INPUT_LENGTH_ONE_PARAM"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    \u0026\u0026 separatedInputs[DATE_PARAM_INDEX].contentEquals(INPUT_NEXT_WEEK)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.printWeekSchedule(this, ListWeekCommand.NEXT_WEEK);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else if (separatedInputs.length \u003d\u003d INPUT_LENGTH_ONE_PARAM"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    \u0026\u0026 separatedInputs[DATE_PARAM_INDEX].contentEquals(INPUT_WEEK)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.printWeekSchedule(this, ListWeekCommand.CURRENT_WEEK);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                printedEvents \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                userInterface.printArray(printedEvents);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(String.format(Messages.MESSAGE_EMPTY_SCHEDULE_LIST, e.getMessage()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_LIST_INVALID_DATE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"valid datetime not inputted\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_LIST_INVALID_DATE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cArrayList\u003cEvent\u003e\u003e getCurrentWeekEventMasterList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e eventMasterList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cCalendar\u003e daysOfWeek \u003d dateTimeParser.getCurrentDaysOfWeek();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result.add(getDayEventList(eventMasterList, daysOfWeek.get(i)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cArrayList\u003cEvent\u003e\u003e getNextWeekEventMasterList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e eventMasterList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cCalendar\u003e daysOfWeek \u003d dateTimeParser.getNextDaysOfWeek();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result.add(getDayEventList(eventMasterList, daysOfWeek.get(i)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Adds the relevant events whose date correspond to the date inputted in the masterList."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param masterList ArrayList containing all the events"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param date Date inputted to filter out the corresponding events"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return result ArrayList contain the relevant events for that date"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private ArrayList\u003cEvent\u003e getDayEventList(ArrayList\u003cEvent\u003e masterList, Calendar date) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert masterList.size() \u003e\u003d 0;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (Event event : masterList) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar startCalendar \u003d event.getStart();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (dateTimeParser.isDateEqual(date, startCalendar)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                result.add(event);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Adds all the ccas, classes, tests and tuitions into one Master ArrayList."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return masterList ArrayList containing all the events"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventMasterList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"getting all ccas, classes, tests and tuitions\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d eventCcaManager.getCcas();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d eventTestManager.getTests();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d eventClassManager.getClasses();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d eventTuitionManager.getTuitions();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e masterList \u003d new ArrayList\u003c\u003e(ccas);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(tests);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(classes);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        masterList.addAll(tuitions);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"added all ccas, classes, tests and tuitions\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return masterList;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Checks if the input Event clashes with the master list of Events."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param event Event input from user."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of Events that clashes with the input Event."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e checkEventClash(Event event) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e relevantEvents \u003d getDayEventList(getEventMasterList(), event.getStart());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event e : relevantEvents) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (isTimeClash(e, event)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                results.add(e);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Prints out the right error message for the event that is invalid."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param errorCode InvalidDateType START_AFTER_END or START_EQUALS_END."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void processInvalidDateException(InvalidDateType errorCode) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (errorCode) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case START_AFTER_END:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_ERROR_START_AFTER_END);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case START_EQUALS_END:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_ERROR_EQUALS_END);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // No default cases needed here"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Check if start time given is before end time"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void checkValidTimeGiven(Event inputEvent) throws InvalidDateException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar \u003d inputEvent.getStart();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar \u003d inputEvent.getEnd();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (startCalendar.equals(endCalendar)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new InvalidDateException(InvalidDateType.START_EQUALS_END);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (startCalendar.after(endCalendar)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new InvalidDateException(InvalidDateType.START_AFTER_END);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    // Check if there are any clashes with other events"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean isTimeClash(Event referenceEvent, Event inputEvent) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startInputCalendar \u003d inputEvent.getStart();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endInputCalendar \u003d inputEvent.getEnd();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startReferenceCalendar \u003d referenceEvent.getStart();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endReferenceCalendar \u003d referenceEvent.getEnd();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (startInputCalendar.after(startReferenceCalendar)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 startInputCalendar.before(endReferenceCalendar)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (endInputCalendar.after((startReferenceCalendar))"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 endInputCalendar.before(endReferenceCalendar)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return startInputCalendar.equals(startReferenceCalendar)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                || endInputCalendar.equals(endReferenceCalendar);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Checks if the recommended time for that day exceeded."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param event Event that user is trying to add"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return true if the time did exceed, vice versa."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean didTimeExceed(Event event) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"checking if time exceeded\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e eventArrayList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        long noOfMinutes \u003d dateTimeParser.getDuration(event.getStart(),event.getEnd());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        noOfMinutes +\u003d getNoOfMinutes(event, eventArrayList);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return noOfMinutes \u003e (configParameter.getRecommendedHours() * 60);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Get the total number of productive minutes for a particular day."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param event Event that user is trying to add"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param eventArrayList Master List containing all the events"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return total number of minutes for that day"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private long getNoOfMinutes(Event event, ArrayList\u003cEvent\u003e eventArrayList) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        long noOfMinutes \u003d 0;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event value : eventArrayList) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (dateTimeParser.isDateEqual(value.getStart(),"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    event.getStart())) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                noOfMinutes +\u003d dateTimeParser.getDuration(value.getStart(),"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        value.getEnd());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return noOfMinutes;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Get the time left for each day."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param event Event that user is trying to add"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return string containing the time left for that particular day"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getTimeLeft(Event event) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"checking time left for that day\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e eventArrayList \u003d getEventMasterList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        long noOfMinutes \u003d getNoOfMinutes(event, eventArrayList);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        long noOfMinutesLeft \u003d (configParameter.getRecommendedHours() * 60) - noOfMinutes;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int hoursLeft \u003d Math.toIntExact(noOfMinutesLeft / 60);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int actualNoOfMinutesLeft \u003d Math.toIntExact(noOfMinutesLeft - (hoursLeft * 60));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return hoursLeft + \"hr \" + actualNoOfMinutesLeft + \"mins\";"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 60,
      "AndreWongZH": 131,
      "durianpancakes": 153
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventManagerInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for EventManager that the controller can call."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface EventManagerInteractable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * List all events in EventManager."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list(String userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Find a list of events that matches with the keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If keyword is missing from the command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 24
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/EventParameter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the data that is returned when EventStorageManager loads data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class EventParameter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventParameter() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public EventParameter(ArrayList\u003cEvent\u003e ccas, ArrayList\u003cEvent\u003e tests,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                          ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcas() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTests() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 45
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/FindSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents a process dedicated to filter out events based on given keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class FindSchedule {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cString\u003e filteredEvents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindSchedule(String userInput, ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        ArrayList\u003cEvent\u003e tests, ArrayList\u003cEvent\u003e tuitions) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert userInput.length() !\u003d 0 : \"user input should not be missing\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        filteredEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns all the events whose description matches with the provided keywords."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Merges all the event types into one single arraylist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An Arraylist of type String to be printed out."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getFilteredEvents() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Combining all arraylist into one main arraylist\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(classes);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(ccas);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(tests);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        events.addAll(tuitions);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        filterEvents(events);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return filteredEvents;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Loops through event list to checks if the event\u0027s description matches with the keywords."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Both strings are first converted to lowercase before comparison."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If description matches, add the event into the filteredEvents arraylist."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param events An ArrayList of type Event to be checked against"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private void filterEvents(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"loop through all the keywords to check if in event description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(INPUT_SPACE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            for (String keyword : separatedInputs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                if (event.getDescription().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    filteredEvents.add(event.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 74
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/ListSchedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the process of filtering events by date and getting all the required events for listing."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ListSchedule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_TUITIONS \u003d \"Tuitions: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_CLASSES \u003d \"Classes: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_TESTS \u003d \"Tests: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final String CATEGORY_CCAS \u003d \"CCAs: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Calendar inputCalendar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private long totalDuration \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ConfigParameter configParameter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ListSchedule(String userInput, ArrayList\u003cEvent\u003e classes, ArrayList\u003cEvent\u003e ccas,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        ArrayList\u003cEvent\u003e tests, ArrayList\u003cEvent\u003e tuitions, ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.ccas \u003d ccas;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tests \u003d tests;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.configParameter \u003d configParameter;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Returns an ArrayList of type string to be printed to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If user input is null then get all events to be printed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If user input is not null then convert it into a calendar object before filtering by date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An ArrayList of string to be printed out."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyListException If the array list to be returned is empty."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws ParseException If user input cannot be able to covert into calendar object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e getPrintableEvents() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"starting to convert events instance to strings\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedClasses;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedTests;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedCcas;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e printedTuitions;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        inputCalendar \u003d checkAndConvertToday();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveClasses()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting class events\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedClasses \u003d parseEventWithNumberPad(classes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedClasses, printedEvents, CATEGORY_CLASSES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveCcas()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting CCA events\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedCcas \u003d parseEventWithNumberPad(ccas);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedCcas, printedEvents, CATEGORY_CCAS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTests()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting test events\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedTests \u003d parseEventWithNumberPad(tests);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedTests, printedEvents, CATEGORY_TESTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (haveTuitions()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.INFO, \"converting tuition events\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedTuitions \u003d parseEventWithNumberPad(tuitions);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            addToMainList(printedTuitions, printedEvents, CATEGORY_TUITIONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (hasNoSchedule() || printedEvents.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"schedule is empty\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (userInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                throw new EmptyListException(\"empty\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyListException(\"not found\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (inputCalendar !\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            long noOfMinutesLeft \u003d (configParameter.getRecommendedHours() * 60) - totalDuration;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            int hoursLeft \u003d Math.toIntExact(noOfMinutesLeft / 60);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            int minsLeft \u003d Math.toIntExact(noOfMinutesLeft - (hoursLeft * 60));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            printedEvents.add(\"Time left for this day: \" + hoursLeft + \"hr \" + minsLeft + \"mins\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveClasses() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return classes.size() !\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveCcas() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return ccas.size() !\u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTests() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tests.size() !\u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean haveTuitions() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return tuitions.size() !\u003d 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private boolean hasNoSchedule() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (!haveClasses() \u0026\u0026 !haveCcas() \u0026\u0026 !haveTests() \u0026\u0026 !haveTuitions());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * If the user input contains today/week, get the date for today."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Else if user input a date, convert the string date to calendar form"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return resultCalender Calendar containing the resulting output"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private Calendar checkAndConvertToday() throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Calendar resultCalendar \u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (userInput !\u003d null \u0026\u0026 (userInput.contentEquals(\"today\") || userInput.contentEquals(\"week\"))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            resultCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else if (userInput !\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            resultCalendar \u003d dateTimeParser.convertStringToCalendarByDate(userInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return resultCalendar;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    //@@author Aliciaho"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Converts event instances into strings representation padded with numbers."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * PrintedEvents cannot be null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * EventArr cannot be empty or null."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param eventArr Array list of event instances to be converted."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return printedEvents Array list containing the relevant events in correct output format"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private ArrayList\u003cString\u003e parseEventWithNumberPad(ArrayList\u003cEvent\u003e eventArr) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventArr !\u003d null;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert eventArr.size() !\u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cString\u003e printedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        for (int i \u003d 0; i \u003c eventArr.size(); i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar listDate \u003d eventArr.get(i).getStart();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (userInput \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printedEvents.add(i + 1 + \". \" + eventArr.get(i));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (dateTimeParser.isDateEqual(listDate, inputCalendar)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                totalDuration +\u003d dateTimeParser.getDuration(listDate, eventArr.get(i).getEnd());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                printedEvents.add(i + 1 + \". \" + eventArr.get(i));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return printedEvents;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void addToMainList(ArrayList\u003cString\u003e subEvents, ArrayList\u003cString\u003e printedEvents, String categoryName) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (subEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printedEvents.add(categoryName);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            printedEvents.addAll(subEvents);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 54,
      "AndreWongZH": 120
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/ListWeekCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public enum ListWeekCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    CURRENT_WEEK, NEXT_WEEK"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCca.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * A class for event cca."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class EventCca extends Event {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final String CCA_ICON \u003d \"[CCA]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public EventCca(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public EventCca(String description, boolean isDone, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return CCA_ICON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        result \u003d CCA_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        EventCca otherEventCca \u003d (EventCca) obj;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventCca.getStart())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventCca.getEnd());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "untitle4": 40,
      "AndreWongZH": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/cca/EventCcaManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * A manager of cca that executes all the commands related to cca."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class EventCcaManager extends EventDataManager {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public EventCcaManager(ArrayList\u003cEvent\u003e inputList, EventManager eventManager) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ccas \u003d inputList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cEvent\u003e getCcas() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return ccas;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getCcaListSize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assert ccas !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return ccas.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Add a cca from the user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Convert the day-time format to system-recognized."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws MissingParameterException if symbols of params are missing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws EmptyParameterException if no parameters are provided."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            SwappedParameterException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a cca\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] ccaDetails \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        validateSwappedParameters(ccaDetails);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaDescription \u003d ccaDetails[1].substring(1).trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStartDate \u003d ccaDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaEndDate \u003d ccaDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (ccaDescription.equals(\"\") || ccaStartDate.equals(\"\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                || ccaEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(ccaStartDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(ccaEndDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            EventCca cca \u003d new EventCca(ccaDescription, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            eventManager.checkValidTimeGiven(cca);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(cca);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add cca"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d 0 \u0026\u0026 !eventManager.didTimeExceed(cca)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                ccas.add(cca);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"added cca to ArrayList\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_CCA_ADD_SUCCESS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        ccas.get(getCcaListSize() - 1).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                getCcaStatement(cca);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"sorted CCA ArrayList\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else if (clashedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"The cca you were trying to add\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        cca.toString(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_PROMPT_CHECK_START_END_INPUTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else if (eventManager.didTimeExceed(cca)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_RECOMMENDED_TIME_EXCEEDED + \" CCA is not added!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (DateTimeParseException | ParseException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Deletes a cca with the input index in the event list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of bound of event list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    ccas.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            Event eventCca \u003d ccas.get(ccaIndex - 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ccas.remove(ccaIndex - 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            getCcaStatement(eventCca);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"absence of class index for deletion\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CCA_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void setDone(String[] userInputs) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int ccaIndex;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting cca as done\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            ccaIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CCA_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if ((ccaIndex \u003c\u003d 0) || (ccaIndex \u003e getCcaListSize())) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ccas.get(ccaIndex - 1).setDone();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"set cca as done from Arraylist\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CCA_DONE_SUCCESS,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                ccas.get(ccaIndex - 1).toString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getCcaStatement(Event event) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String ccaStatement \u003d getCcaListSize() \u003c\u003d 1 ? \" cca\" : \" ccas\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getCcaListSize() + ccaStatement + \" in the list.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TIME_LEFT_HEADER + eventManager.getTimeLeft(event));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        Collections.sort(ccas);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "untitle4": 169,
      "AndreWongZH": 7,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClass class\u003c/h2\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains constructors, getters, toString and equals methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClass#toString()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClass#equals(Object)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class EventClass extends Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static final String CLASS_ICON \u003d \"[CLASS]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClass(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClass(String description, boolean isDone, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return CLASS_ICON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        result \u003d CLASS_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        EventClass otherEventClass \u003d (EventClass) obj;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventClass.getStart())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventClass.getEnd());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 3,
      "elizabethcwt": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/classlesson/EventClassManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003ch2\u003eClassManager class\u003c/h2\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Stores user\u0027s classes in an ArrayList of Event class, named classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * Contains methods which allow:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAttaining class list size\u003c/li\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eAdding new classes into ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *     \u003cli\u003eDeleting classes from ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#getClassListSize()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#add(String)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " * @see EventClassManager#delete(String[])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class EventClassManager extends EventDataManager {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Initialising Logger with name \"Class\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public EventClassManager(ArrayList\u003cEvent\u003e classes, EventManager eventManager) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.classes \u003d classes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cEvent\u003e getClasses() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassListSize()\u003c/h2\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Attains the size of the user\u0027s classes ArrayList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @return int - Classes ArrayList size"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public int getClassListSize() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assertion to test assumption that ArrayList is not null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert classes !\u003d null : \"classes ArrayList should not be null\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return classes.size();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003eaddClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Adds new class to classes ArrayList."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInput To take in the String consisting of the class name, start date-time and end date-time."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @throws MissingParameterException if user input does not meet the requirements."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            SwappedParameterException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a class\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checks if user input contains the 3 required parameters (/n, /s and /e)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\")) || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Splitting /n, /s and /e info. via a String array called classDetails"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        final String[] classDetails \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        validateSwappedParameters(classDetails);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"splitting the user input into class description, start date-time and end \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"date-time\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classDescription \u003d classDetails[1].substring(1).trim().replaceAll(\"\\\\s+\", \" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStartDate \u003d classDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classEndDate \u003d classDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if any of the 3 required parameters are empty"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (classDescription.equals(\"\") || classStartDate.equals(\"\") || classEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time is\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(classStartDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(classEndDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            EventClass eventClass \u003d new EventClass(classDescription, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            eventManager.checkValidTimeGiven(eventClass);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(eventClass);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add class"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d 0 \u0026\u0026 !eventManager.didTimeExceed(eventClass)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                classes.add(eventClass);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                logger.log(Level.INFO, \"added class to ArrayList\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_CLASS_ADD_SUCCESS,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        classes.get(getClassListSize() - 1).toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                getClassStatement(eventClass);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                logger.log(Level.INFO, \"sorted classes ArrayList\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else if (clashedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(\"The class you were trying to add\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        eventClass.toString(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_PROMPT_CHECK_START_END_INPUTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else if (eventManager.didTimeExceed(eventClass)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_RECOMMENDED_TIME_EXCEEDED + \" Class is not added!\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (DateTimeParseException | ParseException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003edeleteClass()\u003c/h2\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Deletes a class from the classes ArrayList."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInputs To take in the class index of the classes to be deleted."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            int classIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.get(classIndex - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    classes.get(classIndex - 1).toString());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            Event eventClass \u003d classes.get(classIndex - 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classes.remove(classIndex - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.INFO, \"deletion of class from ArrayList\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            getClassStatement(eventClass);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"absence of class index for deletion\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_CLASS_INDEX);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"invalid class index entered for deletion\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"non-integer class index entered for deletion\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003egetClassStatement()\u003c/h2\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Prints statement to update the user once class has been added or deleted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void getClassStatement(Event event) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String classStatement \u003d getClassListSize() \u003d\u003d 1 ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getClassListSize() + classStatement + \" in the list.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TIME_LEFT_HEADER + eventManager.getTimeLeft(event));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * \u003ch2\u003esetClassDone()\u003c/h2\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * Sets class as done."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @param userInputs To take in the class index of the class to be set as done."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @throws IndexOutOfBoundsException when user input is an invalid class index integer."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     * @Deprecated This method should not be used, as the done feature has been removed from our application."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int classNumber;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting class as done\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            classNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if ((classNumber \u003c\u003d 0) || (classNumber \u003e getClassListSize())) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        final Event eventClass \u003d classes.get(classNumber - 1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        classes.get(classNumber - 1).setDone();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_CLASS_DONE_SUCCESS,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \"  \" + classes.get(classNumber - 1));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        getClassStatement(eventClass);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        Collections.sort(classes);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 7,
      "durianpancakes": 5,
      "elizabethcwt": 227
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTest.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "//@@author Aliciaho"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003ch2\u003eClass EventTest\u003c/h2\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * Contains constructors, getters, toString and equals methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTest#toString()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTest#equals(Object)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTest extends Event {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public static final String TEST_ICON \u003d \"[TEST]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTest(String description, boolean isDone, Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return TEST_ICON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Convert event to readable format for user in form of icon + description + converted date time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return converted string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        result \u003d TEST_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventTest otherEventTest \u003d (EventTest) obj;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTest.getStart())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTest.getEnd());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 52,
      "AndreWongZH": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/test/EventTestManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "//@@author Aliciaho"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003ch2\u003eTestManager test\u003c/h2\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * Stores user\u0027s tests in an ArrayList of Event Test, named tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * Contains methods which allow:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eAttaining test list size\u003c/li\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eAdding new tests into ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eDeleting tests from ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *     \u003cli\u003eSetting tests as {@code DONE}\u003c/li\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#getTestListSize()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#add(String)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#delete(String[])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " * @see EventTestManager#setDone(String[])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class EventTestManager extends EventDataManager {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public EventTestManager(ArrayList\u003cEvent\u003e inputList, EventManager eventManager) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        tests \u003d inputList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTests() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return tests;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003egetTestListSize()\u003c/h2\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Attains the size of the user\u0027s tests ArrayList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @return int - tests ArrayList size"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public int getTestListSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assert tests !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return tests.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003eaddTest()\u003c/h2\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Adds new test to tests ArrayList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInput To take in the String consisting of the test name, start date-time and end date-time."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception MissingParameterException exception thrown when parameter not entered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception EmptyParameterException exception thrown when description is empty"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void add(String userInput) throws EmptyParameterException, MissingParameterException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            SwappedParameterException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising adding of a test\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((!userInput.contains(\"/n\")) || (!userInput.contains(\"/s\"))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || (!userInput.contains(\"/e\"))) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no param is entered\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027 and \u0027/e\u0027\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInput.replaceAll(\"\\\\s+\",\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final String[] testDetails \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        validateSwappedParameters(testDetails);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"splitting user input into description, start date and end date\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testDescription \u003d testDetails[1].substring(1).trim().replaceAll(\"\\\\s+\",\" \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testStartDate \u003d testDetails[2].substring(1).trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String testEndDate \u003d testDetails[3].substring(1).trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if (testDescription.equals(\"\") || testStartDate.equals(\"\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                || testEndDate.equals(\"\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"description/start date/end date is empty\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(testStartDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(testEndDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            EventTest eventTest \u003d new EventTest(testDescription, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventManager.checkValidTimeGiven(eventTest);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(eventTest);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d 0 \u0026\u0026 !eventManager.didTimeExceed(eventTest)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                tests.add(eventTest);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                logger.log(Level.INFO, \"added test to ArrayList\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_TEST_ADD_SUCCESS,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                        tests.get(getTestListSize() - 1).toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                getTaskStatement(eventTest);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                logger.log(Level.INFO, \"sorted Test ArrayList\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (clashedEvents.size() \u003e 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(\"The test you were trying to add\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                        eventTest.toString(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_PROMPT_CHECK_START_END_INPUTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            } else if (eventManager.didTimeExceed(eventTest)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_RECOMMENDED_TIME_EXCEEDED + \" Test is not added!\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (DateTimeParseException | ParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"invalid date time inputted\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003edeleteTest()\u003c/h2\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Deletes a test from the tests ArrayList."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInputs To take in the test index of the test to be deleted."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception IndexOutOfBoundsException exception thrown for invalid index"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception NumberFormatException exception thrown for wrong number format"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception ArrayIndexOutOfBoundsException exception thrown for empty description"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising deleting of a test\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                    tests.get(testNumber - 1).toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            Event eventTest \u003d tests.get(testNumber - 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            tests.remove(testNumber - 1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.INFO, \"deleted test from ArrayList\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            getTaskStatement(eventTest);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no number was given\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong index inputted\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_TEST_INDEX);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003egetTaskStatement()\u003c/h2\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Prints statement to update the user once test has been added or deleted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void getTaskStatement(Event event) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((getTestListSize() - 1 \u003d\u003d 0) || (getTestListSize() \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" test in the list.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(\"Now you have \" + getTestListSize() + \" tests in the list.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TIME_LEFT_HEADER + eventManager.getTimeLeft(event));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * \u003ch2\u003esetTestDone()\u003c/h2\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * Sets test as done."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @param userInputs To take in the test index of the test to be set as done."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception IndexOutOfBoundsException when user input is an invalid test index integer."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception NumberFormatException exception thrown for wrong number format"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     * @exception ArrayIndexOutOfBoundsException exception thrown for empty description"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int testNumber;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"initialising setting test as done\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            testNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"wrong number format entered\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"no number was given\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TEST_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        if ((testNumber \u003c\u003d 0) || (testNumber \u003e getTestListSize())) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        final Event eventTest \u003d tests.get(testNumber - 1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        tests.get(testNumber - 1).setDone();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        logger.log(Level.INFO, \"set test as done from ArrayList\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TEST_DONE_SUCCESS,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                \"  \" + tests.get(testNumber - 1));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        getTaskStatement(eventTest);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        Collections.sort(tests);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 225,
      "untitle4": 1,
      "AndreWongZH": 7,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuition.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Class EventTuition."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Contains constructors, getters, toString and equals methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventTuition extends Event {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String TUITION_ICON \u003d \"[TUITION]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a EventTuition with a default NOT DONE status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing description of the EventTuition."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param start Calendar containing the start time of the EventTuition."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param end Calendar containing the end time of the EventTuition."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param location String containing the location of the EventTuition."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventTuition(String description, Calendar start, Calendar end, String location) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, start, end);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a EventTuition with a given NOT DONE/DONE status."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param description String containing description of the EventTuition."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param isDone boolean containing the done status of the EventTuition."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param start Calendar containing the start time of the EventTuition."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param end Calendar containing the end time of the EventTuition."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param location String containing the location of the EventTuition."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventTuition(String description, boolean isDone, Calendar start, Calendar end, String location) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(description, start, end, isDone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIcon() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return TUITION_ICON;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String result;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        result \u003d TUITION_ICON + \" \" + super.toString() + \" from \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + dateTimeParser.obtainFormattedDateTimeString(this.getStart())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \" to \" + dateTimeParser.obtainFormattedDateTimeString(this.getEnd())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \" at \" + this.location;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuition otherEventTuition \u003d (EventTuition) obj;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return super.equals(obj)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.getStart().equals(otherEventTuition.getStart())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.getEnd().equals(otherEventTuition.getEnd())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 this.location.equals(otherEventTuition.getLocation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 3,
      "durianpancakes": 67
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/event/tuition/EventTuitionManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.InvalidDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Manager class to manage EventTuition."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Contain methods which allow:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * \u003cul\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " *     \u003cli\u003eObtaining EventTuition list size\u003c/li\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " *     \u003cli\u003eAdding new EventTuition into ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " *     \u003cli\u003eDeleting EventTuition from ArrayList\u003c/li\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * \u003c/ul\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventTuitionManager extends EventDataManager {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int NO_EVENTS \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int ONE_EVENT \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int DELETE_INDEX \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs an EventTuitionManager."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param tuitions Contains a list of Event that are classified as EventTuition."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param eventManager EventManager instance."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventTuitionManager(ArrayList\u003cEvent\u003e tuitions, EventManager eventManager) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.tuitions \u003d tuitions;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtain the EventTuition list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return the list of EventTuition."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitions() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtain the number of tuition in the list of EventTuition."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return the number of EventTuition in the list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public int getTuitionListSize() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Method to add an EventTuition into the list of EventTuition."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws MissingParameterException when any of the following prefixes are missing in the userInput:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *     \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws EmptyParameterException when any of the following parameters are empty: \u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027, \u0027/l\u0027."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void add(String userInput) throws MissingParameterException, EmptyParameterException,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            SwappedParameterException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initializing adding of a tuition\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String descriptionPrefix \u003d \"/n\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String startPrefix \u003d \"/s\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String endPrefix \u003d \"/e\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String locationPrefix \u003d \"/l\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((!userInput.contains(descriptionPrefix)) || (!userInput.contains(startPrefix))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                || (!userInput.contains(endPrefix)) || (!userInput.contains(locationPrefix))) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"either class description, start date-time or end date-time parameter is\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + \" missing\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new MissingParameterException(\"\u0027/n\u0027, \u0027/s\u0027, \u0027/e\u0027 and \u0027/l\u0027\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        validateSwappedParameters(userInput.split(\"/\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfDescriptionPrefix \u003d userInput.indexOf(descriptionPrefix);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfStartPrefix \u003d userInput.indexOf(startPrefix);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfEndPrefix \u003d userInput.indexOf(endPrefix);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final int indexOfLocationPrefix \u003d userInput.indexOf(locationPrefix);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description \u003d userInput.substring(indexOfDescriptionPrefix, indexOfStartPrefix)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(descriptionPrefix, \"\").trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d userInput.substring(indexOfStartPrefix, indexOfEndPrefix)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(startPrefix, \"\").trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d userInput.substring(indexOfEndPrefix, indexOfLocationPrefix)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(endPrefix, \"\").trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d userInput.substring(indexOfLocationPrefix)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                .replace(locationPrefix, \"\").trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isEmptyString(description) || isEmptyString(start) || isEmptyString(end) || isEmptyString(location)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventTuition eventTuition \u003d new EventTuition(description, startCalendar,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    endCalendar, location);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventManager.checkValidTimeGiven(eventTuition);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Checking if there are any events that clashes"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            ArrayList\u003cEvent\u003e clashedEvents \u003d eventManager.checkEventClash(eventTuition);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            //If no events clash and the recommended time did not exceed, add tuition"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (clashedEvents.size() \u003d\u003d NO_EVENTS \u0026\u0026 !eventManager.didTimeExceed(eventTuition)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tuitions.add(eventTuition);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Tuition added successfully\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_TUITION_ADD_SUCCESS,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        eventTuition.toString(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        getTuitionStatement(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        \"Time left for this day: \" + eventManager.getTimeLeft(eventTuition));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                sortList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"sorted Tuition ArrayList\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            //If events clashed, show the corresponding error message"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (clashedEvents.size() \u003e NO_EVENTS) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(\"The tuition you were trying to add\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        eventTuition.toString(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                        \"clashes with the following events in your list:\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                for (Event clashedEvent : clashedEvents) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    userInterface.showToUser(clashedEvent.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_PROMPT_CHECK_START_END_INPUTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            //If the recommended time exceeded, show the corresponding error message"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (eventManager.didTimeExceed(eventTuition)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_RECOMMENDED_TIME_EXCEEDED + \" Tuition is not added!\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (DateTimeParseException | ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (InvalidDateException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventManager.processInvalidDateException(e.getErrorType());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Method to delete an EventTuition from the list of EventTuition based on the index given by the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void delete(String[] userInputs) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Tries to convert classIndex user input into an integer"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int tuitionIndex \u003d Integer.parseInt(userInputs[DELETE_INDEX]);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Just to test if class index is valid - for exception use only"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitions.get(tuitionIndex - INDEX_OFFSET);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_SUCCESS,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    tuitions.get(tuitionIndex - INDEX_OFFSET).toString());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Deletes class from classes ArrayList"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Event eventTuition \u003d tuitions.get(tuitionIndex - INDEX_OFFSET);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitions.remove(tuitionIndex - INDEX_OFFSET);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Deletion of tuition class from ArrayList\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(getTuitionStatement(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    Messages.MESSAGE_TIME_LEFT_HEADER + eventManager.getTimeLeft(eventTuition));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_TUITION_INDEX);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Method to set an EventTuition to be DONE."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws IndexOutOfBoundsException when user gives an index that is smaller than or equals to 0, or"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *     when index is greater than the number of EventTuition in the list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void setDone(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int tuitionNumber;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Initialising setting tuition as done\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Trying to convert user\u0027s input into an integer"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            tuitionNumber \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"Wrong number format entered\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_ERROR_NO_NUMBER_GIVEN);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Checking if user\u0027s input is a valid class index integer"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if ((tuitionNumber \u003c\u003d 0) || (tuitionNumber \u003e getTuitionListSize())) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.WARNING, \"index entered is out of bounds\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Sets class as done"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions.get(tuitionNumber - INDEX_OFFSET).setDone();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"set class as done from ArrayList\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_TUITION_DONE_SUCCESS,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"  \" + tuitions.get(tuitionNumber - INDEX_OFFSET),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                getTuitionStatement());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String getTuitionStatement() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String tuitionStatement \u003d getTuitionListSize() \u003d\u003d ONE_EVENT ? \" class\" : \" classes\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"Now you have \" + getTuitionListSize() + tuitionStatement + \" in the list\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Helper function to check if a string is empty."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param string String to be checked."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return boolean, true if empty, false if not empty."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean isEmptyString(String string) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return string.equals(\"\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Sorts the list of EventTuition based on the start time of the Event."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void sortList() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Collections.sort(tuitions);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 3,
      "AndreWongZH": 7,
      "durianpancakes": 250
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/FindQuiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * Provide a function to find quiz with certain keyword(s) input by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class FindQuiz {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e quizzes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String userInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final ArrayList\u003cString\u003e filteredQuizzes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public FindQuiz(String userInput, ArrayList\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assert userInput.length() !\u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizzes \u003d quizzes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInput \u003d userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        filteredQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cString\u003e filterQuizzes() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"loop through all the keywords to check if in quiz description\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (String keyword: separatedInputs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                if (quizzes.get(i).getQuestion().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    filteredQuizzes.add(\"Question \" + (i + 1) + \":\\n\" + quizzes.get(i).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return filteredQuizzes;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 42
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/Quiz.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * A class for quiz."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class Quiz {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String option4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final int answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final String explanation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private LocalDate lastAccessed;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                int answer, String explanation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.explanation \u003d explanation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        lastAccessed \u003d LocalDate.now();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public Quiz(String question, String option1, String option2, String option3, String option4,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                int answer, String explanation, LocalDate lastAccessed) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option1 \u003d option1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option2 \u003d option2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option3 \u003d option3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.option4 \u003d option4;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.explanation \u003d explanation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.lastAccessed \u003d lastAccessed;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getAnswer() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String getExplanation() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return explanation;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public LocalDate getLastAccessed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return lastAccessed;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"\\n\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return question + \"\\n\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    + \"Explanation: \" + explanation + \"\\n\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String printQuizQuestion() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return question + \"\\n\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"(4) \" + option4 + \"\\n\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public String printPostQuizQuestion(int l, String correctnessLogo) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (explanation.equals(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return question + correctnessLogo + \"\\n\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Your answer: (\" + l + \")\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Correct answer: (\" + answer + \")\\n\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            return question + correctnessLogo + \"\\n\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(1) \" + option1 + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(2) \" + option2 + \"\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(3) \" + option3 + \"\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"(4) \" + option4 + \"\\n\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Your answer: (\" + l + \")\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Correct answer: (\" + answer + \")\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \"Explanation: \" + explanation + \"\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Updates the quiz last accessed date to the current date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void updateLastAccessed() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        lastAccessed \u003d LocalDate.now();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Converts quiz instance into storage readable string form."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A string representation of the quiz."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public String convertToData() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return question + \"|\" + option1 + \"|\" + option2 + \"|\" + option3 + \"|\" + option4"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                + \"|\" + answer + \"|\" + explanation + \"|\" + lastAccessed;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 72,
      "AndreWongZH": 22,
      "elizabethcwt": 31
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/QuizInteractable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Interactable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Represents the public api methods for QuizManager that the controller can call."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public interface QuizInteractable extends Interactable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * List all quizzes in QuizManager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void list();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Find a list of quiz that matches with the keyword."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws MissingParameterException If keyword is missing from the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void find(String userInput) throws MissingParameterException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/QuizManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class QuizManager extends ModelManager implements QuizInteractable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int BEGIN_INDEX \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int END_INDEX \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final int EMPTY_SIZE \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final int USER_INPUT_OFFSET \u003d 9;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_QUESTION \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_OP1 \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_OP2 \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_OP3 \u003d 4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_OP4 \u003d 5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_ANS \u003d 6;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_EXP \u003d 7;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int OFFSET_QUESTION \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int OFFSET_OPTION \u003d 2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int OFFSET_ANS \u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int OFFSET_EXP \u003d 3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int ANS_MIN \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int ANS_MAX \u003d 4;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAX_INPUT_LENGTH_NO_EXP \u003d 7;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int MAX_INPUT_LENGTH_WITH_EXP \u003d 8;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String QUESTION_PREFIX \u003d \" /q \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String ANSWER_PREFIX \u003d \" /a \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String OPTION_ONE_PREFIX \u003d \" /o1 \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String OPTION_TWO_PREFIX \u003d \" /o2 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String OPTION_THREE_PREFIX \u003d \" /o3 \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String OPTION_FOUR_PREFIX \u003d \" /o4 \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String EXPLANATION_PREFIX \u003d \" /exp \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int END_DOUBLE_INDEX \u003d 2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int END_TRIPLE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int SLASH_INDEX \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int OFFSET_1 \u003d 3;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int OFFSET_2 \u003d 4;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int OFFSET_3 \u003d 5;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static int QUIZ_ATTEMPTS \u003d 0;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e quizzes;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cQuiz\u003e lastIncorrectQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cInteger\u003e lastIncorrectAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static int noOfQues;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public static String correctnessLogo;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static ArrayList\u003cInteger\u003e quizIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    UserAnswerManager userAnswerManager \u003d new UserAnswerManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public QuizManager(ArrayList\u003cQuiz\u003e quizzes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.quizzes \u003d quizzes;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e getQuizList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public int getQuizListSize() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert quizzes !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return quizzes.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public void checkQuizSizeValidity(String[] separatedInputs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            noOfQues \u003d Integer.parseInt(separatedInputs[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert noOfQues !\u003d 0 : \"noOfQues should not be 0\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (getQuizListSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user attempts to take a quiz, but the quiz list is empty"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_EMPTY_QUIZ_LIST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // If user attempts to take a quiz, and the quiz list has at least 1 quiz question"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                takeQuiz(separatedInputs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // To check the validity of user input before taking a quiz."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_HELP_COMMAND);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void takeQuiz(String[] separatedInputs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (!((noOfQues \u003e 0) \u0026\u0026 (noOfQues \u003c\u003d getQuizListSize()))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // If user inputs an invalid number of questions to be attempted (NOT within range of 1 to quiz size)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            handleInvalidNumOfQuestions();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // If user inputs a valid number of quiz questions (within range of 1 to quiz size)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            handleValidNumOfQuestions();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            QUIZ_ATTEMPTS++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void handleValidNumOfQuestions() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assert that noOfQues is within a valid range"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert ((noOfQues \u003e 0) \u0026\u0026 (noOfQues \u003c\u003d getQuizListSize())) : \"noOfQues should be of a valid value, but\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"it is invalid\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        initialisingShufflingOfQuestions();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int questionCounter \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assert that questionCounter is less than noOfQues"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert (questionCounter \u003c noOfQues) : \"questionCounter should not be more than noOfQues\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        while (questionCounter \u003c noOfQues) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            questionCounter \u003d testForValidInput(questionCounter);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Initialising counter for correctly answered questions"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int correctCounter \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Clear arraylist to store incorrect quizzes"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        lastIncorrectQuizzes.clear();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        lastIncorrectAnswers.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Compare and note if students\u0027 answers are correct"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        correctCounter \u003d storeCorrectnessOfQuizAnswer(correctCounter);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        for (int l \u003d 0; l \u003c noOfQues; l++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assigning the correctness logo to be printed with questions post-quiz"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assignCorrectnessLogo(l);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Print out all quiz questions, user\u0027s answers, correctness, correct answers and explanations"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(\"Question \" + (l + INDEX_OFFSET) + \": \","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    quizzes.get(quizIndexes.get(l)).printPostQuizQuestion(userAnswerManager"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                            .getUserAnswers().get(l), correctnessLogo));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Print out quiz score"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.print_quiz_score(correctCounter, noOfQues));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Empty userAnswers ArrayList and correctness ArrayList"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userAnswerManager.getUserAnswers().clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userAnswerManager.getCorrectness().clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void assignCorrectnessLogo(int l) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assert that the correctness of the user\u0027s input is true in this if loop"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert ((userAnswerManager.getCorrectness().get(l).equals(true))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                || (userAnswerManager.getCorrectness().get(l).equals(false))) : \"User\u0027s answer should either be correct\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"or false for this question\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (userAnswerManager.getCorrectness().get(l).equals(true)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            correctnessLogo \u003d \" [CORRECT ☺︎]\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            // Assert that the correctness of the user\u0027s input is false in this else loop"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            assert (userAnswerManager.getCorrectness().get(l).equals(false)) : \"User\u0027s answer should be\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    + \" incorrect for this question\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            correctnessLogo \u003d \" [WRONG ☹︎]\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private int storeCorrectnessOfQuizAnswer(int correctCounter) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        for (int k \u003d 0; k \u003c noOfQues; k++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (userAnswerManager.getUserAnswers().get(k).equals(quizzes.get(quizIndexes"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    .get(k)).getAnswer())) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userAnswerManager.getCorrectness().add(true);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                correctCounter++;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userAnswerManager.getCorrectness().add(false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                lastIncorrectQuizzes.add(quizzes.get(quizIndexes.get(k)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                lastIncorrectAnswers.add(userAnswerManager.getUserAnswers().get(k));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            quizzes.get(quizIndexes.get(k)).updateLastAccessed();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return correctCounter;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void initialisingShufflingOfQuestions() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Create a new list of the question indexes"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        quizIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            quizIndexes.add(i);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Shuffle the question indexes"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        Collections.shuffle(quizIndexes);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private void handleInvalidNumOfQuestions() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Assert that noOfQues is NOT an acceptable value"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assert (!((noOfQues \u003e 0) \u0026\u0026 (noOfQues \u003c\u003d getQuizListSize()))) : \"noOfQues should not be of a valid\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \" value, but it is\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // If user inputs an invalid number of quiz questions (not within range of 1 to quiz size)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(Messages.invalid_number_of_quiz_questions_message(quizzes.size()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    //@@author elizabethcwt"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public int testForValidInput(int questionCounter) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Print out each question"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInterface.showToUser(\"\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                \"Question \" + (questionCounter + INDEX_OFFSET) + \": \","
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                quizzes.get(quizIndexes.get(questionCounter)).printQuizQuestion());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        // Create a Scanner object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        userInput.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        if (userInput.equals(\"\")) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_MISSING_ANSWER);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            boolean b \u003d userInput.equals(\"1\") || userInput.equals(\"2\") || userInput.equals(\"3\")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                    || userInput.equals(\"4\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            if (b) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // Store user\u0027s quiz answers into ArrayList"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userAnswerManager.getUserAnswers().add(Integer.parseInt(userInput));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                questionCounter++;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                return questionCounter;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                // Assert that the user\u0027s input is NOT one of the valid options"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                assert (!b) : \"User\u0027s input should not be one of the valid options (1, 2, 3 or 4)\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_QUIZ_INVALID_ANS_PROVIDED);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return questionCounter;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Delete a quiz in the Arraylist of quizzes."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Extract the index of the quiz that the user want to delete."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInputs The input entered by the user."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws IndexOutOfBoundsException if the index is out of bounds."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void delete(String[] userInputs) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int quizIndex;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            quizIndex \u003d Integer.parseInt(userInputs[2]);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if ((quizIndex \u003c\u003d 0) || (quizIndex \u003e getQuizListSize())) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_DELETE_ERROR_NON_NUMBER);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_INDEX_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Noted. I\u0027ve removed this quiz question:\","
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                quizzes.get(quizIndex - INDEX_OFFSET).toString());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizzes.remove(quizIndex - INDEX_OFFSET);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        getQuizStatement();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Adds a quiz to the ArrayList of quizzes."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Extracts the question, options, explanations if any before adding it as a quiz."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If user command contains extra parameters, inform the user and return."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyParameterException If there are missing parameters after the prefix."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void add(String userInput) throws EmptyParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(QUESTION_PREFIX)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_QUESTION_NOT_FOUND);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(ANSWER_PREFIX)) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_ANSWER_NOT_FOUND);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!userInput.contains(OPTION_ONE_PREFIX) || !userInput.contains(OPTION_TWO_PREFIX)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                || !userInput.contains(OPTION_THREE_PREFIX) || !userInput.contains(OPTION_FOUR_PREFIX)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_OPTIONS_NOT_FOUND);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String[] separatedInputs \u003d userInput.trim().split(\"/\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        validateSwappedParameters(separatedInputs);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003e MAX_INPUT_LENGTH_NO_EXP \u0026\u0026 !userInput.contains(EXPLANATION_PREFIX)) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_EXTRA_PARAM);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003e MAX_INPUT_LENGTH_WITH_EXP) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_INVALID_EXTRA_PARAM);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            quizzes.add(parseQuizQuestion(separatedInputs));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_ADD_SUCCESSFUL);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_INVALID_ANS_PROVIDED);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //Refactored by durianpancakes"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Extracts out the question, options, answers and explanation from user input."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * If there is no explanation given, explanation will be empty string by default."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param separatedInputs An array string of user\u0027s input."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A Quiz object."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws EmptyParameterException If parameters are empty spaces."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws NumberFormatException   If answer index is not between 1 and 4."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Quiz parseQuizQuestion(String[] separatedInputs) throws EmptyParameterException, NumberFormatException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String question \u003d separatedInputs[INDEX_QUESTION].substring(OFFSET_QUESTION).trim();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option1 \u003d separatedInputs[INDEX_OP1].substring(OFFSET_OPTION).trim();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option2 \u003d separatedInputs[INDEX_OP2].substring(OFFSET_OPTION).trim();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option3 \u003d separatedInputs[INDEX_OP3].substring(OFFSET_OPTION).trim();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String option4 \u003d separatedInputs[INDEX_OP4].substring(OFFSET_OPTION).trim();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String answer \u003d separatedInputs[INDEX_ANS].substring(OFFSET_ANS).trim();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String explanation \u003d \"\";"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (separatedInputs.length \u003e INDEX_EXP) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            explanation \u003d separatedInputs[INDEX_EXP].substring(OFFSET_EXP).trim();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (question.equals(EMPTY_STRING) || option1.equals(EMPTY_STRING) || option2.equals(EMPTY_STRING)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                || option3.equals(EMPTY_STRING) || option4.equals(EMPTY_STRING) || answer.equals(EMPTY_STRING)) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.WARNING, \"question or options or answer is empty\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new EmptyParameterException();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        int answerInInt \u003d Integer.parseInt(answer);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (answerInInt \u003e ANS_MAX || answerInInt \u003c ANS_MIN) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new NumberFormatException();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new Quiz(question, option1, option2, option3, option4, answerInInt, explanation);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Validates if the parameters are swapped."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param userInputs An arraylist of type string of the user input."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws SwappedParameterException If letter does not match up with the required prefix."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected void validateSwappedParameters(String[] userInputs) throws SwappedParameterException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasQ \u003d userInputs[INDEX_QUESTION].substring(BEGIN_INDEX, END_INDEX)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                .contentEquals(QUESTION_PREFIX.substring(SLASH_INDEX, OFFSET_1));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasO1 \u003d userInputs[INDEX_OP1].substring(BEGIN_INDEX, END_DOUBLE_INDEX)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                .contentEquals(OPTION_ONE_PREFIX.substring(SLASH_INDEX,OFFSET_2));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasO2 \u003d userInputs[INDEX_OP2].substring(BEGIN_INDEX, END_DOUBLE_INDEX)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                .contentEquals(OPTION_TWO_PREFIX.substring(SLASH_INDEX,OFFSET_2));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasO3 \u003d userInputs[INDEX_OP3].substring(BEGIN_INDEX, END_DOUBLE_INDEX)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                .contentEquals(OPTION_THREE_PREFIX.substring(SLASH_INDEX, OFFSET_2));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasO4 \u003d userInputs[INDEX_OP4].substring(BEGIN_INDEX, END_DOUBLE_INDEX)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                .contentEquals(OPTION_FOUR_PREFIX.substring(SLASH_INDEX, OFFSET_2));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasA \u003d userInputs[INDEX_ANS].substring(BEGIN_INDEX, END_INDEX)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                .contentEquals(ANSWER_PREFIX.substring(SLASH_INDEX, OFFSET_1));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean hasE \u003d true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (userInputs.length \u003d\u003d MAX_INPUT_LENGTH_WITH_EXP) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            hasE \u003d userInputs[INDEX_EXP].substring(BEGIN_INDEX, END_TRIPLE_INDEX)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    .contentEquals(EXPLANATION_PREFIX.substring(SLASH_INDEX, OFFSET_3));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!hasQ || !hasO1 || !hasO2 || !hasO3 || !hasO4 || !hasA || !hasE) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new SwappedParameterException();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * To find the quiz with certain keyword(s) in the Arraylist of quizzes."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @param userInput The input entered by the user."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @throws MissingParameterException if there is no keyword(s) provided."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void find(String userInput) throws MissingParameterException {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String param \u003d userInput.substring(USER_INPUT_OFFSET).trim();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (param.length() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new MissingParameterException(\"keywords as\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        FindQuiz findQuiz \u003d new FindQuiz(param, quizzes);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e filteredQuizzes \u003d findQuiz.filterQuizzes();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (filteredQuizzes.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_QUIZZES_FOUND);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.printArray(filteredQuizzes);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Show the incorrect quizzes in the user\u0027s last attempt."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void recordedQuizzes() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (lastIncorrectQuizzes.size() \u003d\u003d 0 \u0026\u0026 QUIZ_ATTEMPTS !\u003d 0) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_FULL_MARKS);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else if (QUIZ_ATTEMPTS \u003d\u003d 0) {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_NO_QUIZ_ATTEMPTS);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_WRONG_QUESTIONS_HEADER);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c lastIncorrectQuizzes.size(); i++) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(lastIncorrectQuizzes.get(i).printQuizQuestion());"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Your answer: (\" + lastIncorrectAnswers.get(i) + \")\","
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        \"Correct answer: (\" + lastIncorrectQuizzes.get(i).getAnswer() + \")\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                if (!lastIncorrectQuizzes.get(i).getExplanation().equals(\"\")) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    userInterface.showToUser(\"Explanation: \" + lastIncorrectQuizzes.get(i).getExplanation());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * List the Arraylist of quiz."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        if (quizzes.size() \u003d\u003d EMPTY_SIZE) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_EMPTY_QUIZ_LIST);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_QUIZ_LIST_HEADER);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            for (int i \u003d 0; i \u003c quizzes.size(); i++) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                userInterface.showToUser(\"Question \" + (i + INDEX_OFFSET) + \":\","
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                        quizzes.get(i).toString());"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private void getQuizStatement() {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String quizStatement \u003d getQuizListSize() \u003d\u003d 1 ? \" quiz\" : \" quizzes\";"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        userInterface.showToUser(\"Now you have \" + getQuizListSize() + quizStatement + \" in the quiz list.\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 123,
      "AndreWongZH": 171,
      "durianpancakes": 1,
      "elizabethcwt": 188
    }
  },
  {
    "path": "src/main/java/seedu/duke/model/quiz/UserAnswerManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "//@@author elizabethcwt"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "public class UserAnswerManager {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cInteger\u003e userAnswers;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    private final ArrayList\u003cBoolean\u003e correctness;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public UserAnswerManager() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.userAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        this.correctness \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cInteger\u003e getUserAnswers() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return userAnswers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getCorrectness() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        return correctness;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "elizabethcwt": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageExceptionHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.config.ConfigStorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.contact.ContactStorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.event.EventStorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.quiz.QuizStorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.CONFIG_FILE_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.CONTACT_FILE_NAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.EVENT_FILE_NAME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.storage.StorageManager.QUIZ_FILE_NAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Class to handle StorageCorruptedException."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageExceptionHandler {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public StorageExceptionHandler() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void handleCorruptedStorage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Valid input is defined to be y or n"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean validInput \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean resetSuccessful \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(Messages.MESSAGE_FACTORY_RESET_PROMPT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_MANUAL_TROUBLESHOOT_PROMPT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        while (!validInput) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String userInput \u003d userInterface.getUserCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            switch (userInput) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            case \"y\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                resetSuccessful \u003d factoryReset();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                validInput \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            case \"n\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                validInput \u003d true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                userInterface.showToUser(Messages.MESSAGE_FACTORY_RESET_INVALID_INPUT_PROMPT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (resetSuccessful) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_FACTORY_RESET_SUCCESSFUL);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_FACTORY_RESET_FAILED_OR_CANCELLED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private boolean factoryReset() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        QuizStorageManager quizStorageManager \u003d new QuizStorageManager(QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventStorageManager eventStorageManager \u003d new EventStorageManager(EVENT_FILE_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ContactStorageManager contactStorageManager \u003d new ContactStorageManager(CONTACT_FILE_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ConfigStorageManager configStorageManager \u003d new ConfigStorageManager(CONFIG_FILE_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            quizStorageManager.saveData(new ArrayList\u003c\u003e(), QUIZ_FILE_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventStorageManager.saveData(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            contactStorageManager.saveData(new ArrayList\u003c\u003e(), CONTACT_FILE_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            configStorageManager.saveData(new ConfigParameter());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_INITIALIZATION_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 80
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Abstract StorageManager class containing the basic methods to create a data file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public abstract class StorageManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String EMPTY_FILE_NAME \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String EVENT_FILE_NAME \u003d \"/events.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String QUIZ_FILE_NAME \u003d \"/quiz.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String CONTACT_FILE_NAME \u003d \"/contact.txt\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String CONFIG_FILE_NAME \u003d \"/config.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected static String DIRECTORY_FOLDER_PATH \u003d new File(\"data\").getAbsolutePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected String fileName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public StorageManager(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert !fileName.equals(EMPTY_FILE_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructor for Test files."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param directory String containing the directory to be accessed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param fileName String containing the file to be accessed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public StorageManager(String directory, String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !directory.equals(EMPTY_FILE_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DIRECTORY_FOLDER_PATH \u003d new File(directory).getAbsolutePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert !fileName.equals(EMPTY_FILE_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Creates the \u0027data\u0027 directory if it does not exist. Creates the data file .txt if it does not exist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return boolean. true if data file is created, false if data file already exists"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws IOException if there was a problem in creating a new file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    protected boolean createDataFile() throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File file \u003d new File(DIRECTORY_FOLDER_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDirectoryCreated \u003d file.mkdir();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        file \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (isDirectoryCreated) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory not found, creating...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.INFO, \"Directory found...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return file.createNewFile();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 9,
      "durianpancakes": 54
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/config/ConfigDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigDecoder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ConfigParameter decodeConfig(String encodedConfig) throws StorageCorruptedException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String[] splitEncodedConfig \u003d encodedConfig.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String userName \u003d splitEncodedConfig[0];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int recommendedHours \u003d Integer.parseInt(splitEncodedConfig[1]);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean hasProgramRan \u003d Boolean.parseBoolean(splitEncodedConfig[2]);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (recommendedHours \u003c\u003d 0 || recommendedHours \u003e 12) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new ConfigParameter(userName, recommendedHours, hasProgramRan);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "AndreWongZH": 1,
      "durianpancakes": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/config/ConfigEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigEncoder {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String encodeConfig(ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String userName \u003d configParameter.getName();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String recommendedHours \u003d String.valueOf(configParameter.getRecommendedHours());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String hasProgramRan \u003d String.valueOf(configParameter.getHasProgramRan());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return userName + \"|\" + recommendedHours + \"|\" + hasProgramRan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "AndreWongZH": 1,
      "durianpancakes": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/config/ConfigStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class ConfigStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ConfigEncoder configEncoder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final ConfigDecoder configDecoder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ConfigStorageManager(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.configEncoder \u003d new ConfigEncoder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.configDecoder \u003d new ConfigDecoder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void saveData(ConfigParameter configParameter) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String encodedConfig \u003d configEncoder.encodeConfig(configParameter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + fileName), Collections.singleton(encodedConfig));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ConfigParameter loadData() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File eventFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Scanner sc \u003d new Scanner(eventFile);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                ConfigParameter configParameter \u003d configDecoder.decodeConfig(dataString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return configParameter;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Config Storage corrupted\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new ConfigParameter();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "AndreWongZH": 2,
      "durianpancakes": 60
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/contact/ContactListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.Contact;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Decodes the content in the contact text file and add them in an Arraylist as contacts"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * to initialize the contact list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ContactListDecoder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_SUBJECT \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_NAME \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_PHONE_NUM \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int INDEX_EMAIL \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final int NUMBER_OF_PARAMETERS_REQUIRED \u003d 4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Reads and extracts out the information from quiz storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks is any quizzes that have not been attempted since the last 2 days, notify user if so."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param encodedContactList An array list of contacts in string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An arraylist of type contact stored in the text file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cContact\u003e decodeContactList(ArrayList\u003cString\u003e encodedContactList) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        final ArrayList\u003cContact\u003e decodedContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (String encodedContact : encodedContactList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            decodedContacts.add(decodeContactFromString(encodedContact));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return decodedContacts;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Extracts the relevant info from the storage string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param encodedContact A string of input from storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A contact instance."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Contact decodeContactFromString(String encodedContact) throws StorageSeparatorException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        final String[] data \u003d encodedContact.trim().split(\"\\\\|\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (data.length !\u003d 4) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String subject \u003d data[INDEX_SUBJECT];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String name \u003d data[INDEX_NAME];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String phoneNumber \u003d data[INDEX_PHONE_NUM];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String email \u003d data[INDEX_EMAIL];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new Contact(subject, name, phoneNumber, email);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 55,
      "durianpancakes": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/contact/ContactListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.Contact;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Encodes the String form of contacts in the Arraylist and store them in a text file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ContactListEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Converts contact type into its data storage representation for all contacts."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param contactList An array list of type contact to be encoded."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An array list of string of contacts to be written to text file storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cString\u003e encodeContactList(ArrayList\u003cContact\u003e contactList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e encodedContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Contact contact: contactList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            encodedContacts.add(contact.convertToData());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return encodedContacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/contact/ContactStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.Contact;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * Helps to manage the storage of contacts into a text file and load contacts from the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " * when the program is executed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class ContactStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ContactListEncoder contactListEncoder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ContactListDecoder contactListDecoder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ContactStorageManager(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contactListEncoder \u003d new ContactListEncoder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.contactListDecoder \u003d new ContactListDecoder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Loads the content of the contact text file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An array list of type Contact."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cContact\u003e loadData() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        File contactFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                Scanner sc \u003d new Scanner(contactFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                return contactListDecoder.decodeContactList(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        } catch (StorageSeparatorException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            logger.log(Level.SEVERE, \"Contact Storage corrupted\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Saves the array list of contacts to a text file after every command."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param contactList Arraylist of type contact to be saved to txt file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param filePath Name of the txt file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws IOException If file writer fails to write to txt file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void saveData(ArrayList\u003cContact\u003e contactList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e encodedContactList \u003d contactListEncoder.encodeContactList(contactList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + filePath), encodedContactList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 7,
      "AndreWongZH": 72,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/event/EventListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Class responsible for the decoding of events read from the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListDecoder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListDecoder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Decodes an ArrayList of Strings read from the data file to an ArrayList of Events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param encodedEventList ArrayList of encoded String read from the data file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of decoded String."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageSeparatorException when any separator other than \"|\" is used."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageCorruptedException when the storage file is determined to be unreadable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e decodeEventList(ArrayList\u003cString\u003e encodedEventList) throws StorageSeparatorException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StorageCorruptedException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final ArrayList\u003cEvent\u003e decodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String encodedEvent : encodedEventList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            decodedEvents.add(decodeEventFromString(encodedEvent));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return decodedEvents;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Decode a String to an Event."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param encodedEvent String containing the encoded Event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return Event decoded from the String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageSeparatorException when any separator other than \"|\" is used."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageCorruptedException when the storage file is determined to be unreadable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private Event decodeEventFromString(String encodedEvent) throws StorageSeparatorException,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StorageCorruptedException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        final String[] data \u003d encodedEvent.trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assert data.length \u003e 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (data[0]) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventCca.CCA_ICON:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseCca(data);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventClass.CLASS_ICON:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseClass(data);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventTest.TEST_ICON:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTest(data);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case EventTuition.TUITION_ICON:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return parseTuition(data);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Parses a separated String input into an EventCca."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param data Array of Strings containing the separated parameters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return EventCca decoded from the String"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageSeparatorException when any separator other than \"|\" is used."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageCorruptedException when the storage file is determined to be unreadable."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventCca parseCca(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventCca(description, isDone, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Parses a separated String input into an EventClass."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param data Array of Strings containing the separated parameters."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return EventClass decoded from the String"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageSeparatorException when any separator other than \"|\" is used."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageCorruptedException when the storage file is determined to be unreadable."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventClass parseClass(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventClass(description, isDone, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Parses a separated String input into an EventTest."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param data Array of Strings containing the separated parameters."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return EventTest decoded from the String"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageSeparatorException when any separator other than \"|\" is used."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageCorruptedException when the storage file is determined to be unreadable."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventTest parseTest(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 3) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventTest(description, isDone, startCalendar, endCalendar);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Parses a separated String input into an EventTuition."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param data Array of Strings containing the separated parameters."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return EventTuition decoded from the String"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageSeparatorException when any separator other than \"|\" is used."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageCorruptedException when the storage file is determined to be unreadable."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventTuition parseTuition(String[] data) throws StorageSeparatorException, StorageCorruptedException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean isDone;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        isDone \u003d Boolean.parseBoolean(data[1]);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String[] eventInfo \u003d data[2].trim().split(\"\\\\|\", 4);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (eventInfo.length !\u003d 4) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageSeparatorException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        description \u003d eventInfo[0];"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d eventInfo[1];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d eventInfo[2];"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String location \u003d eventInfo[3];"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar startCalendar;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar endCalendar;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startCalendar \u003d dateTimeParser.convertStringToCalendar(start);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            endCalendar \u003d dateTimeParser.convertStringToCalendar(end);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventTuition(description, isDone, startCalendar, endCalendar, location);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "AndreWongZH": 2,
      "durianpancakes": 202
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/event/EventListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Class responsible for the encoding of Events to String for writing to the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventListEncoder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventListEncoder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Encodes an ArrayList of Events into an ArrayList of Strings."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param eventList ArrayList of Events to be encoded."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of encoded Strings to be written to data file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cString\u003e encodeEventList(ArrayList\u003cEvent\u003e eventList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : eventList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            encodedEvents.add(encodeEventToString(event));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return encodedEvents;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Encode an Event to String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param event Event to be encoded."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the encoded Event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private String encodeEventToString(Event event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String start \u003d dateTimeParser.convertCalendarToString(event.getStart());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String end \u003d dateTimeParser.convertCalendarToString(event.getEnd());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventCca eventCca \u003d (EventCca) event;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventCca.CCA_ICON + \"|\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventCca.isDone() + \"|\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventCca.getDescription() + \"|\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventTest eventTest \u003d (EventTest) event;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventTest.TEST_ICON + \"|\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventTest.isDone() + \"|\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + eventTest.getDescription() + \"|\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventTuition newEventTuition \u003d (EventTuition) event;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventTuition.TUITION_ICON + \"|\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventTuition.isDone() + \"|\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventTuition.getDescription() + \"|\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end + \"|\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventTuition.getLocation();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            EventClass newEventClass \u003d (EventClass) event;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            result \u003d EventClass.CLASS_ICON + \"|\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventClass.isDone() + \"|\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + newEventClass.getDescription() + \"|\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + start + \"|\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    + end;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 2,
      "durianpancakes": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/event/EventStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageSeparatorException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Manages the reading and writing operations of Event Storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class EventStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventListEncoder eventListEncoder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventListDecoder eventListDecoder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "  "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs an EventStorageManager with the given directory and fileName."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param directory String containing the directory to be accessed"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param fileName String containing the fileName to be created/read from."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventStorageManager(String directory, String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(directory, fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListEncoder \u003d new EventListEncoder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListDecoder \u003d new EventListDecoder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs an EventStorageManager with the given fileName."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param fileName String containing the fileName to be created/read from."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventStorageManager(String fileName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListEncoder \u003d new EventListEncoder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventListDecoder \u003d new EventListDecoder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Saves Events to the data file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param eventList ArrayList of Events to be saved."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws IOException when there is an error writing to the data file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void saveData(ArrayList\u003cEvent\u003e eventList) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e encodedEventList \u003d eventListEncoder.encodeEventList(eventList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + fileName), encodedEventList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Loads Events from the data file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return ArrayList of Events loaded from the data file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @throws StorageCorruptedException when the contents of the data file cannot be read by EventListDecoder."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventParameter loadData() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        File eventFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Scanner sc \u003d new Scanner(eventFile);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                ArrayList\u003cEvent\u003e eventList \u003d eventListDecoder.decodeEventList(data);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                return separateEventsIntoList(eventList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            logger.log(Level.SEVERE, \"Event Storage corrupted\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventParameter();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Separates the master list of events into separate Event subclasses (i.e EventCca, EventClass, EventTest,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * EventTuition)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param events ArrayList of Events containing all events read from the storage."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return EventParameter containing ArrayLists of Event subclasses."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private EventParameter separateEventsIntoList(ArrayList\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (event instanceof EventCca) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                ccas.add(event);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof EventTuition) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tuitions.add(event);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof EventClass) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                classes.add(event);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else if (event instanceof EventTest) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                tests.add(event);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return new EventParameter(ccas, tests, classes, tuitions);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "AndreWongZH": 16,
      "durianpancakes": 112
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/quiz/QuizListDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import dorkbox.notify.Notify;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * To decode the content in the quizzes text file and add them in an Arraylist as quizzes"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * to initialize the quiz list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListDecoder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public static final int NUM_OF_DAYS \u003d -2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Reads and extracts out the information from quiz storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Checks is any quizzes that have not been attempted since the last 2 days, notify user if so."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param encodedQuizList An array list of quizzes in string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return An arraylist of type quiz stored in the text file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @throws StorageCorruptedException If data parsed is not what is expected."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public ArrayList\u003cQuiz\u003e decodeQuizList(ArrayList\u003cString\u003e encodedQuizList) throws StorageCorruptedException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        final ArrayList\u003cQuiz\u003e decodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (String encodedQuiz : encodedQuizList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            decodedQuizzes.add(decodeQuizFromString(encodedQuiz));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (Quiz quiz : decodedQuizzes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            long numDays \u003d DAYS.between(LocalDate.now(), quiz.getLastAccessed());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            if (numDays \u003c\u003d NUM_OF_DAYS) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                Notify.create()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        .title(\"Plan\u0026score Notification\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        .text(\"you have outdated quizzes! Attempt them now!\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        .hideAfter(10000)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        .showInformation();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return decodedQuizzes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    //@@author untitle4"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private Quiz decodeQuizFromString(String encodedQuiz) throws StorageCorruptedException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        final String[] data \u003d encodedQuiz.trim().split(\"\\\\|\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            String question \u003d data[0];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            String option1 \u003d data[1];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            String option2 \u003d data[2];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            String option3 \u003d data[3];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            String option4 \u003d data[4];"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            int answer \u003d Integer.parseInt(data[5]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            String explanation \u003d data[6];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            LocalDate lastAccessed \u003d LocalDate.parse(data[7]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            return new Quiz(question, option1, option2, option3, option4, answer, explanation, lastAccessed);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 31,
      "AndreWongZH": 37
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/quiz/QuizListEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * To encode the String form of quizzes in the Arraylist and store them in a text file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizListEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cString\u003e encodeQuizList(ArrayList\u003cQuiz\u003e quizList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        for (Quiz quiz: quizList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            encodedQuizzes.add(quiz.convertToData());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return encodedQuizzes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 20,
      "AndreWongZH": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/quiz/QuizStorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.storage.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.common.LogManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.StorageManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.ui.UserInterface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.Quiz;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "//@@author untitle4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * Help manage the storage of quizzes into a text file and load quizzes from the file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": " * when the program is executed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class QuizStorageManager extends StorageManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final QuizListEncoder quizListEncoder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final QuizListDecoder quizListDecoder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private static final Logger logger \u003d LogManager.getLogManagerInstance().getLogger();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public QuizStorageManager(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        super(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListEncoder \u003d new QuizListEncoder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.quizListDecoder \u003d new QuizListDecoder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * Load the content of the quiz text file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     * @return An ArrayList of type quiz"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "untitle4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public ArrayList\u003cQuiz\u003e loadData() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        File quizFile \u003d new File(DIRECTORY_FOLDER_PATH + fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e data \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        logger.log(Level.INFO, \"Loading storage...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            boolean fileCreated \u003d createDataFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            if (!fileCreated) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file found, reading data file...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                Scanner sc \u003d new Scanner(quizFile);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                while (sc.hasNext()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    String dataString \u003d sc.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                    data.add(dataString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Load successful\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                return quizListDecoder.decodeQuizList(data);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                logger.log(Level.INFO, \"Data file not found, initializing data file...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            userInterface.showToUser(Messages.MESSAGE_STORAGE_READ_ERROR);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.SEVERE, \"Initialization failed\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (StorageCorruptedException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            logger.log(Level.SEVERE, \"Quiz Storage corrupted\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            throw new StorageCorruptedException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    public void saveData(ArrayList\u003cQuiz\u003e quizList, String filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cString\u003e encodedQuizList \u003d quizListEncoder.encodeQuizList(quizList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        Files.write(Path.of(DIRECTORY_FOLDER_PATH + filePath), encodedQuizList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 63,
      "AndreWongZH": 9,
      "durianpancakes": 2
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CalendarWeekRenderer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.ListWeekCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.ui.CalendarWeekRendererUtils.DATE_LABEL_SPACES_OFFSET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static seedu.duke.ui.CalendarWeekRendererUtils.DAY_LABEL_SPACES_OFFSET;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Driver class for rendering the Week View of the `list event week` command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class CalendarWeekRenderer {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final EventManager eventManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final UserInterface userInterface;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static final int DAYS_IN_WEEK \u003d 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private CalendarWeekRendererUtils utils;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a CalendarWeekRenderer instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Automatically calls renderWeekSchedule() which produces the Week View."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param eventManager EventManager instance for the usage of certain helper methods in the class."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param listWeekCommand ListWeekCommand to identify if the current or next week is to be listed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public CalendarWeekRenderer(EventManager eventManager, ListWeekCommand listWeekCommand) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventManager \u003d eventManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.userInterface \u003d UserInterface.getInstance();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        renderWeekSchedule(listWeekCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Driver method to produce the Week View."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param listWeekCommand ListWeekCommand to identify if the current or next week is to be listed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void renderWeekSchedule(ListWeekCommand listWeekCommand) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cArrayList\u003cEvent\u003e\u003e weekMasterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cCalendar\u003e daysOfWeek \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (listWeekCommand \u003d\u003d ListWeekCommand.CURRENT_WEEK) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            weekMasterList \u003d eventManager.getCurrentWeekEventMasterList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            daysOfWeek \u003d dateTimeParser.getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else if (listWeekCommand \u003d\u003d ListWeekCommand.NEXT_WEEK) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            calendar.add(Calendar.DAY_OF_MONTH, DAYS_IN_WEEK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            weekMasterList \u003d eventManager.getNextWeekEventMasterList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            daysOfWeek \u003d dateTimeParser.getDaysOfWeek(calendar);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        utils \u003d new CalendarWeekRendererUtils(weekMasterList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Sort master list before proceeding"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Collections.sort(weekMasterList.get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // 17 spaces per day"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Printing DAY headers"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // 6 spaces before each DAY_LABEL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder dayLabelString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(utils.getSpaces(DAY_LABEL_SPACES_OFFSET));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(utils.getDayLabel(i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dayLabelString.append(utils.getSpaces(DAY_LABEL_SPACES_OFFSET));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(dayLabelString.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder todayLabelString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            assert daysOfWeek !\u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            todayLabelString.append(utils.getIsToday(daysOfWeek.get(i)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(todayLabelString.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Printing DATE headers"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder dateHeaderString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(utils.getSpaces(DATE_LABEL_SPACES_OFFSET));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(utils.getDateLabel(daysOfWeek, i));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            dateHeaderString.append(utils.getSpaces(DATE_LABEL_SPACES_OFFSET));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        userInterface.showToUser(dateHeaderString.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        while (!utils.isThereNothingLeftToPrint()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // Print in order of ICON -\u003e DESCRIPTION -\u003e START-END TIMES"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            // NOTE: DOES NOT SUPPORT TUITION LOCATION YET"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder eventIconString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventIconString.append(utils.getEventIcons(weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder eventDescriptionString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventDescriptionString.append(utils.getDescriptions(weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder eventStartEndString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                eventStartEndString.append(utils.getStartEndTime(weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            StringBuilder breakTimeString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            for (int i \u003d 0; i \u003c DAYS_IN_WEEK; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Count from Monday to Sunday"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // One Event takes up 5 columns max, with one space between each column"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(utils.getBreakTimeString(weekMasterList.get(i), i));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface.showToUser(eventIconString.toString(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    eventDescriptionString.toString(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    eventStartEndString.toString(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    EMPTY_STRING,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    breakTimeString.toString(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                    EMPTY_STRING);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "durianpancakes": 134
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/CalendarWeekRendererUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Utility class containing methods to assist CalendarWeekRenderer to produce the Week View."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class CalendarWeekRendererUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final int[] eventNumberCounter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final int [] eventIndexCounters \u003d {1, 1, 1, 1, 1, 1, 1};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String TODAY_LABEL \u003d \"[TODAY]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int COLUMN_SPACES \u003d 17;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int DESCRIPTION_THRESHOLD \u003d 14;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int DAY_LABEL_SPACES_OFFSET \u003d 6;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int DATE_LABEL_SPACES_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int TODAY_LABEL_SPACES_OFFSET \u003d 5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int NO_EVENTS \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int ONE_EVENT \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int MONDAY \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int TUESDAY \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int WEDNESDAY \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int THURSDAY \u003d 3;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int FRIDAY \u003d 4;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int SATURDAY \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final int SUNDAY \u003d 6;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Constructs a CalendarWeekRendererUtils instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param weekMasterList ArrayList of ArrayList of Events containing all events in the week."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public CalendarWeekRendererUtils(ArrayList\u003cArrayList\u003cEvent\u003e\u003e weekMasterList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        eventNumberCounter \u003d new int[7];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventNumberCounter[MONDAY] \u003d weekMasterList.get(MONDAY).size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventNumberCounter[TUESDAY] \u003d weekMasterList.get(TUESDAY).size();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventNumberCounter[WEDNESDAY] \u003d weekMasterList.get(WEDNESDAY).size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventNumberCounter[THURSDAY] \u003d weekMasterList.get(THURSDAY).size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventNumberCounter[FRIDAY] \u003d weekMasterList.get(FRIDAY).size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventNumberCounter[SATURDAY] \u003d weekMasterList.get(SATURDAY).size();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.eventNumberCounter[SUNDAY] \u003d weekMasterList.get(SUNDAY).size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Reduces the count of a particular eventNumberCounter by 1."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param counterIndex int containing the counter to be reduced."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void reduceCounter(int counterIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        eventNumberCounter[counterIndex]--;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private int getCounter(int counterIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return eventNumberCounter[counterIndex];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Helper function to check if there are any Events left to be printed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return boolean, true if there is something left to print; false if there is nothing left to print."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public boolean isThereNothingLeftToPrint() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return eventNumberCounter[MONDAY] \u003d\u003d NO_EVENTS \u0026\u0026 eventNumberCounter[TUESDAY] \u003d\u003d NO_EVENTS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 eventNumberCounter[WEDNESDAY] \u003d\u003d NO_EVENTS \u0026\u0026 eventNumberCounter[THURSDAY] \u003d\u003d NO_EVENTS"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 eventNumberCounter[FRIDAY] \u003d\u003d NO_EVENTS \u0026\u0026 eventNumberCounter[SATURDAY] \u003d\u003d NO_EVENTS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \u0026\u0026 eventNumberCounter[SUNDAY] \u003d\u003d NO_EVENTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the day label of a given day."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param num int containing the day number based on the Calendar API."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the day label based on the day number provided."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDayLabel(int num) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        switch (num) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_MONDAY_LABEL;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_TUESDAY_LABEL;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_WEDNESDAY_LABEL;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_THURSDAY_LABEL;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_FRIDAY_LABEL;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_SATURDAY_LABEL;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return Messages.MESSAGE_SUNDAY_LABEL;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the Event\u0027s duration in NUM \"h\" NUM \"m\" format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param start Calendar containing the start time of the Event."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param end Calendar containing the end time of the Event."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Event\u0027s duration formatted in \" h m\"."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getEventDuration(Calendar start, Calendar end) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int hours \u003d end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        int minutes \u003d end.get(Calendar.MINUTE) - end.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return hours + \"h\" + minutes + \"m\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Checks if the date given is today and obtains the Today label if needed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param compareCalendar Calendar containing the Date of the day to be checked."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the TODAY_LABEL if the given Calendar has the same day, month and year, else, return"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *     a string containing COLUMN_GAP number of whitespaces."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getIsToday(Calendar compareCalendar) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar today \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (dateTimeParser.isDateEqual(compareCalendar, today)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return getSpaces(TODAY_LABEL_SPACES_OFFSET) + TODAY_LABEL + getSpaces(TODAY_LABEL_SPACES_OFFSET);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            return getSpaces(COLUMN_SPACES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Helper method to obtain a String containing a given number of whitespaces."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param num int containing the number of spaces in the String to be returned."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the number of spaces required."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getSpaces(int num) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \" \".repeat(Math.max(0, num));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the Date label of a given day in the week."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param daysOfWeek ArrayList containing the Calendars of a week."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param num int containing the Day number (0 for Monday, 6 for Sunday)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Day label formatted in [DD-MM]."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDateLabel(ArrayList\u003cCalendar\u003e daysOfWeek, int num) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        Calendar calendar \u003d daysOfWeek.get(num);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return \"[\" + dateTimeParser.obtainFormattedDayAndMonthString(calendar) + \"]\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the Event Icon of Event to be rendered."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param events ArrayList containing Events of the week."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param counterIndex int containing the day\u0027s event to be printed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Event\u0027s Icon, if any. Else, returns a string containing COLUMN_GAP number of"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *     whitespaces."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getEventIcons(ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder eventIconsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (getCounter(counterIndex) !\u003d NO_EVENTS) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventIndexCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String iconString \u003d events.get(eventIndexCounters[counterIndex] - INDEX_OFFSET).getIcon();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(indexString);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(iconString);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(getSpaces(COLUMN_SPACES - iconString.length() - indexString.length()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIconsString.append(getSpaces(COLUMN_SPACES));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return eventIconsString.toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the Event\u0027s description to be rendered."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param events ArrayList containing Events of the week."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param counterIndex int containing the day\u0027s event to be printed, if any."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Event\u0027s description, if any. Else, returns a string containing COLUMN_GAP number of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *     whitespaces."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getDescriptions(ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder descriptionsString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (getCounter(counterIndex) !\u003d NO_EVENTS) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventIndexCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String descriptionString \u003d events.get(eventIndexCounters[counterIndex] - INDEX_OFFSET).getDescription();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (descriptionString.length() \u003e DESCRIPTION_THRESHOLD) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                // Truncate the string as the description is too long"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                descriptionString \u003d descriptionString.substring(0, 11) + \"...\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(descriptionString);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(COLUMN_SPACES - descriptionString.length() - indexStringLength));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            descriptionsString.append(getSpaces(COLUMN_SPACES));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return descriptionsString.toString();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the Event\u0027s start end time to be rendered."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param events ArrayList containing Events of the week."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param counterIndex int containing the day\u0027s event to be printed, if any."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Event\u0027s start end time, if any. Else, returns a string containing COLUMN_GAP"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *     number of whitespaces."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getStartEndTime(ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder startEndTimesString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (getCounter(counterIndex) !\u003d NO_EVENTS) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String indexString \u003d eventIndexCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar startCalendar \u003d events.get(eventIndexCounters[counterIndex] - INDEX_OFFSET).getStart();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            Calendar endCalendar \u003d events.get(eventIndexCounters[counterIndex] - INDEX_OFFSET).getEnd();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String startString \u003d dateTimeParser.parseTime(startCalendar);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String endString \u003d dateTimeParser.parseTime(endCalendar);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            String startEndString \u003d startString + \"-\" + endString;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(startEndString);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(COLUMN_SPACES - startEndString.length() - indexStringLength));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            startEndTimesString.append(getSpaces(COLUMN_SPACES));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return startEndTimesString.toString();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtain the break time between each events to be rendered."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param events ArrayList containing Events of the week."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param counterIndex int containing the day\u0027s event to be printed, if any."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the Event\u0027s break time before another event, if any. Else, returns a string"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *     containing COLUMN_GAP number of whitespaces."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getBreakTimeString(ArrayList\u003cEvent\u003e events, int counterIndex) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        StringBuilder breakTimeString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (getCounter(counterIndex) !\u003d NO_EVENTS) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            if (getCounter(counterIndex) \u003e ONE_EVENT) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                String indexString \u003d eventIndexCounters[counterIndex] + \".\";"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                int indexStringLength \u003d indexString.length();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(getSpaces(indexStringLength));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Calendar thisEventEnd \u003d events.get(eventIndexCounters[counterIndex] - INDEX_OFFSET).getEnd();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Calendar nextEventStart \u003d events.get(eventIndexCounters[counterIndex]).getStart();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                int hours \u003d nextEventStart.get(Calendar.HOUR_OF_DAY) - thisEventEnd.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                int minutes \u003d nextEventStart.get(Calendar.MINUTE) - thisEventEnd.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                String breakString \u003d hours + \"h\" + minutes + \"m break\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(breakString);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(getSpaces(COLUMN_SPACES - breakString.length() - indexStringLength));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                breakTimeString.append(getSpaces(COLUMN_SPACES));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            reduceCounter(counterIndex);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventIndexCounters[counterIndex]++;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            breakTimeString.append(getSpaces(COLUMN_SPACES));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return breakTimeString.toString();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 272
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/UserInterface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.ControlManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.ListWeekCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.contact.ContactStorageManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.event.EventStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.quiz.QuizStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " * Singleton UserInterface class containing methods to obtain input from user, and prints output to use."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class UserInterface {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private static UserInterface userInterface \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static final String CURSOR \u003d \"\u003e\u003e \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private UserInterface() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Method to obtain the singleton instance of UserInterface."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return UserInterface instance."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public static UserInterface getInstance() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        if (userInterface \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            userInterface \u003d new UserInterface();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return userInterface;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Displays the Welcome message to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param configParameter ConfigParameter containing the recommended hours to be printed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showWelcomeMessage(ConfigParameter configParameter) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser(Messages.MESSAGE_HELLO + configParameter.getName(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                Messages.MESSAGE_SHOW_HOURS + configParameter.getRecommendedHours());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.print(Messages.MESSAGE_PROMPT_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Obtains the user\u0027s command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @return String containing the user\u0027s command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Adds an additional row space for better readability"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showEmptyLine();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        // Indicator for user input:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        out.print(CURSOR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    private void showEmptyLine() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        showToUser(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Method to display multiple Strings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param message String containing message to be printed. Can be separated by \",\" to be printed on another"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *                line"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void showToUser(String... message) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Prints to user through an array list of strings."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * This is invoked from either list or find command."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param stringArrayList ArrayList of type string to be printed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void printArray(ArrayList\u003cString\u003e stringArrayList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assert stringArrayList !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        for (String line : stringArrayList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            showToUser(line);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Compares if command type is equal to BYE and returns true if it does."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param commandType A CommandType of one of the commands."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A boolean to indicate if program loop should end."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean checkIfProgramEnds(CommandType commandType) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return commandType !\u003d CommandType.BYE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    //@@author AndreWongZH"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * Passes user input into the control manager for it to run its logic."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param model Data stored in the program."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param eventStorageManager Updates the storage data in event.txt after command is ran."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @param quizStorageManager Updates the storage data in quiz.txt after command is ran."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     * @return A boolean to tell the program to quit or not."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean runUi(Model model,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                         EventStorageManager eventStorageManager,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                         QuizStorageManager quizStorageManager,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                         ContactStorageManager contactStorageManager) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType commandType \u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String line \u003d getUserCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        if (!line.trim().isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            ControlManager controlManager \u003d new ControlManager(line, model,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                    eventStorageManager, quizStorageManager, contactStorageManager);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            commandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return checkIfProgramEnds(commandType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * Method to print the week schedule of the user."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param eventManager EventManager instance for CalendarWeekRenderer to access helper methods."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     * @param listWeekCommand ListWeekCommand to identify the week to be printed. CURRENT_WEEK for this week,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     *                        NEXT_WEEK for the next week."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void printWeekSchedule(EventManager eventManager, ListWeekCommand listWeekCommand) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        new CalendarWeekRenderer(eventManager, listWeekCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "AndreWongZH": 53,
      "durianpancakes": 93
    }
  },
  {
    "path": "src/main/java/seedu/duke/unused/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.unused;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventDataManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author AndreWongZH-unused"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * We decided to remove the done feature because it does not tie in well with our application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the command for setting class, cca, test and tuition to be done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INPUT_SPACE \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(String userInput) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute(ModelMain modelMain) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EventDataManager eventDataModel \u003d (EventDataManager) modelMain;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        eventDataModel.setDone(userInput.split(INPUT_SPACE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 6,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/duke/unused/Event.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.unused;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "public class Event implements Comparable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String DONE_STATUS \u003d \"[DONE]\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public static final String NOT_DONE_STATUS \u003d \"[NOT DONE]\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return (isDone ? DONE_STATUS : NOT_DONE_STATUS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public int compareTo(Event o) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 21
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/ControlManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.contact.ContactStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.event.EventStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.storage.quiz.QuizStorageManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.config.ConfigManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ControlManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void runLogic_listEventInput_expectListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ControlManager controlManager \u003d initializeControlManager(\"list event\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualCommandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(CommandType.LIST, actualCommandType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void runLogic_byeInput_expectByeCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ControlManager controlManager \u003d initializeControlManager(\"bye\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualCommandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(CommandType.BYE, actualCommandType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void runLogic_invalidInput_expectNull() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ControlManager controlManager \u003d initializeControlManager(\"invalid command\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualCommandType \u003d controlManager.runLogic();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualCommandType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private ControlManager initializeControlManager(String userInput) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d new Model(new EventManager(new EventParameter(), new ConfigParameter()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ContactManager(new ArrayList\u003c\u003e()), new QuizManager(new ArrayList\u003c\u003e()), ConfigManager.getInstance());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventStorageManager eventStorageManager \u003d new EventStorageManager(\"events.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        QuizStorageManager quizStorageManager \u003d  new QuizStorageManager(\"quiz.txt\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ContactStorageManager contactStorageManager \u003d  new ContactStorageManager(\"contact.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new ControlManager(userInput, model, eventStorageManager, quizStorageManager, contactStorageManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 52
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/EventManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class EventManagerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addTestToList_exceedTime() throws MissingParameterException, EmptyParameterException,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            SwappedParameterException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        EventManager eventManager \u003d new EventManager(new EventParameter(), new ConfigParameter(\"me\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                10, true));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventManager.getTestManager().add(\"add test /n Math test \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1000 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventManager.getTestManager().add(\"add test /n Eng test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1600 /e 2020-09-26 2300\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventManager.getTestManager().getTestListSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 26,
      "AndreWongZH": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/ModelExtractorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelExtractor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.ModelType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.ModelMain;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.contact.ContactManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClassManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.quiz.QuizManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.config.ConfigManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ModelExtractorTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void retrieveModel_typeClass_eventClassManager() throws InvalidModelException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d initializeModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelExtractor modelExtractor \u003d new ModelExtractor(model, ModelType.CLASS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain actualModel \u003d modelExtractor.retrieveModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(EventClassManager.class, actualModel.getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void retrieveModel_typeNull_null() throws InvalidModelException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Model model \u003d initializeModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelExtractor modelExtractor \u003d new ModelExtractor(model, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelMain actualModel \u003d modelExtractor.retrieveModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private Model initializeModel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        return new Model(new EventManager(new EventParameter(), new ConfigParameter()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ContactManager(new ArrayList\u003c\u003e()), new QuizManager(new ArrayList\u003c\u003e()), ConfigManager.getInstance());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "AndreWongZH": 43
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/command/CommandFactoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.controller.parser.CommandType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class CommandFactoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void generateActionableCommand_addType_addCommandClass() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Command actualCommand \u003d new CommandFactory(CommandType.ADD, \"\").generateActionableCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(AddCommand.class, actualCommand.getClass());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void generateActionableCommand_nullType_addCommandClass() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Command actualCommand \u003d new CommandFactory(CommandType.BYE, \"\").generateActionableCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/command/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.IncompleteListCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void execute_nullModel_expectException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand(\"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(IncompleteListCommandException.class, () -\u003e listCommand.execute(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/parser/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.ExtraParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingModelException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_deleteString_deleteCommandType() throws InvalidCommandException,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            MissingModelException, ExtraParameterException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandType actualType \u003d new CommandParser(\"delete 22\").extractCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(CommandType.DELETE, actualType);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_singleDoneString_expectException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser(\"done\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(MissingModelException.class, commandParser::extractCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractCommand_randomString_expectException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        CommandParser commandParser \u003d new CommandParser(\"random string\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(InvalidCommandException.class, commandParser::extractCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 31
    }
  },
  {
    "path": "src/test/java/seedu/duke/controller/parser/ModelParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.controller.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.InvalidModelException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ModelParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_singleString_expectNull() throws InvalidModelException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType actualType \u003d new ModelParser(\"single\").extractModel();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertNull(actualType);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_getTuitionString_expectException() throws InvalidModelException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelType actualType \u003d new ModelParser(\"add tuition\").extractModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(ModelType.TUITION, actualType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void extractModel_invalidString_expectException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ModelParser modelParser \u003d new ModelParser(\"random string\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(InvalidModelException.class, modelParser::extractModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 29
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/contact/ContactTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.contact;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ContactTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/FindScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class FindScheduleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    private final ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public FindScheduleTest() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        cal.set(2020, Calendar.MARCH, 10, 23,10);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math exam\", cal, cal));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"English exam\", cal, cal));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getFilteredEvents_matchingKeyword_oneSearchResult() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(\"math\", classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedEvents \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"[CLASS] Math exam from 10th Mar 2020, 11:10PM to 10th Mar 2020, 11:10PM\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedEvents, actualEvents);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getFilteredEvents_nonMatchingKeyword_noSearchResult() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(\"science\", classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedEvents, actualEvents);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getFilteredEvents_matchingMultipleKeyword_twoSearchResult() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        FindSchedule findSchedule \u003d new FindSchedule(\"math english\", classes, ccas, tests, tuitions);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualEvents \u003d findSchedule.getFilteredEvents();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedEvents \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"[CLASS] Math exam from 10th Mar 2020, 11:10PM to 10th Mar 2020, 11:10PM\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"[CLASS] English exam from 10th Mar 2020, 11:10PM to 10th Mar 2020, 11:10PM\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedEvents, actualEvents);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 52
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/ListScheduleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "//@@author AndreWongZH"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class ListScheduleTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    ConfigParameter configParameter \u003d new ConfigParameter(\"me\", 10, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_emptySchedule_expectException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), configParameter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertThrows(EmptyListException.class, listSchedule::getPrintableEvents);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_classSchedule_allClasses() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar startCalendar \u003d dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar endCalendar \u003d dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        EventClass eventClass \u003d new EventClass(\"Math\", startCalendar, endCalendar);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(eventClass);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), configParameter);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \", \"1. [CLASS] Math from 26th Feb 2019, \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        + \"02:00PM to 27th Feb 2019, 03:00PM\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_allSchedule_allEvents() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ccas.add(new EventCca(\"Basketball\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tests \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tests.add(new EventTest(\"Science\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        tuitions.add(new EventTuition(\"English\", dateTimeParser.convertStringToCalendar(\"2019-02-26 1400\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                \"Choa Chu Kang Avenue 5 Block 433\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(null, classes, ccas, tests, tuitions, configParameter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [CLASS] Math from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"CCAs: \","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [CCA] Basketball from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"Tests: \","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [TEST] Science from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"Tuitions: \","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        \"1. [TUITION] English from 26th Feb 2019, 02:00PM to 27th Feb 2019, 03:00PM\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                                + \" at Choa Chu Kang Avenue 5 Block 433\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void getPrintableEvents_classScheduleToday_oneClass() throws EmptyListException, ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 14);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        calendar.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        classes.add(new EventClass(\"Math\", calendar,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2019-02-27 1500\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ListSchedule listSchedule \u003d new ListSchedule(\"today\", classes, new ArrayList\u003c\u003e(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), configParameter);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e actualOutputs \u003d listSchedule.getPrintableEvents();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        actualOutputs.remove(2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String formattedDate \u003d dateTimeParser.obtainFormattedDateTimeString(calendar);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        ArrayList\u003cString\u003e expectedOutputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                List.of(\"Classes: \", \"1. [CLASS] Math from \" + formattedDate"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "                        + \" to 27th Feb 2019, 03:00PM\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertEquals(expectedOutputs, actualOutputs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "AndreWongZH": 100,
      "durianpancakes": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/cca/AddEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class AddEventCcaJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addCcaToList() throws EmptyParameterException, MissingParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball camp \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1600\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        String actualOutputs \u003d cca.get(0).getDescription();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedOutputs \u003d \"basketball camp\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "untitle4": 13,
      "AndreWongZH": 6,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/cca/DeleteEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventCcaJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void deleteCcaInList() throws EmptyParameterException, MissingParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"delete cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.delete(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutput \u003d eventCcaManager.getCcaListSize();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedOutput \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 6,
      "untitle4": 23,
      "AndreWongZH": 5,
      "durianpancakes": 5
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/cca/DoneEventCcaJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DoneEventCcaJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setCcaDone() throws EmptyParameterException, MissingParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cEvent\u003e cca \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventCcaManager eventCcaManager \u003d new EventCcaManager(cca,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventCcaManager.add(\"add cca /n basketball \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] userInput \u003d \"done cca 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventCcaManager.setDone(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        boolean actualOutputs \u003d cca.get(0).isDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "untitle4": 24,
      "AndreWongZH": 6,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/classlesson/AddEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddEventClassJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addClassToList() throws EmptyParameterException, MissingParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Math /s 2020-08-19 1300 /e 2020-08-19 1400\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 5,
      "AndreWongZH": 5,
      "durianpancakes": 4,
      "elizabethcwt": 14
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/classlesson/DeleteEventClassJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.classlesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteEventClassJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addClassToList() throws EmptyParameterException, MissingParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        ArrayList\u003cEvent\u003e classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventClassManager eventClassManager \u003d new EventClassManager(classes,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n English lesson \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventClassManager.add(\"add class /n Science lesson \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        String [] userInput \u003d \"delete class 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventClassManager.delete(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventClassManager.getClassListSize();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "elizabethcwt"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 7,
      "AndreWongZH": 5,
      "durianpancakes": 4,
      "elizabethcwt": 25
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/test/AddTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class AddTestJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addTestToList() throws MissingParameterException, EmptyParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 19,
      "AndreWongZH": 5,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/test/DeleteTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "public class DeleteTestJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void deleteTestFromList() throws MissingParameterException, EmptyParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"delete test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.delete(userInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int actualOutputs \u003d eventTestManager.getTestListSize();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        int expectedOutputs \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 32,
      "AndreWongZH": 5,
      "durianpancakes": 4
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/test/DoneTestJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "class DoneTestJUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void setTestDoneFromList() throws MissingParameterException, EmptyParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        ArrayList\u003cEvent\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTestManager eventTestManager \u003d new EventTestManager(test, testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Math test \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-26 1400 /e 2020-09-26 1500\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        eventTestManager.add(\"add test /n Science test \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                + \"/s 2020-09-23 1600 /e 2020-09-23 1800\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        String [] userInput \u003d \"done test 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            eventTestManager.setDone(userInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean actualOutputs \u003d test.get(0).isDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 33,
      "AndreWongZH": 5,
      "durianpancakes": 3
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/tuition/AddEventTuitionJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class AddEventTuitionJUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void addEvent_validTuition_noException() throws EmptyParameterException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "            MissingParameterException, ParseException, SwappedParameterException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(tuitions,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        eventTuitionManager.add(\"add tuition /n math tuition \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/s 2020-10-13 1500 /e 2020-10-13 1700 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/l home\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuition eventTuition \u003d new EventTuition(\"math tuition\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-10-13 1500\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-10-13 1700\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"home\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertEquals(tuitions.get(0), eventTuition);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void addEvent_invalidTuition_exceptionThrown() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(tuitions,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(EmptyParameterException.class, () -\u003e eventTuitionManager.add(\"/n /s /e /l\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(MissingParameterException.class, () -\u003e eventTuitionManager.add(\"/n math tuition \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/s 2020-09-22 1700 /e 2020-09-22 1800\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "AndreWongZH": 2,
      "durianpancakes": 45
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/event/tuition/DoneEventTuitionJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.model.event.tuition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.storage.TestUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class DoneEventTuitionJUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    TestUtils testUtils \u003d new TestUtils();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void setValidTuitionDone() throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(testUtils.getTuitionList(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String [] userInput \u003d \"done tuition 1\".trim().split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            eventTuitionManager.setDone(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean actualOutputs \u003d eventTuitionManager.getTuitions().get(0).isDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        boolean expectedOutputs \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertEquals(actualOutputs, expectedOutputs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void setTuitionDone_invalidIndex_exceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        EventTuitionManager eventTuitionManager \u003d new EventTuitionManager(testUtils.getTuitionList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                testUtils.getEmptyEventManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String [] userInputIndexTooLarge \u003d \"done tuition 5\".trim().split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        String [] userInputIndexNegative \u003d \"done tuition -1\".trim().split(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e eventTuitionManager.setDone(userInputIndexTooLarge));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e eventTuitionManager.setDone(userInputIndexNegative));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 2,
      "durianpancakes": 42
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/AddQuizJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class AddQuizJUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void addQuizToList() throws EmptyParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizzes);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.add(\"add quiz /q What is 1+1? /o1 1 /o2 2 \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/o3 3 /o4 4 /a 2 /exp 1 plus 1 must be equal to 2!\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int actualQuizNumber \u003d quizManager.getQuizListSize();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedQuizNumber \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualQuizNumber, expectedQuizNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String actualQuizExplanation \u003d \"1 plus 1 must be equal to 2!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedQuizExplanation \u003d quizManager.getQuizList().get(0).getExplanation();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualQuizExplanation, expectedQuizExplanation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    //@@author durianpancakes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    void parseQuiz_emptyOptions_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizzes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(EmptyParameterException.class, () -\u003e quizManager.add(\"add quiz /q What is 1+1? /o1 1 /o2 2 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                + \"/o3 /o4 4 /a 3\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 23,
      "AndreWongZH": 2,
      "durianpancakes": 13
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/DeleteQuizJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class DeleteQuizJUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void deleteQuizToList() throws EmptyParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizzes);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String userInput \u003d \"delete quiz 1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String[] separatedInputs \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.add(\"add quiz /q What is 1+1? /o1 1 /o2 2 \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/o3 3 /o4 4 /a 2 /exp 1 plus 1 must be equal to 2!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.delete(separatedInputs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int actualQuizNumber \u003d quizManager.getQuizListSize();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        int expectedQuizNumber \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualQuizNumber, expectedQuizNumber);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 25,
      "AndreWongZH": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/ListQuizJUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "untitle4"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import seedu.duke.exception.EmptyParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import seedu.duke.exception.SwappedParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "untitle4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "untitle4"
        },
        "content": "public class ListQuizJUnitTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    void listQuizTest() throws EmptyParameterException, SwappedParameterException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        ArrayList\u003cQuiz\u003e quizzes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        QuizManager quizManager \u003d new QuizManager(quizzes);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        quizManager.add(\"add quiz /q What is 1+1? /o1 1 /o2 2 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"/o3 3 /o4 4 /a 2 /exp 1 plus 1 must be equal to 2!\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "untitle4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String actualOutput \u003d \"Question \" + (0 + 1) + \":\\n\" + quizzes.get(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        String expectedOutput \u003d \"Question 1:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"What is 1+1?\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(1) 1\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(2) 2\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(3) 3\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"(4) 4\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "untitle4"
        },
        "content": "                + \"Explanation: 1 plus 1 must be equal to 2!\\n\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "untitle4"
        },
        "content": "        assertEquals(actualOutput, expectedOutput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "untitle4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "untitle4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "untitle4": 29,
      "AndreWongZH": 2
    }
  },
  {
    "path": "src/test/java/seedu/duke/model/quiz/QuizTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "package seedu.duke.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "class QuizTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AndreWongZH": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/StorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.exception.StorageCorruptedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.event.EventStorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "//@@author durianpancakes"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    EventStorageManager validEventStorage \u003d new EventStorageManager(\"testdata\", \"/validdata.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    EventStorageManager invalidEventStorage \u003d new EventStorageManager(\"testdata\", \"/invaliddata.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void loadData_validData_noException() throws StorageCorruptedException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        validEventStorage.loadData();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public void loadData_invalidData_exceptionThrown() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        assertThrows(StorageCorruptedException.class, () -\u003e invalidEventStorage.loadData());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "durianpancakes": 22
    }
  },
  {
    "path": "src/test/java/seedu/duke/storage/TestUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.controller.parser.DateTimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "import seedu.duke.model.ConfigParameter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.EventParameter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.cca.EventCca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.classlesson.EventClass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.test.EventTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.model.event.tuition.EventTuition;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import seedu.duke.storage.event.EventStorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "public class TestUtils {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public EventManager getEmptyEventManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "        return new EventManager(new EventParameter(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "                new ConfigParameter(\"me\", 10, true));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getEventList() throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventCca(\"Basketball training\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-21 1800\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-21 1900\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventClass(\"Math tuition\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-22 1400\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-22 1600\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventTest(\"CS2113T Finals\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-04 1500\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-04 1600\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        events.add(new EventTuition(\"English\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-05 1600\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-12-05 1800\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                \"home\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    public ArrayList\u003cEvent\u003e getTuitionList() throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        ArrayList\u003cEvent\u003e tuitions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        DateTimeParser dateTimeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions.add(new EventTuition(\"math\", dateTimeParser.convertStringToCalendar(\"2020-09-26 1400\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-26 1500\"), \"home\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        tuitions.add(new EventTuition(\"english\", dateTimeParser.convertStringToCalendar(\"2020-09-27 1400\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "                dateTimeParser.convertStringToCalendar(\"2020-09-27 1500\"), \"tuition centre\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "        return tuitions;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 4,
      "durianpancakes": 51
    }
  },
  {
    "path": "testdata/invaliddata.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-10-28 1500|2020-10-28 1700"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-10-28 1800|2020-10-28 1900"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-10-31 0900|2020-10-31 1100"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-11-03 1500+2020-11-03 1700"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-11-05 1800|2020-11-05 1900"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-11-06 0900/2020-11-06 1100"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|math|2020-10-26 0900|2020-10-31 1100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|science|2020-10-29 0900|2020-10-31 1100"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|math|2020-11-03 0900|2020-11-03 1100"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|science|2020-11-04 0900|2020-11-04 1100"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CLASS]|false|math|2020-09-21 1500|2020-09-21 1600"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 11
    }
  },
  {
    "path": "testdata/validdata.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-10-28 1500|2020-10-28 1700"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-10-28 1800|2020-10-28 1900"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-10-31 0900|2020-10-31 1100"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-11-03 1500|2020-11-03 1700"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-11-05 1800|2020-11-05 1900"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CCA]|false|basketball|2020-11-06 0900|2020-11-06 1100"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|math|2020-10-26 0900|2020-10-31 1100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|science|2020-10-29 0900|2020-10-31 1100"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|math|2020-11-03 0900|2020-11-03 1100"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[TEST]|false|science|2020-11-04 0900|2020-11-04 1100"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CLASS]|false|math|2020-09-21 1500|2020-09-21 1600"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "[CLASS]|false|math|2020-09-21 1800|2020-09-21 1900"
      }
    ],
    "authorContributionMap": {
      "durianpancakes": 12
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "durianpancakes"
        },
        "content": "James Arthur"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AliciaHo"
        },
        "content": "10"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AndreWongZH"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "AliciaHo": 1,
      "AndreWongZH": 1,
      "durianpancakes": 1
    }
  }
]
